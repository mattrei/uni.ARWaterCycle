// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement) return false;

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 268435456;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4) { { if (!artoolkit["frameMalloc"]) { artoolkit["frameMalloc"] = ({}); } var frameMalloc = artoolkit["frameMalloc"]; frameMalloc["framepointer"] = $1; frameMalloc["framesize"] = $2; frameMalloc["camera"] = $3; frameMalloc["transform"] = $4; } },
 function($0, $1, $2, $3) { { if (!artoolkit["multiEachMarkerInfo"]) { artoolkit["multiEachMarkerInfo"] = ({}); } var multiEachMarker = artoolkit["multiEachMarkerInfo"]; multiEachMarker['visible'] = $0; multiEachMarker['pattId'] = $1; multiEachMarker['pattType'] = $2; multiEachMarker['width'] = $3; } },
 function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32) { { var $a = arguments; var i = 12; if (!artoolkit["markerInfo"]) { artoolkit["markerInfo"] = ({ pos: [0,0], line: [[0,0,0], [0,0,0], [0,0,0], [0,0,0]], vertex: [[0,0], [0,0], [0,0], [0,0]] }); } var markerInfo = artoolkit["markerInfo"]; markerInfo["area"] = $0; markerInfo["id"] = $1; markerInfo["idPatt"] = $2; markerInfo["idMatrix"] = $3; markerInfo["dir"] = $4; markerInfo["dirPatt"] = $5; markerInfo["dirMatrix"] = $6; markerInfo["cf"] = $7; markerInfo["cfPatt"] = $8; markerInfo["cfMatrix"] = $9; markerInfo["pos"][0] = $10; markerInfo["pos"][1] = $11; markerInfo["line"][0][0] = $a[i++]; markerInfo["line"][0][1] = $a[i++]; markerInfo["line"][0][2] = $a[i++]; markerInfo["line"][1][0] = $a[i++]; markerInfo["line"][1][1] = $a[i++]; markerInfo["line"][1][2] = $a[i++]; markerInfo["line"][2][0] = $a[i++]; markerInfo["line"][2][1] = $a[i++]; markerInfo["line"][2][2] = $a[i++]; markerInfo["line"][3][0] = $a[i++]; markerInfo["line"][3][1] = $a[i++]; markerInfo["line"][3][2] = $a[i++]; markerInfo["vertex"][0][0] = $a[i++]; markerInfo["vertex"][0][1] = $a[i++]; markerInfo["vertex"][1][0] = $a[i++]; markerInfo["vertex"][1][1] = $a[i++]; markerInfo["vertex"][2][0] = $a[i++]; markerInfo["vertex"][2][1] = $a[i++]; markerInfo["vertex"][3][0] = $a[i++]; markerInfo["vertex"][3][1] = $a[i++]; markerInfo["errorCorrected"] = $a[i++]; } }];

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
 return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiiid(code, a0, a1, a2, a3) {
 return ASM_CONSTS[code](a0, a1, a2, a3);
}

function _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi(code, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32) {
 return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 18272;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_ARToolKitJS_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });
  

/* memory initializer */ allocate([76,11,0,0,72,22,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,204,10,0,0,135,22,0,0,76,11,0,0,208,38,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,76,11,0,0,48,39,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,204,10,0,0,124,39,0,0,204,10,0,0,159,39,0,0,204,10,0,0,1,40,0,0,204,10,0,0,71,40,0,0,204,10,0,0,133,40,0,0,204,10,0,0,204,40,0,0,204,10,0,0,8,41,0,0,204,10,0,0,77,41,0,0,204,10,0,0,108,41,0,0,204,10,0,0,169,41,0,0,204,10,0,0,182,42,0,0,204,10,0,0,244,42,0,0,204,10,0,0,51,43,0,0,204,10,0,0,88,55,0,0,244,10,0,0,54,55,0,0,232,0,0,0,0,0,0,0,244,10,0,0,227,54,0,0,200,0,0,0,0,0,0,0,244,10,0,0,8,55,0,0,248,0,0,0,0,0,0,0,204,10,0,0,41,55,0,0,244,10,0,0,101,55,0,0,192,0,0,0,0,0,0,0,244,10,0,0,129,55,0,0,232,0,0,0,0,0,0,0,48,11,0,0,169,55,0,0,48,11,0,0,171,55,0,0,48,11,0,0,173,55,0,0,48,11,0,0,175,55,0,0,48,11,0,0,177,55,0,0,48,11,0,0,179,55,0,0,48,11,0,0,181,55,0,0,48,11,0,0,183,55,0,0,48,11,0,0,185,55,0,0,48,11,0,0,86,57,0,0,48,11,0,0,187,55,0,0,48,11,0,0,189,55,0,0,48,11,0,0,191,55,0,0,244,10,0,0,193,55,0,0,200,0,0,0,0,0,0,0,7,12,0,0,14,12,0,0,26,12,0,0,36,12,0,0,255,255,255,255,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,3,0,0,0,6,0,0,0,12,0,0,0,24,0,0,0,48,0,0,0,96,0,0,0,67,0,0,0,5,0,0,0,10,0,0,0,20,0,0,0,40,0,0,0,80,0,0,0,35,0,0,0,70,0,0,0,15,0,0,0,30,0,0,0,60,0,0,0,120,0,0,0,115,0,0,0,101,0,0,0,73,0,0,0,17,0,0,0,34,0,0,0,68,0,0,0,11,0,0,0,22,0,0,0,44,0,0,0,88,0,0,0,51,0,0,0,102,0,0,0,79,0,0,0,29,0,0,0,58,0,0,0,116,0,0,0,107,0,0,0,85,0,0,0,41,0,0,0,82,0,0,0,39,0,0,0,78,0,0,0,31,0,0,0,62,0,0,0,124,0,0,0,123,0,0,0,117,0,0,0,105,0,0,0,81,0,0,0,33,0,0,0,66,0,0,0,7,0,0,0,14,0,0,0,28,0,0,0,56,0,0,0,112,0,0,0,99,0,0,0,69,0,0,0,9,0,0,0,18,0,0,0,36,0,0,0,72,0,0,0,19,0,0,0,38,0,0,0,76,0,0,0,27,0,0,0,54,0,0,0,108,0,0,0,91,0,0,0,53,0,0,0,106,0,0,0,87,0,0,0,45,0,0,0,90,0,0,0,55,0,0,0,110,0,0,0,95,0,0,0,61,0,0,0,122,0,0,0,119,0,0,0,109,0,0,0,89,0,0,0,49,0,0,0,98,0,0,0,71,0,0,0,13,0,0,0,26,0,0,0,52,0,0,0,104,0,0,0,83,0,0,0,37,0,0,0,74,0,0,0,23,0,0,0,46,0,0,0,92,0,0,0,59,0,0,0,118,0,0,0,111,0,0,0,93,0,0,0,57,0,0,0,114,0,0,0,103,0,0,0,77,0,0,0,25,0,0,0,50,0,0,0,100,0,0,0,75,0,0,0,21,0,0,0,42,0,0,0,84,0,0,0,43,0,0,0,86,0,0,0,47,0,0,0,94,0,0,0,63,0,0,0,126,0,0,0,127,0,0,0,125,0,0,0,121,0,0,0,113,0,0,0,97,0,0,0,65,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,6,0,0,0,12,0,0,0,11,0,0,0,5,0,0,0,10,0,0,0,7,0,0,0,14,0,0,0,15,0,0,0,13,0,0,0,9,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,7,0,0,0,2,0,0,0,14,0,0,0,8,0,0,0,56,0,0,0,3,0,0,0,63,0,0,0,15,0,0,0,31,0,0,0,9,0,0,0,90,0,0,0,57,0,0,0,21,0,0,0,4,0,0,0,28,0,0,0,64,0,0,0,67,0,0,0,16,0,0,0,112,0,0,0,32,0,0,0,97,0,0,0,10,0,0,0,108,0,0,0,91,0,0,0,70,0,0,0,58,0,0,0,38,0,0,0,22,0,0,0,47,0,0,0,5,0,0,0,54,0,0,0,29,0,0,0,19,0,0,0,65,0,0,0,95,0,0,0,68,0,0,0,45,0,0,0,17,0,0,0,43,0,0,0,113,0,0,0,115,0,0,0,33,0,0,0,77,0,0,0,98,0,0,0,117,0,0,0,11,0,0,0,87,0,0,0,109,0,0,0,35,0,0,0,92,0,0,0,74,0,0,0,71,0,0,0,79,0,0,0,59,0,0,0,104,0,0,0,39,0,0,0,100,0,0,0,23,0,0,0,82,0,0,0,48,0,0,0,119,0,0,0,6,0,0,0,126,0,0,0,55,0,0,0,13,0,0,0,30,0,0,0,62,0,0,0,20,0,0,0,89,0,0,0,66,0,0,0,27,0,0,0,96,0,0,0,111,0,0,0,69,0,0,0,107,0,0,0,46,0,0,0,37,0,0,0,18,0,0,0,53,0,0,0,44,0,0,0,94,0,0,0,114,0,0,0,42,0,0,0,116,0,0,0,76,0,0,0,34,0,0,0,86,0,0,0,78,0,0,0,73,0,0,0,99,0,0,0,103,0,0,0,118,0,0,0,81,0,0,0,12,0,0,0,125,0,0,0,88,0,0,0,61,0,0,0,110,0,0,0,26,0,0,0,36,0,0,0,106,0,0,0,93,0,0,0,52,0,0,0,75,0,0,0,41,0,0,0,72,0,0,0,85,0,0,0,80,0,0,0,102,0,0,0,60,0,0,0,124,0,0,0,105,0,0,0,25,0,0,0,40,0,0,0,51,0,0,0,101,0,0,0,84,0,0,0,24,0,0,0,123,0,0,0,83,0,0,0,50,0,0,0,49,0,0,0,122,0,0,0,120,0,0,0,121,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,2,0,0,0,8,0,0,0,5,0,0,0,10,0,0,0,3,0,0,0,14,0,0,0,9,0,0,0,7,0,0,0,6,0,0,0,13,0,0,0,11,0,0,0,12,0,0,0,1,0,0,0,4,0,0,0,136,0,0,0,5,0,0,0,144,0,0,0,6,0,0,0,152,0,0,0,9,0,0,0,176,0,0,0,88,1,0,0,88,1,0,0,88,1,0,0,88,1,0,0,88,1,0,0,88,1,0,0,88,1,0,0,88,1,0,0,8,0,0,0,88,1,0,0,88,1,0,0,88,1,0,0,88,1,0,0,8,0,0,0,255,255,255,255,253,255,255,255,254,255,255,255,32,1,0,0,88,1,0,0,88,1,0,0,32,1,0,0,88,1,0,0,128,1,0,0,128,1,0,0,88,1,0,0,32,1,0,0,88,1,0,0,88,1,0,0,32,1,0,0,88,1,0,0,120,1,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,208,7,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,77,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,85,67,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0,0,0,0,0,200,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,216,0,0,0,1,0,0,0,5,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,6,0,0,0,7,0,0,0,2,0,0,0,0,0,0,0,16,1,0,0,1,0,0,0,8,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,0,0,0,0,136,1,0,0,1,0,0,0,9,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,69,114,114,111,114,58,32,108,97,98,101,108,105,110,103,32,119,111,114,107,32,111,118,101,114,102,108,111,119,46,10,0,69,114,114,111,114,58,32,85,110,115,117,112,112,111,114,116,101,100,32,112,105,120,101,108,32,102,111,114,109,97,116,32,40,37,100,41,32,114,101,113,117,101,115,116,101,100,46,10,0,85,110,107,110,111,119,110,32,111,114,32,117,110,115,117,112,112,111,114,116,101,100,32,108,97,98,101,108,105,110,103,32,116,104,114,101,115,104,111,108,100,32,109,111,100,101,32,114,101,113,117,101,115,116,101,100,46,32,83,101,116,32,116,111,32,109,97,110,117,97,108,46,10,0,77,65,78,85,65,76,0,65,85,84,79,95,77,69,68,73,65,78,0,65,85,84,79,95,79,84,83,85,0,65,85,84,79,95,65,68,65,80,84,73,86,69,65,85,84,79,95,66,82,65,67,75,69,84,73,78,71,0,76,97,98,101,108,105,110,103,32,116,104,114,101,115,104,111,108,100,32,109,111,100,101,32,115,101,116,32,116,111,32,37,115,46,10,0,63,63,63,32,49,10,0,63,63,63,32,50,10,0,63,63,63,32,51,10,0,65,117,116,111,32,116,104,114,101,115,104,111,108,100,32,40,98,114,97,99,107,101,116,41,32,109,97,114,107,101,114,32,99,111,117,110,116,115,32,45,91,37,51,100,58,32,37,51,100,93,32,91,37,51,100,58,32,37,51,100,93,32,91,37,51,100,58,32,37,51,100,93,43,46,10,0,65,117,116,111,32,116,104,114,101,115,104,111,108,100,32,40,98,114,97,99,107,101,116,41,32,97,100,106,117,115,116,101,100,32,116,104,114,101,115,104,111,108,100,32,116,111,32,37,100,46,10,0,109,101,100,105,97,110,0,79,116,115,117,0,65,117,116,111,32,116,104,114,101,115,104,111,108,100,32,40,37,115,41,32,97,100,106,117,115,116,101,100,32,116,104,114,101,115,104,111,108,100,32,116,111,32,37,100,46,10,0,69,114,114,111,114,58,32,85,110,115,117,112,112,111,114,116,101,100,32,112,105,120,101,108,32,102,111,114,109,97,116,32,112,97,115,115,101,100,32,116,111,32,97,114,73,109,97,103,101,80,114,111,99,72,105,115,116,40,41,46,10,0,0,0,0,1,0,1,1,1,0,2,4,255,255,5,3,1,0,2,255,6,7,255,3,1,2,2,3,2,3,2,3,3,0,255,4,6,7,5,255,1,4,5,4,4,5,5,4,5,7,6,6,6,7,7,7,6,255,2,4,6,7,5,3,255,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,255,255,3,255,5,6,255,255,9,10,255,12,255,255,15,255,17,18,255,20,255,255,23,24,255,255,27,255,29,30,255,255,1,2,255,4,255,255,7,8,255,255,11,255,13,14,255,16,255,255,19,255,21,22,255,255,25,26,255,28,255,255,31,69,114,114,111,114,58,32,117,110,115,117,112,112,111,114,116,101,100,32,112,105,120,101,108,32,102,111,114,109,97,116,46,10,0,69,114,114,111,114,58,32,78,85,76,76,32,112,97,116,116,72,97,110,100,108,101,46,10,0,69,114,114,111,114,58,32,99,97,110,39,116,32,108,111,97,100,32,112,97,116,116,101,114,110,32,102,114,111,109,32,78,85,76,76,32,98,117,102,102,101,114,46,10,0,69,114,114,111,114,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,46,10,0,32,9,10,13,0,80,97,116,116,101,114,110,32,68,97,116,97,32,114,101,97,100,32,101,114,114,111,114,33,33,10,0,69,114,114,111,114,32,111,112,101,110,105,110,103,32,112,97,116,116,101,114,110,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,46,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,112,97,116,116,101,114,110,32,102,105,108,101,32,39,37,115,39,46,10,0,114,98,0,69,114,114,111,114,32,40,37,100,41,58,32,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,99,97,109,101,114,97,32,112,97,114,97,109,101,116,101,114,115,32,102,105,108,101,32,34,37,115,34,32,102,111,114,32,114,101,97,100,105,110,103,46,10,0,69,114,114,111,114,32,40,37,100,41,58,32,117,110,97,98,108,101,32,116,111,32,100,101,116,101,114,109,105,110,101,32,102,105,108,101,32,108,101,110,103,116,104,46,0,69,114,114,111,114,58,32,115,117,112,112,108,105,101,100,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,97,112,112,101,97,114,32,116,111,32,98,101,32,97,110,32,65,82,84,111,111,108,75,105,116,32,99,97,109,101,114,97,32,112,97,114,97,109,101,116,101,114,32,102,105,108,101,46,10,0,69,114,114,111,114,32,40,37,100,41,58,32,117,110,97,98,108,101,32,116,111,32,114,101,97,100,32,102,114,111,109,32,102,105,108,101,46,0,69,114,114,111,114,58,32,105,99,112,71,101,116,74,95,85,95,88,99,0,69,114,114,111,114,58,32,109,97,108,108,111,99,10,0,69,114,114,111,114,32,49,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,50,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,51,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,52,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,53,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,54,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,55,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,114,0,69,114,114,111,114,58,32,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,46,10,0,37,115,37,115,10,0,37,100,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,70,105,114,115,116,32,108,105,110,101,32,109,117,115,116,32,98,101,32,110,117,109,98,101,114,32,111,102,32,109,97,114,107,101,114,32,99,111,110,102,105,103,115,32,116,111,32,114,101,97,100,46,10,0,79,117,116,32,111,102,32,109,101,109,111,114,121,33,33,10,0,37,108,108,117,37,99,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,112,97,116,116,101,114,110,32,39,37,115,39,32,115,112,101,99,105,102,105,101,100,32,105,110,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,119,104,105,108,101,32,105,110,32,98,97,114,99,111,100,101,45,111,110,108,121,32,109,111,100,101,46,10,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,85,110,97,98,108,101,32,116,111,32,100,101,116,101,114,109,105,110,101,32,100,105,114,101,99,116,111,114,121,32,110,97,109,101,46,10,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,85,110,97,98,108,101,32,116,111,32,108,111,97,100,32,112,97,116,116,101,114,110,32,39,37,115,39,46,10,0,37,108,102,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,44,32,109,97,114,107,101,114,32,100,101,102,105,110,105,116,105,111,110,32,37,51,100,58,32,70,105,114,115,116,32,108,105,110,101,32,109,117,115,116,32,98,101,32,112,97,116,116,101,114,110,32,119,105,100,116,104,46,10,0,37,108,102,32,37,108,102,32,37,108,102,32,37,108,102,0,37,102,32,37,102,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,44,32,109,97,114,107,101,114,32,100,101,102,105,110,105,116,105,111,110,32,37,51,100,58,32,76,105,110,101,115,32,50,32,45,32,52,32,109,117,115,116,32,98,101,32,109,97,114,107,101,114,32,116,114,97,110,115,102,111,114,109,46,10,0,97,114,103,108,67,97,109,101,114,97,70,114,117,115,116,117,109,40,41,58,32,97,114,80,97,114,97,109,68,101,99,111,109,112,77,97,116,40,41,32,105,110,100,105,99,97,116,101,100,32,112,97,114,97,109,101,116,101,114,32,101,114,114,111,114,46,10,0,115,101,116,117,112,0,115,101,116,117,112,40,41,58,32,69,114,114,111,114,58,32,97,114,80,97,116,116,67,114,101,97,116,101,72,97,110,100,108,101,46,10,0,42,42,42,32,67,97,109,101,114,97,32,80,97,114,97,109,101,116,101,114,32,114,101,115,105,122,101,100,32,102,114,111,109,32,37,100,44,32,37,100,46,32,42,42,42,10,0,115,101,116,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,58,32,97,114,80,97,114,97,109,76,84,67,114,101,97,116,101,46,10,0,115,101,116,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,58,32,97,114,67,114,101,97,116,101,72,97,110,100,108,101,46,10,0,115,101,116,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,32,99,114,101,97,116,105,110,103,32,51,68,32,104,97,110,100,108,101,0,65,108,108,111,99,97,116,101,100,32,118,105,100,101,111,70,114,97,109,101,83,105,122,101,32,37,100,10,0,123,32,105,102,32,40,33,97,114,116,111,111,108,107,105,116,91,34,102,114,97,109,101,77,97,108,108,111,99,34,93,41,32,123,32,97,114,116,111,111,108,107,105,116,91,34,102,114,97,109,101,77,97,108,108,111,99,34,93,32,61,32,40,123,125,41,59,32,125,32,118,97,114,32,102,114,97,109,101,77,97,108,108,111,99,32,61,32,97,114,116,111,111,108,107,105,116,91,34,102,114,97,109,101,77,97,108,108,111,99,34,93,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,102,114,97,109,101,112,111,105,110,116,101,114,34,93,32,61,32,36,49,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,102,114,97,109,101,115,105,122,101,34,93,32,61,32,36,50,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,99,97,109,101,114,97,34,93,32,61,32,36,51,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,116,114,97,110,115,102,111,114,109,34,93,32,61,32,36,52,59,32,125,0,105,105,105,105,105,0,116,101,97,114,100,111,119,110,0,105,105,105,0,95,97,100,100,77,97,114,107,101,114,0,108,111,97,100,77,97,114,107,101,114,40,41,58,32,69,114,114,111,114,32,108,111,97,100,105,110,103,32,112,97,116,116,101,114,110,32,102,105,108,101,32,37,115,46,10,0,65,82,84,111,111,108,75,105,116,74,83,40,41,58,32,85,110,97,98,108,101,32,116,111,32,115,101,116,32,117,112,32,65,82,32,109,97,114,107,101,114,46,10,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,105,105,105,105,0,95,97,100,100,77,117,108,116,105,77,97,114,107,101,114,0,99,111,110,102,105,103,32,100,97,116,97,32,108,111,97,100,32,101,114,114,111,114,32,33,33,10,0,65,82,84,111,111,108,75,105,116,74,83,40,41,58,32,85,110,97,98,108,101,32,116,111,32,115,101,116,32,117,112,32,65,82,32,109,117,108,116,105,109,97,114,107,101,114,46,10,0,103,101,116,77,117,108,116,105,77,97,114,107,101,114,78,117,109,0,103,101,116,77,117,108,116,105,77,97,114,107,101,114,67,111,117,110,116,0,95,108,111,97,100,67,97,109,101,114,97,0,108,111,97,100,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,32,108,111,97,100,105,110,103,32,112,97,114,97,109,101,116,101,114,32,102,105,108,101,32,37,115,32,102,111,114,32,99,97,109,101,114,97,46,10,0,115,101,116,77,97,114,107,101,114,73,110,102,111,68,105,114,0,115,101,116,77,97,114,107,101,114,73,110,102,111,86,101,114,116,101,120,0,103,101,116,84,114,97,110,115,77,97,116,83,113,117,97,114,101,0,103,101,116,84,114,97,110,115,77,97,116,83,113,117,97,114,101,67,111,110,116,0,103,101,116,84,114,97,110,115,77,97,116,77,117,108,116,105,83,113,117,97,114,101,0,103,101,116,84,114,97,110,115,77,97,116,77,117,108,116,105,83,113,117,97,114,101,82,111,98,117,115,116,0,100,101,116,101,99,116,77,97,114,107,101,114,0,103,101,116,77,97,114,107,101,114,78,117,109,0,103,101,116,77,117,108,116,105,69,97,99,104,77,97,114,107,101,114,0,123,32,105,102,32,40,33,97,114,116,111,111,108,107,105,116,91,34,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,73,110,102,111,34,93,41,32,123,32,97,114,116,111,111,108,107,105,116,91,34,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,73,110,102,111,34,93,32,61,32,40,123,125,41,59,32,125,32,118,97,114,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,32,61,32,97,114,116,111,111,108,107,105,116,91,34,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,73,110,102,111,34,93,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,118,105,115,105,98,108,101,39,93,32,61,32,36,48,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,112,97,116,116,73,100,39,93,32,61,32,36,49,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,112,97,116,116,84,121,112,101,39,93,32,61,32,36,50,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,119,105,100,116,104,39,93,32,61,32,36,51,59,32,125,0,103,101,116,77,97,114,107,101,114,0,123,32,118,97,114,32,36,97,32,61,32,97,114,103,117,109,101,110,116,115,59,32,118,97,114,32,105,32,61,32,49,50,59,32,105,102,32,40,33,97,114,116,111,111,108,107,105,116,91,34,109,97,114,107,101,114,73,110,102,111,34,93,41,32,123,32,97,114,116,111,111,108,107,105,116,91,34,109,97,114,107,101,114,73,110,102,111,34,93,32,61,32,40,123,32,112,111,115,58,32,91,48,44,48,93,44,32,108,105,110,101,58,32,91,91,48,44,48,44,48,93,44,32,91,48,44,48,44,48,93,44,32,91,48,44,48,44,48,93,44,32,91,48,44,48,44,48,93,93,44,32,118,101,114,116,101,120,58,32,91,91,48,44,48,93,44,32,91,48,44,48,93,44,32,91,48,44,48,93,44,32,91,48,44,48,93,93,32,125,41,59,32,125,32,118,97,114,32,109,97,114,107,101,114,73,110,102,111,32,61,32,97,114,116,111,111,108,107,105,116,91,34,109,97,114,107,101,114,73,110,102,111,34,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,97,114,101,97,34,93,32,61,32,36,48,59,32,109,97,114,107,101,114,73,110,102,111,91,34,105,100,34,93,32,61,32,36,49,59,32,109,97,114,107,101,114,73,110,102,111,91,34,105,100,80,97,116,116,34,93,32,61,32,36,50,59,32,109,97,114,107,101,114,73,110,102,111,91,34,105,100,77,97,116,114,105,120,34,93,32,61,32,36,51,59,32,109,97,114,107,101,114,73,110,102,111,91,34,100,105,114,34,93,32,61,32,36,52,59,32,109,97,114,107,101,114,73,110,102,111,91,34,100,105,114,80,97,116,116,34,93,32,61,32,36,53,59,32,109,97,114,107,101,114,73,110,102,111,91,34,100,105,114,77,97,116,114,105,120,34,93,32,61,32,36,54,59,32,109,97,114,107,101,114,73,110,102,111,91,34,99,102,34,93,32,61,32,36,55,59,32,109,97,114,107,101,114,73,110,102,111,91,34,99,102,80,97,116,116,34,93,32,61,32,36,56,59,32,109,97,114,107,101,114,73,110,102,111,91,34,99,102,77,97,116,114,105,120,34,93,32,61,32,36,57,59,32,109,97,114,107,101,114,73,110,102,111,91,34,112,111,115,34,93,91,48,93,32,61,32,36,49,48,59,32,109,97,114,107,101,114,73,110,102,111,91,34,112,111,115,34,93,91,49,93,32,61,32,36,49,49,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,48,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,48,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,48,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,49,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,49,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,49,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,50,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,50,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,50,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,51,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,51,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,51,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,48,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,48,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,49,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,49,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,50,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,50,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,51,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,51,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,101,114,114,111,114,67,111,114,114,101,99,116,101,100,34,93,32,61,32,36,97,91,105,43,43,93,59,32,125,0,115,101,116,68,101,98,117,103,77,111,100,101,0,111,110,46,0,111,102,102,46,0,68,101,98,117,103,32,109,111,100,101,32,115,101,116,32,116,111,32,37,115,10,0,103,101,116,68,101,98,117,103,77,111,100,101,0,103,101,116,80,114,111,99,101,115,115,105,110,103,73,109,97,103,101,0,115,101,116,76,111,103,76,101,118,101,108,0,118,105,105,0,103,101,116,76,111,103,76,101,118,101,108,0,105,105,0,115,101,116,80,114,111,106,101,99,116,105,111,110,78,101,97,114,80,108,97,110,101,0,118,105,105,100,0,103,101,116,80,114,111,106,101,99,116,105,111,110,78,101,97,114,80,108,97,110,101,0,100,105,105,0,115,101,116,80,114,111,106,101,99,116,105,111,110,70,97,114,80,108,97,110,101,0,103,101,116,80,114,111,106,101,99,116,105,111,110,70,97,114,80,108,97,110,101,0,115,101,116,84,104,114,101,115,104,111,108,100,77,111,100,101,0,84,104,114,101,115,104,111,108,100,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,10,0,118,105,105,105,0,103,101,116,84,104,114,101,115,104,111,108,100,77,111,100,101,0,115,101,116,84,104,114,101,115,104,111,108,100,0,84,104,114,101,115,104,111,108,100,32,115,101,116,32,116,111,32,37,100,10,0,103,101,116,84,104,114,101,115,104,111,108,100,0,115,101,116,80,97,116,116,101,114,110,68,101,116,101,99,116,105,111,110,77,111,100,101,0,80,97,116,116,101,114,110,32,100,101,116,101,99,116,105,111,110,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,46,10,0,103,101,116,80,97,116,116,101,114,110,68,101,116,101,99,116,105,111,110,77,111,100,101,0,115,101,116,80,97,116,116,82,97,116,105,111,0,80,97,116,116,101,114,110,32,114,97,116,105,111,32,115,105,122,101,32,115,101,116,32,116,111,32,37,102,46,10,0,118,105,105,102,0,103,101,116,80,97,116,116,82,97,116,105,111,0,115,101,116,77,97,116,114,105,120,67,111,100,101,84,121,112,101,0,103,101,116,77,97,116,114,105,120,67,111,100,101,84,121,112,101,0,115,101,116,76,97,98,101,108,105,110,103,77,111,100,101,0,76,97,98,101,108,105,110,103,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,10,0,103,101,116,76,97,98,101,108,105,110,103,77,111,100,101,0,115,101,116,73,109,97,103,101,80,114,111,99,77,111,100,101,0,73,109,97,103,101,32,112,114,111,99,46,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,46,10,0,103,101,116,73,109,97,103,101,80,114,111,99,77,111,100,101,0,69,82,82,79,82,95,65,82,67,79,78,84,82,79,76,76,69,82,95,78,79,84,95,70,79,85,78,68,0,69,82,82,79,82,95,77,85,76,84,73,77,65,82,75,69,82,95,78,79,84,95,70,79,85,78,68,0,69,82,82,79,82,95,77,65,82,75,69,82,95,73,78,68,69,88,95,79,85,84,95,79,70,95,66,79,85,78,68,83,0,65,82,95,68,69,66,85,71,95,68,73,83,65,66,76,69,0,65,82,95,68,69,66,85,71,95,69,78,65,66,76,69,0,65,82,95,68,69,70,65,85,76,84,95,68,69,66,85,71,95,77,79,68,69,0,65,82,95,76,65,66,69,76,73,78,71,95,87,72,73,84,69,95,82,69,71,73,79,78,0,65,82,95,76,65,66,69,76,73,78,71,95,66,76,65,67,75,95,82,69,71,73,79,78,0,65,82,95,68,69,70,65,85,76,84,95,76,65,66,69,76,73,78,71,95,77,79,68,69,0,65,82,95,68,69,70,65,85,76,84,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,0,65,82,95,73,77,65,71,69,95,80,82,79,67,95,70,82,65,77,69,95,73,77,65,71,69,0,65,82,95,73,77,65,71,69,95,80,82,79,67,95,70,73,69,76,68,95,73,77,65,71,69,0,65,82,95,68,69,70,65,85,76,84,95,73,77,65,71,69,95,80,82,79,67,95,77,79,68,69,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,67,79,76,79,82,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,77,79,78,79,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,68,69,84,69,67,84,73,79,78,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,67,79,76,79,82,95,65,78,68,95,77,65,84,82,73,88,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,77,79,78,79,95,65,78,68,95,77,65,84,82,73,88,0,65,82,95,68,69,70,65,85,76,84,95,80,65,84,84,69,82,78,95,68,69,84,69,67,84,73,79,78,95,77,79,68,69,0,65,82,95,85,83,69,95,84,82,65,67,75,73,78,71,95,72,73,83,84,79,82,89,0,65,82,95,78,79,85,83,69,95,84,82,65,67,75,73,78,71,95,72,73,83,84,79,82,89,0,65,82,95,85,83,69,95,84,82,65,67,75,73,78,71,95,72,73,83,84,79,82,89,95,86,50,0,65,82,95,68,69,70,65,85,76,84,95,77,65,82,75,69,82,95,69,88,84,82,65,67,84,73,79,78,95,77,79,68,69,0,65,82,95,77,65,88,95,76,79,79,80,95,67,79,85,78,84,0,65,82,95,76,79,79,80,95,66,82,69,65,75,95,84,72,82,69,83,72,0,65,82,95,76,79,71,95,76,69,86,69,76,95,68,69,66,85,71,0,65,82,95,76,79,71,95,76,69,86,69,76,95,73,78,70,79,0,65,82,95,76,79,71,95,76,69,86,69,76,95,87,65,82,78,0,65,82,95,76,79,71,95,76,69,86,69,76,95,69,82,82,79,82,0,65,82,95,76,79,71,95,76,69,86,69,76,95,82,69,76,95,73,78,70,79,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,51,120,51,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,51,120,51,95,72,65,77,77,73,78,71,54,51,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,51,120,51,95,80,65,82,73,84,89,54,53,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,52,120,52,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,52,120,52,95,66,67,72,95,49,51,95,57,95,51,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,52,120,52,95,66,67,72,95,49,51,95,53,95,53,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,77,65,78,85,65,76,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,65,85,84,79,95,77,69,68,73,65,78,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,65,85,84,79,95,79,84,83,85,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,65,85,84,79,95,65,68,65,80,84,73,86,69,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,78,79,78,69,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,80,65,84,84,69,82,78,95,69,88,84,82,65,67,84,73,79,78,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,71,69,78,69,82,73,67,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,67,79,78,84,82,65,83,84,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,66,65,82,67,79,68,69,95,78,79,84,95,70,79,85,78,68,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,66,65,82,67,79,68,69,95,69,68,67,95,70,65,73,76,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,67,79,78,70,73,68,69,78,67,69,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,80,79,83,69,95,69,82,82,79,82,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,80,79,83,69,95,69,82,82,79,82,95,77,85,76,84,73,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,72,69,85,82,73,83,84,73,67,95,84,82,79,85,66,76,69,83,79,77,69,95,77,65,84,82,73,88,95,67,79,68,69,83,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,115,116,100,58,58,119,115,116,114,105,110,103,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,78,49,48,101,109,115,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,114,119,97,0,105,110,102,105,110,105,116,121,0,110,97,110,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,117,115,114,47,108,105,98,47,101,109,115,99,114,105,112,116,101,110,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,117,115,114,47,108,105,98,47,101,109,115,99,114,105,112,116,101,110,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,32,99,111,110,115,116,0,32,118,111,108,97,116,105,108,101,0,32,114,101,115,116,114,105,99,116,0,118,111,105,100,0,119,99,104,97,114,95,116,0,98,111,111,108,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,108,111,110,103,32,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,0,95,95,105,110,116,49,50,56,0,117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,50,56,0,102,108,111,97,116,0,100,111,117,98,108,101,0,108,111,110,103,32,100,111,117,98,108,101,0,95,95,102,108,111,97,116,49,50,56,0,46,46,46,0,95,71,76,79,66,65,76,95,95,78,0,40,97,110,111,110,121,109,111,117,115,32,110,97,109,101,115,112,97,99,101,41,0,100,101,99,105,109,97,108,54,52,0,100,101,99,105,109,97,108,49,50,56,0,100,101,99,105,109,97,108,51,50,0,100,101,99,105,109,97,108,49,54,0,99,104,97,114,51,50,95,116,0,99,104,97,114,49,54,95,116,0,97,117,116,111,0,115,116,100,58,58,110,117,108,108,112,116,114,95,116,0,32,91,0,32,91,93,0,93,0,40,0,41,0,102,97,108,115,101,0,116,114,117,101,0,117,0,108,0,117,108,0,108,108,0,117,108,108,0,37,97,102,0,37,97,0,37,76,97,76,0,102,112,0,38,38,0,62,0,41,32,0,32,40,0,38,0,38,61,0,61,0,97,108,105,103,110,111,102,32,40,0,99,111,110,115,116,95,99,97,115,116,60,0,62,40,0,44,0,126,0,41,40,0,58,58,0,100,101,108,101,116,101,91,93,32,0,100,121,110,97,109,105,99,95,99,97,115,116,60,0,42,0,100,101,108,101,116,101,32,0,111,112,101,114,97,116,111,114,38,38,0,111,112,101,114,97,116,111,114,38,0,111,112,101,114,97,116,111,114,38,61,0,111,112,101,114,97,116,111,114,61,0,111,112,101,114,97,116,111,114,40,41,0,111,112,101,114,97,116,111,114,44,0,111,112,101,114,97,116,111,114,126,0,111,112,101,114,97,116,111,114,32,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,91,93,0,111,112,101,114,97,116,111,114,42,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,0,111,112,101,114,97,116,111,114,47,0,111,112,101,114,97,116,111,114,47,61,0,111,112,101,114,97,116,111,114,94,0,111,112,101,114,97,116,111,114,94,61,0,111,112,101,114,97,116,111,114,61,61,0,111,112,101,114,97,116,111,114,62,61,0,111,112,101,114,97,116,111,114,62,0,111,112,101,114,97,116,111,114,91,93,0,111,112,101,114,97,116,111,114,60,61,0,111,112,101,114,97,116,111,114,34,34,32,0,111,112,101,114,97,116,111,114,60,60,0,111,112,101,114,97,116,111,114,60,60,61,0,111,112,101,114,97,116,111,114,60,0,111,112,101,114,97,116,111,114,45,0,111,112,101,114,97,116,111,114,45,61,0,111,112,101,114,97,116,111,114,42,61,0,111,112,101,114,97,116,111,114,45,45,0,111,112,101,114,97,116,111,114,32,110,101,119,91,93,0,111,112,101,114,97,116,111,114,33,61,0,111,112,101,114,97,116,111,114,33,0,111,112,101,114,97,116,111,114,32,110,101,119,0,111,112,101,114,97,116,111,114,124,124,0,111,112,101,114,97,116,111,114,124,0,111,112,101,114,97,116,111,114,124,61,0,111,112,101,114,97,116,111,114,45,62,42,0,111,112,101,114,97,116,111,114,43,0,111,112,101,114,97,116,111,114,43,61,0,111,112,101,114,97,116,111,114,43,43,0,111,112,101,114,97,116,111,114,45,62,0,111,112,101,114,97,116,111,114,63,0,111,112,101,114,97,116,111,114,37,0,111,112,101,114,97,116,111,114,37,61,0,111,112,101,114,97,116,111,114,62,62,0,111,112,101,114,97,116,111,114,62,62,61,0,60,0,44,32,0,32,62,0,100,101,99,108,116,121,112,101,40,0,115,116,100,58,58,97,108,108,111,99,97,116,111,114,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,105,115,116,114,101,97,109,0,115,116,100,58,58,111,115,116,114,101,97,109,0,115,116,100,58,58,105,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,44,32,115,116,100,58,58,97,108,108,111,99,97,116,111,114,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,105,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,105,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,111,115,116,114,101,97,109,0,39,117,110,110,97,109,101,100,0,39,108,97,109,98,100,97,39,40,0,115,116,100,58,58,0,46,42,0,46,0,47,0,47,61,0,94,0,94,61,0,61,61,0,62,61,0,41,91,0,60,61,0,60,60,0,60,60,61,0,45,0,45,61,0,42,61,0,45,45,0,41,45,45,0,91,93,32,0,32,0,33,61,0,33,0,110,111,101,120,99,101,112,116,32,40,0,124,124,0,124,0,124,61,0,45,62,42,0,43,0,43,61,0,43,43,0,41,43,43,0,45,62,0,41,32,63,32,40,0,41,32,58,32,40,0,114,101,105,110,116,101,114,112,114,101,116,95,99,97,115,116,60,0,37,0,37,61,0,62,62,0,62,62,61,0,115,116,97,116,105,99,95,99,97,115,116,60,0,115,105,122,101,111,102,32,40,0,115,105,122,101,111,102,46,46,46,40,0,116,121,112,101,105,100,40,0,116,104,114,111,119,0,116,104,114,111,119,32,0,32,99,111,109,112,108,101,120,0,32,38,0,32,38,38,0,32,105,109,97,103,105,110,97,114,121,0,58,58,42,0,111,98,106,99,95,111,98,106,101,99,116,60,0,105,100,0,111,98,106,99,112,114,111,116,111,0,115,116,100,0,58,58,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0,32,118,101,99,116,111,114,91,0,112,105,120,101,108,32,118,101,99,116,111,114,91,0,118,116,97,98,108,101,32,102,111,114,32,0,86,84,84,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,110,97,109,101,32,102,111,114,32,0,99,111,118,97,114,105,97,110,116,32,114,101,116,117,114,110,32,116,104,117,110,107,32,116,111,32,0,99,111,110,115,116,114,117,99,116,105,111,110,32,118,116,97,98,108,101,32,102,111,114,32,0,45,105,110,45,0,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,110,111,110,45,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,103,117,97,114,100,32,118,97,114,105,97,98,108,101,32,102,111,114,32,0,114,101,102,101,114,101,110,99,101,32,116,101,109,112,111,114,97,114,121,32,102,111,114,32,0,95,98,108,111,99,107,95,105,110,118,111,107,101,0,105,110,118,111,99,97,116,105,111,110,32,102,117,110,99,116,105,111,110,32,102,111,114,32,98,108,111,99,107,32,105,110,32,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ___gxx_personality_v0() {
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  function _free() {
  }
  Module["_free"] = _free;
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ___lock() {}

  function ___unlock() {}

  var _llvm_fabs_f64=Math_abs;

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_asm_const_int=true;

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _llvm_ctlz_i32=true;

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function(type) {
          type = type[0];
          Module[name] = type['fromWireType'](value);
          return [];
      });
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

   
  Module["___uremdi3"] = ___uremdi3;

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_dii": nullFunc_dii, "nullFunc_vid": nullFunc_vid, "nullFunc_di": nullFunc_di, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_dii": invoke_dii, "invoke_vid": invoke_vid, "invoke_di": invoke_di, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "_emscripten_asm_const_iiiid": _emscripten_asm_const_iiiid, "__embind_register_integer": __embind_register_integer, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "_abort": _abort, "_llvm_fabs_f64": _llvm_fabs_f64, "_pthread_cleanup_push": _pthread_cleanup_push, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "___assert_fail": ___assert_fail, "__embind_register_void": __embind_register_void, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "count_emval_handles": count_emval_handles, "___syscall54": ___syscall54, "getShiftFromSize": getShiftFromSize, "__embind_register_function": __embind_register_function, "embind_init_charCodes": embind_init_charCodes, "___setErrNo": ___setErrNo, "__emval_register": __emval_register, "_sbrk": _sbrk, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "__exit": __exit, "_embind_repr": _embind_repr, "__embind_register_std_string": __embind_register_std_string, "createNamedFunction": createNamedFunction, "__embind_register_emval": __embind_register_emval, "readLatin1String": readLatin1String, "__embind_register_memory_view": __embind_register_memory_view, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "__emval_decref": __emval_decref, "_emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi": _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi, "__embind_register_float": __embind_register_float, "makeLegalFunctionName": makeLegalFunctionName, "integerReadValueFromPointer": integerReadValueFromPointer, "___unlock": ___unlock, "heap32VectorToArray": heap32VectorToArray, "init_emval": init_emval, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "__embind_register_std_wstring": __embind_register_std_wstring, "___syscall5": ___syscall5, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "new_": new_, "___cxa_atexit": ___cxa_atexit, "registerType": registerType, "___cxa_throw": ___cxa_throw, "___lock": ___lock, "___syscall6": ___syscall6, "throwBindingError": throwBindingError, "ensureOverloadTable": ensureOverloadTable, "__embind_register_constant": __embind_register_constant, "requireFunction": requireFunction, "runDestructors": runDestructors, "getTypeName": getTypeName, "_atexit": _atexit, "___syscall140": ___syscall140, "exposePublicSymbol": exposePublicSymbol, "_exit": _exit, "replacePublicSymbol": replacePublicSymbol, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_dii=env.invoke_dii;
  var invoke_vid=env.invoke_vid;
  var invoke_di=env.invoke_di;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var _emscripten_asm_const_iiiid=env._emscripten_asm_const_iiiid;
  var __embind_register_integer=env.__embind_register_integer;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var _abort=env._abort;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var ___assert_fail=env.___assert_fail;
  var __embind_register_void=env.__embind_register_void;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var count_emval_handles=env.count_emval_handles;
  var ___syscall54=env.___syscall54;
  var getShiftFromSize=env.getShiftFromSize;
  var __embind_register_function=env.__embind_register_function;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ___setErrNo=env.___setErrNo;
  var __emval_register=env.__emval_register;
  var _sbrk=env._sbrk;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var __exit=env.__exit;
  var _embind_repr=env._embind_repr;
  var __embind_register_std_string=env.__embind_register_std_string;
  var createNamedFunction=env.createNamedFunction;
  var __embind_register_emval=env.__embind_register_emval;
  var readLatin1String=env.readLatin1String;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var __emval_decref=env.__emval_decref;
  var _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi=env._emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi;
  var __embind_register_float=env.__embind_register_float;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var ___unlock=env.___unlock;
  var heap32VectorToArray=env.heap32VectorToArray;
  var init_emval=env.init_emval;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var ___syscall5=env.___syscall5;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var new_=env.new_;
  var ___cxa_atexit=env.___cxa_atexit;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var throwBindingError=env.throwBindingError;
  var ensureOverloadTable=env.ensureOverloadTable;
  var __embind_register_constant=env.__embind_register_constant;
  var requireFunction=env.requireFunction;
  var runDestructors=env.runDestructors;
  var getTypeName=env.getTypeName;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var exposePublicSymbol=env.exposePublicSymbol;
  var _exit=env._exit;
  var replacePublicSymbol=env.replacePublicSymbol;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i367 = 0, $$0$i$i$i$i443 = 0, $$02$i331 = 0, $$027$i = 0, $$1$i224 = 0, $$1$i575 = 0, $$1$i608 = 0, $$10$i = 0, $$128$i = 0, $$14 = 0, $$14$i = 0, $$15$i = 0, $$15$i235 = 0, $$15$i249 = 0, $$15$i263 = 0, $$16$i376 = 0, $$3$i388 = 0, $$3$i403 = 0, $$311$i = 0, $$311$i311 = 0, $$311$i439 = 0, $$311$i544 = 0, $$320$i = 0, $$421$i = 0, $$6$i508 = 0, $$first$i = 0, $$ph739 = 0, $$ph741745 = 0, $$phi$trans$insert = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i471 = 0, $$pre$i$i$i$i552 = 0, $$pre$i$i$i$i585 = 0, $$pre$i$i$i131 = 0, $$pre$phi732Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1003 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1009 = 0, $101 = 0, $1019 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1024 = 0, $1028 = 0, $103 = 0, $1031 = 0, $1034 = 0, $104 = 0, $1048 = 0, $1049 = 0, $1050 = 0, $1052 = 0, $1055 = 0, $1058 = 0, $106 = 0, $1060 = 0, $107 = 0, $1070 = 0, $1072 = 0, $1082 = 0, $1085 = 0, $1087 = 0, $109 = 0, $1099 = 0, $11 = 0, $110 = 0, $1101 = 0, $1103 = 0, $1108 = 0, $1110 = 0, $1111 = 0, $1114 = 0, $1116 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1123 = 0, $1124 = 0, $1126 = 0, $1127 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1132 = 0, $1133 = 0, $1137 = 0, $1139 = 0, $1140 = 0, $1143 = 0, $1150 = 0, $1152 = 0, $1155 = 0, $1159 = 0, $1162 = 0, $1166 = 0, $1168 = 0, $1171 = 0, $1172 = 0, $1174 = 0, $1176 = 0, $1177 = 0, $1185 = 0, $1195 = 0, $1196 = 0, $1198 = 0, $1199 = 0, $12 = 0, $1201 = 0, $1202 = 0, $1207 = 0, $1208 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1213 = 0, $1214 = 0, $1216 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1223 = 0, $1227 = 0, $1229 = 0, $1230 = 0, $1233 = 0, $1236 = 0, $1237 = 0, $1245 = 0, $1246 = 0, $1248 = 0, $1250 = 0, $1251 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1262 = 0, $1266 = 0, $1268 = 0, $128 = 0, $1281 = 0, $1282 = 0, $1284 = 0, $1286 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $13 = 0, $1300 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1306 = 0, $1309 = 0, $1310 = 0, $1313 = 0, $1315 = 0, $132 = 0, $1325 = 0, $1328 = 0, $1331 = 0, $1333 = 0, $1343 = 0, $1346 = 0, $1349 = 0, $1350 = 0, $1351 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $1360 = 0, $1361 = 0, $1363 = 0, $1373 = 0, $1374 = 0, $1376 = 0, $1378 = 0, $1379 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1395 = 0, $1398 = 0, $14 = 0, $1400 = 0, $141 = 0, $1410 = 0, $1413 = 0, $1416 = 0, $1417 = 0, $1419 = 0, $1420 = 0, $1422 = 0, $1423 = 0, $1425 = 0, $1426 = 0, $1437 = 0, $1438 = 0, $144 = 0, $1440 = 0, $1442 = 0, $1443 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1459 = 0, $1462 = 0, $1464 = 0, $1474 = 0, $1477 = 0, $148 = 0, $1486 = 0, $1487 = 0, $1496 = 0, $1497 = 0, $15 = 0, $1501 = 0, $1503 = 0, $1504 = 0, $1507 = 0, $151 = 0, $1516 = 0, $1517 = 0, $1521 = 0, $1523 = 0, $1524 = 0, $1527 = 0, $1542 = 0, $1545 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1552 = 0, $1554 = 0, $1556 = 0, $1561 = 0, $1563 = 0, $157 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1579 = 0, $1582 = 0, $1584 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1596 = 0, $16 = 0, $160 = 0, $1600 = 0, $1602 = 0, $1604 = 0, $1609 = 0, $161 = 0, $1611 = 0, $1612 = 0, $1615 = 0, $1617 = 0, $1620 = 0, $1621 = 0, $1629 = 0, $163 = 0, $1632 = 0, $1636 = 0, $1638 = 0, $1639 = 0, $1642 = 0, $165 = 0, $1652 = 0, $1654 = 0, $166 = 0, $1660 = 0, $1662 = 0, $1663 = 0, $1666 = 0, $1669 = 0, $1670 = 0, $1672 = 0, $1674 = 0, $1679 = 0, $1681 = 0, $1682 = 0, $1685 = 0, $1687 = 0, $1690 = 0, $1691 = 0, $17 = 0, $1700 = 0, $1701 = 0, $1705 = 0, $1707 = 0, $1708 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $174 = 0, $18 = 0, $185 = 0, $186 = 0, $19 = 0, $190 = 0, $192 = 0, $193 = 0, $196 = 0, $2 = 0, $20 = 0, $203 = 0, $205 = 0, $208 = 0, $21 = 0, $212 = 0, $215 = 0, $219 = 0, $22 = 0, $221 = 0, $224 = 0, $225 = 0, $227 = 0, $229 = 0, $23 = 0, $230 = 0, $238 = 0, $24 = 0, $25 = 0, $252 = 0, $253 = 0, $255 = 0, $257 = 0, $258 = 0, $26 = 0, $265 = 0, $266 = 0, $267 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $274 = 0, $277 = 0, $279 = 0, $28 = 0, $289 = 0, $29 = 0, $292 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $305 = 0, $306 = 0, $309 = 0, $31 = 0, $310 = 0, $312 = 0, $32 = 0, $322 = 0, $325 = 0, $33 = 0, $330 = 0, $332 = 0, $335 = 0, $339 = 0, $34 = 0, $342 = 0, $346 = 0, $348 = 0, $35 = 0, $351 = 0, $352 = 0, $354 = 0, $356 = 0, $357 = 0, $36 = 0, $365 = 0, $37 = 0, $372 = 0, $373 = 0, $374 = 0, $377 = 0, $38 = 0, $381 = 0, $384 = 0, $385 = 0, $386 = 0, $388 = 0, $389 = 0, $39 = 0, $391 = 0, $395 = 0, $4 = 0, $40 = 0, $403 = 0, $407 = 0, $408 = 0, $41 = 0, $410 = 0, $411 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $427 = 0, $429 = 0, $43 = 0, $431 = 0, $433 = 0, $434 = 0, $436 = 0, $438 = 0, $44 = 0, $441 = 0, $448 = 0, $45 = 0, $450 = 0, $451 = 0, $454 = 0, $456 = 0, $459 = 0, $46 = 0, $460 = 0, $463 = 0, $467 = 0, $469 = 0, $47 = 0, $473 = 0, $474 = 0, $48 = 0, $481 = 0, $482 = 0, $483 = 0, $485 = 0, $486 = 0, $487 = 0, $49 = 0, $490 = 0, $493 = 0, $495 = 0, $5 = 0, $50 = 0, $505 = 0, $508 = 0, $51 = 0, $514 = 0, $515 = 0, $518 = 0, $519 = 0, $52 = 0, $521 = 0, $524 = 0, $529 = 0, $53 = 0, $531 = 0, $54 = 0, $541 = 0, $548 = 0, $55 = 0, $550 = 0, $553 = 0, $557 = 0, $56 = 0, $560 = 0, $564 = 0, $566 = 0, $569 = 0, $57 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $58 = 0, $583 = 0, $59 = 0, $594 = 0, $595 = 0, $597 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $611 = 0, $612 = 0, $613 = 0, $616 = 0, $619 = 0, $62 = 0, $621 = 0, $63 = 0, $631 = 0, $634 = 0, $637 = 0, $638 = 0, $64 = 0, $640 = 0, $641 = 0, $644 = 0, $645 = 0, $647 = 0, $65 = 0, $650 = 0, $655 = 0, $657 = 0, $66 = 0, $667 = 0, $67 = 0, $674 = 0, $676 = 0, $679 = 0, $68 = 0, $683 = 0, $686 = 0, $69 = 0, $690 = 0, $692 = 0, $695 = 0, $696 = 0, $698 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $709 = 0, $71 = 0, $72 = 0, $721 = 0, $722 = 0, $724 = 0, $726 = 0, $727 = 0, $73 = 0, $734 = 0, $735 = 0, $736 = 0, $738 = 0, $74 = 0, $740 = 0, $742 = 0, $75 = 0, $758 = 0, $759 = 0, $76 = 0, $761 = 0, $763 = 0, $764 = 0, $77 = 0, $771 = 0, $772 = 0, $773 = 0, $775 = 0, $777 = 0, $779 = 0, $78 = 0, $789 = 0, $79 = 0, $790 = 0, $792 = 0, $793 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $801 = 0, $802 = 0, $804 = 0, $805 = 0, $81 = 0, $810 = 0, $811 = 0, $813 = 0, $814 = 0, $819 = 0, $820 = 0, $822 = 0, $824 = 0, $825 = 0, $83 = 0, $832 = 0, $833 = 0, $834 = 0, $836 = 0, $839 = 0, $840 = 0, $843 = 0, $845 = 0, $85 = 0, $855 = 0, $858 = 0, $861 = 0, $862 = 0, $863 = 0, $865 = 0, $869 = 0, $870 = 0, $872 = 0, $873 = 0, $875 = 0, $876 = 0, $878 = 0, $879 = 0, $884 = 0, $885 = 0, $887 = 0, $888 = 0, $890 = 0, $891 = 0, $893 = 0, $894 = 0, $896 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $903 = 0, $907 = 0, $909 = 0, $910 = 0, $913 = 0, $919 = 0, $923 = 0, $925 = 0, $928 = 0, $929 = 0, $930 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $944 = 0, $959 = 0, $960 = 0, $967 = 0, $968 = 0, $969 = 0, $970 = 0, $972 = 0, $976 = 0, $979 = 0, $982 = 0, $996 = 0, $997 = 0, $998 = 0, $__i$0$i$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i$i = 0, $__i$0$i$i$i$i$i$i$i = 0, $__i$0$i$i$i$i$i$i$i$i = 0, $__i$0$i$i$i$i$i352 = 0, $__i$0$i$i$i$i$i486 = 0, $__i$0$i$i$i$i$i567 = 0, $__i$0$i$i$i$i$i600 = 0, $__i$0$i$i$i$i146 = 0, $__i$0$i$i$i$i207 = 0, $__i$0$i$i$i$i212 = 0, $__i$0$i$i$i$i220 = 0, $__i$0$i$i$i$i226 = 0, $__i$0$i$i$i$i237 = 0, $__i$0$i$i$i$i251 = 0, $__i$0$i$i$i$i268 = 0, $__i$0$i$i$i$i280 = 0, $__i$0$i$i$i$i325 = 0, $__i$0$i$i$i$i359 = 0, $__i$0$i$i$i$i408 = 0, $__i$0$i$i$i$i451 = 0, $__i$0$i$i$i$i513 = 0, $__i$0$i$i$i$i546 = 0, $__i$0$i$i$i$i577 = 0, $__i$0$i$i$i$i61$i = 0, $__i$0$i$i$i116 = 0, $__i$0$i$i$i122 = 0, $__i$0$i$i$i126 = 0, $__i$0$i$i$i149 = 0, $__i$0$i$i$i153 = 0, $__i$0$i$i$i156 = 0, $__i$0$i$i$i162 = 0, $__i$0$i$i$i165 = 0, $__i$0$i$i$i169 = 0, $__i$0$i$i$i17$i = 0, $__i$0$i$i$i17$i284 = 0, $__i$0$i$i$i17$i412 = 0, $__i$0$i$i$i17$i517 = 0, $__i$0$i$i$i173 = 0, $__i$0$i$i$i181 = 0, $__i$0$i$i$i185 = 0, $__i$0$i$i$i189 = 0, $__i$0$i$i$i193 = 0, $__i$0$i$i$i197 = 0, $__i$0$i$i$i20$i = 0, $__i$0$i$i$i20$i288 = 0, $__i$0$i$i$i20$i416 = 0, $__i$0$i$i$i20$i521 = 0, $__i$0$i$i$i209 = 0, $__i$0$i$i$i23$i = 0, $__i$0$i$i$i23$i292 = 0, $__i$0$i$i$i23$i420 = 0, $__i$0$i$i$i23$i525 = 0, $__i$0$i$i$i26$i = 0, $__i$0$i$i$i29$i = 0, $__i$0$i$i$i32$i = 0, $__i$0$i$i$i334 = 0, $__i$0$i$i$i4$i = 0, $__i$0$i$i$i467 = 0, $__i$0$i$i$i6$i = 0, $__i$0$i$i$i6$i581 = 0, $__i$0$i$i$i73$i = 0, $__i$0$i$i$i8$i = 0, $__i$0$i$i$i8$i230 = 0, $__i$0$i$i$i8$i241 = 0, $__i$0$i$i$i8$i255 = 0, $__i$0$i$i1$i$i$i$i$i = 0, $__i$0$i$i1$i$i$i$i$i$i = 0, $__i$0$i$i119 = 0, $__i$0$i$i42$i = 0, $__i$0$i$i66$i = 0, $__i$0$i$i79$i = 0, $has_expr_list$0$off0$i = 0, $has_expr_list$0$off0$i$lcssa = 0, $has_init$0$off0$i734 = 0, $k$0$i = 0, $k$0$in$i = 0, $k1$0$i = 0, $or$cond25$i = 0, $parsed_gs$0$off0 = 0, $parsed_gs$0$off0$i = 0, $phitmp$i$i$i$i$i$i$i339 = 0, $phitmp$i$i$i$i$i$i48$i = 0, $phitmp$i2$i$i$i$i$i$i342 = 0, $phitmp$i2$i$i$i$i$i51$i = 0, $t$0 = 0, $t$0$i = 0, $t$0$i333 = 0, $t$0$i489 = 0, $t$0$i489$lcssa = 0, $t$1$i = 0, $t$1$i$lcssa = 0, $t$1$i444 = 0, $t$3$i = 0, $t$4$i447 = 0, $t$4$i733 = 0, $t$5$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0, $t$1$i$looptemp = 0, $t$3$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 1072 | 0;
 $1 = sp + 1048 | 0;
 $2 = sp + 1032 | 0;
 $3 = sp + 1020 | 0;
 $4 = sp + 1008 | 0;
 $5 = sp + 984 | 0;
 $6 = sp + 972 | 0;
 $7 = sp + 596 | 0;
 $8 = sp + 572 | 0;
 $9 = sp + 548 | 0;
 $10 = sp + 524 | 0;
 $11 = sp + 488 | 0;
 $12 = sp + 460 | 0;
 $13 = sp + 960 | 0;
 $14 = sp + 948 | 0;
 $15 = sp + 936 | 0;
 $16 = sp + 924 | 0;
 $17 = sp + 912 | 0;
 $18 = sp + 900 | 0;
 $19 = sp + 888 | 0;
 $20 = sp + 876 | 0;
 $21 = sp + 864 | 0;
 $22 = sp + 852 | 0;
 $23 = sp + 840 | 0;
 $24 = sp + 828 | 0;
 $25 = sp + 816 | 0;
 $26 = sp + 804 | 0;
 $27 = sp + 792 | 0;
 $28 = sp + 780 | 0;
 $29 = sp + 768 | 0;
 $30 = sp + 756 | 0;
 $31 = sp + 744 | 0;
 $32 = sp + 732 | 0;
 $33 = sp + 720 | 0;
 $34 = sp + 708 | 0;
 $35 = sp + 696 | 0;
 $36 = sp + 672 | 0;
 $37 = sp + 656 | 0;
 $38 = sp + 644 | 0;
 $39 = sp + 632 | 0;
 $40 = sp + 620 | 0;
 $41 = sp + 608 | 0;
 $42 = sp + 584 | 0;
 $43 = sp + 560 | 0;
 $44 = sp + 536 | 0;
 $45 = sp + 512 | 0;
 $46 = sp + 472 | 0;
 $47 = sp + 448 | 0;
 $48 = sp + 436 | 0;
 $49 = sp + 424 | 0;
 $50 = sp + 400 | 0;
 $51 = sp + 384 | 0;
 $52 = sp + 372 | 0;
 $53 = sp + 360 | 0;
 $54 = sp + 348 | 0;
 $55 = sp + 336 | 0;
 $56 = sp + 324 | 0;
 $57 = sp + 312 | 0;
 $58 = sp + 300 | 0;
 $59 = sp + 288 | 0;
 $60 = sp + 276 | 0;
 $61 = sp + 264 | 0;
 $62 = sp + 252 | 0;
 $63 = sp + 240 | 0;
 $64 = sp + 216 | 0;
 $65 = sp + 204 | 0;
 $66 = sp + 192 | 0;
 $67 = sp + 180 | 0;
 $68 = sp + 168 | 0;
 $69 = sp + 144 | 0;
 $70 = sp + 132 | 0;
 $71 = sp + 120 | 0;
 $72 = sp + 108 | 0;
 $73 = sp + 96 | 0;
 $74 = sp + 84 | 0;
 $75 = sp + 72 | 0;
 $76 = sp + 60 | 0;
 $77 = sp + 48 | 0;
 $78 = sp + 36 | 0;
 $79 = sp + 24 | 0;
 $80 = sp;
 $81 = $last;
 $83 = $81 - $first | 0;
 L1 : do if (($83 | 0) > 1) {
  $85 = ($83 | 0) > 3;
  if ($85) if ((HEAP8[$first >> 0] | 0) == 103) {
   $90 = (HEAP8[$first + 1 >> 0] | 0) == 115;
   $parsed_gs$0$off0 = $90;
   $t$0 = $90 ? $first + 2 | 0 : $first;
  } else {
   $parsed_gs$0$off0 = 0;
   $t$0 = $first;
  } else {
   $parsed_gs$0$off0 = 0;
   $t$0 = $first;
  }
  do switch (HEAP8[$t$0 >> 0] | 0) {
  case 76:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break L1;
    break;
   }
  case 84:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break L1;
    break;
   }
  case 102:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break L1;
    break;
   }
  case 97:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 97:
     {
      $100 = $first + 2 | 0;
      HEAP32[$13 >> 2] = 0;
      HEAP32[$13 + 4 >> 2] = 0;
      HEAP32[$13 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($13, 14705, 2);
      $101 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($100, $last, $13, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
      $$14 = ($101 | 0) == ($100 | 0) ? $first : $101;
      break L1;
      break;
     }
    case 100:
     {
      $103 = $first + 2 | 0;
      HEAP32[$14 >> 2] = 0;
      HEAP32[$14 + 4 >> 2] = 0;
      HEAP32[$14 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($14, 14716, 1);
      $104 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($103, $last, $14, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
      $$14 = ($104 | 0) == ($103 | 0) ? $first : $104;
      break L1;
      break;
     }
    case 110:
     {
      $106 = $first + 2 | 0;
      HEAP32[$15 >> 2] = 0;
      HEAP32[$15 + 4 >> 2] = 0;
      HEAP32[$15 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($15, 14716, 1);
      $107 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($106, $last, $15, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
      $$14 = ($107 | 0) == ($106 | 0) ? $first : $107;
      break L1;
      break;
     }
    case 78:
     {
      $109 = $first + 2 | 0;
      HEAP32[$16 >> 2] = 0;
      HEAP32[$16 + 4 >> 2] = 0;
      HEAP32[$16 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($16, 14718, 2);
      $110 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($109, $last, $16, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
      $$14 = ($110 | 0) == ($109 | 0) ? $first : $110;
      break L1;
      break;
     }
    case 83:
     {
      $112 = $first + 2 | 0;
      HEAP32[$17 >> 2] = 0;
      HEAP32[$17 + 4 >> 2] = 0;
      HEAP32[$17 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($17, 14721, 1);
      $113 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($112, $last, $17, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
      $$14 = ($113 | 0) == ($112 | 0) ? $first : $113;
      break L1;
      break;
     }
    case 116:
     {
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 97) if ((HEAP8[$first + 1 >> 0] | 0) == 116) {
       $121 = $first + 2 | 0;
       $122 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($121, $last, $db) | 0;
       if (($122 | 0) == ($121 | 0)) $$1$i608 = $first; else {
        $126 = HEAP32[$db + 4 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($126 | 0)) $$1$i608 = $first; else {
         $128 = $126 + -24 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, $128);
         $129 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2, 0, 14723) | 0;
         HEAP32[$1 >> 2] = HEAP32[$129 >> 2];
         HEAP32[$1 + 4 >> 2] = HEAP32[$129 + 4 >> 2];
         HEAP32[$1 + 8 >> 2] = HEAP32[$129 + 8 >> 2];
         $__i$0$i$i$i$i577 = 0;
         while (1) {
          if (($__i$0$i$i$i$i577 | 0) == 3) break;
          HEAP32[$129 + ($__i$0$i$i$i$i577 << 2) >> 2] = 0;
          $__i$0$i$i$i$i577 = $__i$0$i$i$i$i577 + 1 | 0;
         }
         $132 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1, 14663) | 0;
         HEAP32[$0 >> 2] = HEAP32[$132 >> 2];
         HEAP32[$0 + 4 >> 2] = HEAP32[$132 + 4 >> 2];
         HEAP32[$0 + 8 >> 2] = HEAP32[$132 + 8 >> 2];
         $__i$0$i$i$i6$i581 = 0;
         while (1) {
          if (($__i$0$i$i$i6$i581 | 0) == 3) break;
          HEAP32[$132 + ($__i$0$i$i$i6$i581 << 2) >> 2] = 0;
          $__i$0$i$i$i6$i581 = $__i$0$i$i$i6$i581 + 1 | 0;
         }
         do if (!(HEAP8[$128 >> 0] & 1)) {
          HEAP8[$128 + 1 >> 0] = 0;
          HEAP8[$128 >> 0] = 0;
         } else {
          $139 = $126 + -16 | 0;
          HEAP8[HEAP32[$139 >> 2] >> 0] = 0;
          $141 = $126 + -20 | 0;
          HEAP32[$141 >> 2] = 0;
          $$pre$i$i$i$i585 = HEAP8[$128 >> 0] | 0;
          if (!($$pre$i$i$i$i585 & 1)) {
           $148 = $$pre$i$i$i$i585;
           $157 = 10;
          } else {
           $144 = HEAP32[$128 >> 2] | 0;
           $148 = $144 & 255;
           $157 = ($144 & -2) + -1 | 0;
          }
          if (!($148 & 1)) {
           $151 = ($148 & 255) >>> 1;
           if (($148 & 255) < 22) {
            $155 = 10;
            $1712 = 1;
            $174 = $151;
           } else {
            $155 = ($151 + 16 & 240) + -1 | 0;
            $1712 = 1;
            $174 = $151;
           }
          } else {
           $155 = 10;
           $1712 = 0;
           $174 = 0;
          }
          if (($155 | 0) != ($157 | 0)) {
           if (($155 | 0) == 10) {
            $165 = $128 + 1 | 0;
            $166 = HEAP32[$139 >> 2] | 0;
            if ($1712) {
             _memcpy($165 | 0, $166 | 0, (($148 & 255) >>> 1) + 1 | 0) | 0;
             _free($166);
            } else {
             HEAP8[$165 >> 0] = HEAP8[$166 >> 0] | 0;
             _free($166);
            }
            HEAP8[$128 >> 0] = $174 << 1;
            break;
           }
           $160 = $155 + 1 | 0;
           $161 = _malloc($160) | 0;
           if (!($155 >>> 0 <= $157 >>> 0 & ($161 | 0) == 0)) {
            if ($1712) _memcpy($161 | 0, $128 + 1 | 0, (($148 & 255) >>> 1) + 1 | 0) | 0; else {
             $163 = HEAP32[$139 >> 2] | 0;
             HEAP8[$161 >> 0] = HEAP8[$163 >> 0] | 0;
             _free($163);
            }
            HEAP32[$128 >> 2] = $160 | 1;
            HEAP32[$141 >> 2] = $174;
            HEAP32[$139 >> 2] = $161;
           }
          }
         } while (0);
         HEAP32[$128 >> 2] = HEAP32[$0 >> 2];
         HEAP32[$128 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
         HEAP32[$128 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
         $__i$0$i$i$i$i$i600 = 0;
         while (1) {
          if (($__i$0$i$i$i$i$i600 | 0) == 3) break;
          HEAP32[$0 + ($__i$0$i$i$i$i$i600 << 2) >> 2] = 0;
          $__i$0$i$i$i$i$i600 = $__i$0$i$i$i$i$i600 + 1 | 0;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         $$1$i608 = $122;
        }
       }
      } else $$1$i608 = $first; else $$1$i608 = $first; else $$1$i608 = $first;
      $$14 = $$1$i608;
      break L1;
      break;
     }
    case 122:
     {
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 97) if ((HEAP8[$first + 1 >> 0] | 0) == 122) {
       $185 = $first + 2 | 0;
       $186 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($185, $last, $db) | 0;
       if (($186 | 0) == ($185 | 0)) $$1$i575 = $first; else {
        $190 = HEAP32[$db + 4 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($190 | 0)) $$1$i575 = $first; else {
         $192 = $190 + -24 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, $192);
         $193 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2, 0, 14723) | 0;
         HEAP32[$1 >> 2] = HEAP32[$193 >> 2];
         HEAP32[$1 + 4 >> 2] = HEAP32[$193 + 4 >> 2];
         HEAP32[$1 + 8 >> 2] = HEAP32[$193 + 8 >> 2];
         $__i$0$i$i$i$i546 = 0;
         while (1) {
          if (($__i$0$i$i$i$i546 | 0) == 3) break;
          HEAP32[$193 + ($__i$0$i$i$i$i546 << 2) >> 2] = 0;
          $__i$0$i$i$i$i546 = $__i$0$i$i$i$i546 + 1 | 0;
         }
         $196 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1, 14663) | 0;
         HEAP32[$0 >> 2] = HEAP32[$196 >> 2];
         HEAP32[$0 + 4 >> 2] = HEAP32[$196 + 4 >> 2];
         HEAP32[$0 + 8 >> 2] = HEAP32[$196 + 8 >> 2];
         $__i$0$i$i$i6$i = 0;
         while (1) {
          if (($__i$0$i$i$i6$i | 0) == 3) break;
          HEAP32[$196 + ($__i$0$i$i$i6$i << 2) >> 2] = 0;
          $__i$0$i$i$i6$i = $__i$0$i$i$i6$i + 1 | 0;
         }
         do if (!(HEAP8[$192 >> 0] & 1)) {
          HEAP8[$192 + 1 >> 0] = 0;
          HEAP8[$192 >> 0] = 0;
         } else {
          $203 = $190 + -16 | 0;
          HEAP8[HEAP32[$203 >> 2] >> 0] = 0;
          $205 = $190 + -20 | 0;
          HEAP32[$205 >> 2] = 0;
          $$pre$i$i$i$i552 = HEAP8[$192 >> 0] | 0;
          if (!($$pre$i$i$i$i552 & 1)) {
           $212 = $$pre$i$i$i$i552;
           $221 = 10;
          } else {
           $208 = HEAP32[$192 >> 2] | 0;
           $212 = $208 & 255;
           $221 = ($208 & -2) + -1 | 0;
          }
          if (!($212 & 1)) {
           $215 = ($212 & 255) >>> 1;
           if (($212 & 255) < 22) {
            $1713 = 1;
            $219 = 10;
            $238 = $215;
           } else {
            $1713 = 1;
            $219 = ($215 + 16 & 240) + -1 | 0;
            $238 = $215;
           }
          } else {
           $1713 = 0;
           $219 = 10;
           $238 = 0;
          }
          if (($219 | 0) != ($221 | 0)) {
           if (($219 | 0) == 10) {
            $229 = $192 + 1 | 0;
            $230 = HEAP32[$203 >> 2] | 0;
            if ($1713) {
             _memcpy($229 | 0, $230 | 0, (($212 & 255) >>> 1) + 1 | 0) | 0;
             _free($230);
            } else {
             HEAP8[$229 >> 0] = HEAP8[$230 >> 0] | 0;
             _free($230);
            }
            HEAP8[$192 >> 0] = $238 << 1;
            break;
           }
           $224 = $219 + 1 | 0;
           $225 = _malloc($224) | 0;
           if (!($219 >>> 0 <= $221 >>> 0 & ($225 | 0) == 0)) {
            if ($1713) _memcpy($225 | 0, $192 + 1 | 0, (($212 & 255) >>> 1) + 1 | 0) | 0; else {
             $227 = HEAP32[$203 >> 2] | 0;
             HEAP8[$225 >> 0] = HEAP8[$227 >> 0] | 0;
             _free($227);
            }
            HEAP32[$192 >> 2] = $224 | 1;
            HEAP32[$205 >> 2] = $238;
            HEAP32[$203 >> 2] = $225;
           }
          }
         } while (0);
         HEAP32[$192 >> 2] = HEAP32[$0 >> 2];
         HEAP32[$192 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
         HEAP32[$192 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
         $__i$0$i$i$i$i$i567 = 0;
         while (1) {
          if (($__i$0$i$i$i$i$i567 | 0) == 3) break;
          HEAP32[$0 + ($__i$0$i$i$i$i$i567 << 2) >> 2] = 0;
          $__i$0$i$i$i$i$i567 = $__i$0$i$i$i$i$i567 + 1 | 0;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         $$1$i575 = $186;
        }
       }
      } else $$1$i575 = $first; else $$1$i575 = $first; else $$1$i575 = $first;
      $$14 = $$1$i575;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 99:
     {
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 99) if ((HEAP8[$first + 1 >> 0] | 0) == 99) {
       $252 = $first + 2 | 0;
       $253 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($252, $last, $db) | 0;
       if (($253 | 0) == ($252 | 0)) $$311$i544 = $first; else {
        $255 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($253, $last, $db) | 0;
        if (($255 | 0) == ($253 | 0)) $$311$i544 = $first; else {
         $257 = $db + 4 | 0;
         $258 = HEAP32[$257 >> 2] | 0;
         if ((($258 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$311$i544 = $first; else {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $258 + -24 | 0);
          $265 = HEAP32[$257 >> 2] | 0;
          $266 = $265 + -24 | 0;
          $267 = $265;
          while (1) {
           if (($267 | 0) == ($266 | 0)) break;
           $269 = $267 + -24 | 0;
           HEAP32[$257 >> 2] = $269;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($269);
           $267 = HEAP32[$257 >> 2] | 0;
          }
          $270 = $265 + -48 | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $270);
          $271 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 14733) | 0;
          HEAP32[$5 >> 2] = HEAP32[$271 >> 2];
          HEAP32[$5 + 4 >> 2] = HEAP32[$271 + 4 >> 2];
          HEAP32[$5 + 8 >> 2] = HEAP32[$271 + 8 >> 2];
          $__i$0$i$i$i$i513 = 0;
          while (1) {
           if (($__i$0$i$i$i$i513 | 0) == 3) break;
           HEAP32[$271 + ($__i$0$i$i$i$i513 << 2) >> 2] = 0;
           $__i$0$i$i$i$i513 = $__i$0$i$i$i$i513 + 1 | 0;
          }
          $274 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 14745) | 0;
          HEAP32[$4 >> 2] = HEAP32[$274 >> 2];
          HEAP32[$4 + 4 >> 2] = HEAP32[$274 + 4 >> 2];
          HEAP32[$4 + 8 >> 2] = HEAP32[$274 + 8 >> 2];
          $__i$0$i$i$i17$i517 = 0;
          while (1) {
           if (($__i$0$i$i$i17$i517 | 0) == 3) break;
           HEAP32[$274 + ($__i$0$i$i$i17$i517 << 2) >> 2] = 0;
           $__i$0$i$i$i17$i517 = $__i$0$i$i$i17$i517 + 1 | 0;
          }
          $277 = HEAP8[$0 >> 0] | 0;
          $279 = ($277 & 1) == 0;
          $289 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4, $279 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $279 ? ($277 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
          HEAP32[$3 >> 2] = HEAP32[$289 >> 2];
          HEAP32[$3 + 4 >> 2] = HEAP32[$289 + 4 >> 2];
          HEAP32[$3 + 8 >> 2] = HEAP32[$289 + 8 >> 2];
          $__i$0$i$i$i20$i521 = 0;
          while (1) {
           if (($__i$0$i$i$i20$i521 | 0) == 3) break;
           HEAP32[$289 + ($__i$0$i$i$i20$i521 << 2) >> 2] = 0;
           $__i$0$i$i$i20$i521 = $__i$0$i$i$i20$i521 + 1 | 0;
          }
          $292 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 14663) | 0;
          HEAP32[$2 >> 2] = HEAP32[$292 >> 2];
          HEAP32[$2 + 4 >> 2] = HEAP32[$292 + 4 >> 2];
          HEAP32[$2 + 8 >> 2] = HEAP32[$292 + 8 >> 2];
          $__i$0$i$i$i23$i525 = 0;
          while (1) {
           if (($__i$0$i$i$i23$i525 | 0) == 3) break;
           HEAP32[$292 + ($__i$0$i$i$i23$i525 << 2) >> 2] = 0;
           $__i$0$i$i$i23$i525 = $__i$0$i$i$i23$i525 + 1 | 0;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($270, $1);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
          $$311$i544 = $255;
         }
        }
       }
      } else $$311$i544 = $first; else $$311$i544 = $first; else $$311$i544 = $first;
      $$14 = $$311$i544;
      break L1;
      break;
     }
    case 108:
     {
      L138 : do if ($85) if ((HEAP8[$first >> 0] | 0) == 99) if ((HEAP8[$first + 1 >> 0] | 0) == 108) {
       $300 = $first + 2 | 0;
       $301 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($300, $last, $db) | 0;
       if (($301 | 0) == ($300 | 0) | ($301 | 0) == ($last | 0)) $$6$i508 = $first; else {
        $305 = $db + 4 | 0;
        $306 = HEAP32[$305 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($306 | 0)) $$6$i508 = $first; else {
         $309 = $306 + -12 | 0;
         $310 = HEAP8[$309 >> 0] | 0;
         $312 = ($310 & 1) == 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($306 + -24 | 0, $312 ? $309 + 1 | 0 : HEAP32[$306 + -4 >> 2] | 0, $312 ? ($310 & 255) >>> 1 : HEAP32[$306 + -8 >> 2] | 0) | 0;
         $322 = HEAP32[$305 >> 2] | 0;
         HEAP32[$0 >> 2] = 0;
         HEAP32[$0 + 4 >> 2] = 0;
         HEAP32[$0 + 8 >> 2] = 0;
         $__i$0$i$i$i467 = 0;
         while (1) {
          if (($__i$0$i$i$i467 | 0) == 3) break;
          HEAP32[$0 + ($__i$0$i$i$i467 << 2) >> 2] = 0;
          $__i$0$i$i$i467 = $__i$0$i$i$i467 + 1 | 0;
         }
         $325 = $322 + -12 | 0;
         do if (!(HEAP8[$325 >> 0] & 1)) {
          HEAP8[$325 + 1 >> 0] = 0;
          HEAP8[$325 >> 0] = 0;
         } else {
          $330 = $322 + -4 | 0;
          HEAP8[HEAP32[$330 >> 2] >> 0] = 0;
          $332 = $322 + -8 | 0;
          HEAP32[$332 >> 2] = 0;
          $$pre$i$i$i$i471 = HEAP8[$325 >> 0] | 0;
          if (!($$pre$i$i$i$i471 & 1)) {
           $339 = $$pre$i$i$i$i471;
           $348 = 10;
          } else {
           $335 = HEAP32[$325 >> 2] | 0;
           $339 = $335 & 255;
           $348 = ($335 & -2) + -1 | 0;
          }
          if (!($339 & 1)) {
           $342 = ($339 & 255) >>> 1;
           if (($339 & 255) < 22) {
            $1714 = 1;
            $346 = 10;
            $365 = $342;
           } else {
            $1714 = 1;
            $346 = ($342 + 16 & 240) + -1 | 0;
            $365 = $342;
           }
          } else {
           $1714 = 0;
           $346 = 10;
           $365 = 0;
          }
          if (($346 | 0) != ($348 | 0)) {
           if (($346 | 0) == 10) {
            $356 = $325 + 1 | 0;
            $357 = HEAP32[$330 >> 2] | 0;
            if ($1714) {
             _memcpy($356 | 0, $357 | 0, (($339 & 255) >>> 1) + 1 | 0) | 0;
             _free($357);
            } else {
             HEAP8[$356 >> 0] = HEAP8[$357 >> 0] | 0;
             _free($357);
            }
            HEAP8[$325 >> 0] = $365 << 1;
            break;
           }
           $351 = $346 + 1 | 0;
           $352 = _malloc($351) | 0;
           if (!($346 >>> 0 <= $348 >>> 0 & ($352 | 0) == 0)) {
            if ($1714) _memcpy($352 | 0, $325 + 1 | 0, (($339 & 255) >>> 1) + 1 | 0) | 0; else {
             $354 = HEAP32[$330 >> 2] | 0;
             HEAP8[$352 >> 0] = HEAP8[$354 >> 0] | 0;
             _free($354);
            }
            HEAP32[$325 >> 2] = $351 | 1;
            HEAP32[$332 >> 2] = $365;
            HEAP32[$330 >> 2] = $352;
           }
          }
         } while (0);
         HEAP32[$325 >> 2] = HEAP32[$0 >> 2];
         HEAP32[$325 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
         HEAP32[$325 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
         $__i$0$i$i$i$i$i486 = 0;
         while (1) {
          if (($__i$0$i$i$i$i$i486 | 0) == 3) break;
          HEAP32[$0 + ($__i$0$i$i$i$i$i486 << 2) >> 2] = 0;
          $__i$0$i$i$i$i$i486 = $__i$0$i$i$i$i$i486 + 1 | 0;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$305 >> 2] | 0) + -24 | 0, 14661) | 0;
         $372 = $1 + 4 | 0;
         $373 = $1 + 8 | 0;
         $374 = $1 + 1 | 0;
         $t$0$i489 = $301;
         while (1) {
          if ((HEAP8[$t$0$i489 >> 0] | 0) == 69) {
           $t$0$i489$lcssa = $t$0$i489;
           break;
          }
          $377 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$0$i489, $last, $db) | 0;
          if (($377 | 0) == ($t$0$i489 | 0) | ($377 | 0) == ($last | 0)) {
           $$6$i508 = $first;
           break L138;
          }
          $381 = HEAP32[$305 >> 2] | 0;
          if ((HEAP32[$db >> 2] | 0) == ($381 | 0)) {
           $$6$i508 = $first;
           break L138;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($1, $381 + -24 | 0);
          $384 = HEAP32[$305 >> 2] | 0;
          $385 = $384 + -24 | 0;
          $386 = $384;
          while (1) {
           if (($386 | 0) == ($385 | 0)) break;
           $388 = $386 + -24 | 0;
           HEAP32[$305 >> 2] = $388;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($388);
           $386 = HEAP32[$305 >> 2] | 0;
          }
          $389 = HEAP8[$1 >> 0] | 0;
          $391 = ($389 & 1) == 0;
          $395 = $391 ? ($389 & 255) >>> 1 : HEAP32[$372 >> 2] | 0;
          if ($395 | 0) {
           if ((HEAP32[$db >> 2] | 0) == ($385 | 0)) {
            label = 147;
            break;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($384 + -48 | 0, $391 ? $374 : HEAP32[$373 >> 2] | 0, $395) | 0;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          $t$0$i489 = $377;
         }
         if ((label | 0) == 147) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          $$6$i508 = $first;
          break;
         }
         $403 = HEAP32[$305 >> 2] | 0;
         if ((HEAP32[$db >> 2] | 0) == ($403 | 0)) $$6$i508 = $first; else {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($403 + -24 | 0, 14663) | 0;
          $$6$i508 = $t$0$i489$lcssa + 1 | 0;
         }
        }
       }
      } else $$6$i508 = $first; else $$6$i508 = $first; else $$6$i508 = $first; while (0);
      $$14 = $$6$i508;
      break L1;
      break;
     }
    case 109:
     {
      $407 = $first + 2 | 0;
      HEAP32[$18 >> 2] = 0;
      HEAP32[$18 + 4 >> 2] = 0;
      HEAP32[$18 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($18, 14748, 1);
      $408 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($407, $last, $18, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
      $$14 = ($408 | 0) == ($407 | 0) ? $first : $408;
      break L1;
      break;
     }
    case 111:
     {
      $410 = $first + 2 | 0;
      HEAP32[$19 >> 2] = 0;
      HEAP32[$19 + 4 >> 2] = 0;
      HEAP32[$19 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($19, 14750, 1);
      $411 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($410, $last, $19, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
      $$14 = ($411 | 0) == ($410 | 0) ? $first : $411;
      break L1;
      break;
     }
    case 118:
     {
      L197 : do if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 99) if ((HEAP8[$first + 1 >> 0] | 0) == 118) {
       $419 = $db + 63 | 0;
       $420 = HEAP8[$419 >> 0] | 0;
       HEAP8[$419 >> 0] = 0;
       $421 = $first + 2 | 0;
       $422 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($421, $last, $db) | 0;
       HEAP8[$419 >> 0] = $420;
       if (($422 | 0) == ($421 | 0) | ($422 | 0) == ($last | 0)) $$10$i = $first; else {
        if ((HEAP8[$422 >> 0] | 0) == 95) {
         $429 = $422 + 1 | 0;
         if (($429 | 0) == ($last | 0)) {
          $$10$i = $first;
          break;
         }
         $431 = HEAP8[$429 >> 0] | 0;
         L205 : do if ($431 << 24 >> 24 == 69) {
          $433 = $db + 4 | 0;
          $434 = HEAP32[$433 >> 2] | 0;
          $436 = HEAP32[$db + 8 >> 2] | 0;
          $438 = $436;
          if ($434 >>> 0 < $436 >>> 0) {
           HEAP32[$434 >> 2] = 0;
           HEAP32[$434 + 4 >> 2] = 0;
           HEAP32[$434 + 8 >> 2] = 0;
           HEAP32[$434 + 12 >> 2] = 0;
           HEAP32[$434 + 16 >> 2] = 0;
           HEAP32[$434 + 20 >> 2] = 0;
           $__i$0$i$i$i$i$i$i$i = 0;
           while (1) {
            if (($__i$0$i$i$i$i$i$i$i | 0) == 3) break;
            HEAP32[$434 + ($__i$0$i$i$i$i$i$i$i << 2) >> 2] = 0;
            $__i$0$i$i$i$i$i$i$i = $__i$0$i$i$i$i$i$i$i + 1 | 0;
           }
           $441 = $434 + 12 | 0;
           HEAP32[$441 >> 2] = 0;
           HEAP32[$441 + 4 >> 2] = 0;
           HEAP32[$441 + 8 >> 2] = 0;
           $__i$0$i$i1$i$i$i$i$i = 0;
           while (1) {
            if (($__i$0$i$i1$i$i$i$i$i | 0) == 3) break;
            HEAP32[$441 + ($__i$0$i$i1$i$i$i$i$i << 2) >> 2] = 0;
            $__i$0$i$i1$i$i$i$i$i = $__i$0$i$i1$i$i$i$i$i + 1 | 0;
           }
           HEAP32[$433 >> 2] = (HEAP32[$433 >> 2] | 0) + 24;
           $t$4$i447 = $429;
           break;
          }
          $448 = HEAP32[$db >> 2] | 0;
          $450 = ($434 - $448 | 0) / 24 | 0;
          $451 = $450 + 1 | 0;
          if ($451 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
          $454 = ($438 - $448 | 0) / 24 | 0;
          if ($454 >>> 0 < 89478485) {
           $456 = $454 << 1;
           $$0$i$i$i$i443 = $456 >>> 0 < $451 >>> 0 ? $451 : $456;
          } else $$0$i$i$i$i443 = 178956970;
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0, $$0$i$i$i$i443, $450, $db + 12 | 0);
          $459 = $0 + 8 | 0;
          $460 = HEAP32[$459 >> 2] | 0;
          HEAP32[$460 >> 2] = 0;
          HEAP32[$460 + 4 >> 2] = 0;
          HEAP32[$460 + 8 >> 2] = 0;
          HEAP32[$460 + 12 >> 2] = 0;
          HEAP32[$460 + 16 >> 2] = 0;
          HEAP32[$460 + 20 >> 2] = 0;
          $__i$0$i$i$i$i$i$i$i$i = 0;
          while (1) {
           if (($__i$0$i$i$i$i$i$i$i$i | 0) == 3) break;
           HEAP32[$460 + ($__i$0$i$i$i$i$i$i$i$i << 2) >> 2] = 0;
           $__i$0$i$i$i$i$i$i$i$i = $__i$0$i$i$i$i$i$i$i$i + 1 | 0;
          }
          $463 = $460 + 12 | 0;
          HEAP32[$463 >> 2] = 0;
          HEAP32[$463 + 4 >> 2] = 0;
          HEAP32[$463 + 8 >> 2] = 0;
          $__i$0$i$i1$i$i$i$i$i$i = 0;
          while (1) {
           if (($__i$0$i$i1$i$i$i$i$i$i | 0) == 3) break;
           HEAP32[$463 + ($__i$0$i$i1$i$i$i$i$i$i << 2) >> 2] = 0;
           $__i$0$i$i1$i$i$i$i$i$i = $__i$0$i$i1$i$i$i$i$i$i + 1 | 0;
          }
          HEAP32[$459 >> 2] = $460 + 24;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $0);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
          $t$4$i447 = $429;
         } else {
          $467 = $431;
          $t$1$i444 = $429;
          while (1) {
           if ($467 << 24 >> 24 == 69) {
            $t$4$i447 = $t$1$i444;
            break L205;
           }
           $469 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$1$i444, $last, $db) | 0;
           $or$cond25$i = ($469 | 0) == ($t$1$i444 | 0) | ($469 | 0) == ($last | 0);
           if ($or$cond25$i) {
            $$10$i = $first;
            break L197;
           }
           $467 = HEAP8[($or$cond25$i ? $t$1$i444 : $469) >> 0] | 0;
           $t$1$i444 = $469;
          }
         } while (0);
         $t$5$i = $t$4$i447 + 1 | 0;
        } else {
         $427 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($422, $last, $db) | 0;
         if (($427 | 0) == ($422 | 0)) {
          $$10$i = $first;
          break;
         } else $t$5$i = $427;
        }
        $473 = $db + 4 | 0;
        $474 = HEAP32[$473 >> 2] | 0;
        if ((($474 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$10$i = $first; else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $474 + -24 | 0);
         $481 = HEAP32[$473 >> 2] | 0;
         $482 = $481 + -24 | 0;
         $483 = $481;
         while (1) {
          if (($483 | 0) == ($482 | 0)) break;
          $485 = $483 + -24 | 0;
          HEAP32[$473 >> 2] = $485;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($485);
          $483 = HEAP32[$473 >> 2] | 0;
         }
         $486 = $481 + -48 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $486);
         $487 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 14661) | 0;
         HEAP32[$5 >> 2] = HEAP32[$487 >> 2];
         HEAP32[$5 + 4 >> 2] = HEAP32[$487 + 4 >> 2];
         HEAP32[$5 + 8 >> 2] = HEAP32[$487 + 8 >> 2];
         $__i$0$i$i$i$i451 = 0;
         while (1) {
          if (($__i$0$i$i$i$i451 | 0) == 3) break;
          HEAP32[$487 + ($__i$0$i$i$i$i451 << 2) >> 2] = 0;
          $__i$0$i$i$i$i451 = $__i$0$i$i$i$i451 + 1 | 0;
         }
         $490 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 14752) | 0;
         HEAP32[$4 >> 2] = HEAP32[$490 >> 2];
         HEAP32[$4 + 4 >> 2] = HEAP32[$490 + 4 >> 2];
         HEAP32[$4 + 8 >> 2] = HEAP32[$490 + 8 >> 2];
         $__i$0$i$i$i26$i = 0;
         while (1) {
          if (($__i$0$i$i$i26$i | 0) == 3) break;
          HEAP32[$490 + ($__i$0$i$i$i26$i << 2) >> 2] = 0;
          $__i$0$i$i$i26$i = $__i$0$i$i$i26$i + 1 | 0;
         }
         $493 = HEAP8[$0 >> 0] | 0;
         $495 = ($493 & 1) == 0;
         $505 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4, $495 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $495 ? ($493 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
         HEAP32[$3 >> 2] = HEAP32[$505 >> 2];
         HEAP32[$3 + 4 >> 2] = HEAP32[$505 + 4 >> 2];
         HEAP32[$3 + 8 >> 2] = HEAP32[$505 + 8 >> 2];
         $__i$0$i$i$i29$i = 0;
         while (1) {
          if (($__i$0$i$i$i29$i | 0) == 3) break;
          HEAP32[$505 + ($__i$0$i$i$i29$i << 2) >> 2] = 0;
          $__i$0$i$i$i29$i = $__i$0$i$i$i29$i + 1 | 0;
         }
         $508 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 14663) | 0;
         HEAP32[$2 >> 2] = HEAP32[$508 >> 2];
         HEAP32[$2 + 4 >> 2] = HEAP32[$508 + 4 >> 2];
         HEAP32[$2 + 8 >> 2] = HEAP32[$508 + 8 >> 2];
         $__i$0$i$i$i32$i = 0;
         while (1) {
          if (($__i$0$i$i$i32$i | 0) == 3) break;
          HEAP32[$508 + ($__i$0$i$i$i32$i << 2) >> 2] = 0;
          $__i$0$i$i$i32$i = $__i$0$i$i$i32$i + 1 | 0;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($486, $1);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         $$10$i = $t$5$i;
        }
       }
      } else $$10$i = $first; else $$10$i = $first; else $$10$i = $first; while (0);
      $$14 = $$10$i;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 100:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 97:
     {
      $514 = $t$0 + 2 | 0;
      $515 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($514, $last, $db) | 0;
      if (($515 | 0) == ($514 | 0)) {
       $$14 = $first;
       break L1;
      }
      $518 = $db + 4 | 0;
      $519 = HEAP32[$518 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($519 | 0)) {
       $$14 = $first;
       break L1;
      }
      $521 = $519 + -24 | 0;
      HEAP32[$22 >> 2] = 0;
      HEAP32[$22 + 4 >> 2] = 0;
      HEAP32[$22 + 8 >> 2] = 0;
      L266 : do if ($parsed_gs$0$off0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($22, 14755, 2); else {
       $__i$0$i$i = 0;
       while (1) {
        if (($__i$0$i$i | 0) == 3) break L266;
        HEAP32[$22 + ($__i$0$i$i << 2) >> 2] = 0;
        $__i$0$i$i = $__i$0$i$i + 1 | 0;
       }
      } while (0);
      $524 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($22, 14758) | 0;
      HEAP32[$21 >> 2] = HEAP32[$524 >> 2];
      HEAP32[$21 + 4 >> 2] = HEAP32[$524 + 4 >> 2];
      HEAP32[$21 + 8 >> 2] = HEAP32[$524 + 8 >> 2];
      $__i$0$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i | 0) == 3) break;
       HEAP32[$524 + ($__i$0$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($23, (HEAP32[$518 >> 2] | 0) + -24 | 0);
      $529 = HEAP8[$23 >> 0] | 0;
      $531 = ($529 & 1) == 0;
      $541 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($21, $531 ? $23 + 1 | 0 : HEAP32[$23 + 8 >> 2] | 0, $531 ? ($529 & 255) >>> 1 : HEAP32[$23 + 4 >> 2] | 0) | 0;
      HEAP32[$20 >> 2] = HEAP32[$541 >> 2];
      HEAP32[$20 + 4 >> 2] = HEAP32[$541 + 4 >> 2];
      HEAP32[$20 + 8 >> 2] = HEAP32[$541 + 8 >> 2];
      $__i$0$i$i$i116 = 0;
      while (1) {
       if (($__i$0$i$i$i116 | 0) == 3) break;
       HEAP32[$541 + ($__i$0$i$i$i116 << 2) >> 2] = 0;
       $__i$0$i$i$i116 = $__i$0$i$i$i116 + 1 | 0;
      }
      do if (!(HEAP8[$521 >> 0] & 1)) {
       HEAP8[$521 + 1 >> 0] = 0;
       HEAP8[$521 >> 0] = 0;
      } else {
       $548 = $519 + -16 | 0;
       HEAP8[HEAP32[$548 >> 2] >> 0] = 0;
       $550 = $519 + -20 | 0;
       HEAP32[$550 >> 2] = 0;
       $$pre$i$i$i = HEAP8[$521 >> 0] | 0;
       if (!($$pre$i$i$i & 1)) {
        $557 = $$pre$i$i$i;
        $566 = 10;
       } else {
        $553 = HEAP32[$521 >> 2] | 0;
        $557 = $553 & 255;
        $566 = ($553 & -2) + -1 | 0;
       }
       if (!($557 & 1)) {
        $560 = ($557 & 255) >>> 1;
        if (($557 & 255) < 22) {
         $1715 = 1;
         $564 = 10;
         $583 = $560;
        } else {
         $1715 = 1;
         $564 = ($560 + 16 & 240) + -1 | 0;
         $583 = $560;
        }
       } else {
        $1715 = 0;
        $564 = 10;
        $583 = 0;
       }
       if (($564 | 0) != ($566 | 0)) {
        if (($564 | 0) == 10) {
         $574 = $521 + 1 | 0;
         $575 = HEAP32[$548 >> 2] | 0;
         if ($1715) {
          _memcpy($574 | 0, $575 | 0, (($557 & 255) >>> 1) + 1 | 0) | 0;
          _free($575);
         } else {
          HEAP8[$574 >> 0] = HEAP8[$575 >> 0] | 0;
          _free($575);
         }
         HEAP8[$521 >> 0] = $583 << 1;
         break;
        }
        $569 = $564 + 1 | 0;
        $570 = _malloc($569) | 0;
        if (!($564 >>> 0 <= $566 >>> 0 & ($570 | 0) == 0)) {
         if ($1715) _memcpy($570 | 0, $521 + 1 | 0, (($557 & 255) >>> 1) + 1 | 0) | 0; else {
          $572 = HEAP32[$548 >> 2] | 0;
          HEAP8[$570 >> 0] = HEAP8[$572 >> 0] | 0;
          _free($572);
         }
         HEAP32[$521 >> 2] = $569 | 1;
         HEAP32[$550 >> 2] = $583;
         HEAP32[$548 >> 2] = $570;
        }
       }
      } while (0);
      HEAP32[$521 >> 2] = HEAP32[$20 >> 2];
      HEAP32[$521 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
      HEAP32[$521 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
      $__i$0$i$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i$i | 0) == 3) break;
       HEAP32[$20 + ($__i$0$i$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
      $$14 = $515;
      break L1;
      break;
     }
    case 99:
     {
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 100) if ((HEAP8[$first + 1 >> 0] | 0) == 99) {
       $594 = $first + 2 | 0;
       $595 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($594, $last, $db) | 0;
       if (($595 | 0) == ($594 | 0)) $$311$i439 = $first; else {
        $597 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($595, $last, $db) | 0;
        if (($597 | 0) == ($595 | 0)) $$311$i439 = $first; else {
         $599 = $db + 4 | 0;
         $600 = HEAP32[$599 >> 2] | 0;
         if ((($600 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$311$i439 = $first; else {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $600 + -24 | 0);
          $607 = HEAP32[$599 >> 2] | 0;
          $608 = $607 + -24 | 0;
          $609 = $607;
          while (1) {
           if (($609 | 0) == ($608 | 0)) break;
           $611 = $609 + -24 | 0;
           HEAP32[$599 >> 2] = $611;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($611);
           $609 = HEAP32[$599 >> 2] | 0;
          }
          $612 = $607 + -48 | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $612);
          $613 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 14768) | 0;
          HEAP32[$5 >> 2] = HEAP32[$613 >> 2];
          HEAP32[$5 + 4 >> 2] = HEAP32[$613 + 4 >> 2];
          HEAP32[$5 + 8 >> 2] = HEAP32[$613 + 8 >> 2];
          $__i$0$i$i$i$i408 = 0;
          while (1) {
           if (($__i$0$i$i$i$i408 | 0) == 3) break;
           HEAP32[$613 + ($__i$0$i$i$i$i408 << 2) >> 2] = 0;
           $__i$0$i$i$i$i408 = $__i$0$i$i$i$i408 + 1 | 0;
          }
          $616 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 14745) | 0;
          HEAP32[$4 >> 2] = HEAP32[$616 >> 2];
          HEAP32[$4 + 4 >> 2] = HEAP32[$616 + 4 >> 2];
          HEAP32[$4 + 8 >> 2] = HEAP32[$616 + 8 >> 2];
          $__i$0$i$i$i17$i412 = 0;
          while (1) {
           if (($__i$0$i$i$i17$i412 | 0) == 3) break;
           HEAP32[$616 + ($__i$0$i$i$i17$i412 << 2) >> 2] = 0;
           $__i$0$i$i$i17$i412 = $__i$0$i$i$i17$i412 + 1 | 0;
          }
          $619 = HEAP8[$0 >> 0] | 0;
          $621 = ($619 & 1) == 0;
          $631 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4, $621 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $621 ? ($619 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
          HEAP32[$3 >> 2] = HEAP32[$631 >> 2];
          HEAP32[$3 + 4 >> 2] = HEAP32[$631 + 4 >> 2];
          HEAP32[$3 + 8 >> 2] = HEAP32[$631 + 8 >> 2];
          $__i$0$i$i$i20$i416 = 0;
          while (1) {
           if (($__i$0$i$i$i20$i416 | 0) == 3) break;
           HEAP32[$631 + ($__i$0$i$i$i20$i416 << 2) >> 2] = 0;
           $__i$0$i$i$i20$i416 = $__i$0$i$i$i20$i416 + 1 | 0;
          }
          $634 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 14663) | 0;
          HEAP32[$2 >> 2] = HEAP32[$634 >> 2];
          HEAP32[$2 + 4 >> 2] = HEAP32[$634 + 4 >> 2];
          HEAP32[$2 + 8 >> 2] = HEAP32[$634 + 8 >> 2];
          $__i$0$i$i$i23$i420 = 0;
          while (1) {
           if (($__i$0$i$i$i23$i420 | 0) == 3) break;
           HEAP32[$634 + ($__i$0$i$i$i23$i420 << 2) >> 2] = 0;
           $__i$0$i$i$i23$i420 = $__i$0$i$i$i23$i420 + 1 | 0;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($612, $1);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
          $$311$i439 = $597;
         }
        }
       }
      } else $$311$i439 = $first; else $$311$i439 = $first; else $$311$i439 = $first;
      $$14 = $$311$i439;
      break L1;
      break;
     }
    case 101:
     {
      $637 = $first + 2 | 0;
      HEAP32[$24 >> 2] = 0;
      HEAP32[$24 + 4 >> 2] = 0;
      HEAP32[$24 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($24, 14782, 1);
      $638 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($637, $last, $24, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
      $$14 = ($638 | 0) == ($637 | 0) ? $first : $638;
      break L1;
      break;
     }
    case 108:
     {
      $640 = $t$0 + 2 | 0;
      $641 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($640, $last, $db) | 0;
      if (($641 | 0) == ($640 | 0)) {
       $$14 = $first;
       break L1;
      }
      $644 = $db + 4 | 0;
      $645 = HEAP32[$644 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($645 | 0)) {
       $$14 = $first;
       break L1;
      }
      $647 = $645 + -24 | 0;
      HEAP32[$27 >> 2] = 0;
      HEAP32[$27 + 4 >> 2] = 0;
      HEAP32[$27 + 8 >> 2] = 0;
      L342 : do if ($parsed_gs$0$off0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($27, 14755, 2); else {
       $__i$0$i$i119 = 0;
       while (1) {
        if (($__i$0$i$i119 | 0) == 3) break L342;
        HEAP32[$27 + ($__i$0$i$i119 << 2) >> 2] = 0;
        $__i$0$i$i119 = $__i$0$i$i119 + 1 | 0;
       }
      } while (0);
      $650 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($27, 14784) | 0;
      HEAP32[$26 >> 2] = HEAP32[$650 >> 2];
      HEAP32[$26 + 4 >> 2] = HEAP32[$650 + 4 >> 2];
      HEAP32[$26 + 8 >> 2] = HEAP32[$650 + 8 >> 2];
      $__i$0$i$i$i122 = 0;
      while (1) {
       if (($__i$0$i$i$i122 | 0) == 3) break;
       HEAP32[$650 + ($__i$0$i$i$i122 << 2) >> 2] = 0;
       $__i$0$i$i$i122 = $__i$0$i$i$i122 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($28, (HEAP32[$644 >> 2] | 0) + -24 | 0);
      $655 = HEAP8[$28 >> 0] | 0;
      $657 = ($655 & 1) == 0;
      $667 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($26, $657 ? $28 + 1 | 0 : HEAP32[$28 + 8 >> 2] | 0, $657 ? ($655 & 255) >>> 1 : HEAP32[$28 + 4 >> 2] | 0) | 0;
      HEAP32[$25 >> 2] = HEAP32[$667 >> 2];
      HEAP32[$25 + 4 >> 2] = HEAP32[$667 + 4 >> 2];
      HEAP32[$25 + 8 >> 2] = HEAP32[$667 + 8 >> 2];
      $__i$0$i$i$i126 = 0;
      while (1) {
       if (($__i$0$i$i$i126 | 0) == 3) break;
       HEAP32[$667 + ($__i$0$i$i$i126 << 2) >> 2] = 0;
       $__i$0$i$i$i126 = $__i$0$i$i$i126 + 1 | 0;
      }
      do if (!(HEAP8[$647 >> 0] & 1)) {
       HEAP8[$647 + 1 >> 0] = 0;
       HEAP8[$647 >> 0] = 0;
      } else {
       $674 = $645 + -16 | 0;
       HEAP8[HEAP32[$674 >> 2] >> 0] = 0;
       $676 = $645 + -20 | 0;
       HEAP32[$676 >> 2] = 0;
       $$pre$i$i$i131 = HEAP8[$647 >> 0] | 0;
       if (!($$pre$i$i$i131 & 1)) {
        $683 = $$pre$i$i$i131;
        $692 = 10;
       } else {
        $679 = HEAP32[$647 >> 2] | 0;
        $683 = $679 & 255;
        $692 = ($679 & -2) + -1 | 0;
       }
       if (!($683 & 1)) {
        $686 = ($683 & 255) >>> 1;
        if (($683 & 255) < 22) {
         $1716 = 1;
         $690 = 10;
         $709 = $686;
        } else {
         $1716 = 1;
         $690 = ($686 + 16 & 240) + -1 | 0;
         $709 = $686;
        }
       } else {
        $1716 = 0;
        $690 = 10;
        $709 = 0;
       }
       if (($690 | 0) != ($692 | 0)) {
        if (($690 | 0) == 10) {
         $700 = $647 + 1 | 0;
         $701 = HEAP32[$674 >> 2] | 0;
         if ($1716) {
          _memcpy($700 | 0, $701 | 0, (($683 & 255) >>> 1) + 1 | 0) | 0;
          _free($701);
         } else {
          HEAP8[$700 >> 0] = HEAP8[$701 >> 0] | 0;
          _free($701);
         }
         HEAP8[$647 >> 0] = $709 << 1;
         break;
        }
        $695 = $690 + 1 | 0;
        $696 = _malloc($695) | 0;
        if (!($690 >>> 0 <= $692 >>> 0 & ($696 | 0) == 0)) {
         if ($1716) _memcpy($696 | 0, $647 + 1 | 0, (($683 & 255) >>> 1) + 1 | 0) | 0; else {
          $698 = HEAP32[$674 >> 2] | 0;
          HEAP8[$696 >> 0] = HEAP8[$698 >> 0] | 0;
          _free($698);
         }
         HEAP32[$647 >> 2] = $695 | 1;
         HEAP32[$676 >> 2] = $709;
         HEAP32[$674 >> 2] = $696;
        }
       }
      } while (0);
      HEAP32[$647 >> 2] = HEAP32[$25 >> 2];
      HEAP32[$647 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
      HEAP32[$647 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
      $__i$0$i$i$i$i146 = 0;
      while (1) {
       if (($__i$0$i$i$i$i146 | 0) == 3) break;
       HEAP32[$25 + ($__i$0$i$i$i$i146 << 2) >> 2] = 0;
       $__i$0$i$i$i$i146 = $__i$0$i$i$i$i146 + 1 | 0;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($25);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
      $$14 = $641;
      break L1;
      break;
     }
    case 110:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 115:
     {
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 100) if ((HEAP8[$first + 1 >> 0] | 0) == 115) {
       $721 = $first + 2 | 0;
       $722 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($721, $last, $db) | 0;
       if (($722 | 0) == ($721 | 0)) $$3$i403 = $first; else {
        $724 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($722, $last, $db) | 0;
        if (($724 | 0) == ($722 | 0)) $$3$i403 = $first; else {
         $726 = $db + 4 | 0;
         $727 = HEAP32[$726 >> 2] | 0;
         if ((($727 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3$i403 = $first; else {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $727 + -24 | 0);
          $734 = HEAP32[$726 >> 2] | 0;
          $735 = $734 + -24 | 0;
          $736 = $734;
          while (1) {
           if (($736 | 0) == ($735 | 0)) break;
           $738 = $736 + -24 | 0;
           HEAP32[$726 >> 2] = $738;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($738);
           $736 = HEAP32[$726 >> 2] | 0;
          }
          __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($1, 15699, $0);
          $740 = HEAP8[$1 >> 0] | 0;
          $742 = ($740 & 1) == 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($734 + -48 | 0, $742 ? $1 + 1 | 0 : HEAP32[$1 + 8 >> 2] | 0, $742 ? ($740 & 255) >>> 1 : HEAP32[$1 + 4 >> 2] | 0) | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
          $$3$i403 = $724;
         }
        }
       }
      } else $$3$i403 = $first; else $$3$i403 = $first; else $$3$i403 = $first;
      $$14 = $$3$i403;
      break L1;
      break;
     }
    case 116:
     {
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 100) if ((HEAP8[$first + 1 >> 0] | 0) == 116) {
       $758 = $first + 2 | 0;
       $759 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($758, $last, $db) | 0;
       if (($759 | 0) == ($758 | 0)) $$3$i388 = $first; else {
        $761 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($759, $last, $db) | 0;
        if (($761 | 0) == ($759 | 0)) $$3$i388 = $first; else {
         $763 = $db + 4 | 0;
         $764 = HEAP32[$763 >> 2] | 0;
         if ((($764 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3$i388 = $first; else {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $764 + -24 | 0);
          $771 = HEAP32[$763 >> 2] | 0;
          $772 = $771 + -24 | 0;
          $773 = $771;
          while (1) {
           if (($773 | 0) == ($772 | 0)) break;
           $775 = $773 + -24 | 0;
           HEAP32[$763 >> 2] = $775;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($775);
           $773 = HEAP32[$763 >> 2] | 0;
          }
          __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($1, 15702, $0);
          $777 = HEAP8[$1 >> 0] | 0;
          $779 = ($777 & 1) == 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($771 + -48 | 0, $779 ? $1 + 1 | 0 : HEAP32[$1 + 8 >> 2] | 0, $779 ? ($777 & 255) >>> 1 : HEAP32[$1 + 4 >> 2] | 0) | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
          $$3$i388 = $761;
         }
        }
       }
      } else $$3$i388 = $first; else $$3$i388 = $first; else $$3$i388 = $first;
      $$14 = $$3$i388;
      break L1;
      break;
     }
    case 118:
     {
      $789 = $first + 2 | 0;
      HEAP32[$29 >> 2] = 0;
      HEAP32[$29 + 4 >> 2] = 0;
      HEAP32[$29 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($29, 15704, 1);
      $790 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($789, $last, $29, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
      $$14 = ($790 | 0) == ($789 | 0) ? $first : $790;
      break L1;
      break;
     }
    case 86:
     {
      $792 = $first + 2 | 0;
      HEAP32[$30 >> 2] = 0;
      HEAP32[$30 + 4 >> 2] = 0;
      HEAP32[$30 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($30, 15706, 2);
      $793 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($792, $last, $30, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
      $$14 = ($793 | 0) == ($792 | 0) ? $first : $793;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 101:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 111:
     {
      $798 = $first + 2 | 0;
      HEAP32[$31 >> 2] = 0;
      HEAP32[$31 + 4 >> 2] = 0;
      HEAP32[$31 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($31, 15709, 1);
      $799 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($798, $last, $31, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
      $$14 = ($799 | 0) == ($798 | 0) ? $first : $799;
      break L1;
      break;
     }
    case 79:
     {
      $801 = $first + 2 | 0;
      HEAP32[$32 >> 2] = 0;
      HEAP32[$32 + 4 >> 2] = 0;
      HEAP32[$32 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($32, 15711, 2);
      $802 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($801, $last, $32, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($32);
      $$14 = ($802 | 0) == ($801 | 0) ? $first : $802;
      break L1;
      break;
     }
    case 113:
     {
      $804 = $first + 2 | 0;
      HEAP32[$33 >> 2] = 0;
      HEAP32[$33 + 4 >> 2] = 0;
      HEAP32[$33 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($33, 15714, 2);
      $805 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($804, $last, $33, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($33);
      $$14 = ($805 | 0) == ($804 | 0) ? $first : $805;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 103:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 101:
     {
      $810 = $first + 2 | 0;
      HEAP32[$34 >> 2] = 0;
      HEAP32[$34 + 4 >> 2] = 0;
      HEAP32[$34 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($34, 15717, 2);
      $811 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($810, $last, $34, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
      $$14 = ($811 | 0) == ($810 | 0) ? $first : $811;
      break L1;
      break;
     }
    case 116:
     {
      $813 = $first + 2 | 0;
      HEAP32[$35 >> 2] = 0;
      HEAP32[$35 + 4 >> 2] = 0;
      HEAP32[$35 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($35, 14708, 1);
      $814 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($813, $last, $35, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
      $$14 = ($814 | 0) == ($813 | 0) ? $first : $814;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 105:
   {
    if ((HEAP8[$t$0 + 1 >> 0] | 0) != 120) {
     $$14 = $first;
     break L1;
    }
    $819 = $first + 2 | 0;
    $820 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($819, $last, $db) | 0;
    if (($820 | 0) == ($819 | 0)) {
     $$14 = $first;
     break L1;
    }
    $822 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($820, $last, $db) | 0;
    $824 = $db + 4 | 0;
    if (($822 | 0) == ($820 | 0)) {
     $861 = HEAP32[$824 >> 2] | 0;
     $862 = $861 + -24 | 0;
     $863 = $861;
     while (1) {
      if (($863 | 0) == ($862 | 0)) {
       $$14 = $first;
       break L1;
      }
      $865 = $863 + -24 | 0;
      HEAP32[$824 >> 2] = $865;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($865);
      $863 = HEAP32[$824 >> 2] | 0;
     }
    }
    $825 = HEAP32[$824 >> 2] | 0;
    if ((($825 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$14 = $first;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $825 + -24 | 0);
    $832 = HEAP32[$824 >> 2] | 0;
    $833 = $832 + -24 | 0;
    $834 = $832;
    while (1) {
     if (($834 | 0) == ($833 | 0)) break;
     $836 = $834 + -24 | 0;
     HEAP32[$824 >> 2] = $836;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($836);
     $834 = HEAP32[$824 >> 2] | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($1, $832 + -48 | 0);
    $839 = (HEAP32[$824 >> 2] | 0) + -24 | 0;
    __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($40, 14661, $1);
    $840 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($40, 15720) | 0;
    HEAP32[$39 >> 2] = HEAP32[$840 >> 2];
    HEAP32[$39 + 4 >> 2] = HEAP32[$840 + 4 >> 2];
    HEAP32[$39 + 8 >> 2] = HEAP32[$840 + 8 >> 2];
    $__i$0$i$i$i149 = 0;
    while (1) {
     if (($__i$0$i$i$i149 | 0) == 3) break;
     HEAP32[$840 + ($__i$0$i$i$i149 << 2) >> 2] = 0;
     $__i$0$i$i$i149 = $__i$0$i$i$i149 + 1 | 0;
    }
    $843 = HEAP8[$0 >> 0] | 0;
    $845 = ($843 & 1) == 0;
    $855 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($39, $845 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $845 ? ($843 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
    HEAP32[$38 >> 2] = HEAP32[$855 >> 2];
    HEAP32[$38 + 4 >> 2] = HEAP32[$855 + 4 >> 2];
    HEAP32[$38 + 8 >> 2] = HEAP32[$855 + 8 >> 2];
    $__i$0$i$i$i153 = 0;
    while (1) {
     if (($__i$0$i$i$i153 | 0) == 3) break;
     HEAP32[$855 + ($__i$0$i$i$i153 << 2) >> 2] = 0;
     $__i$0$i$i$i153 = $__i$0$i$i$i153 + 1 | 0;
    }
    $858 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($38, 14659) | 0;
    HEAP32[$37 >> 2] = HEAP32[$858 >> 2];
    HEAP32[$37 + 4 >> 2] = HEAP32[$858 + 4 >> 2];
    HEAP32[$37 + 8 >> 2] = HEAP32[$858 + 8 >> 2];
    $__i$0$i$i$i156 = 0;
    while (1) {
     if (($__i$0$i$i$i156 | 0) == 3) break;
     HEAP32[$858 + ($__i$0$i$i$i156 << 2) >> 2] = 0;
     $__i$0$i$i$i156 = $__i$0$i$i$i156 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($36, $37);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($839, $36);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($38);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($39);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
    $$14 = $822;
    break L1;
    break;
   }
  case 108:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 101:
     {
      $869 = $first + 2 | 0;
      HEAP32[$41 >> 2] = 0;
      HEAP32[$41 + 4 >> 2] = 0;
      HEAP32[$41 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($41, 15723, 2);
      $870 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($869, $last, $41, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($41);
      $$14 = ($870 | 0) == ($869 | 0) ? $first : $870;
      break L1;
      break;
     }
    case 115:
     {
      $872 = $first + 2 | 0;
      HEAP32[$42 >> 2] = 0;
      HEAP32[$42 + 4 >> 2] = 0;
      HEAP32[$42 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($42, 15726, 2);
      $873 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($872, $last, $42, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($42);
      $$14 = ($873 | 0) == ($872 | 0) ? $first : $873;
      break L1;
      break;
     }
    case 83:
     {
      $875 = $first + 2 | 0;
      HEAP32[$43 >> 2] = 0;
      HEAP32[$43 + 4 >> 2] = 0;
      HEAP32[$43 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($43, 15729, 3);
      $876 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($875, $last, $43, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($43);
      $$14 = ($876 | 0) == ($875 | 0) ? $first : $876;
      break L1;
      break;
     }
    case 116:
     {
      $878 = $first + 2 | 0;
      HEAP32[$44 >> 2] = 0;
      HEAP32[$44 + 4 >> 2] = 0;
      HEAP32[$44 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($44, 15293, 1);
      $879 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($878, $last, $44, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($44);
      $$14 = ($879 | 0) == ($878 | 0) ? $first : $879;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 109:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 105:
     {
      $884 = $first + 2 | 0;
      HEAP32[$45 >> 2] = 0;
      HEAP32[$45 + 4 >> 2] = 0;
      HEAP32[$45 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($45, 15733, 1);
      $885 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($884, $last, $45, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($45);
      $$14 = ($885 | 0) == ($884 | 0) ? $first : $885;
      break L1;
      break;
     }
    case 73:
     {
      $887 = $first + 2 | 0;
      HEAP32[$46 >> 2] = 0;
      HEAP32[$46 + 4 >> 2] = 0;
      HEAP32[$46 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($46, 15735, 2);
      $888 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($887, $last, $46, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($46);
      $$14 = ($888 | 0) == ($887 | 0) ? $first : $888;
      break L1;
      break;
     }
    case 108:
     {
      $890 = $first + 2 | 0;
      HEAP32[$47 >> 2] = 0;
      HEAP32[$47 + 4 >> 2] = 0;
      HEAP32[$47 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($47, 14782, 1);
      $891 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($890, $last, $47, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($47);
      $$14 = ($891 | 0) == ($890 | 0) ? $first : $891;
      break L1;
      break;
     }
    case 76:
     {
      $893 = $first + 2 | 0;
      HEAP32[$48 >> 2] = 0;
      HEAP32[$48 + 4 >> 2] = 0;
      HEAP32[$48 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($48, 15738, 2);
      $894 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($893, $last, $48, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($48);
      $$14 = ($894 | 0) == ($893 | 0) ? $first : $894;
      break L1;
      break;
     }
    case 109:
     {
      $896 = $first + 2 | 0;
      if (($896 | 0) != ($last | 0)) if ((HEAP8[$896 >> 0] | 0) == 95) {
       $900 = $first + 3 | 0;
       HEAP32[$49 >> 2] = 0;
       HEAP32[$49 + 4 >> 2] = 0;
       HEAP32[$49 + 8 >> 2] = 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($49, 15741, 2);
       $901 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($900, $last, $49, $db) | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
       $$14 = ($901 | 0) == ($900 | 0) ? $first : $901;
       break L1;
      }
      $903 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($896, $last, $db) | 0;
      if (($903 | 0) == ($896 | 0)) {
       $$14 = $first;
       break L1;
      }
      $907 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($907 | 0)) {
       $$14 = $first;
       break L1;
      }
      $909 = $907 + -24 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($53, $909);
      $910 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($53, 0, 14661) | 0;
      HEAP32[$52 >> 2] = HEAP32[$910 >> 2];
      HEAP32[$52 + 4 >> 2] = HEAP32[$910 + 4 >> 2];
      HEAP32[$52 + 8 >> 2] = HEAP32[$910 + 8 >> 2];
      $__i$0$i$i$i162 = 0;
      while (1) {
       if (($__i$0$i$i$i162 | 0) == 3) break;
       HEAP32[$910 + ($__i$0$i$i$i162 << 2) >> 2] = 0;
       $__i$0$i$i$i162 = $__i$0$i$i$i162 + 1 | 0;
      }
      $913 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($52, 15744) | 0;
      HEAP32[$51 >> 2] = HEAP32[$913 >> 2];
      HEAP32[$51 + 4 >> 2] = HEAP32[$913 + 4 >> 2];
      HEAP32[$51 + 8 >> 2] = HEAP32[$913 + 8 >> 2];
      $__i$0$i$i$i165 = 0;
      while (1) {
       if (($__i$0$i$i$i165 | 0) == 3) break;
       HEAP32[$913 + ($__i$0$i$i$i165 << 2) >> 2] = 0;
       $__i$0$i$i$i165 = $__i$0$i$i$i165 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($50, $51);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($909, $50);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($51);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($52);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
      $$14 = $903;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 110:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 119:
    case 97:
     {
      L479 : do if ($85) {
       $919 = HEAP8[$first >> 0] | 0;
       if ($919 << 24 >> 24 == 103) {
        $923 = (HEAP8[$first + 1 >> 0] | 0) == 115;
        $$first$i = $923 ? $first + 2 | 0 : $first;
        $925 = HEAP8[$$first$i >> 0] | 0;
        $parsed_gs$0$off0$i = $923;
        $t$0$i333 = $$first$i;
       } else {
        $925 = $919;
        $parsed_gs$0$off0$i = 0;
        $t$0$i333 = $first;
       }
       if ($925 << 24 >> 24 == 110) {
        $928 = HEAP8[$t$0$i333 + 1 >> 0] | 0;
        switch ($928 << 24 >> 24) {
        case 97:
        case 119:
         break;
        default:
         {
          $$16$i376 = $first;
          break L479;
         }
        }
        $929 = $928 << 24 >> 24 == 97;
        $930 = $t$0$i333 + 2 | 0;
        L486 : do if (($930 | 0) != ($last | 0)) {
         $has_expr_list$0$off0$i = 0;
         $t$1$i = $930;
         while (1) {
          if ((HEAP8[$t$1$i >> 0] | 0) == 95) {
           $has_expr_list$0$off0$i$lcssa = $has_expr_list$0$off0$i;
           $t$1$i$lcssa = $t$1$i;
           break;
          }
          $t$1$i$looptemp = $t$1$i;
          $t$1$i = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$1$i, $last, $db) | 0;
          $935 = ($t$1$i | 0) == ($t$1$i$looptemp | 0);
          $936 = ($t$1$i | 0) == ($last | 0);
          if ($935 | $936) break L486; else $has_expr_list$0$off0$i = $has_expr_list$0$off0$i | ($935 | $936) ^ 1;
         }
         $937 = $t$1$i$lcssa + 1 | 0;
         $938 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($937, $last, $db) | 0;
         if (!(($938 | 0) == ($937 | 0) | ($938 | 0) == ($last | 0))) {
          $944 = HEAP8[$938 >> 0] | 0;
          L492 : do if (($81 - $938 | 0) > 2 & $944 << 24 >> 24 == 112) {
           if ((HEAP8[$938 + 1 >> 0] | 0) != 105) break L486;
           $t$3$i = $938 + 2 | 0;
           while (1) {
            if ((HEAP8[$t$3$i >> 0] | 0) == 69) {
             $has_init$0$off0$i734 = 1;
             $t$4$i733 = $t$3$i;
             break L492;
            }
            $t$3$i$looptemp = $t$3$i;
            $t$3$i = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$3$i, $last, $db) | 0;
            if (($t$3$i | 0) == ($t$3$i$looptemp | 0) | ($t$3$i | 0) == ($last | 0)) break L486;
           }
          } else if ($944 << 24 >> 24 == 69) {
           $has_init$0$off0$i734 = 0;
           $t$4$i733 = $938;
          } else break L486; while (0);
          HEAP32[$1 >> 2] = 0;
          HEAP32[$1 + 4 >> 2] = 0;
          HEAP32[$1 + 8 >> 2] = 0;
          $__i$0$i$i$i334 = 0;
          while (1) {
           if (($__i$0$i$i$i334 | 0) == 3) break;
           HEAP32[$1 + ($__i$0$i$i$i334 << 2) >> 2] = 0;
           $__i$0$i$i$i334 = $__i$0$i$i$i334 + 1 | 0;
          }
          L504 : do if ($has_init$0$off0$i734) {
           $959 = $db + 4 | 0;
           $960 = HEAP32[$959 >> 2] | 0;
           if ((HEAP32[$db >> 2] | 0) == ($960 | 0)) {
            $$128$i = $first;
            $$421$i = 1;
           } else {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, $960 + -24 | 0);
            L507 : do if (!(HEAP8[$1 >> 0] & 1)) {
             HEAP8[$1 + 1 >> 0] = 0;
             HEAP8[$1 >> 0] = 0;
            } else {
             $967 = $1 + 8 | 0;
             $968 = HEAP32[$967 >> 2] | 0;
             HEAP8[$968 >> 0] = 0;
             $969 = $1 + 4 | 0;
             HEAP32[$969 >> 2] = 0;
             $970 = HEAP32[$1 >> 2] | 0;
             $phitmp$i$i$i$i$i$i$i339 = ($970 & -2) + -1 | 0;
             $972 = $970 & 255;
             do if (!($972 & 1)) {
              $976 = $970 >>> 1 & 127;
              if (($972 & 255) < 22) {
               _memcpy($1 + 1 | 0, $968 | 0, ($970 >>> 1 & 127) + 1 | 0) | 0;
               _free($968);
               $$ph739 = $976;
               break;
              }
              $979 = $976 + 16 & 240;
              $phitmp$i2$i$i$i$i$i$i342 = $979 + -1 | 0;
              if (($phitmp$i2$i$i$i$i$i$i342 | 0) == ($phitmp$i$i$i$i$i$i$i339 | 0)) break L507;
              $982 = _malloc($979) | 0;
              if ($phitmp$i2$i$i$i$i$i$i342 >>> 0 <= $phitmp$i$i$i$i$i$i$i339 >>> 0 & ($982 | 0) == 0) break L507;
              _memcpy($982 | 0, $1 + 1 | 0, ($970 >>> 1 & 127) + 1 | 0) | 0;
              HEAP32[$1 >> 2] = $979 | 1;
              HEAP32[$969 >> 2] = $976;
              HEAP32[$967 >> 2] = $982;
              break L507;
             } else {
              HEAP8[$1 + 1 >> 0] = 0;
              _free($968);
              $$ph739 = 0;
             } while (0);
             HEAP8[$1 >> 0] = $$ph739 << 1;
            } while (0);
            HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
            HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
            HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
            $__i$0$i$i$i$i$i352 = 0;
            while (1) {
             if (($__i$0$i$i$i$i$i352 | 0) == 3) break;
             HEAP32[$2 + ($__i$0$i$i$i$i$i352 << 2) >> 2] = 0;
             $__i$0$i$i$i$i$i352 = $__i$0$i$i$i$i$i352 + 1 | 0;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            $996 = HEAP32[$959 >> 2] | 0;
            $997 = $996 + -24 | 0;
            $998 = $996;
            while (1) {
             if (($998 | 0) == ($997 | 0)) {
              $$pre$phi732Z2D = $959;
              $$pre$phiZ2D = $db;
              $1003 = $997;
              label = 409;
              break L504;
             }
             $1000 = $998 + -24 | 0;
             HEAP32[$959 >> 2] = $1000;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1000);
             $998 = HEAP32[$959 >> 2] | 0;
            }
           }
          } else {
           $$phi$trans$insert = $db + 4 | 0;
           $$pre$phi732Z2D = $$phi$trans$insert;
           $$pre$phiZ2D = $db;
           $1003 = HEAP32[$$phi$trans$insert >> 2] | 0;
           label = 409;
          } while (0);
          if ((label | 0) == 409) if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == ($1003 | 0)) {
           $$128$i = $first;
           $$421$i = 1;
          } else {
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $1003 + -24 | 0);
           $1005 = HEAP32[$$pre$phi732Z2D >> 2] | 0;
           $1006 = $1005 + -24 | 0;
           $1007 = $1005;
           while (1) {
            if (($1007 | 0) == ($1006 | 0)) break;
            $1009 = $1007 + -24 | 0;
            HEAP32[$$pre$phi732Z2D >> 2] = $1009;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1009);
            $1007 = HEAP32[$$pre$phi732Z2D >> 2] | 0;
           }
           HEAP32[$4 >> 2] = 0;
           HEAP32[$4 + 4 >> 2] = 0;
           HEAP32[$4 + 8 >> 2] = 0;
           $__i$0$i$i42$i = 0;
           while (1) {
            if (($__i$0$i$i42$i | 0) == 3) break;
            HEAP32[$4 + ($__i$0$i$i42$i << 2) >> 2] = 0;
            $__i$0$i$i42$i = $__i$0$i$i42$i + 1 | 0;
           }
           L539 : do if ($has_expr_list$0$off0$i$lcssa) if ((HEAP32[$$pre$phiZ2D >> 2] | 0) == ($1006 | 0)) {
            $$027$i = $first;
            $$320$i = 1;
           } else {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $1005 + -48 | 0);
            L542 : do if (!(HEAP8[$4 >> 0] & 1)) {
             HEAP8[$4 + 1 >> 0] = 0;
             HEAP8[$4 >> 0] = 0;
            } else {
             $1019 = $4 + 8 | 0;
             $1020 = HEAP32[$1019 >> 2] | 0;
             HEAP8[$1020 >> 0] = 0;
             $1021 = $4 + 4 | 0;
             HEAP32[$1021 >> 2] = 0;
             $1022 = HEAP32[$4 >> 2] | 0;
             $phitmp$i$i$i$i$i$i48$i = ($1022 & -2) + -1 | 0;
             $1024 = $1022 & 255;
             do if (!($1024 & 1)) {
              $1028 = $1022 >>> 1 & 127;
              if (($1024 & 255) < 22) {
               _memcpy($4 + 1 | 0, $1020 | 0, ($1022 >>> 1 & 127) + 1 | 0) | 0;
               _free($1020);
               $$ph741745 = $1028;
               break;
              }
              $1031 = $1028 + 16 & 240;
              $phitmp$i2$i$i$i$i$i51$i = $1031 + -1 | 0;
              if (($phitmp$i2$i$i$i$i$i51$i | 0) == ($phitmp$i$i$i$i$i$i48$i | 0)) break L542;
              $1034 = _malloc($1031) | 0;
              if ($phitmp$i2$i$i$i$i$i51$i >>> 0 <= $phitmp$i$i$i$i$i$i48$i >>> 0 & ($1034 | 0) == 0) break L542;
              _memcpy($1034 | 0, $4 + 1 | 0, ($1022 >>> 1 & 127) + 1 | 0) | 0;
              HEAP32[$4 >> 2] = $1031 | 1;
              HEAP32[$1021 >> 2] = $1028;
              HEAP32[$1019 >> 2] = $1034;
              break L542;
             } else {
              HEAP8[$4 + 1 >> 0] = 0;
              _free($1020);
              $$ph741745 = 0;
             } while (0);
             HEAP8[$4 >> 0] = $$ph741745 << 1;
            } while (0);
            HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
            HEAP32[$4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
            HEAP32[$4 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
            $__i$0$i$i$i$i61$i = 0;
            while (1) {
             if (($__i$0$i$i$i$i61$i | 0) == 3) break;
             HEAP32[$5 + ($__i$0$i$i$i$i61$i << 2) >> 2] = 0;
             $__i$0$i$i$i$i61$i = $__i$0$i$i$i$i61$i + 1 | 0;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            $1048 = HEAP32[$$pre$phi732Z2D >> 2] | 0;
            $1049 = $1048 + -24 | 0;
            $1050 = $1048;
            while (1) {
             if (($1050 | 0) == ($1049 | 0)) {
              label = 434;
              break L539;
             }
             $1052 = $1050 + -24 | 0;
             HEAP32[$$pre$phi732Z2D >> 2] = $1052;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1052);
             $1050 = HEAP32[$$pre$phi732Z2D >> 2] | 0;
            }
           } else label = 434; while (0);
           if ((label | 0) == 434) {
            HEAP32[$6 >> 2] = 0;
            HEAP32[$6 + 4 >> 2] = 0;
            HEAP32[$6 + 8 >> 2] = 0;
            $__i$0$i$i66$i = 0;
            while (1) {
             if (($__i$0$i$i66$i | 0) == 3) break;
             HEAP32[$6 + ($__i$0$i$i66$i << 2) >> 2] = 0;
             $__i$0$i$i66$i = $__i$0$i$i66$i + 1 | 0;
            }
            if ($parsed_gs$0$off0$i) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($6, 14755, 2);
            if ($929) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15748) | 0; else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6, 15752) | 0;
            if ($has_expr_list$0$off0$i$lcssa) {
             __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($8, 14661, $4);
             $1055 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8, 14710) | 0;
             HEAP32[$7 >> 2] = HEAP32[$1055 >> 2];
             HEAP32[$7 + 4 >> 2] = HEAP32[$1055 + 4 >> 2];
             HEAP32[$7 + 8 >> 2] = HEAP32[$1055 + 8 >> 2];
             $__i$0$i$i$i$i359 = 0;
             while (1) {
              if (($__i$0$i$i$i$i359 | 0) == 3) break;
              HEAP32[$1055 + ($__i$0$i$i$i$i359 << 2) >> 2] = 0;
              $__i$0$i$i$i$i359 = $__i$0$i$i$i$i359 + 1 | 0;
             }
             $1058 = HEAP8[$7 >> 0] | 0;
             $1060 = ($1058 & 1) == 0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6, $1060 ? $7 + 1 | 0 : HEAP32[$7 + 8 >> 2] | 0, $1060 ? ($1058 & 255) >>> 1 : HEAP32[$7 + 4 >> 2] | 0) | 0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
            }
            $1070 = HEAP8[$3 >> 0] | 0;
            $1072 = ($1070 & 1) == 0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6, $1072 ? $3 + 1 | 0 : HEAP32[$3 + 8 >> 2] | 0, $1072 ? ($1070 & 255) >>> 1 : HEAP32[$3 + 4 >> 2] | 0) | 0;
            if ($has_init$0$off0$i734) {
             __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($10, 14713, $1);
             $1082 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($10, 14663) | 0;
             HEAP32[$9 >> 2] = HEAP32[$1082 >> 2];
             HEAP32[$9 + 4 >> 2] = HEAP32[$1082 + 4 >> 2];
             HEAP32[$9 + 8 >> 2] = HEAP32[$1082 + 8 >> 2];
             $__i$0$i$i$i73$i = 0;
             while (1) {
              if (($__i$0$i$i$i73$i | 0) == 3) break;
              HEAP32[$1082 + ($__i$0$i$i$i73$i << 2) >> 2] = 0;
              $__i$0$i$i$i73$i = $__i$0$i$i$i73$i + 1 | 0;
             }
             $1085 = HEAP8[$9 >> 0] | 0;
             $1087 = ($1085 & 1) == 0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6, $1087 ? $9 + 1 | 0 : HEAP32[$9 + 8 >> 2] | 0, $1087 ? ($1085 & 255) >>> 1 : HEAP32[$9 + 4 >> 2] | 0) | 0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
            };
            HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
            HEAP32[$12 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
            HEAP32[$12 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
            $__i$0$i$i79$i = 0;
            while (1) {
             if (($__i$0$i$i79$i | 0) == 3) break;
             HEAP32[$6 + ($__i$0$i$i79$i << 2) >> 2] = 0;
             $__i$0$i$i79$i = $__i$0$i$i79$i + 1 | 0;
            }
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($11, $12);
            $1099 = HEAP32[$$pre$phi732Z2D >> 2] | 0;
            $1101 = HEAP32[$db + 8 >> 2] | 0;
            $1103 = $1101;
            if ($1099 >>> 0 < $1101 >>> 0) {
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1099, $11);
             HEAP32[$$pre$phi732Z2D >> 2] = (HEAP32[$$pre$phi732Z2D >> 2] | 0) + 24;
            } else {
             $1108 = HEAP32[$db >> 2] | 0;
             $1110 = ($1099 - $1108 | 0) / 24 | 0;
             $1111 = $1110 + 1 | 0;
             if ($1111 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
             $1114 = ($1103 - $1108 | 0) / 24 | 0;
             if ($1114 >>> 0 < 89478485) {
              $1116 = $1114 << 1;
              $$0$i$i$i$i367 = $1116 >>> 0 < $1111 >>> 0 ? $1111 : $1116;
             } else $$0$i$i$i$i367 = 178956970;
             __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0, $$0$i$i$i$i367, $1110, $db + 12 | 0);
             $1119 = $0 + 8 | 0;
             $1120 = HEAP32[$1119 >> 2] | 0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1120, $11);
             HEAP32[$1119 >> 2] = $1120 + 24;
             __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $0);
             __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
            }
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            $$027$i = $t$4$i733 + 1 | 0;
            $$320$i = 0;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$128$i = $$027$i;
           $$421$i = $$320$i;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          if (!$$421$i) {
           $$16$i376 = $$128$i;
           break L479;
          }
         }
        } while (0);
        $$16$i376 = $first;
       } else $$16$i376 = $first;
      } else $$16$i376 = $first; while (0);
      $$14 = $$16$i376;
      break L1;
      break;
     }
    case 101:
     {
      $1123 = $first + 2 | 0;
      HEAP32[$54 >> 2] = 0;
      HEAP32[$54 + 4 >> 2] = 0;
      HEAP32[$54 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($54, 15754, 2);
      $1124 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1123, $last, $54, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($54);
      $$14 = ($1124 | 0) == ($1123 | 0) ? $first : $1124;
      break L1;
      break;
     }
    case 103:
     {
      $1126 = $first + 2 | 0;
      HEAP32[$55 >> 2] = 0;
      HEAP32[$55 + 4 >> 2] = 0;
      HEAP32[$55 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($55, 15733, 1);
      $1127 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1126, $last, $55, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($55);
      $$14 = ($1127 | 0) == ($1126 | 0) ? $first : $1127;
      break L1;
      break;
     }
    case 116:
     {
      $1129 = $first + 2 | 0;
      HEAP32[$56 >> 2] = 0;
      HEAP32[$56 + 4 >> 2] = 0;
      HEAP32[$56 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($56, 15757, 1);
      $1130 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1129, $last, $56, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($56);
      $$14 = ($1130 | 0) == ($1129 | 0) ? $first : $1130;
      break L1;
      break;
     }
    case 120:
     {
      $1132 = $first + 2 | 0;
      $1133 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1132, $last, $db) | 0;
      if (($1133 | 0) == ($1132 | 0)) $$02$i331 = $1132; else {
       $1137 = HEAP32[$db + 4 >> 2] | 0;
       if ((HEAP32[$db >> 2] | 0) == ($1137 | 0)) $$02$i331 = $1132; else {
        $1139 = $1137 + -24 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, $1139);
        $1140 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2, 0, 15759) | 0;
        HEAP32[$1 >> 2] = HEAP32[$1140 >> 2];
        HEAP32[$1 + 4 >> 2] = HEAP32[$1140 + 4 >> 2];
        HEAP32[$1 + 8 >> 2] = HEAP32[$1140 + 8 >> 2];
        $__i$0$i$i$i$i325 = 0;
        while (1) {
         if (($__i$0$i$i$i$i325 | 0) == 3) break;
         HEAP32[$1140 + ($__i$0$i$i$i$i325 << 2) >> 2] = 0;
         $__i$0$i$i$i$i325 = $__i$0$i$i$i$i325 + 1 | 0;
        }
        $1143 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1, 14663) | 0;
        HEAP32[$0 >> 2] = HEAP32[$1143 >> 2];
        HEAP32[$0 + 4 >> 2] = HEAP32[$1143 + 4 >> 2];
        HEAP32[$0 + 8 >> 2] = HEAP32[$1143 + 8 >> 2];
        $__i$0$i$i$i4$i = 0;
        while (1) {
         if (($__i$0$i$i$i4$i | 0) == 3) break;
         HEAP32[$1143 + ($__i$0$i$i$i4$i << 2) >> 2] = 0;
         $__i$0$i$i$i4$i = $__i$0$i$i$i4$i + 1 | 0;
        }
        do if (!(HEAP8[$1139 >> 0] & 1)) {
         HEAP8[$1139 + 1 >> 0] = 0;
         HEAP8[$1139 >> 0] = 0;
        } else {
         $1150 = $1137 + -16 | 0;
         HEAP8[HEAP32[$1150 >> 2] >> 0] = 0;
         $1152 = $1137 + -20 | 0;
         HEAP32[$1152 >> 2] = 0;
         $$pre$i$i$i$i = HEAP8[$1139 >> 0] | 0;
         if (!($$pre$i$i$i$i & 1)) {
          $1159 = $$pre$i$i$i$i;
          $1168 = 10;
         } else {
          $1155 = HEAP32[$1139 >> 2] | 0;
          $1159 = $1155 & 255;
          $1168 = ($1155 & -2) + -1 | 0;
         }
         if (!($1159 & 1)) {
          $1162 = ($1159 & 255) >>> 1;
          if (($1159 & 255) < 22) {
           $1166 = 10;
           $1185 = $1162;
           $1717 = 1;
          } else {
           $1166 = ($1162 + 16 & 240) + -1 | 0;
           $1185 = $1162;
           $1717 = 1;
          }
         } else {
          $1166 = 10;
          $1185 = 0;
          $1717 = 0;
         }
         if (($1166 | 0) != ($1168 | 0)) {
          if (($1166 | 0) == 10) {
           $1176 = $1139 + 1 | 0;
           $1177 = HEAP32[$1150 >> 2] | 0;
           if ($1717) {
            _memcpy($1176 | 0, $1177 | 0, (($1159 & 255) >>> 1) + 1 | 0) | 0;
            _free($1177);
           } else {
            HEAP8[$1176 >> 0] = HEAP8[$1177 >> 0] | 0;
            _free($1177);
           }
           HEAP8[$1139 >> 0] = $1185 << 1;
           break;
          }
          $1171 = $1166 + 1 | 0;
          $1172 = _malloc($1171) | 0;
          if (!($1166 >>> 0 <= $1168 >>> 0 & ($1172 | 0) == 0)) {
           if ($1717) _memcpy($1172 | 0, $1139 + 1 | 0, (($1159 & 255) >>> 1) + 1 | 0) | 0; else {
            $1174 = HEAP32[$1150 >> 2] | 0;
            HEAP8[$1172 >> 0] = HEAP8[$1174 >> 0] | 0;
            _free($1174);
           }
           HEAP32[$1139 >> 2] = $1171 | 1;
           HEAP32[$1152 >> 2] = $1185;
           HEAP32[$1150 >> 2] = $1172;
          }
         }
        } while (0);
        HEAP32[$1139 >> 2] = HEAP32[$0 >> 2];
        HEAP32[$1139 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
        HEAP32[$1139 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
        $__i$0$i$i$i$i$i = 0;
        while (1) {
         if (($__i$0$i$i$i$i$i | 0) == 3) break;
         HEAP32[$0 + ($__i$0$i$i$i$i$i << 2) >> 2] = 0;
         $__i$0$i$i$i$i$i = $__i$0$i$i$i$i$i + 1 | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
        $$02$i331 = $1133;
       }
      }
      $$14 = ($$02$i331 | 0) == ($1132 | 0) ? $first : $$02$i331;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 111:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 110:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 111:
     {
      $1195 = $first + 2 | 0;
      HEAP32[$57 >> 2] = 0;
      HEAP32[$57 + 4 >> 2] = 0;
      HEAP32[$57 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($57, 15770, 2);
      $1196 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1195, $last, $57, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
      $$14 = ($1196 | 0) == ($1195 | 0) ? $first : $1196;
      break L1;
      break;
     }
    case 114:
     {
      $1198 = $first + 2 | 0;
      HEAP32[$58 >> 2] = 0;
      HEAP32[$58 + 4 >> 2] = 0;
      HEAP32[$58 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($58, 15773, 1);
      $1199 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1198, $last, $58, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($58);
      $$14 = ($1199 | 0) == ($1198 | 0) ? $first : $1199;
      break L1;
      break;
     }
    case 82:
     {
      $1201 = $first + 2 | 0;
      HEAP32[$59 >> 2] = 0;
      HEAP32[$59 + 4 >> 2] = 0;
      HEAP32[$59 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($59, 15775, 2);
      $1202 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1201, $last, $59, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($59);
      $$14 = ($1202 | 0) == ($1201 | 0) ? $first : $1202;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 112:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 109:
     {
      $1207 = $first + 2 | 0;
      HEAP32[$60 >> 2] = 0;
      HEAP32[$60 + 4 >> 2] = 0;
      HEAP32[$60 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($60, 15778, 3);
      $1208 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1207, $last, $60, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($60);
      $$14 = ($1208 | 0) == ($1207 | 0) ? $first : $1208;
      break L1;
      break;
     }
    case 108:
     {
      $1210 = $first + 2 | 0;
      HEAP32[$61 >> 2] = 0;
      HEAP32[$61 + 4 >> 2] = 0;
      HEAP32[$61 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($61, 15782, 1);
      $1211 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1210, $last, $61, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($61);
      $$14 = ($1211 | 0) == ($1210 | 0) ? $first : $1211;
      break L1;
      break;
     }
    case 76:
     {
      $1213 = $first + 2 | 0;
      HEAP32[$62 >> 2] = 0;
      HEAP32[$62 + 4 >> 2] = 0;
      HEAP32[$62 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($62, 15784, 2);
      $1214 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1213, $last, $62, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($62);
      $$14 = ($1214 | 0) == ($1213 | 0) ? $first : $1214;
      break L1;
      break;
     }
    case 112:
     {
      $1216 = $first + 2 | 0;
      if (($1216 | 0) != ($last | 0)) if ((HEAP8[$1216 >> 0] | 0) == 95) {
       $1220 = $first + 3 | 0;
       HEAP32[$63 >> 2] = 0;
       HEAP32[$63 + 4 >> 2] = 0;
       HEAP32[$63 + 8 >> 2] = 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($63, 15787, 2);
       $1221 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1220, $last, $63, $db) | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($63);
       $$14 = ($1221 | 0) == ($1220 | 0) ? $first : $1221;
       break L1;
      }
      $1223 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1216, $last, $db) | 0;
      if (($1223 | 0) == ($1216 | 0)) {
       $$14 = $first;
       break L1;
      }
      $1227 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($1227 | 0)) {
       $$14 = $first;
       break L1;
      }
      $1229 = $1227 + -24 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($67, $1229);
      $1230 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($67, 0, 14661) | 0;
      HEAP32[$66 >> 2] = HEAP32[$1230 >> 2];
      HEAP32[$66 + 4 >> 2] = HEAP32[$1230 + 4 >> 2];
      HEAP32[$66 + 8 >> 2] = HEAP32[$1230 + 8 >> 2];
      $__i$0$i$i$i169 = 0;
      while (1) {
       if (($__i$0$i$i$i169 | 0) == 3) break;
       HEAP32[$1230 + ($__i$0$i$i$i169 << 2) >> 2] = 0;
       $__i$0$i$i$i169 = $__i$0$i$i$i169 + 1 | 0;
      }
      $1233 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($66, 15790) | 0;
      HEAP32[$65 >> 2] = HEAP32[$1233 >> 2];
      HEAP32[$65 + 4 >> 2] = HEAP32[$1233 + 4 >> 2];
      HEAP32[$65 + 8 >> 2] = HEAP32[$1233 + 8 >> 2];
      $__i$0$i$i$i173 = 0;
      while (1) {
       if (($__i$0$i$i$i173 | 0) == 3) break;
       HEAP32[$1233 + ($__i$0$i$i$i173 << 2) >> 2] = 0;
       $__i$0$i$i$i173 = $__i$0$i$i$i173 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($64, $65);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1229, $64);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($64);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($65);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($66);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($67);
      $$14 = $1223;
      break L1;
      break;
     }
    case 115:
     {
      $1236 = $first + 2 | 0;
      HEAP32[$68 >> 2] = 0;
      HEAP32[$68 + 4 >> 2] = 0;
      HEAP32[$68 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($68, 15782, 1);
      $1237 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1236, $last, $68, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($68);
      $$14 = ($1237 | 0) == ($1236 | 0) ? $first : $1237;
      break L1;
      break;
     }
    case 116:
     {
      if (($83 | 0) <= 2) {
       $$14 = $first;
       break L1;
      }
      if ((HEAP8[$first >> 0] | 0) != 112) {
       $$14 = $first;
       break L1;
      }
      if ((HEAP8[$first + 1 >> 0] | 0) != 116) {
       $$14 = $first;
       break L1;
      }
      $1245 = $first + 2 | 0;
      $1246 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1245, $last, $db) | 0;
      if (($1246 | 0) == ($1245 | 0)) {
       $$14 = $first;
       break L1;
      }
      $1248 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1246, $last, $db) | 0;
      if (($1248 | 0) == ($1246 | 0)) {
       $$14 = $first;
       break L1;
      }
      $1250 = $db + 4 | 0;
      $1251 = HEAP32[$1250 >> 2] | 0;
      if ((($1251 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
       $$14 = $first;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $1251 + -24 | 0);
      $1258 = HEAP32[$1250 >> 2] | 0;
      $1259 = $1258 + -24 | 0;
      $1260 = $1258;
      while (1) {
       if (($1260 | 0) == ($1259 | 0)) break;
       $1262 = $1260 + -24 | 0;
       HEAP32[$1250 >> 2] = $1262;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1262);
       $1260 = HEAP32[$1250 >> 2] | 0;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1258 + -48 | 0, 15794) | 0;
      $1266 = HEAP8[$0 >> 0] | 0;
      $1268 = ($1266 & 1) == 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$1250 >> 2] | 0) + -24 | 0, $1268 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $1268 ? ($1266 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
      $$14 = $1248;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 113:
   {
    if ((HEAP8[$t$0 + 1 >> 0] | 0) != 117) {
     $$14 = $first;
     break L1;
    }
    $1281 = $first + 2 | 0;
    $1282 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1281, $last, $db) | 0;
    if (($1282 | 0) == ($1281 | 0)) {
     $$14 = $first;
     break L1;
    }
    $1284 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1282, $last, $db) | 0;
    if (($1284 | 0) == ($1282 | 0)) {
     $1358 = $db + 4 | 0;
     $1359 = HEAP32[$1358 >> 2] | 0;
     $1360 = $1359 + -24 | 0;
     $1361 = $1359;
     while (1) {
      if (($1361 | 0) == ($1360 | 0)) {
       $$14 = $first;
       break L1;
      }
      $1363 = $1361 + -24 | 0;
      HEAP32[$1358 >> 2] = $1363;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1363);
      $1361 = HEAP32[$1358 >> 2] | 0;
     }
    }
    $1286 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1284, $last, $db) | 0;
    $1288 = $db + 4 | 0;
    if (($1286 | 0) == ($1284 | 0)) {
     $1349 = HEAP32[$1288 >> 2] | 0;
     $1350 = $1349 + -24 | 0;
     $1351 = $1349;
     while (1) {
      if (($1351 | 0) == ($1350 | 0)) break;
      $1353 = $1351 + -24 | 0;
      HEAP32[$1288 >> 2] = $1353;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1353);
      $1351 = HEAP32[$1288 >> 2] | 0;
     }
     $1354 = $1349 + -48 | 0;
     $1355 = $1350;
     while (1) {
      if (($1355 | 0) == ($1354 | 0)) {
       $$14 = $first;
       break L1;
      }
      $1357 = $1355 + -24 | 0;
      HEAP32[$1288 >> 2] = $1357;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1357);
      $1355 = HEAP32[$1288 >> 2] | 0;
     }
    }
    $1289 = HEAP32[$1288 >> 2] | 0;
    if ((($1289 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 3) {
     $$14 = $first;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $1289 + -24 | 0);
    $1296 = HEAP32[$1288 >> 2] | 0;
    $1297 = $1296 + -24 | 0;
    $1298 = $1296;
    while (1) {
     if (($1298 | 0) == ($1297 | 0)) break;
     $1300 = $1298 + -24 | 0;
     HEAP32[$1288 >> 2] = $1300;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1300);
     $1298 = HEAP32[$1288 >> 2] | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($1, $1296 + -48 | 0);
    $1302 = HEAP32[$1288 >> 2] | 0;
    $1303 = $1302 + -24 | 0;
    $1304 = $1302;
    while (1) {
     if (($1304 | 0) == ($1303 | 0)) break;
     $1306 = $1304 + -24 | 0;
     HEAP32[$1288 >> 2] = $1306;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1306);
     $1304 = HEAP32[$1288 >> 2] | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, $1302 + -48 | 0);
    $1309 = (HEAP32[$1288 >> 2] | 0) + -24 | 0;
    __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($75, 14661, $2);
    $1310 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($75, 15797) | 0;
    HEAP32[$74 >> 2] = HEAP32[$1310 >> 2];
    HEAP32[$74 + 4 >> 2] = HEAP32[$1310 + 4 >> 2];
    HEAP32[$74 + 8 >> 2] = HEAP32[$1310 + 8 >> 2];
    $__i$0$i$i$i181 = 0;
    while (1) {
     if (($__i$0$i$i$i181 | 0) == 3) break;
     HEAP32[$1310 + ($__i$0$i$i$i181 << 2) >> 2] = 0;
     $__i$0$i$i$i181 = $__i$0$i$i$i181 + 1 | 0;
    }
    $1313 = HEAP8[$1 >> 0] | 0;
    $1315 = ($1313 & 1) == 0;
    $1325 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($74, $1315 ? $1 + 1 | 0 : HEAP32[$1 + 8 >> 2] | 0, $1315 ? ($1313 & 255) >>> 1 : HEAP32[$1 + 4 >> 2] | 0) | 0;
    HEAP32[$73 >> 2] = HEAP32[$1325 >> 2];
    HEAP32[$73 + 4 >> 2] = HEAP32[$1325 + 4 >> 2];
    HEAP32[$73 + 8 >> 2] = HEAP32[$1325 + 8 >> 2];
    $__i$0$i$i$i185 = 0;
    while (1) {
     if (($__i$0$i$i$i185 | 0) == 3) break;
     HEAP32[$1325 + ($__i$0$i$i$i185 << 2) >> 2] = 0;
     $__i$0$i$i$i185 = $__i$0$i$i$i185 + 1 | 0;
    }
    $1328 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($73, 15803) | 0;
    HEAP32[$72 >> 2] = HEAP32[$1328 >> 2];
    HEAP32[$72 + 4 >> 2] = HEAP32[$1328 + 4 >> 2];
    HEAP32[$72 + 8 >> 2] = HEAP32[$1328 + 8 >> 2];
    $__i$0$i$i$i189 = 0;
    while (1) {
     if (($__i$0$i$i$i189 | 0) == 3) break;
     HEAP32[$1328 + ($__i$0$i$i$i189 << 2) >> 2] = 0;
     $__i$0$i$i$i189 = $__i$0$i$i$i189 + 1 | 0;
    }
    $1331 = HEAP8[$0 >> 0] | 0;
    $1333 = ($1331 & 1) == 0;
    $1343 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($72, $1333 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $1333 ? ($1331 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
    HEAP32[$71 >> 2] = HEAP32[$1343 >> 2];
    HEAP32[$71 + 4 >> 2] = HEAP32[$1343 + 4 >> 2];
    HEAP32[$71 + 8 >> 2] = HEAP32[$1343 + 8 >> 2];
    $__i$0$i$i$i193 = 0;
    while (1) {
     if (($__i$0$i$i$i193 | 0) == 3) break;
     HEAP32[$1343 + ($__i$0$i$i$i193 << 2) >> 2] = 0;
     $__i$0$i$i$i193 = $__i$0$i$i$i193 + 1 | 0;
    }
    $1346 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($71, 14663) | 0;
    HEAP32[$70 >> 2] = HEAP32[$1346 >> 2];
    HEAP32[$70 + 4 >> 2] = HEAP32[$1346 + 4 >> 2];
    HEAP32[$70 + 8 >> 2] = HEAP32[$1346 + 8 >> 2];
    $__i$0$i$i$i197 = 0;
    while (1) {
     if (($__i$0$i$i$i197 | 0) == 3) break;
     HEAP32[$1346 + ($__i$0$i$i$i197 << 2) >> 2] = 0;
     $__i$0$i$i$i197 = $__i$0$i$i$i197 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($69, $70);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1309, $69);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($69);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($70);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($71);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($72);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($73);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($74);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($75);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
    $$14 = $1286;
    break L1;
    break;
   }
  case 114:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 99:
     {
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 114) if ((HEAP8[$first + 1 >> 0] | 0) == 99) {
       $1373 = $first + 2 | 0;
       $1374 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1373, $last, $db) | 0;
       if (($1374 | 0) == ($1373 | 0)) $$311$i311 = $first; else {
        $1376 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1374, $last, $db) | 0;
        if (($1376 | 0) == ($1374 | 0)) $$311$i311 = $first; else {
         $1378 = $db + 4 | 0;
         $1379 = HEAP32[$1378 >> 2] | 0;
         if ((($1379 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$311$i311 = $first; else {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $1379 + -24 | 0);
          $1386 = HEAP32[$1378 >> 2] | 0;
          $1387 = $1386 + -24 | 0;
          $1388 = $1386;
          while (1) {
           if (($1388 | 0) == ($1387 | 0)) break;
           $1390 = $1388 + -24 | 0;
           HEAP32[$1378 >> 2] = $1390;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1390);
           $1388 = HEAP32[$1378 >> 2] | 0;
          }
          $1391 = $1386 + -48 | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $1391);
          $1392 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15809) | 0;
          HEAP32[$5 >> 2] = HEAP32[$1392 >> 2];
          HEAP32[$5 + 4 >> 2] = HEAP32[$1392 + 4 >> 2];
          HEAP32[$5 + 8 >> 2] = HEAP32[$1392 + 8 >> 2];
          $__i$0$i$i$i$i280 = 0;
          while (1) {
           if (($__i$0$i$i$i$i280 | 0) == 3) break;
           HEAP32[$1392 + ($__i$0$i$i$i$i280 << 2) >> 2] = 0;
           $__i$0$i$i$i$i280 = $__i$0$i$i$i$i280 + 1 | 0;
          }
          $1395 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 14745) | 0;
          HEAP32[$4 >> 2] = HEAP32[$1395 >> 2];
          HEAP32[$4 + 4 >> 2] = HEAP32[$1395 + 4 >> 2];
          HEAP32[$4 + 8 >> 2] = HEAP32[$1395 + 8 >> 2];
          $__i$0$i$i$i17$i284 = 0;
          while (1) {
           if (($__i$0$i$i$i17$i284 | 0) == 3) break;
           HEAP32[$1395 + ($__i$0$i$i$i17$i284 << 2) >> 2] = 0;
           $__i$0$i$i$i17$i284 = $__i$0$i$i$i17$i284 + 1 | 0;
          }
          $1398 = HEAP8[$0 >> 0] | 0;
          $1400 = ($1398 & 1) == 0;
          $1410 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4, $1400 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $1400 ? ($1398 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
          HEAP32[$3 >> 2] = HEAP32[$1410 >> 2];
          HEAP32[$3 + 4 >> 2] = HEAP32[$1410 + 4 >> 2];
          HEAP32[$3 + 8 >> 2] = HEAP32[$1410 + 8 >> 2];
          $__i$0$i$i$i20$i288 = 0;
          while (1) {
           if (($__i$0$i$i$i20$i288 | 0) == 3) break;
           HEAP32[$1410 + ($__i$0$i$i$i20$i288 << 2) >> 2] = 0;
           $__i$0$i$i$i20$i288 = $__i$0$i$i$i20$i288 + 1 | 0;
          }
          $1413 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 14663) | 0;
          HEAP32[$2 >> 2] = HEAP32[$1413 >> 2];
          HEAP32[$2 + 4 >> 2] = HEAP32[$1413 + 4 >> 2];
          HEAP32[$2 + 8 >> 2] = HEAP32[$1413 + 8 >> 2];
          $__i$0$i$i$i23$i292 = 0;
          while (1) {
           if (($__i$0$i$i$i23$i292 | 0) == 3) break;
           HEAP32[$1413 + ($__i$0$i$i$i23$i292 << 2) >> 2] = 0;
           $__i$0$i$i$i23$i292 = $__i$0$i$i$i23$i292 + 1 | 0;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1391, $1);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
          $$311$i311 = $1376;
         }
        }
       }
      } else $$311$i311 = $first; else $$311$i311 = $first; else $$311$i311 = $first;
      $$14 = $$311$i311;
      break L1;
      break;
     }
    case 109:
     {
      $1416 = $first + 2 | 0;
      HEAP32[$76 >> 2] = 0;
      HEAP32[$76 + 4 >> 2] = 0;
      HEAP32[$76 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($76, 15827, 1);
      $1417 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1416, $last, $76, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($76);
      $$14 = ($1417 | 0) == ($1416 | 0) ? $first : $1417;
      break L1;
      break;
     }
    case 77:
     {
      $1419 = $first + 2 | 0;
      HEAP32[$77 >> 2] = 0;
      HEAP32[$77 + 4 >> 2] = 0;
      HEAP32[$77 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($77, 15829, 2);
      $1420 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1419, $last, $77, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($77);
      $$14 = ($1420 | 0) == ($1419 | 0) ? $first : $1420;
      break L1;
      break;
     }
    case 115:
     {
      $1422 = $first + 2 | 0;
      HEAP32[$78 >> 2] = 0;
      HEAP32[$78 + 4 >> 2] = 0;
      HEAP32[$78 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($78, 15832, 2);
      $1423 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1422, $last, $78, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($78);
      $$14 = ($1423 | 0) == ($1422 | 0) ? $first : $1423;
      break L1;
      break;
     }
    case 83:
     {
      $1425 = $first + 2 | 0;
      HEAP32[$79 >> 2] = 0;
      HEAP32[$79 + 4 >> 2] = 0;
      HEAP32[$79 + 8 >> 2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($79, 15835, 3);
      $1426 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1425, $last, $79, $db) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($79);
      $$14 = ($1426 | 0) == ($1425 | 0) ? $first : $1426;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 115:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 99:
     {
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 115) if ((HEAP8[$first + 1 >> 0] | 0) == 99) {
       $1437 = $first + 2 | 0;
       $1438 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1437, $last, $db) | 0;
       if (($1438 | 0) == ($1437 | 0)) $$311$i = $first; else {
        $1440 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1438, $last, $db) | 0;
        if (($1440 | 0) == ($1438 | 0)) $$311$i = $first; else {
         $1442 = $db + 4 | 0;
         $1443 = HEAP32[$1442 >> 2] | 0;
         if ((($1443 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$311$i = $first; else {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $1443 + -24 | 0);
          $1450 = HEAP32[$1442 >> 2] | 0;
          $1451 = $1450 + -24 | 0;
          $1452 = $1450;
          while (1) {
           if (($1452 | 0) == ($1451 | 0)) break;
           $1454 = $1452 + -24 | 0;
           HEAP32[$1442 >> 2] = $1454;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1454);
           $1452 = HEAP32[$1442 >> 2] | 0;
          }
          $1455 = $1450 + -48 | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6, $1455);
          $1456 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15839) | 0;
          HEAP32[$5 >> 2] = HEAP32[$1456 >> 2];
          HEAP32[$5 + 4 >> 2] = HEAP32[$1456 + 4 >> 2];
          HEAP32[$5 + 8 >> 2] = HEAP32[$1456 + 8 >> 2];
          $__i$0$i$i$i$i268 = 0;
          while (1) {
           if (($__i$0$i$i$i$i268 | 0) == 3) break;
           HEAP32[$1456 + ($__i$0$i$i$i$i268 << 2) >> 2] = 0;
           $__i$0$i$i$i$i268 = $__i$0$i$i$i$i268 + 1 | 0;
          }
          $1459 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 14745) | 0;
          HEAP32[$4 >> 2] = HEAP32[$1459 >> 2];
          HEAP32[$4 + 4 >> 2] = HEAP32[$1459 + 4 >> 2];
          HEAP32[$4 + 8 >> 2] = HEAP32[$1459 + 8 >> 2];
          $__i$0$i$i$i17$i = 0;
          while (1) {
           if (($__i$0$i$i$i17$i | 0) == 3) break;
           HEAP32[$1459 + ($__i$0$i$i$i17$i << 2) >> 2] = 0;
           $__i$0$i$i$i17$i = $__i$0$i$i$i17$i + 1 | 0;
          }
          $1462 = HEAP8[$0 >> 0] | 0;
          $1464 = ($1462 & 1) == 0;
          $1474 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4, $1464 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $1464 ? ($1462 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
          HEAP32[$3 >> 2] = HEAP32[$1474 >> 2];
          HEAP32[$3 + 4 >> 2] = HEAP32[$1474 + 4 >> 2];
          HEAP32[$3 + 8 >> 2] = HEAP32[$1474 + 8 >> 2];
          $__i$0$i$i$i20$i = 0;
          while (1) {
           if (($__i$0$i$i$i20$i | 0) == 3) break;
           HEAP32[$1474 + ($__i$0$i$i$i20$i << 2) >> 2] = 0;
           $__i$0$i$i$i20$i = $__i$0$i$i$i20$i + 1 | 0;
          }
          $1477 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 14663) | 0;
          HEAP32[$2 >> 2] = HEAP32[$1477 >> 2];
          HEAP32[$2 + 4 >> 2] = HEAP32[$1477 + 4 >> 2];
          HEAP32[$2 + 8 >> 2] = HEAP32[$1477 + 8 >> 2];
          $__i$0$i$i$i23$i = 0;
          while (1) {
           if (($__i$0$i$i$i23$i | 0) == 3) break;
           HEAP32[$1477 + ($__i$0$i$i$i23$i << 2) >> 2] = 0;
           $__i$0$i$i$i23$i = $__i$0$i$i$i23$i + 1 | 0;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1455, $1);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
          $$311$i = $1440;
         }
        }
       }
      } else $$311$i = $first; else $$311$i = $first; else $$311$i = $first;
      $$14 = $$311$i;
      break L1;
      break;
     }
    case 112:
     {
      if (($83 | 0) <= 2) {
       $$14 = $first;
       break L1;
      }
      if ((HEAP8[$first >> 0] | 0) != 115) {
       $$14 = $first;
       break L1;
      }
      if ((HEAP8[$first + 1 >> 0] | 0) != 112) {
       $$14 = $first;
       break L1;
      }
      $1486 = $first + 2 | 0;
      $1487 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1486, $last, $db) | 0;
      $$14 = ($1487 | 0) == ($1486 | 0) ? $first : $1487;
      break L1;
      break;
     }
    case 114:
     {
      $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 116:
     {
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 115) if ((HEAP8[$first + 1 >> 0] | 0) == 116) {
       $1496 = $first + 2 | 0;
       $1497 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1496, $last, $db) | 0;
       if (($1497 | 0) == ($1496 | 0)) $$15$i263 = $first; else {
        $1501 = HEAP32[$db + 4 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($1501 | 0)) $$15$i263 = $first; else {
         $1503 = $1501 + -24 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $1503);
         $1504 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15852) | 0;
         HEAP32[$2 >> 2] = HEAP32[$1504 >> 2];
         HEAP32[$2 + 4 >> 2] = HEAP32[$1504 + 4 >> 2];
         HEAP32[$2 + 8 >> 2] = HEAP32[$1504 + 8 >> 2];
         $__i$0$i$i$i$i251 = 0;
         while (1) {
          if (($__i$0$i$i$i$i251 | 0) == 3) break;
          HEAP32[$1504 + ($__i$0$i$i$i$i251 << 2) >> 2] = 0;
          $__i$0$i$i$i$i251 = $__i$0$i$i$i$i251 + 1 | 0;
         }
         $1507 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2, 14663) | 0;
         HEAP32[$1 >> 2] = HEAP32[$1507 >> 2];
         HEAP32[$1 + 4 >> 2] = HEAP32[$1507 + 4 >> 2];
         HEAP32[$1 + 8 >> 2] = HEAP32[$1507 + 8 >> 2];
         $__i$0$i$i$i8$i255 = 0;
         while (1) {
          if (($__i$0$i$i$i8$i255 | 0) == 3) break;
          HEAP32[$1507 + ($__i$0$i$i$i8$i255 << 2) >> 2] = 0;
          $__i$0$i$i$i8$i255 = $__i$0$i$i$i8$i255 + 1 | 0;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1503, $0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$15$i263 = $1497;
        }
       }
      } else $$15$i263 = $first; else $$15$i263 = $first; else $$15$i263 = $first;
      $$14 = $$15$i263;
      break L1;
      break;
     }
    case 122:
     {
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 115) if ((HEAP8[$first + 1 >> 0] | 0) == 122) {
       $1516 = $first + 2 | 0;
       $1517 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1516, $last, $db) | 0;
       if (($1517 | 0) == ($1516 | 0)) $$15$i249 = $first; else {
        $1521 = HEAP32[$db + 4 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($1521 | 0)) $$15$i249 = $first; else {
         $1523 = $1521 + -24 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $1523);
         $1524 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15852) | 0;
         HEAP32[$2 >> 2] = HEAP32[$1524 >> 2];
         HEAP32[$2 + 4 >> 2] = HEAP32[$1524 + 4 >> 2];
         HEAP32[$2 + 8 >> 2] = HEAP32[$1524 + 8 >> 2];
         $__i$0$i$i$i$i237 = 0;
         while (1) {
          if (($__i$0$i$i$i$i237 | 0) == 3) break;
          HEAP32[$1524 + ($__i$0$i$i$i$i237 << 2) >> 2] = 0;
          $__i$0$i$i$i$i237 = $__i$0$i$i$i$i237 + 1 | 0;
         }
         $1527 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2, 14663) | 0;
         HEAP32[$1 >> 2] = HEAP32[$1527 >> 2];
         HEAP32[$1 + 4 >> 2] = HEAP32[$1527 + 4 >> 2];
         HEAP32[$1 + 8 >> 2] = HEAP32[$1527 + 8 >> 2];
         $__i$0$i$i$i8$i241 = 0;
         while (1) {
          if (($__i$0$i$i$i8$i241 | 0) == 3) break;
          HEAP32[$1527 + ($__i$0$i$i$i8$i241 << 2) >> 2] = 0;
          $__i$0$i$i$i8$i241 = $__i$0$i$i$i8$i241 + 1 | 0;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1523, $0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$15$i249 = $1517;
        }
       }
      } else $$15$i249 = $first; else $$15$i249 = $first; else $$15$i249 = $first;
      $$14 = $$15$i249;
      break L1;
      break;
     }
    case 90:
     {
      if (($81 - $t$0 | 0) <= 2) {
       $$14 = $first;
       break L1;
      }
      switch (HEAP8[$t$0 + 2 >> 0] | 0) {
      case 84:
       break;
      case 102:
       {
        if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 115) if ((HEAP8[$first + 1 >> 0] | 0) == 90) {
         $1629 = $first + 2 | 0;
         if ((HEAP8[$1629 >> 0] | 0) == 102) {
          $1632 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($1629, $last, $db) | 0;
          if (($1632 | 0) == ($1629 | 0)) $$15$i = $first; else {
           $1636 = HEAP32[$db + 4 >> 2] | 0;
           if ((HEAP32[$db >> 2] | 0) == ($1636 | 0)) $$15$i = $first; else {
            $1638 = $1636 + -24 | 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $1638);
            $1639 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15861) | 0;
            HEAP32[$2 >> 2] = HEAP32[$1639 >> 2];
            HEAP32[$2 + 4 >> 2] = HEAP32[$1639 + 4 >> 2];
            HEAP32[$2 + 8 >> 2] = HEAP32[$1639 + 8 >> 2];
            $__i$0$i$i$i$i212 = 0;
            while (1) {
             if (($__i$0$i$i$i$i212 | 0) == 3) break;
             HEAP32[$1639 + ($__i$0$i$i$i$i212 << 2) >> 2] = 0;
             $__i$0$i$i$i$i212 = $__i$0$i$i$i$i212 + 1 | 0;
            }
            $1642 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2, 14663) | 0;
            HEAP32[$1 >> 2] = HEAP32[$1642 >> 2];
            HEAP32[$1 + 4 >> 2] = HEAP32[$1642 + 4 >> 2];
            HEAP32[$1 + 8 >> 2] = HEAP32[$1642 + 8 >> 2];
            $__i$0$i$i$i8$i = 0;
            while (1) {
             if (($__i$0$i$i$i8$i | 0) == 3) break;
             HEAP32[$1642 + ($__i$0$i$i$i8$i << 2) >> 2] = 0;
             $__i$0$i$i$i8$i = $__i$0$i$i$i8$i + 1 | 0;
            }
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1638, $0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            $$15$i = $1632;
           }
          }
         } else $$15$i = $first;
        } else $$15$i = $first; else $$15$i = $first; else $$15$i = $first;
        $$14 = $$15$i;
        break L1;
        break;
       }
      default:
       {
        $$14 = $first;
        break L1;
       }
      }
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 115) if ((HEAP8[$first + 1 >> 0] | 0) == 90) {
       $1542 = $first + 2 | 0;
       if ((HEAP8[$1542 >> 0] | 0) == 84) {
        $1545 = $db + 4 | 0;
        $1549 = ((HEAP32[$1545 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
        $1550 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($1542, $last, $db) | 0;
        $1552 = HEAP32[$db >> 2] | 0;
        $1554 = ((HEAP32[$1545 >> 2] | 0) - $1552 | 0) / 24 | 0;
        $1556 = $1552;
        if (($1550 | 0) == ($1542 | 0)) $$14$i = $first; else {
         HEAP32[$1 >> 2] = 0;
         HEAP32[$1 + 4 >> 2] = 0;
         HEAP32[$1 + 8 >> 2] = 0;
         HEAP8[$1 >> 0] = 20;
         dest = $1 + 1 | 0;
         src = 15861;
         stop = dest + 10 | 0;
         do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
         } while ((dest | 0) < (stop | 0));
         HEAP8[$1 + 11 >> 0] = 0;
         L867 : do if (($1549 | 0) != ($1554 | 0)) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, $1556 + ($1549 * 24 | 0) | 0);
          $1561 = HEAP8[$2 >> 0] | 0;
          $1563 = ($1561 & 1) == 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, $1563 ? $2 + 1 | 0 : HEAP32[$2 + 8 >> 2] | 0, $1563 ? ($1561 & 255) >>> 1 : HEAP32[$2 + 4 >> 2] | 0) | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          $1573 = $3 + 8 | 0;
          $1574 = $3 + 1 | 0;
          $1575 = $3 + 4 | 0;
          $k$0$in$i = $1549;
          while (1) {
           $k$0$i = $k$0$in$i + 1 | 0;
           if (($k$0$i | 0) == ($1554 | 0)) break L867;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$db >> 2] | 0) + ($k$0$i * 24 | 0) | 0);
           $1579 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($4, 0, 15295) | 0;
           HEAP32[$3 >> 2] = HEAP32[$1579 >> 2];
           HEAP32[$3 + 4 >> 2] = HEAP32[$1579 + 4 >> 2];
           HEAP32[$3 + 8 >> 2] = HEAP32[$1579 + 8 >> 2];
           $__i$0$i$i$i$i207 = 0;
           while (1) {
            if (($__i$0$i$i$i$i207 | 0) == 3) break;
            HEAP32[$1579 + ($__i$0$i$i$i$i207 << 2) >> 2] = 0;
            $__i$0$i$i$i$i207 = $__i$0$i$i$i$i207 + 1 | 0;
           }
           $1582 = HEAP8[$3 >> 0] | 0;
           $1584 = ($1582 & 1) == 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, $1584 ? $1574 : HEAP32[$1573 >> 2] | 0, $1584 ? ($1582 & 255) >>> 1 : HEAP32[$1575 >> 2] | 0) | 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           $k$0$in$i = $k$0$i;
          }
         } while (0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1, 14663) | 0;
         $k1$0$i = $1554;
         while (1) {
          if (($k1$0$i | 0) == ($1549 | 0)) break;
          $1592 = HEAP32[$1545 >> 2] | 0;
          $1593 = $1592 + -24 | 0;
          $1594 = $1592;
          while (1) {
           if (($1594 | 0) == ($1593 | 0)) break;
           $1596 = $1594 + -24 | 0;
           HEAP32[$1545 >> 2] = $1596;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1596);
           $1594 = HEAP32[$1545 >> 2] | 0;
          }
          $k1$0$i = $k1$0$i + -1 | 0;
         }
         HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
         HEAP32[$6 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
         HEAP32[$6 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
         $__i$0$i$i$i209 = 0;
         while (1) {
          if (($__i$0$i$i$i209 | 0) == 3) break;
          HEAP32[$1 + ($__i$0$i$i$i209 << 2) >> 2] = 0;
          $__i$0$i$i$i209 = $__i$0$i$i$i209 + 1 | 0;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5, $6);
         $1600 = HEAP32[$1545 >> 2] | 0;
         $1602 = HEAP32[$db + 8 >> 2] | 0;
         $1604 = $1602;
         if ($1600 >>> 0 < $1602 >>> 0) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1600, $5);
          HEAP32[$1545 >> 2] = (HEAP32[$1545 >> 2] | 0) + 24;
         } else {
          $1609 = HEAP32[$db >> 2] | 0;
          $1611 = ($1600 - $1609 | 0) / 24 | 0;
          $1612 = $1611 + 1 | 0;
          if ($1612 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
          $1615 = ($1604 - $1609 | 0) / 24 | 0;
          if ($1615 >>> 0 < 89478485) {
           $1617 = $1615 << 1;
           $$0$i$i$i$i = $1617 >>> 0 < $1612 >>> 0 ? $1612 : $1617;
          } else $$0$i$i$i$i = 178956970;
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0, $$0$i$i$i$i, $1611, $db + 12 | 0);
          $1620 = $0 + 8 | 0;
          $1621 = HEAP32[$1620 >> 2] | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1621, $5);
          HEAP32[$1620 >> 2] = $1621 + 24;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $0);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
         $$14$i = $1550;
        }
       } else $$14$i = $first;
      } else $$14$i = $first; else $$14$i = $first; else $$14$i = $first;
      $$14 = $$14$i;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 116:
   {
    switch (HEAP8[$t$0 + 1 >> 0] | 0) {
    case 105:
    case 101:
     {
      L903 : do if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 116) {
       $1652 = HEAP8[$first + 1 >> 0] | 0;
       switch ($1652 << 24 >> 24) {
       case 105:
       case 101:
        break;
       default:
        {
         $$15$i235 = $first;
         break L903;
        }
       }
       $1654 = $first + 2 | 0;
       if ($1652 << 24 >> 24 == 101) $t$0$i = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1654, $last, $db) | 0; else $t$0$i = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1654, $last, $db) | 0;
       if (($t$0$i | 0) == ($1654 | 0)) $$15$i235 = $first; else {
        $1660 = HEAP32[$db + 4 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($1660 | 0)) $$15$i235 = $first; else {
         $1662 = $1660 + -24 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $1662);
         $1663 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15872) | 0;
         HEAP32[$2 >> 2] = HEAP32[$1663 >> 2];
         HEAP32[$2 + 4 >> 2] = HEAP32[$1663 + 4 >> 2];
         HEAP32[$2 + 8 >> 2] = HEAP32[$1663 + 8 >> 2];
         $__i$0$i$i$i$i226 = 0;
         while (1) {
          if (($__i$0$i$i$i$i226 | 0) == 3) break;
          HEAP32[$1663 + ($__i$0$i$i$i$i226 << 2) >> 2] = 0;
          $__i$0$i$i$i$i226 = $__i$0$i$i$i$i226 + 1 | 0;
         }
         $1666 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2, 14663) | 0;
         HEAP32[$1 >> 2] = HEAP32[$1666 >> 2];
         HEAP32[$1 + 4 >> 2] = HEAP32[$1666 + 4 >> 2];
         HEAP32[$1 + 8 >> 2] = HEAP32[$1666 + 8 >> 2];
         $__i$0$i$i$i8$i230 = 0;
         while (1) {
          if (($__i$0$i$i$i8$i230 | 0) == 3) break;
          HEAP32[$1666 + ($__i$0$i$i$i8$i230 << 2) >> 2] = 0;
          $__i$0$i$i$i8$i230 = $__i$0$i$i$i8$i230 + 1 | 0;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1662, $0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$15$i235 = $t$0$i;
        }
       }
      } else $$15$i235 = $first; else $$15$i235 = $first; while (0);
      $$14 = $$15$i235;
      break L1;
      break;
     }
    case 114:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($80, 15880);
      $1669 = $db + 4 | 0;
      $1670 = HEAP32[$1669 >> 2] | 0;
      $1672 = HEAP32[$db + 8 >> 2] | 0;
      $1674 = $1672;
      if ($1670 >>> 0 < $1672 >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1670, $80);
       HEAP32[$1669 >> 2] = (HEAP32[$1669 >> 2] | 0) + 24;
      } else {
       $1679 = HEAP32[$db >> 2] | 0;
       $1681 = ($1670 - $1679 | 0) / 24 | 0;
       $1682 = $1681 + 1 | 0;
       if ($1682 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       $1685 = ($1674 - $1679 | 0) / 24 | 0;
       if ($1685 >>> 0 < 89478485) {
        $1687 = $1685 << 1;
        $$0$i$i$i = $1687 >>> 0 < $1682 >>> 0 ? $1682 : $1687;
       } else $$0$i$i$i = 178956970;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0, $$0$i$i$i, $1681, $db + 12 | 0);
       $1690 = $0 + 8 | 0;
       $1691 = HEAP32[$1690 >> 2] | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1691, $80);
       HEAP32[$1690 >> 2] = $1691 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $0);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($80);
      $$14 = $first + 2 | 0;
      break L1;
      break;
     }
    case 119:
     {
      if (($83 | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 116) if ((HEAP8[$first + 1 >> 0] | 0) == 119) {
       $1700 = $first + 2 | 0;
       $1701 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1700, $last, $db) | 0;
       if (($1701 | 0) == ($1700 | 0)) $$1$i224 = $first; else {
        $1705 = HEAP32[$db + 4 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($1705 | 0)) $$1$i224 = $first; else {
         $1707 = $1705 + -24 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, $1707);
         $1708 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2, 0, 15886) | 0;
         HEAP32[$1 >> 2] = HEAP32[$1708 >> 2];
         HEAP32[$1 + 4 >> 2] = HEAP32[$1708 + 4 >> 2];
         HEAP32[$1 + 8 >> 2] = HEAP32[$1708 + 8 >> 2];
         $__i$0$i$i$i$i220 = 0;
         while (1) {
          if (($__i$0$i$i$i$i220 | 0) == 3) break;
          HEAP32[$1708 + ($__i$0$i$i$i$i220 << 2) >> 2] = 0;
          $__i$0$i$i$i$i220 = $__i$0$i$i$i$i220 + 1 | 0;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1707, $0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         $$1$i224 = $1701;
        }
       }
      } else $$1$i224 = $first; else $$1$i224 = $first; else $$1$i224 = $first;
      $$14 = $$1$i224;
      break L1;
      break;
     }
    default:
     {
      $$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
   {
    $$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break L1;
    break;
   }
  default:
   {
    $$14 = $first;
    break L1;
   }
  } while (0);
 } else $$14 = $first; while (0);
 STACKTOP = sp;
 return $$14 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i100 = 0, $$0$i$i$i105 = 0, $$0$i$i$i113 = 0, $$0$i$i$i125 = 0, $$0$i$i$i133 = 0, $$0$i$i$i144 = 0, $$0$i$i$i152 = 0, $$0$i$i$i157 = 0, $$0$i$i$i169 = 0, $$0$i$i$i174 = 0, $$0$i$i$i204 = 0, $$0$i$i$i224 = 0, $$0$i$i$i36 = 0, $$0$i$i$i41 = 0, $$0$i$i$i46 = 0, $$0$i$i$i48 = 0, $$0$i$i$i50 = 0, $$0$i$i$i57 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $$0$i$i$i75 = 0, $$0$i$i$i80 = 0, $$0$i$i$i85 = 0, $$0$i$i$i90 = 0, $$0$i$i$i95 = 0, $$02$i$ph$i = 0, $$13 = 0, $$29$i3$i = 0, $$3$i6$i = 0, $$310$i$i = 0, $$311$i = 0, $$35$i5$i = 0, $$39$i4$i = 0, $$4$i$i = 0, $$5 = 0, $$7$i257 = 0, $$812$i$ph = 0, $$9$i296 = 0, $$in = 0, $$lcssa655 = 0, $$lcssa661 = 0, $$lcssa668 = 0, $$lcssa675 = 0, $$lcssa682 = 0, $$lcssa689 = 0, $$ph474 = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i236 = 0, $$pre$i$i$i28$i = 0, $$pre$i$i$i57$i = 0, $$pre$i$i$i59$i = 0, $$pre$i$i$i78$i = 0, $0 = 0, $1 = 0, $10 = 0, $1003 = 0, $1004 = 0, $1009 = 0, $1011 = 0, $1014 = 0, $1018 = 0, $102 = 0, $1021 = 0, $1025 = 0, $1027 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1033 = 0, $1035 = 0, $1036 = 0, $1044 = 0, $1052 = 0, $1054 = 0, $1058 = 0, $1059 = 0, $1061 = 0, $1063 = 0, $1069 = 0, $1071 = 0, $1078 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1083 = 0, $1086 = 0, $1089 = 0, $1090 = 0, $1096 = 0, $1098 = 0, $11 = 0, $110 = 0, $1102 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1112 = 0, $1114 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $112 = 0, $1120 = 0, $1122 = 0, $1130 = 0, $1132 = 0, $1133 = 0, $1135 = 0, $1138 = 0, $114 = 0, $1141 = 0, $1142 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1156 = 0, $1161 = 0, $1168 = 0, $117 = 0, $1170 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1186 = 0, $1187 = 0, $119 = 0, $1194 = 0, $12 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1208 = 0, $121 = 0, $1210 = 0, $1217 = 0, $1219 = 0, $1220 = 0, $1223 = 0, $1225 = 0, $1228 = 0, $1233 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $1243 = 0, $1245 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $1251 = 0, $1253 = 0, $1261 = 0, $1263 = 0, $1264 = 0, $1266 = 0, $1269 = 0, $1272 = 0, $1273 = 0, $1278 = 0, $1279 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $129 = 0, $1290 = 0, $1295 = 0, $13 = 0, $1302 = 0, $1304 = 0, $131 = 0, $1314 = 0, $1315 = 0, $1320 = 0, $1321 = 0, $1328 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1339 = 0, $1344 = 0, $1351 = 0, $1353 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1371 = 0, $1375 = 0, $1378 = 0, $1382 = 0, $1383 = 0, $1385 = 0, $1388 = 0, $1394 = 0, $1397 = 0, $14 = 0, $1403 = 0, $1409 = 0, $1414 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1432 = 0, $1434 = 0, $144 = 0, $1441 = 0, $1443 = 0, $1444 = 0, $1447 = 0, $1449 = 0, $1452 = 0, $1457 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1467 = 0, $1469 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1475 = 0, $1477 = 0, $1485 = 0, $1487 = 0, $1488 = 0, $1490 = 0, $1493 = 0, $1496 = 0, $1497 = 0, $15 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $1511 = 0, $1516 = 0, $1523 = 0, $1525 = 0, $1535 = 0, $1536 = 0, $1541 = 0, $1542 = 0, $1549 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $1560 = 0, $1561 = 0, $1563 = 0, $1565 = 0, $1572 = 0, $1574 = 0, $1575 = 0, $1578 = 0, $1580 = 0, $1583 = 0, $1588 = 0, $1592 = 0, $1593 = 0, $1597 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1607 = 0, $161 = 0, $1615 = 0, $1617 = 0, $1618 = 0, $162 = 0, $1620 = 0, $1623 = 0, $1626 = 0, $1627 = 0, $163 = 0, $1632 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1646 = 0, $1648 = 0, $165 = 0, $1655 = 0, $1657 = 0, $1658 = 0, $1661 = 0, $1663 = 0, $1666 = 0, $167 = 0, $1671 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1679 = 0, $1681 = 0, $1683 = 0, $169 = 0, $1694 = 0, $1696 = 0, $1697 = 0, $1699 = 0, $17 = 0, $1705 = 0, $1707 = 0, $1714 = 0, $1716 = 0, $1717 = 0, $1719 = 0, $1722 = 0, $1725 = 0, $1726 = 0, $1732 = 0, $1734 = 0, $1738 = 0, $1740 = 0, $1742 = 0, $1744 = 0, $1745 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $176 = 0, $1760 = 0, $1765 = 0, $1772 = 0, $1774 = 0, $178 = 0, $1787 = 0, $179 = 0, $1790 = 0, $1792 = 0, $18 = 0, $1802 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $1811 = 0, $1812 = 0, $1814 = 0, $1815 = 0, $1817 = 0, $1818 = 0, $182 = 0, $1820 = 0, $1826 = 0, $1835 = 0, $1838 = 0, $184 = 0, $1840 = 0, $1850 = 0, $1853 = 0, $1856 = 0, $1858 = 0, $1865 = 0, $1868 = 0, $187 = 0, $1870 = 0, $1872 = 0, $1877 = 0, $1879 = 0, $1880 = 0, $1883 = 0, $1885 = 0, $1888 = 0, $1889 = 0, $1892 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1899 = 0, $19 = 0, $1901 = 0, $1907 = 0, $1909 = 0, $1916 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1921 = 0, $1924 = 0, $1927 = 0, $1928 = 0, $1934 = 0, $1936 = 0, $194 = 0, $1940 = 0, $1944 = 0, $1948 = 0, $1950 = 0, $1954 = 0, $1955 = 0, $1957 = 0, $1959 = 0, $1965 = 0, $1967 = 0, $197 = 0, $1974 = 0, $1976 = 0, $1977 = 0, $1979 = 0, $1982 = 0, $1985 = 0, $1986 = 0, $199 = 0, $1992 = 0, $1994 = 0, $1998 = 0, $2 = 0, $20 = 0, $2000 = 0, $2002 = 0, $2003 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2014 = 0, $2016 = 0, $2018 = 0, $202 = 0, $2029 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2036 = 0, $2038 = 0, $2044 = 0, $2046 = 0, $205 = 0, $2053 = 0, $2055 = 0, $2056 = 0, $2058 = 0, $206 = 0, $2061 = 0, $2064 = 0, $2065 = 0, $2071 = 0, $2073 = 0, $2077 = 0, $2079 = 0, $208 = 0, $2081 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $209 = 0, $2091 = 0, $2093 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2099 = 0, $21 = 0, $2101 = 0, $2109 = 0, $211 = 0, $2111 = 0, $2112 = 0, $2114 = 0, $2117 = 0, $2120 = 0, $2121 = 0, $2126 = 0, $2128 = 0, $2129 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2135 = 0, $2137 = 0, $2144 = 0, $2146 = 0, $2147 = 0, $2150 = 0, $2152 = 0, $2155 = 0, $216 = 0, $2160 = 0, $2164 = 0, $2166 = 0, $2170 = 0, $2171 = 0, $2173 = 0, $2175 = 0, $2181 = 0, $2183 = 0, $2190 = 0, $2192 = 0, $2193 = 0, $2195 = 0, $2198 = 0, $22 = 0, $2201 = 0, $2202 = 0, $2208 = 0, $2210 = 0, $2220 = 0, $2221 = 0, $2223 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2234 = 0, $2238 = 0, $2240 = 0, $2241 = 0, $2244 = 0, $2247 = 0, $2249 = 0, $225 = 0, $2259 = 0, $2260 = 0, $2263 = 0, $2266 = 0, $2267 = 0, $2269 = 0, $2271 = 0, $2276 = 0, $2278 = 0, $2279 = 0, $2282 = 0, $2284 = 0, $2287 = 0, $2288 = 0, $2293 = 0, $2296 = 0, $2297 = 0, $23 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2309 = 0, $2313 = 0, $2316 = 0, $2319 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2337 = 0, $2341 = 0, $2343 = 0, $2347 = 0, $2349 = 0, $2350 = 0, $2353 = 0, $2355 = 0, $2368 = 0, $237 = 0, $2370 = 0, $2374 = 0, $2375 = 0, $2377 = 0, $2379 = 0, $2385 = 0, $2387 = 0, $2394 = 0, $2396 = 0, $2397 = 0, $2399 = 0, $24 = 0, $2402 = 0, $2405 = 0, $2406 = 0, $2412 = 0, $2414 = 0, $2418 = 0, $2420 = 0, $2424 = 0, $2426 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2433 = 0, $2435 = 0, $2441 = 0, $2443 = 0, $2450 = 0, $2452 = 0, $2453 = 0, $2455 = 0, $2458 = 0, $2461 = 0, $2462 = 0, $2468 = 0, $247 = 0, $2470 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $25 = 0, $251 = 0, $252 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $262 = 0, $269 = 0, $27 = 0, $271 = 0, $28 = 0, $283 = 0, $287 = 0, $29 = 0, $290 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $306 = 0, $309 = 0, $31 = 0, $312 = 0, $314 = 0, $32 = 0, $324 = 0, $329 = 0, $33 = 0, $330 = 0, $332 = 0, $333 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $344 = 0, $346 = 0, $347 = 0, $35 = 0, $352 = 0, $354 = 0, $357 = 0, $36 = 0, $361 = 0, $364 = 0, $368 = 0, $37 = 0, $370 = 0, $373 = 0, $374 = 0, $376 = 0, $378 = 0, $379 = 0, $38 = 0, $387 = 0, $39 = 0, $392 = 0, $393 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $403 = 0, $407 = 0, $409 = 0, $41 = 0, $42 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $427 = 0, $43 = 0, $430 = 0, $432 = 0, $439 = 0, $44 = 0, $446 = 0, $448 = 0, $45 = 0, $451 = 0, $455 = 0, $458 = 0, $46 = 0, $462 = 0, $464 = 0, $467 = 0, $468 = 0, $47 = 0, $470 = 0, $472 = 0, $473 = 0, $48 = 0, $481 = 0, $489 = 0, $49 = 0, $491 = 0, $495 = 0, $496 = 0, $498 = 0, $5 = 0, $50 = 0, $500 = 0, $506 = 0, $508 = 0, $51 = 0, $515 = 0, $517 = 0, $518 = 0, $520 = 0, $523 = 0, $526 = 0, $527 = 0, $533 = 0, $535 = 0, $539 = 0, $540 = 0, $543 = 0, $544 = 0, $547 = 0, $549 = 0, $55 = 0, $552 = 0, $553 = 0, $555 = 0, $557 = 0, $563 = 0, $565 = 0, $57 = 0, $572 = 0, $574 = 0, $575 = 0, $577 = 0, $58 = 0, $580 = 0, $583 = 0, $584 = 0, $590 = 0, $592 = 0, $597 = 0, $6 = 0, $601 = 0, $603 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $611 = 0, $612 = 0, $613 = 0, $615 = 0, $617 = 0, $619 = 0, $62 = 0, $623 = 0, $63 = 0, $630 = 0, $631 = 0, $635 = 0, $639 = 0, $649 = 0, $651 = 0, $660 = 0, $661 = 0, $662 = 0, $664 = 0, $667 = 0, $67 = 0, $672 = 0, $674 = 0, $685 = 0, $687 = 0, $69 = 0, $691 = 0, $692 = 0, $694 = 0, $696 = 0, $7 = 0, $70 = 0, $702 = 0, $704 = 0, $71 = 0, $711 = 0, $713 = 0, $714 = 0, $716 = 0, $719 = 0, $72 = 0, $722 = 0, $723 = 0, $729 = 0, $73 = 0, $731 = 0, $735 = 0, $736 = 0, $739 = 0, $740 = 0, $743 = 0, $745 = 0, $748 = 0, $749 = 0, $75 = 0, $751 = 0, $753 = 0, $759 = 0, $76 = 0, $761 = 0, $768 = 0, $770 = 0, $771 = 0, $773 = 0, $776 = 0, $779 = 0, $78 = 0, $780 = 0, $786 = 0, $788 = 0, $793 = 0, $794 = 0, $796 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $806 = 0, $807 = 0, $808 = 0, $81 = 0, $810 = 0, $812 = 0, $822 = 0, $823 = 0, $824 = 0, $827 = 0, $829 = 0, $83 = 0, $839 = 0, $842 = 0, $849 = 0, $851 = 0, $854 = 0, $858 = 0, $861 = 0, $865 = 0, $867 = 0, $870 = 0, $871 = 0, $873 = 0, $875 = 0, $876 = 0, $884 = 0, $889 = 0, $890 = 0, $893 = 0, $898 = 0, $9 = 0, $900 = 0, $903 = 0, $907 = 0, $91 = 0, $910 = 0, $914 = 0, $916 = 0, $919 = 0, $920 = 0, $922 = 0, $924 = 0, $925 = 0, $93 = 0, $933 = 0, $938 = 0, $94 = 0, $941 = 0, $943 = 0, $953 = 0, $956 = 0, $96 = 0, $963 = 0, $965 = 0, $968 = 0, $972 = 0, $975 = 0, $979 = 0, $981 = 0, $984 = 0, $985 = 0, $987 = 0, $989 = 0, $99 = 0, $990 = 0, $998 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i$i = 0, $__i$0$i$i$i$i$i251 = 0, $__i$0$i$i$i$i$i288 = 0, $__i$0$i$i$i$i226 = 0, $__i$0$i$i$i$i260 = 0, $__i$0$i$i$i$i43$i = 0, $__i$0$i$i$i$i72$i = 0, $__i$0$i$i$i$i74$i = 0, $__i$0$i$i$i$i93$i = 0, $__i$0$i$i$i17$i = 0, $__i$0$i$i$i193 = 0, $__i$0$i$i$i197 = 0, $__i$0$i$i$i20$i = 0, $__i$0$i$i$i200 = 0, $__i$0$i$i$i24$i = 0, $__i$0$i$i$i270 = 0, $__i$0$i$i$i34$i = 0, $__i$0$i$i$i35$i = 0, $__i$0$i$i$i38$i = 0, $__i$0$i$i$i42$i = 0, $__i$0$i$i$i45$i = 0, $__i$0$i$i$i46$i = 0, $__i$0$i$i$i47$i = 0, $__i$0$i$i$i49$i = 0, $__i$0$i$i$i50$i = 0, $__i$0$i$i$i53$i = 0, $__i$0$i$i$i54$i = 0, $__p$0$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__v$i$i$i = 0, $k$0 = 0, $k$0$i = 0, $k11$0 = 0, $k15$0 = 0, $k2$0$i = 0, $k20$0 = 0, $k5$0 = 0, $k8$0 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $phitmp$i = 0, $phitmp$i$i$i$i$i$i$i275 = 0, $phitmp$i183 = 0, $phitmp$i2$i$i$i$i$i$i278 = 0, $ref_qual$0$i$ph = 0, $ref_qual$0$i$ph$lcssa650 = 0, $t$0$i = 0, $t$1$i = 0, $t$1$i$lcssa644 = 0, $t$1$i$ph = 0, $t13$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i$i = sp + 704 | 0;
 $0 = sp + 680 | 0;
 $1 = sp + 668 | 0;
 $2 = sp + 656 | 0;
 $3 = sp + 632 | 0;
 $4 = sp + 608 | 0;
 $5 = sp + 584 | 0;
 $6 = sp + 572 | 0;
 $7 = sp + 560 | 0;
 $8 = sp + 548 | 0;
 $9 = sp + 536 | 0;
 $10 = sp + 384 | 0;
 $11 = sp + 520 | 0;
 $12 = sp + 512 | 0;
 $13 = sp + 496 | 0;
 $14 = sp + 488 | 0;
 $15 = sp + 472 | 0;
 $16 = sp + 464 | 0;
 $17 = sp + 448 | 0;
 $18 = sp + 440 | 0;
 $19 = sp + 424 | 0;
 $20 = sp + 420 | 0;
 $21 = sp + 408 | 0;
 $22 = sp + 396 | 0;
 $23 = sp + 372 | 0;
 $24 = sp + 360 | 0;
 $25 = sp + 344 | 0;
 $26 = sp + 340 | 0;
 $27 = sp + 328 | 0;
 $28 = sp + 304 | 0;
 $29 = sp + 288 | 0;
 $30 = sp + 276 | 0;
 $31 = sp + 264 | 0;
 $32 = sp + 240 | 0;
 $33 = sp + 228 | 0;
 $34 = sp + 216 | 0;
 $35 = sp + 204 | 0;
 $36 = sp + 192 | 0;
 $37 = sp + 168 | 0;
 $38 = sp + 156 | 0;
 $39 = sp + 144 | 0;
 $40 = sp + 128 | 0;
 $41 = sp + 120 | 0;
 $42 = sp + 104 | 0;
 $43 = sp + 96 | 0;
 $44 = sp + 80 | 0;
 $45 = sp + 72 | 0;
 $46 = sp + 56 | 0;
 $47 = sp + 48 | 0;
 $48 = sp + 32 | 0;
 $49 = sp + 24 | 0;
 $50 = sp + 8 | 0;
 $51 = sp;
 L1 : do if (($first | 0) == ($last | 0)) $$5 = $first; else {
  switch (HEAP8[$first >> 0] | 0) {
  case 75:
  case 86:
  case 114:
   {
    HEAP32[$0 >> 2] = 0;
    $55 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first, $last, $0) | 0;
    L5 : do if (($55 | 0) == ($first | 0)) $$13 = $first; else {
     $57 = HEAP8[$55 >> 0] | 0;
     $58 = $db + 4 | 0;
     $62 = ((HEAP32[$58 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $63 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($55, $last, $db) | 0;
     $67 = ((HEAP32[$58 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     if (($63 | 0) == ($55 | 0)) $$13 = $first; else {
      $69 = $57 << 24 >> 24 == 70;
      $70 = $db + 20 | 0;
      $71 = HEAP32[$70 >> 2] | 0;
      L8 : do if ($69) {
       $72 = $71 + -16 | 0;
       $73 = $71;
       while (1) {
        if (($73 | 0) == ($72 | 0)) {
         $81 = $72;
         break L8;
        }
        $75 = $73 + -16 | 0;
        HEAP32[$70 >> 2] = $75;
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($75);
        $73 = HEAP32[$70 >> 2] | 0;
       }
      } else $81 = $71; while (0);
      $76 = $db + 16 | 0;
      $78 = HEAP32[$db + 12 >> 2] | 0;
      $80 = HEAP32[$db + 24 >> 2] | 0;
      $83 = $80;
      if ($81 >>> 0 < $80 >>> 0) {
       HEAP32[$81 >> 2] = 0;
       HEAP32[$81 + 4 >> 2] = 0;
       HEAP32[$81 + 8 >> 2] = 0;
       HEAP32[$81 + 12 >> 2] = $78;
       HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + 16;
      } else {
       $91 = HEAP32[$76 >> 2] | 0;
       $93 = $81 - $91 >> 4;
       $94 = $93 + 1 | 0;
       if ($94 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($76);
       $96 = $83 - $91 | 0;
       if ($96 >> 4 >>> 0 < 134217727) {
        $99 = $96 >> 3;
        $$0$i$i$i57 = $99 >>> 0 < $94 >>> 0 ? $94 : $99;
       } else $$0$i$i$i57 = 268435455;
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i57, $93, $db + 28 | 0);
       $102 = $__v$i$i$i + 8 | 0;
       $103 = HEAP32[$102 >> 2] | 0;
       HEAP32[$103 >> 2] = 0;
       HEAP32[$103 + 4 >> 2] = 0;
       HEAP32[$103 + 8 >> 2] = 0;
       HEAP32[$103 + 12 >> 2] = $78;
       HEAP32[$102 >> 2] = $103 + 16;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($76, $__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      $108 = HEAP32[$0 >> 2] | 0;
      $110 = ($108 & 1 | 0) == 0;
      $112 = ($108 & 2 | 0) == 0;
      $114 = ($108 & 4 | 0) == 0;
      $115 = $__v$i$i$i + 8 | 0;
      $k$0 = $62;
      while (1) {
       if ($k$0 >>> 0 >= $67 >>> 0) {
        $$13 = $63;
        break L5;
       }
       if ($69) {
        $117 = HEAP32[$db >> 2] | 0;
        $118 = $117 + ($k$0 * 24 | 0) + 12 | 0;
        $119 = HEAP8[$118 >> 0] | 0;
        $121 = ($119 & 1) == 0;
        if ($121) {
         $$in = ($119 & 255) >>> 1;
         $131 = $118 + 1 | 0;
        } else {
         $$in = HEAP32[$117 + ($k$0 * 24 | 0) + 16 >> 2] | 0;
         $131 = HEAP32[$117 + ($k$0 * 24 | 0) + 20 >> 2] | 0;
        }
        $129 = $$in + -2 | 0;
        if ((HEAP8[$131 + $129 >> 0] | 0) == 38) $p$0 = $$in + -3 | 0; else {
         if ($121) {
          $143 = $118 + 1 | 0;
          $144 = ($119 & 255) >>> 1;
         } else {
          $143 = HEAP32[$117 + ($k$0 * 24 | 0) + 20 >> 2] | 0;
          $144 = HEAP32[$117 + ($k$0 * 24 | 0) + 16 >> 2] | 0;
         }
         $p$0 = (HEAP8[$143 + $144 + -1 >> 0] | 0) == 38 ? $129 : $$in;
        }
        if ($110) $p$1 = $p$0; else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($118, $p$0, 14311) | 0;
         $p$1 = $p$0 + 6 | 0;
        }
        if ($112) $p$2 = $p$1; else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) + 12 | 0, $p$1, 14318) | 0;
         $p$2 = $p$1 + 9 | 0;
        }
        if (!$114) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) + 12 | 0, $p$2, 14328) | 0;
       } else {
        if (!$110) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0, 14311) | 0;
        if (!$112) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0, 14318) | 0;
        if (!$114) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0, 14328) | 0;
       }
       $160 = HEAP32[$70 >> 2] | 0;
       $161 = $160 + -16 | 0;
       $162 = HEAP32[$db >> 2] | 0;
       $163 = $162 + ($k$0 * 24 | 0) | 0;
       $164 = $160 + -12 | 0;
       $165 = HEAP32[$164 >> 2] | 0;
       $167 = HEAP32[$160 + -8 >> 2] | 0;
       $169 = $167;
       if (($165 | 0) == ($167 | 0)) {
        $176 = HEAP32[$161 >> 2] | 0;
        $178 = ($165 - $176 | 0) / 24 | 0;
        $179 = $178 + 1 | 0;
        if ($179 >>> 0 > 178956970) {
         $$lcssa689 = $161;
         break;
        }
        $182 = ($169 - $176 | 0) / 24 | 0;
        if ($182 >>> 0 < 89478485) {
         $184 = $182 << 1;
         $$0$i$i$i62 = $184 >>> 0 < $179 >>> 0 ? $179 : $184;
        } else $$0$i$i$i62 = 178956970;
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i62, $178, $160 + -4 | 0);
        $187 = HEAP32[$115 >> 2] | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($187, $163);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($187 + 12 | 0, $162 + ($k$0 * 24 | 0) + 12 | 0);
        HEAP32[$115 >> 2] = $187 + 24;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($161, $__v$i$i$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($165, $163);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($165 + 12 | 0, $162 + ($k$0 * 24 | 0) + 12 | 0);
        HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 24;
       }
       $k$0 = $k$0 + 1 | 0;
      }
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa689);
     }
    } while (0);
    $$5 = $$13;
    break L1;
    break;
   }
  default:
   {}
  }
  $192 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  if (($192 | 0) == ($first | 0)) {
   $194 = HEAP8[$first >> 0] | 0;
   L69 : do switch ($194 << 24 >> 24 | 0) {
   case 65:
    {
     do if ($194 << 24 >> 24 == 65) {
      $197 = $first + 1 | 0;
      if (($197 | 0) == ($last | 0)) $$7$i257 = $first; else {
       $199 = HEAP8[$197 >> 0] | 0;
       if ($199 << 24 >> 24 == 95) {
        $201 = $first + 2 | 0;
        $202 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($201, $last, $db) | 0;
        if (($202 | 0) == ($201 | 0)) {
         $$7$i257 = $first;
         break;
        }
        $205 = $db + 4 | 0;
        $206 = HEAP32[$205 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($206 | 0)) {
         $$7$i257 = $first;
         break;
        }
        $208 = $206 + -12 | 0;
        HEAP32[$__v$i$i$i >> 2] = 0;
        HEAP32[$__v$i$i$i + 4 >> 2] = 0;
        HEAP32[$__v$i$i$i + 8 >> 2] = 0;
        $209 = HEAP8[$208 >> 0] | 0;
        $211 = ($209 & 1) == 0;
        $216 = $211 ? ($209 & 255) >>> 1 : HEAP32[$206 + -8 >> 2] | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($__v$i$i$i, $211 ? $208 + 1 | 0 : HEAP32[$206 + -4 >> 2] | 0, $216 >>> 0 < 2 ? $216 : 2);
        $223 = HEAP8[$__v$i$i$i >> 0] | 0;
        $225 = ($223 & 1) == 0;
        if ((($225 ? ($223 & 255) >>> 1 : HEAP32[$__v$i$i$i + 4 >> 2] | 0) | 0) == 2) {
         $237 = (__ZNSt3__111char_traitsIcE7compareEPKcS3_j($225 ? $__v$i$i$i + 1 | 0 : HEAP32[$__v$i$i$i + 8 >> 2] | 0, 14652, 2) | 0) == 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i$i);
         if ($237) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj((HEAP32[$205 >> 2] | 0) + -12 | 0);
        } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i$i);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$205 >> 2] | 0) + -12 | 0, 0, 14655) | 0;
        $$7$i257 = $202;
        break;
       }
       if (($199 + -49 & 255) < 9) {
        $243 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($197, $last) | 0;
        if (($243 | 0) == ($last | 0)) {
         $$7$i257 = $first;
         break;
        }
        if ((HEAP8[$243 >> 0] | 0) != 95) {
         $$7$i257 = $first;
         break;
        }
        $247 = $243 + 1 | 0;
        $248 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($247, $last, $db) | 0;
        if (($248 | 0) == ($247 | 0)) {
         $$7$i257 = $first;
         break;
        }
        $251 = $db + 4 | 0;
        $252 = HEAP32[$251 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($252 | 0)) {
         $$7$i257 = $first;
         break;
        }
        $254 = $252 + -12 | 0;
        HEAP32[$0 >> 2] = 0;
        HEAP32[$0 + 4 >> 2] = 0;
        HEAP32[$0 + 8 >> 2] = 0;
        $255 = HEAP8[$254 >> 0] | 0;
        $257 = ($255 & 1) == 0;
        $262 = $257 ? ($255 & 255) >>> 1 : HEAP32[$252 + -8 >> 2] | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $257 ? $254 + 1 | 0 : HEAP32[$252 + -4 >> 2] | 0, $262 >>> 0 < 2 ? $262 : 2);
        $269 = HEAP8[$0 >> 0] | 0;
        $271 = ($269 & 1) == 0;
        if ((($271 ? ($269 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0) == 2) {
         $283 = (__ZNSt3__111char_traitsIcE7compareEPKcS3_j($271 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, 14652, 2) | 0) == 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         if ($283) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj((HEAP32[$251 >> 2] | 0) + -12 | 0);
        } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
        $287 = (HEAP32[$251 >> 2] | 0) + -12 | 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$3 + 4 >> 2] = 0;
        HEAP32[$3 + 8 >> 2] = 0;
        $290 = $243 - $197 | 0;
        if ($290 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($3);
        if ($290 >>> 0 < 11) {
         HEAP8[$3 >> 0] = $290 << 1;
         $__p$0$ph$i$i$i = $3 + 1 | 0;
        } else {
         $297 = $290 + 16 & -16;
         $298 = _malloc($297) | 0;
         HEAP32[$3 + 8 >> 2] = $298;
         HEAP32[$3 >> 2] = $297 | 1;
         HEAP32[$3 + 4 >> 2] = $290;
         $__p$0$ph$i$i$i = $298;
        }
        $$0$i$i$i224 = $197;
        $__p$0$i$i$i = $__p$0$ph$i$i$i;
        while (1) {
         if (($$0$i$i$i224 | 0) == ($243 | 0)) break;
         HEAP8[$__p$0$i$i$i >> 0] = HEAP8[$$0$i$i$i224 >> 0] | 0;
         $$0$i$i$i224 = $$0$i$i$i224 + 1 | 0;
         $__p$0$i$i$i = $__p$0$i$i$i + 1 | 0;
        }
        HEAP8[$__p$0$ph$i$i$i + $290 >> 0] = 0;
        $306 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 14652) | 0;
        HEAP32[$2 >> 2] = HEAP32[$306 >> 2];
        HEAP32[$2 + 4 >> 2] = HEAP32[$306 + 4 >> 2];
        HEAP32[$2 + 8 >> 2] = HEAP32[$306 + 8 >> 2];
        $__i$0$i$i$i$i226 = 0;
        while (1) {
         if (($__i$0$i$i$i$i226 | 0) == 3) break;
         HEAP32[$306 + ($__i$0$i$i$i$i226 << 2) >> 2] = 0;
         $__i$0$i$i$i$i226 = $__i$0$i$i$i$i226 + 1 | 0;
        }
        $309 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2, 14659) | 0;
        HEAP32[$1 >> 2] = HEAP32[$309 >> 2];
        HEAP32[$1 + 4 >> 2] = HEAP32[$309 + 4 >> 2];
        HEAP32[$1 + 8 >> 2] = HEAP32[$309 + 8 >> 2];
        $__i$0$i$i$i35$i = 0;
        while (1) {
         if (($__i$0$i$i$i35$i | 0) == 3) break;
         HEAP32[$309 + ($__i$0$i$i$i35$i << 2) >> 2] = 0;
         $__i$0$i$i$i35$i = $__i$0$i$i$i35$i + 1 | 0;
        }
        $312 = HEAP8[$1 >> 0] | 0;
        $314 = ($312 & 1) == 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($287, 0, $314 ? $1 + 1 | 0 : HEAP32[$1 + 8 >> 2] | 0, $314 ? ($312 & 255) >>> 1 : HEAP32[$1 + 4 >> 2] | 0) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$7$i257 = $248;
        break;
       }
       $324 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($197, $last, $db) | 0;
       if (($324 | 0) == ($197 | 0) | ($324 | 0) == ($last | 0)) $$7$i257 = $first; else if ((HEAP8[$324 >> 0] | 0) == 95) {
        $329 = $324 + 1 | 0;
        $330 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($329, $last, $db) | 0;
        if (($330 | 0) == ($329 | 0)) $$7$i257 = $first; else {
         $332 = $db + 4 | 0;
         $333 = HEAP32[$332 >> 2] | 0;
         if ((($333 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$7$i257 = $first; else {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4, $333 + -24 | 0);
          $340 = HEAP32[$332 >> 2] | 0;
          $341 = $340 + -24 | 0;
          $342 = $340;
          while (1) {
           if (($342 | 0) == ($341 | 0)) break;
           $344 = $342 + -24 | 0;
           HEAP32[$332 >> 2] = $344;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($344);
           $342 = HEAP32[$332 >> 2] | 0;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5, $340 + -48 | 0);
          $346 = HEAP32[$332 >> 2] | 0;
          $347 = $346 + -24 | 0;
          do if (!(HEAP8[$347 >> 0] & 1)) {
           HEAP8[$347 + 1 >> 0] = 0;
           HEAP8[$347 >> 0] = 0;
          } else {
           $352 = $346 + -16 | 0;
           HEAP8[HEAP32[$352 >> 2] >> 0] = 0;
           $354 = $346 + -20 | 0;
           HEAP32[$354 >> 2] = 0;
           $$pre$i$i$i$i236 = HEAP8[$347 >> 0] | 0;
           if (!($$pre$i$i$i$i236 & 1)) {
            $361 = $$pre$i$i$i$i236;
            $370 = 10;
           } else {
            $357 = HEAP32[$347 >> 2] | 0;
            $361 = $357 & 255;
            $370 = ($357 & -2) + -1 | 0;
           }
           if (!($361 & 1)) {
            $364 = ($361 & 255) >>> 1;
            if (($361 & 255) < 22) {
             $2474 = 1;
             $368 = 10;
             $387 = $364;
            } else {
             $2474 = 1;
             $368 = ($364 + 16 & 240) + -1 | 0;
             $387 = $364;
            }
           } else {
            $2474 = 0;
            $368 = 10;
            $387 = 0;
           }
           if (($368 | 0) != ($370 | 0)) {
            if (($368 | 0) == 10) {
             $378 = $347 + 1 | 0;
             $379 = HEAP32[$352 >> 2] | 0;
             if ($2474) {
              _memcpy($378 | 0, $379 | 0, (($361 & 255) >>> 1) + 1 | 0) | 0;
              _free($379);
             } else {
              HEAP8[$378 >> 0] = HEAP8[$379 >> 0] | 0;
              _free($379);
             }
             HEAP8[$347 >> 0] = $387 << 1;
             break;
            }
            $373 = $368 + 1 | 0;
            $374 = _malloc($373) | 0;
            if (!($368 >>> 0 <= $370 >>> 0 & ($374 | 0) == 0)) {
             if ($2474) _memcpy($374 | 0, $347 + 1 | 0, (($361 & 255) >>> 1) + 1 | 0) | 0; else {
              $376 = HEAP32[$352 >> 2] | 0;
              HEAP8[$374 >> 0] = HEAP8[$376 >> 0] | 0;
              _free($376);
             }
             HEAP32[$347 >> 2] = $373 | 1;
             HEAP32[$354 >> 2] = $387;
             HEAP32[$352 >> 2] = $374;
            }
           }
          } while (0);
          HEAP32[$347 >> 2] = HEAP32[$4 >> 2];
          HEAP32[$347 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
          HEAP32[$347 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
          $__i$0$i$i$i$i$i251 = 0;
          while (1) {
           if (($__i$0$i$i$i$i$i251 | 0) == 3) break;
           HEAP32[$4 + ($__i$0$i$i$i$i$i251 << 2) >> 2] = 0;
           $__i$0$i$i$i$i$i251 = $__i$0$i$i$i$i$i251 + 1 | 0;
          }
          $392 = $4 + 12 | 0;
          HEAP32[$6 >> 2] = 0;
          HEAP32[$6 + 4 >> 2] = 0;
          HEAP32[$6 + 8 >> 2] = 0;
          $393 = HEAP8[$392 >> 0] | 0;
          $395 = ($393 & 1) == 0;
          $396 = $4 + 16 | 0;
          $400 = $395 ? ($393 & 255) >>> 1 : HEAP32[$396 >> 2] | 0;
          $401 = $4 + 20 | 0;
          $403 = $392 + 1 | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6, $395 ? $403 : HEAP32[$401 >> 2] | 0, $400 >>> 0 < 2 ? $400 : 2);
          $407 = HEAP8[$6 >> 0] | 0;
          $409 = ($407 & 1) == 0;
          if ((($409 ? ($407 & 255) >>> 1 : HEAP32[$6 + 4 >> 2] | 0) | 0) == 2) {
           $421 = (__ZNSt3__111char_traitsIcE7compareEPKcS3_j($409 ? $6 + 1 | 0 : HEAP32[$6 + 8 >> 2] | 0, 14652, 2) | 0) == 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
           if ($421) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($392);
          } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
          $422 = HEAP32[$332 >> 2] | 0;
          $423 = $422 + -12 | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($10, $5);
          $424 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($10, 0, 14652) | 0;
          HEAP32[$9 >> 2] = HEAP32[$424 >> 2];
          HEAP32[$9 + 4 >> 2] = HEAP32[$424 + 4 >> 2];
          HEAP32[$9 + 8 >> 2] = HEAP32[$424 + 8 >> 2];
          $__i$0$i$i$i45$i = 0;
          while (1) {
           if (($__i$0$i$i$i45$i | 0) == 3) break;
           HEAP32[$424 + ($__i$0$i$i$i45$i << 2) >> 2] = 0;
           $__i$0$i$i$i45$i = $__i$0$i$i$i45$i + 1 | 0;
          }
          $427 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9, 14659) | 0;
          HEAP32[$8 >> 2] = HEAP32[$427 >> 2];
          HEAP32[$8 + 4 >> 2] = HEAP32[$427 + 4 >> 2];
          HEAP32[$8 + 8 >> 2] = HEAP32[$427 + 8 >> 2];
          $__i$0$i$i$i49$i = 0;
          while (1) {
           if (($__i$0$i$i$i49$i | 0) == 3) break;
           HEAP32[$427 + ($__i$0$i$i$i49$i << 2) >> 2] = 0;
           $__i$0$i$i$i49$i = $__i$0$i$i$i49$i + 1 | 0;
          }
          $430 = HEAP8[$392 >> 0] | 0;
          $432 = ($430 & 1) == 0;
          $439 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8, $432 ? $403 : HEAP32[$401 >> 2] | 0, $432 ? ($430 & 255) >>> 1 : HEAP32[$396 >> 2] | 0) | 0;
          HEAP32[$7 >> 2] = HEAP32[$439 >> 2];
          HEAP32[$7 + 4 >> 2] = HEAP32[$439 + 4 >> 2];
          HEAP32[$7 + 8 >> 2] = HEAP32[$439 + 8 >> 2];
          $__i$0$i$i$i53$i = 0;
          while (1) {
           if (($__i$0$i$i$i53$i | 0) == 3) break;
           HEAP32[$439 + ($__i$0$i$i$i53$i << 2) >> 2] = 0;
           $__i$0$i$i$i53$i = $__i$0$i$i$i53$i + 1 | 0;
          }
          do if (!(HEAP8[$423 >> 0] & 1)) {
           HEAP8[$423 + 1 >> 0] = 0;
           HEAP8[$423 >> 0] = 0;
          } else {
           $446 = $422 + -4 | 0;
           HEAP8[HEAP32[$446 >> 2] >> 0] = 0;
           $448 = $422 + -8 | 0;
           HEAP32[$448 >> 2] = 0;
           $$pre$i$i$i57$i = HEAP8[$423 >> 0] | 0;
           if (!($$pre$i$i$i57$i & 1)) {
            $455 = $$pre$i$i$i57$i;
            $464 = 10;
           } else {
            $451 = HEAP32[$423 >> 2] | 0;
            $455 = $451 & 255;
            $464 = ($451 & -2) + -1 | 0;
           }
           do if (!($455 & 1)) {
            $458 = ($455 & 255) >>> 1;
            if (($455 & 255) < 22) {
             $2475 = 1;
             $462 = 10;
             $481 = $458;
             break;
            }
            $2475 = 1;
            $462 = ($458 + 16 & 240) + -1 | 0;
            $481 = $458;
           } else {
            $2475 = 0;
            $462 = 10;
            $481 = 0;
           } while (0);
           if (($462 | 0) != ($464 | 0)) {
            if (($462 | 0) == 10) {
             $472 = $423 + 1 | 0;
             $473 = HEAP32[$446 >> 2] | 0;
             if ($2475) {
              _memcpy($472 | 0, $473 | 0, (($455 & 255) >>> 1) + 1 | 0) | 0;
              _free($473);
             } else {
              HEAP8[$472 >> 0] = HEAP8[$473 >> 0] | 0;
              _free($473);
             }
             HEAP8[$423 >> 0] = $481 << 1;
             break;
            }
            $467 = $462 + 1 | 0;
            $468 = _malloc($467) | 0;
            if ($462 >>> 0 <= $464 >>> 0 & ($468 | 0) == 0) break;
            if ($2475) _memcpy($468 | 0, $423 + 1 | 0, (($455 & 255) >>> 1) + 1 | 0) | 0; else {
             $470 = HEAP32[$446 >> 2] | 0;
             HEAP8[$468 >> 0] = HEAP8[$470 >> 0] | 0;
             _free($470);
            }
            HEAP32[$423 >> 2] = $467 | 1;
            HEAP32[$448 >> 2] = $481;
            HEAP32[$446 >> 2] = $468;
           }
          } while (0);
          HEAP32[$423 >> 2] = HEAP32[$7 >> 2];
          HEAP32[$423 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
          HEAP32[$423 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
          $__i$0$i$i$i$i72$i = 0;
          while (1) {
           if (($__i$0$i$i$i$i72$i | 0) == 3) break;
           HEAP32[$7 + ($__i$0$i$i$i$i72$i << 2) >> 2] = 0;
           $__i$0$i$i$i$i72$i = $__i$0$i$i$i$i72$i + 1 | 0;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
          $$7$i257 = $330;
         }
        }
       } else $$7$i257 = $first;
      }
     } else $$7$i257 = $first; while (0);
     if (($$7$i257 | 0) == ($first | 0)) {
      $$5 = $first;
      break L1;
     }
     $489 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($489 | 0)) {
      $$5 = $first;
      break L1;
     }
     $491 = $db + 16 | 0;
     HEAP32[$12 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($11, $489 + -24 | 0, $12);
     $495 = $db + 20 | 0;
     $496 = HEAP32[$495 >> 2] | 0;
     $498 = HEAP32[$db + 24 >> 2] | 0;
     $500 = $498;
     if ($496 >>> 0 < $498 >>> 0) {
      HEAP32[$496 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
      HEAP32[$496 >> 2] = HEAP32[$11 >> 2];
      $506 = $11 + 4 | 0;
      HEAP32[$496 + 4 >> 2] = HEAP32[$506 >> 2];
      $508 = $11 + 8 | 0;
      HEAP32[$496 + 8 >> 2] = HEAP32[$508 >> 2];
      HEAP32[$508 >> 2] = 0;
      HEAP32[$506 >> 2] = 0;
      HEAP32[$11 >> 2] = 0;
      HEAP32[$495 >> 2] = (HEAP32[$495 >> 2] | 0) + 16;
     } else {
      $515 = HEAP32[$491 >> 2] | 0;
      $517 = $496 - $515 >> 4;
      $518 = $517 + 1 | 0;
      if ($518 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($491);
      $520 = $500 - $515 | 0;
      if ($520 >> 4 >>> 0 < 134217727) {
       $523 = $520 >> 3;
       $$0$i$i$i75 = $523 >>> 0 < $518 >>> 0 ? $518 : $523;
      } else $$0$i$i$i75 = 268435455;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i75, $517, $db + 28 | 0);
      $526 = $__v$i$i$i + 8 | 0;
      $527 = HEAP32[$526 >> 2] | 0;
      HEAP32[$527 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
      HEAP32[$527 >> 2] = HEAP32[$11 >> 2];
      $533 = $11 + 4 | 0;
      HEAP32[$527 + 4 >> 2] = HEAP32[$533 >> 2];
      $535 = $11 + 8 | 0;
      HEAP32[$527 + 8 >> 2] = HEAP32[$535 >> 2];
      HEAP32[$535 >> 2] = 0;
      HEAP32[$533 >> 2] = 0;
      HEAP32[$11 >> 2] = 0;
      HEAP32[$526 >> 2] = $527 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($491, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($11);
     $$5 = $$7$i257;
     break L1;
     break;
    }
   case 67:
    {
     $539 = $first + 1 | 0;
     $540 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($539, $last, $db) | 0;
     if (($540 | 0) == ($539 | 0)) {
      $$5 = $first;
      break L1;
     }
     $543 = $db + 4 | 0;
     $544 = HEAP32[$543 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($544 | 0)) {
      $$5 = $first;
      break L1;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($544 + -24 | 0, 15893) | 0;
     $547 = $db + 16 | 0;
     $549 = (HEAP32[$543 >> 2] | 0) + -24 | 0;
     HEAP32[$14 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($13, $549, $14);
     $552 = $db + 20 | 0;
     $553 = HEAP32[$552 >> 2] | 0;
     $555 = HEAP32[$db + 24 >> 2] | 0;
     $557 = $555;
     if ($553 >>> 0 < $555 >>> 0) {
      HEAP32[$553 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
      HEAP32[$553 >> 2] = HEAP32[$13 >> 2];
      $563 = $13 + 4 | 0;
      HEAP32[$553 + 4 >> 2] = HEAP32[$563 >> 2];
      $565 = $13 + 8 | 0;
      HEAP32[$553 + 8 >> 2] = HEAP32[$565 >> 2];
      HEAP32[$565 >> 2] = 0;
      HEAP32[$563 >> 2] = 0;
      HEAP32[$13 >> 2] = 0;
      HEAP32[$552 >> 2] = (HEAP32[$552 >> 2] | 0) + 16;
     } else {
      $572 = HEAP32[$547 >> 2] | 0;
      $574 = $553 - $572 >> 4;
      $575 = $574 + 1 | 0;
      if ($575 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($547);
      $577 = $557 - $572 | 0;
      if ($577 >> 4 >>> 0 < 134217727) {
       $580 = $577 >> 3;
       $$0$i$i$i80 = $580 >>> 0 < $575 >>> 0 ? $575 : $580;
      } else $$0$i$i$i80 = 268435455;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i80, $574, $db + 28 | 0);
      $583 = $__v$i$i$i + 8 | 0;
      $584 = HEAP32[$583 >> 2] | 0;
      HEAP32[$584 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
      HEAP32[$584 >> 2] = HEAP32[$13 >> 2];
      $590 = $13 + 4 | 0;
      HEAP32[$584 + 4 >> 2] = HEAP32[$590 >> 2];
      $592 = $13 + 8 | 0;
      HEAP32[$584 + 8 >> 2] = HEAP32[$592 >> 2];
      HEAP32[$592 >> 2] = 0;
      HEAP32[$590 >> 2] = 0;
      HEAP32[$13 >> 2] = 0;
      HEAP32[$583 >> 2] = $584 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($547, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($13);
     $$5 = $540;
     break L1;
     break;
    }
   case 70:
    {
     do if ($194 << 24 >> 24 == 70) {
      $597 = $first + 1 | 0;
      if (($597 | 0) != ($last | 0)) {
       if ((HEAP8[$597 >> 0] | 0) == 89) {
        $601 = $first + 2 | 0;
        if (($601 | 0) == ($last | 0)) break; else $t$0$i = $601;
       } else $t$0$i = $597;
       $603 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$0$i, $last, $db) | 0;
       if (($603 | 0) != ($t$0$i | 0)) {
        HEAP32[$__v$i$i$i >> 2] = 0;
        HEAP32[$__v$i$i$i + 4 >> 2] = 0;
        HEAP32[$__v$i$i$i + 8 >> 2] = 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($__v$i$i$i, 14661, 1);
        $605 = $db + 4 | 0;
        $606 = $__v$i$i$i + 4 | 0;
        $607 = $0 + 8 | 0;
        $608 = $0 + 1 | 0;
        $609 = $0 + 4 | 0;
        $ref_qual$0$i$ph = 0;
        $t$1$i$ph = $603;
        L231 : while (1) {
         $t$1$i = $t$1$i$ph;
         L233 : while (1) {
          if (($t$1$i | 0) == ($last | 0)) {
           label = 176;
           break L231;
          }
          switch (HEAP8[$t$1$i >> 0] | 0) {
          case 69:
           {
            $ref_qual$0$i$ph$lcssa650 = $ref_qual$0$i$ph;
            $t$1$i$lcssa644 = $t$1$i;
            label = 180;
            break L231;
            break;
           }
          case 118:
           {
            $t$1$i = $t$1$i + 1 | 0;
            continue L233;
            break;
           }
          case 82:
           {
            $619 = $t$1$i + 1 | 0;
            if (($619 | 0) != ($last | 0)) if ((HEAP8[$619 >> 0] | 0) == 69) {
             $ref_qual$0$i$ph = 1;
             $t$1$i$ph = $619;
             continue L231;
            }
            break;
           }
          case 79:
           {
            $623 = $t$1$i + 1 | 0;
            if (($623 | 0) != ($last | 0)) if ((HEAP8[$623 >> 0] | 0) == 69) {
             $ref_qual$0$i$ph = 2;
             $t$1$i$ph = $623;
             continue L231;
            }
            break;
           }
          default:
           {}
          }
          $630 = ((HEAP32[$605 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
          $631 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$1$i, $last, $db) | 0;
          $635 = ((HEAP32[$605 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
          if (($631 | 0) == ($t$1$i | 0) | ($631 | 0) == ($last | 0)) break L231; else $k$0$i = $630;
          while (1) {
           if ($k$0$i >>> 0 >= $635 >>> 0) {
            $k2$0$i = $630;
            break;
           }
           $639 = HEAP8[$__v$i$i$i >> 0] | 0;
           if ((($639 & 1) == 0 ? ($639 & 255) >>> 1 : HEAP32[$606 >> 2] | 0) >>> 0 > 1) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i, 15295) | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, (HEAP32[$db >> 2] | 0) + ($k$0$i * 24 | 0) | 0);
           $649 = HEAP8[$0 >> 0] | 0;
           $651 = ($649 & 1) == 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($__v$i$i$i, $651 ? $608 : HEAP32[$607 >> 2] | 0, $651 ? ($649 & 255) >>> 1 : HEAP32[$609 >> 2] | 0) | 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
           $k$0$i = $k$0$i + 1 | 0;
          }
          while (1) {
           if ($k2$0$i >>> 0 >= $635 >>> 0) {
            $t$1$i = $631;
            continue L233;
           }
           $660 = HEAP32[$605 >> 2] | 0;
           $661 = $660 + -24 | 0;
           $662 = $660;
           while (1) {
            if (($662 | 0) == ($661 | 0)) break;
            $664 = $662 + -24 | 0;
            HEAP32[$605 >> 2] = $664;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($664);
            $662 = HEAP32[$605 >> 2] | 0;
           }
           $k2$0$i = $k2$0$i + 1 | 0;
          }
         }
        }
        L256 : do if ((label | 0) == 176) {
         $611 = HEAP32[$605 >> 2] | 0;
         $612 = $611 + -24 | 0;
         $613 = $611;
         while (1) {
          if (($613 | 0) == ($612 | 0)) break L256;
          $615 = $613 + -24 | 0;
          HEAP32[$605 >> 2] = $615;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($615);
          $613 = HEAP32[$605 >> 2] | 0;
         }
        } else if ((label | 0) == 180) {
         $617 = $t$1$i$lcssa644 + 1 | 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i, 14663) | 0;
         switch ($ref_qual$0$i$ph$lcssa650 | 0) {
         case 1:
          {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i, 15902) | 0;
           break;
          }
         case 2:
          {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i, 15905) | 0;
           break;
          }
         default:
          {}
         }
         $667 = HEAP32[$605 >> 2] | 0;
         if ((HEAP32[$db >> 2] | 0) != ($667 | 0)) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($667 + -24 | 0, 15752) | 0;
          $672 = HEAP8[$__v$i$i$i >> 0] | 0;
          $674 = ($672 & 1) == 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$605 >> 2] | 0) + -12 | 0, 0, $674 ? $__v$i$i$i + 1 | 0 : HEAP32[$__v$i$i$i + 8 >> 2] | 0, $674 ? ($672 & 255) >>> 1 : HEAP32[$606 >> 2] | 0) | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i$i);
          if (($617 | 0) == ($first | 0)) {
           $$5 = $first;
           break L1;
          }
          $685 = HEAP32[$605 >> 2] | 0;
          if ((HEAP32[$db >> 2] | 0) == ($685 | 0)) {
           $$5 = $first;
           break L1;
          }
          $687 = $db + 16 | 0;
          HEAP32[$16 >> 2] = HEAP32[$db + 12 >> 2];
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($15, $685 + -24 | 0, $16);
          $691 = $db + 20 | 0;
          $692 = HEAP32[$691 >> 2] | 0;
          $694 = HEAP32[$db + 24 >> 2] | 0;
          $696 = $694;
          if ($692 >>> 0 < $694 >>> 0) {
           HEAP32[$692 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
           HEAP32[$692 >> 2] = HEAP32[$15 >> 2];
           $702 = $15 + 4 | 0;
           HEAP32[$692 + 4 >> 2] = HEAP32[$702 >> 2];
           $704 = $15 + 8 | 0;
           HEAP32[$692 + 8 >> 2] = HEAP32[$704 >> 2];
           HEAP32[$704 >> 2] = 0;
           HEAP32[$702 >> 2] = 0;
           HEAP32[$15 >> 2] = 0;
           HEAP32[$691 >> 2] = (HEAP32[$691 >> 2] | 0) + 16;
          } else {
           $711 = HEAP32[$687 >> 2] | 0;
           $713 = $692 - $711 >> 4;
           $714 = $713 + 1 | 0;
           if ($714 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($687);
           $716 = $696 - $711 | 0;
           if ($716 >> 4 >>> 0 < 134217727) {
            $719 = $716 >> 3;
            $$0$i$i$i85 = $719 >>> 0 < $714 >>> 0 ? $714 : $719;
           } else $$0$i$i$i85 = 268435455;
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i85, $713, $db + 28 | 0);
           $722 = $__v$i$i$i + 8 | 0;
           $723 = HEAP32[$722 >> 2] | 0;
           HEAP32[$723 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
           HEAP32[$723 >> 2] = HEAP32[$15 >> 2];
           $729 = $15 + 4 | 0;
           HEAP32[$723 + 4 >> 2] = HEAP32[$729 >> 2];
           $731 = $15 + 8 | 0;
           HEAP32[$723 + 8 >> 2] = HEAP32[$731 >> 2];
           HEAP32[$731 >> 2] = 0;
           HEAP32[$729 >> 2] = 0;
           HEAP32[$15 >> 2] = 0;
           HEAP32[$722 >> 2] = $723 + 16;
           __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($687, $__v$i$i$i);
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
          }
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($15);
          $$5 = $617;
          break L1;
         }
        } while (0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i$i);
        break;
       }
      }
      $$5 = $first;
      break L1;
     } while (0);
     $$5 = $first;
     break L1;
     break;
    }
   case 71:
    {
     $735 = $first + 1 | 0;
     $736 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($735, $last, $db) | 0;
     if (($736 | 0) == ($735 | 0)) {
      $$5 = $first;
      break L1;
     }
     $739 = $db + 4 | 0;
     $740 = HEAP32[$739 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($740 | 0)) {
      $$5 = $first;
      break L1;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($740 + -24 | 0, 15909) | 0;
     $743 = $db + 16 | 0;
     $745 = (HEAP32[$739 >> 2] | 0) + -24 | 0;
     HEAP32[$18 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($17, $745, $18);
     $748 = $db + 20 | 0;
     $749 = HEAP32[$748 >> 2] | 0;
     $751 = HEAP32[$db + 24 >> 2] | 0;
     $753 = $751;
     if ($749 >>> 0 < $751 >>> 0) {
      HEAP32[$749 + 12 >> 2] = HEAP32[$17 + 12 >> 2];
      HEAP32[$749 >> 2] = HEAP32[$17 >> 2];
      $759 = $17 + 4 | 0;
      HEAP32[$749 + 4 >> 2] = HEAP32[$759 >> 2];
      $761 = $17 + 8 | 0;
      HEAP32[$749 + 8 >> 2] = HEAP32[$761 >> 2];
      HEAP32[$761 >> 2] = 0;
      HEAP32[$759 >> 2] = 0;
      HEAP32[$17 >> 2] = 0;
      HEAP32[$748 >> 2] = (HEAP32[$748 >> 2] | 0) + 16;
     } else {
      $768 = HEAP32[$743 >> 2] | 0;
      $770 = $749 - $768 >> 4;
      $771 = $770 + 1 | 0;
      if ($771 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($743);
      $773 = $753 - $768 | 0;
      if ($773 >> 4 >>> 0 < 134217727) {
       $776 = $773 >> 3;
       $$0$i$i$i90 = $776 >>> 0 < $771 >>> 0 ? $771 : $776;
      } else $$0$i$i$i90 = 268435455;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i90, $770, $db + 28 | 0);
      $779 = $__v$i$i$i + 8 | 0;
      $780 = HEAP32[$779 >> 2] | 0;
      HEAP32[$780 + 12 >> 2] = HEAP32[$17 + 12 >> 2];
      HEAP32[$780 >> 2] = HEAP32[$17 >> 2];
      $786 = $17 + 4 | 0;
      HEAP32[$780 + 4 >> 2] = HEAP32[$786 >> 2];
      $788 = $17 + 8 | 0;
      HEAP32[$780 + 8 >> 2] = HEAP32[$788 >> 2];
      HEAP32[$788 >> 2] = 0;
      HEAP32[$786 >> 2] = 0;
      HEAP32[$17 >> 2] = 0;
      HEAP32[$779 >> 2] = $780 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($743, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($17);
     $$5 = $736;
     break L1;
     break;
    }
   case 77:
    {
     if ($194 << 24 >> 24 == 77) {
      $793 = $first + 1 | 0;
      $794 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($793, $last, $db) | 0;
      if (($794 | 0) == ($793 | 0)) $$311$i = $first; else {
       $796 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($794, $last, $db) | 0;
       if (($796 | 0) == ($794 | 0)) $$311$i = $first; else {
        $798 = $db + 4 | 0;
        $799 = HEAP32[$798 >> 2] | 0;
        if ((($799 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$311$i = $first; else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($__v$i$i$i, $799 + -24 | 0);
         $806 = HEAP32[$798 >> 2] | 0;
         $807 = $806 + -24 | 0;
         $808 = $806;
         while (1) {
          if (($808 | 0) == ($807 | 0)) break;
          $810 = $808 + -24 | 0;
          HEAP32[$798 >> 2] = $810;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($810);
          $808 = HEAP32[$798 >> 2] | 0;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($0, $806 + -48 | 0);
         $812 = $__v$i$i$i + 12 | 0;
         $822 = HEAP32[$798 >> 2] | 0;
         $823 = $822 + -24 | 0;
         L305 : do if ((HEAP8[((HEAP8[$812 >> 0] & 1) == 0 ? $812 + 1 | 0 : HEAP32[$__v$i$i$i + 20 >> 2] | 0) >> 0] | 0) == 40) {
          $824 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i, 14661) | 0;
          HEAP32[$3 >> 2] = HEAP32[$824 >> 2];
          HEAP32[$3 + 4 >> 2] = HEAP32[$824 + 4 >> 2];
          HEAP32[$3 + 8 >> 2] = HEAP32[$824 + 8 >> 2];
          $__i$0$i$i$i$i = 0;
          while (1) {
           if (($__i$0$i$i$i$i | 0) == 3) break;
           HEAP32[$824 + ($__i$0$i$i$i$i << 2) >> 2] = 0;
           $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, $0);
          $827 = HEAP8[$4 >> 0] | 0;
          $829 = ($827 & 1) == 0;
          $839 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3, $829 ? $4 + 1 | 0 : HEAP32[$4 + 8 >> 2] | 0, $829 ? ($827 & 255) >>> 1 : HEAP32[$4 + 4 >> 2] | 0) | 0;
          HEAP32[$2 >> 2] = HEAP32[$839 >> 2];
          HEAP32[$2 + 4 >> 2] = HEAP32[$839 + 4 >> 2];
          HEAP32[$2 + 8 >> 2] = HEAP32[$839 + 8 >> 2];
          $__i$0$i$i$i17$i = 0;
          while (1) {
           if (($__i$0$i$i$i17$i | 0) == 3) break;
           HEAP32[$839 + ($__i$0$i$i$i17$i << 2) >> 2] = 0;
           $__i$0$i$i$i17$i = $__i$0$i$i$i17$i + 1 | 0;
          }
          $842 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2, 15920) | 0;
          HEAP32[$1 >> 2] = HEAP32[$842 >> 2];
          HEAP32[$1 + 4 >> 2] = HEAP32[$842 + 4 >> 2];
          HEAP32[$1 + 8 >> 2] = HEAP32[$842 + 8 >> 2];
          $__i$0$i$i$i20$i = 0;
          while (1) {
           if (($__i$0$i$i$i20$i | 0) == 3) break;
           HEAP32[$842 + ($__i$0$i$i$i20$i << 2) >> 2] = 0;
           $__i$0$i$i$i20$i = $__i$0$i$i$i20$i + 1 | 0;
          }
          do if (!(HEAP8[$823 >> 0] & 1)) {
           HEAP8[$823 + 1 >> 0] = 0;
           HEAP8[$823 >> 0] = 0;
          } else {
           $849 = $822 + -16 | 0;
           HEAP8[HEAP32[$849 >> 2] >> 0] = 0;
           $851 = $822 + -20 | 0;
           HEAP32[$851 >> 2] = 0;
           $$pre$i$i$i$i = HEAP8[$823 >> 0] | 0;
           if (!($$pre$i$i$i$i & 1)) {
            $858 = $$pre$i$i$i$i;
            $867 = 10;
           } else {
            $854 = HEAP32[$823 >> 2] | 0;
            $858 = $854 & 255;
            $867 = ($854 & -2) + -1 | 0;
           }
           if (!($858 & 1)) {
            $861 = ($858 & 255) >>> 1;
            if (($858 & 255) < 22) {
             $2476 = 1;
             $865 = 10;
             $884 = $861;
            } else {
             $2476 = 1;
             $865 = ($861 + 16 & 240) + -1 | 0;
             $884 = $861;
            }
           } else {
            $2476 = 0;
            $865 = 10;
            $884 = 0;
           }
           if (($865 | 0) != ($867 | 0)) {
            if (($865 | 0) == 10) {
             $875 = $823 + 1 | 0;
             $876 = HEAP32[$849 >> 2] | 0;
             if ($2476) {
              _memcpy($875 | 0, $876 | 0, (($858 & 255) >>> 1) + 1 | 0) | 0;
              _free($876);
             } else {
              HEAP8[$875 >> 0] = HEAP8[$876 >> 0] | 0;
              _free($876);
             }
             HEAP8[$823 >> 0] = $884 << 1;
             break;
            }
            $870 = $865 + 1 | 0;
            $871 = _malloc($870) | 0;
            if (!($865 >>> 0 <= $867 >>> 0 & ($871 | 0) == 0)) {
             if ($2476) _memcpy($871 | 0, $823 + 1 | 0, (($858 & 255) >>> 1) + 1 | 0) | 0; else {
              $873 = HEAP32[$849 >> 2] | 0;
              HEAP8[$871 >> 0] = HEAP8[$873 >> 0] | 0;
              _free($873);
             }
             HEAP32[$823 >> 2] = $870 | 1;
             HEAP32[$851 >> 2] = $884;
             HEAP32[$849 >> 2] = $871;
            }
           }
          } while (0);
          HEAP32[$823 >> 2] = HEAP32[$1 >> 2];
          HEAP32[$823 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
          HEAP32[$823 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
          $__i$0$i$i$i$i$i = 0;
          while (1) {
           if (($__i$0$i$i$i$i$i | 0) == 3) break;
           HEAP32[$1 + ($__i$0$i$i$i$i$i << 2) >> 2] = 0;
           $__i$0$i$i$i$i$i = $__i$0$i$i$i$i$i + 1 | 0;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $889 = HEAP32[$798 >> 2] | 0;
          $890 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($812, 0, 14663) | 0;
          HEAP32[$5 >> 2] = HEAP32[$890 >> 2];
          HEAP32[$5 + 4 >> 2] = HEAP32[$890 + 4 >> 2];
          HEAP32[$5 + 8 >> 2] = HEAP32[$890 + 8 >> 2];
          $__i$0$i$i$i24$i = 0;
          while (1) {
           if (($__i$0$i$i$i24$i | 0) == 3) break;
           HEAP32[$890 + ($__i$0$i$i$i24$i << 2) >> 2] = 0;
           $__i$0$i$i$i24$i = $__i$0$i$i$i24$i + 1 | 0;
          }
          $893 = $889 + -12 | 0;
          do if (!(HEAP8[$893 >> 0] & 1)) {
           HEAP8[$893 + 1 >> 0] = 0;
           HEAP8[$893 >> 0] = 0;
          } else {
           $898 = $889 + -4 | 0;
           HEAP8[HEAP32[$898 >> 2] >> 0] = 0;
           $900 = $889 + -8 | 0;
           HEAP32[$900 >> 2] = 0;
           $$pre$i$i$i28$i = HEAP8[$893 >> 0] | 0;
           if (!($$pre$i$i$i28$i & 1)) {
            $907 = $$pre$i$i$i28$i;
            $916 = 10;
           } else {
            $903 = HEAP32[$893 >> 2] | 0;
            $907 = $903 & 255;
            $916 = ($903 & -2) + -1 | 0;
           }
           if (!($907 & 1)) {
            $910 = ($907 & 255) >>> 1;
            if (($907 & 255) < 22) {
             $2477 = 1;
             $914 = 10;
             $933 = $910;
            } else {
             $2477 = 1;
             $914 = ($910 + 16 & 240) + -1 | 0;
             $933 = $910;
            }
           } else {
            $2477 = 0;
            $914 = 10;
            $933 = 0;
           }
           if (($914 | 0) != ($916 | 0)) {
            if (($914 | 0) == 10) {
             $924 = $893 + 1 | 0;
             $925 = HEAP32[$898 >> 2] | 0;
             if ($2477) {
              _memcpy($924 | 0, $925 | 0, (($907 & 255) >>> 1) + 1 | 0) | 0;
              _free($925);
             } else {
              HEAP8[$924 >> 0] = HEAP8[$925 >> 0] | 0;
              _free($925);
             }
             HEAP8[$893 >> 0] = $933 << 1;
             break;
            }
            $919 = $914 + 1 | 0;
            $920 = _malloc($919) | 0;
            if (!($914 >>> 0 <= $916 >>> 0 & ($920 | 0) == 0)) {
             if ($2477) _memcpy($920 | 0, $893 + 1 | 0, (($907 & 255) >>> 1) + 1 | 0) | 0; else {
              $922 = HEAP32[$898 >> 2] | 0;
              HEAP8[$920 >> 0] = HEAP8[$922 >> 0] | 0;
              _free($922);
             }
             HEAP32[$893 >> 2] = $919 | 1;
             HEAP32[$900 >> 2] = $933;
             HEAP32[$898 >> 2] = $920;
            }
           }
          } while (0);
          HEAP32[$893 >> 2] = HEAP32[$5 >> 2];
          HEAP32[$893 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
          HEAP32[$893 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
          $__i$0$i$i$i$i43$i = 0;
          while (1) {
           if (($__i$0$i$i$i$i43$i | 0) == 3) break;
           HEAP32[$5 + ($__i$0$i$i$i$i43$i << 2) >> 2] = 0;
           $__i$0$i$i$i$i43$i = $__i$0$i$i$i$i43$i + 1 | 0;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         } else {
          $938 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i, 15752) | 0;
          HEAP32[$8 >> 2] = HEAP32[$938 >> 2];
          HEAP32[$8 + 4 >> 2] = HEAP32[$938 + 4 >> 2];
          HEAP32[$8 + 8 >> 2] = HEAP32[$938 + 8 >> 2];
          $__i$0$i$i$i46$i = 0;
          while (1) {
           if (($__i$0$i$i$i46$i | 0) == 3) break;
           HEAP32[$938 + ($__i$0$i$i$i46$i << 2) >> 2] = 0;
           $__i$0$i$i$i46$i = $__i$0$i$i$i46$i + 1 | 0;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9, $0);
          $941 = HEAP8[$9 >> 0] | 0;
          $943 = ($941 & 1) == 0;
          $953 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($8, $943 ? $9 + 1 | 0 : HEAP32[$9 + 8 >> 2] | 0, $943 ? ($941 & 255) >>> 1 : HEAP32[$9 + 4 >> 2] | 0) | 0;
          HEAP32[$7 >> 2] = HEAP32[$953 >> 2];
          HEAP32[$7 + 4 >> 2] = HEAP32[$953 + 4 >> 2];
          HEAP32[$7 + 8 >> 2] = HEAP32[$953 + 8 >> 2];
          $__i$0$i$i$i50$i = 0;
          while (1) {
           if (($__i$0$i$i$i50$i | 0) == 3) break;
           HEAP32[$953 + ($__i$0$i$i$i50$i << 2) >> 2] = 0;
           $__i$0$i$i$i50$i = $__i$0$i$i$i50$i + 1 | 0;
          }
          $956 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($7, 15920) | 0;
          HEAP32[$6 >> 2] = HEAP32[$956 >> 2];
          HEAP32[$6 + 4 >> 2] = HEAP32[$956 + 4 >> 2];
          HEAP32[$6 + 8 >> 2] = HEAP32[$956 + 8 >> 2];
          $__i$0$i$i$i54$i = 0;
          while (1) {
           if (($__i$0$i$i$i54$i | 0) == 3) break;
           HEAP32[$956 + ($__i$0$i$i$i54$i << 2) >> 2] = 0;
           $__i$0$i$i$i54$i = $__i$0$i$i$i54$i + 1 | 0;
          }
          do if (!(HEAP8[$823 >> 0] & 1)) {
           HEAP8[$823 + 1 >> 0] = 0;
           HEAP8[$823 >> 0] = 0;
          } else {
           $963 = $822 + -16 | 0;
           HEAP8[HEAP32[$963 >> 2] >> 0] = 0;
           $965 = $822 + -20 | 0;
           HEAP32[$965 >> 2] = 0;
           $$pre$i$i$i59$i = HEAP8[$823 >> 0] | 0;
           if (!($$pre$i$i$i59$i & 1)) {
            $972 = $$pre$i$i$i59$i;
            $981 = 10;
           } else {
            $968 = HEAP32[$823 >> 2] | 0;
            $972 = $968 & 255;
            $981 = ($968 & -2) + -1 | 0;
           }
           if (!($972 & 1)) {
            $975 = ($972 & 255) >>> 1;
            if (($972 & 255) < 22) {
             $2478 = 1;
             $979 = 10;
             $998 = $975;
            } else {
             $2478 = 1;
             $979 = ($975 + 16 & 240) + -1 | 0;
             $998 = $975;
            }
           } else {
            $2478 = 0;
            $979 = 10;
            $998 = 0;
           }
           if (($979 | 0) != ($981 | 0)) {
            if (($979 | 0) == 10) {
             $989 = $823 + 1 | 0;
             $990 = HEAP32[$963 >> 2] | 0;
             if ($2478) {
              _memcpy($989 | 0, $990 | 0, (($972 & 255) >>> 1) + 1 | 0) | 0;
              _free($990);
             } else {
              HEAP8[$989 >> 0] = HEAP8[$990 >> 0] | 0;
              _free($990);
             }
             HEAP8[$823 >> 0] = $998 << 1;
             break;
            }
            $984 = $979 + 1 | 0;
            $985 = _malloc($984) | 0;
            if (!($979 >>> 0 <= $981 >>> 0 & ($985 | 0) == 0)) {
             if ($2478) _memcpy($985 | 0, $823 + 1 | 0, (($972 & 255) >>> 1) + 1 | 0) | 0; else {
              $987 = HEAP32[$963 >> 2] | 0;
              HEAP8[$985 >> 0] = HEAP8[$987 >> 0] | 0;
              _free($987);
             }
             HEAP32[$823 >> 2] = $984 | 1;
             HEAP32[$965 >> 2] = $998;
             HEAP32[$963 >> 2] = $985;
            }
           }
          } while (0);
          HEAP32[$823 >> 2] = HEAP32[$6 >> 2];
          HEAP32[$823 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
          HEAP32[$823 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
          $__i$0$i$i$i$i74$i = 0;
          while (1) {
           if (($__i$0$i$i$i$i74$i | 0) == 3) break;
           HEAP32[$6 + ($__i$0$i$i$i$i74$i << 2) >> 2] = 0;
           $__i$0$i$i$i$i74$i = $__i$0$i$i$i$i74$i + 1 | 0;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          $1003 = HEAP32[$798 >> 2] | 0;
          $1004 = $1003 + -12 | 0;
          do if (!(HEAP8[$1004 >> 0] & 1)) {
           HEAP8[$1004 + 1 >> 0] = 0;
           HEAP8[$1004 >> 0] = 0;
          } else {
           $1009 = $1003 + -4 | 0;
           HEAP8[HEAP32[$1009 >> 2] >> 0] = 0;
           $1011 = $1003 + -8 | 0;
           HEAP32[$1011 >> 2] = 0;
           $$pre$i$i$i78$i = HEAP8[$1004 >> 0] | 0;
           if (!($$pre$i$i$i78$i & 1)) {
            $1018 = $$pre$i$i$i78$i;
            $1027 = 10;
           } else {
            $1014 = HEAP32[$1004 >> 2] | 0;
            $1018 = $1014 & 255;
            $1027 = ($1014 & -2) + -1 | 0;
           }
           if (!($1018 & 1)) {
            $1021 = ($1018 & 255) >>> 1;
            if (($1018 & 255) < 22) {
             $1025 = 10;
             $1044 = $1021;
             $2479 = 1;
            } else {
             $1025 = ($1021 + 16 & 240) + -1 | 0;
             $1044 = $1021;
             $2479 = 1;
            }
           } else {
            $1025 = 10;
            $1044 = 0;
            $2479 = 0;
           }
           if (($1025 | 0) != ($1027 | 0)) {
            if (($1025 | 0) == 10) {
             $1035 = $1004 + 1 | 0;
             $1036 = HEAP32[$1009 >> 2] | 0;
             if ($2479) {
              _memcpy($1035 | 0, $1036 | 0, (($1018 & 255) >>> 1) + 1 | 0) | 0;
              _free($1036);
             } else {
              HEAP8[$1035 >> 0] = HEAP8[$1036 >> 0] | 0;
              _free($1036);
             }
             HEAP8[$1004 >> 0] = $1044 << 1;
             break;
            }
            $1030 = $1025 + 1 | 0;
            $1031 = _malloc($1030) | 0;
            if (!($1025 >>> 0 <= $1027 >>> 0 & ($1031 | 0) == 0)) {
             if ($2479) _memcpy($1031 | 0, $1004 + 1 | 0, (($1018 & 255) >>> 1) + 1 | 0) | 0; else {
              $1033 = HEAP32[$1009 >> 2] | 0;
              HEAP8[$1031 >> 0] = HEAP8[$1033 >> 0] | 0;
              _free($1033);
             }
             HEAP32[$1004 >> 2] = $1030 | 1;
             HEAP32[$1011 >> 2] = $1044;
             HEAP32[$1009 >> 2] = $1031;
            }
           }
          } while (0);
          HEAP32[$1004 >> 2] = HEAP32[$812 >> 2];
          HEAP32[$1004 + 4 >> 2] = HEAP32[$812 + 4 >> 2];
          HEAP32[$1004 + 8 >> 2] = HEAP32[$812 + 8 >> 2];
          $__i$0$i$i$i$i93$i = 0;
          while (1) {
           if (($__i$0$i$i$i$i93$i | 0) == 3) break L305;
           HEAP32[$812 + ($__i$0$i$i$i$i93$i << 2) >> 2] = 0;
           $__i$0$i$i$i$i93$i = $__i$0$i$i$i$i93$i + 1 | 0;
          }
         } while (0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($__v$i$i$i);
         $$311$i = $796;
        }
       }
      }
     } else $$311$i = $first;
     if (($$311$i | 0) == ($first | 0)) {
      $$5 = $first;
      break L1;
     }
     $1052 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($1052 | 0)) {
      $$5 = $first;
      break L1;
     }
     $1054 = $db + 16 | 0;
     HEAP32[$20 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($19, $1052 + -24 | 0, $20);
     $1058 = $db + 20 | 0;
     $1059 = HEAP32[$1058 >> 2] | 0;
     $1061 = HEAP32[$db + 24 >> 2] | 0;
     $1063 = $1061;
     if ($1059 >>> 0 < $1061 >>> 0) {
      HEAP32[$1059 + 12 >> 2] = HEAP32[$19 + 12 >> 2];
      HEAP32[$1059 >> 2] = HEAP32[$19 >> 2];
      $1069 = $19 + 4 | 0;
      HEAP32[$1059 + 4 >> 2] = HEAP32[$1069 >> 2];
      $1071 = $19 + 8 | 0;
      HEAP32[$1059 + 8 >> 2] = HEAP32[$1071 >> 2];
      HEAP32[$1071 >> 2] = 0;
      HEAP32[$1069 >> 2] = 0;
      HEAP32[$19 >> 2] = 0;
      HEAP32[$1058 >> 2] = (HEAP32[$1058 >> 2] | 0) + 16;
     } else {
      $1078 = HEAP32[$1054 >> 2] | 0;
      $1080 = $1059 - $1078 >> 4;
      $1081 = $1080 + 1 | 0;
      if ($1081 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1054);
      $1083 = $1063 - $1078 | 0;
      if ($1083 >> 4 >>> 0 < 134217727) {
       $1086 = $1083 >> 3;
       $$0$i$i$i95 = $1086 >>> 0 < $1081 >>> 0 ? $1081 : $1086;
      } else $$0$i$i$i95 = 268435455;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i95, $1080, $db + 28 | 0);
      $1089 = $__v$i$i$i + 8 | 0;
      $1090 = HEAP32[$1089 >> 2] | 0;
      HEAP32[$1090 + 12 >> 2] = HEAP32[$19 + 12 >> 2];
      HEAP32[$1090 >> 2] = HEAP32[$19 >> 2];
      $1096 = $19 + 4 | 0;
      HEAP32[$1090 + 4 >> 2] = HEAP32[$1096 >> 2];
      $1098 = $19 + 8 | 0;
      HEAP32[$1090 + 8 >> 2] = HEAP32[$1098 >> 2];
      HEAP32[$1098 >> 2] = 0;
      HEAP32[$1096 >> 2] = 0;
      HEAP32[$19 >> 2] = 0;
      HEAP32[$1089 >> 2] = $1090 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1054, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($19);
     $$5 = $$311$i;
     break L1;
     break;
    }
   case 79:
    {
     $1102 = $db + 4 | 0;
     $1106 = ((HEAP32[$1102 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $1107 = $first + 1 | 0;
     $1108 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1107, $last, $db) | 0;
     $1112 = ((HEAP32[$1102 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     if (($1108 | 0) == ($1107 | 0)) {
      $$5 = $first;
      break L1;
     }
     $1114 = $db + 16 | 0;
     $1116 = HEAP32[$db + 12 >> 2] | 0;
     $1117 = $db + 20 | 0;
     $1118 = HEAP32[$1117 >> 2] | 0;
     $1120 = HEAP32[$db + 24 >> 2] | 0;
     $1122 = $1120;
     if ($1118 >>> 0 < $1120 >>> 0) {
      HEAP32[$1118 >> 2] = 0;
      HEAP32[$1118 + 4 >> 2] = 0;
      HEAP32[$1118 + 8 >> 2] = 0;
      HEAP32[$1118 + 12 >> 2] = $1116;
      HEAP32[$1117 >> 2] = (HEAP32[$1117 >> 2] | 0) + 16;
     } else {
      $1130 = HEAP32[$1114 >> 2] | 0;
      $1132 = $1118 - $1130 >> 4;
      $1133 = $1132 + 1 | 0;
      if ($1133 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1114);
      $1135 = $1122 - $1130 | 0;
      if ($1135 >> 4 >>> 0 < 134217727) {
       $1138 = $1135 >> 3;
       $$0$i$i$i100 = $1138 >>> 0 < $1133 >>> 0 ? $1133 : $1138;
      } else $$0$i$i$i100 = 268435455;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i100, $1132, $db + 28 | 0);
      $1141 = $__v$i$i$i + 8 | 0;
      $1142 = HEAP32[$1141 >> 2] | 0;
      HEAP32[$1142 >> 2] = 0;
      HEAP32[$1142 + 4 >> 2] = 0;
      HEAP32[$1142 + 8 >> 2] = 0;
      HEAP32[$1142 + 12 >> 2] = $1116;
      HEAP32[$1141 >> 2] = $1142 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1114, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     $1147 = $21 + 4 | 0;
     $1148 = $21 + 8 | 0;
     $1149 = $21 + 1 | 0;
     $1150 = $__v$i$i$i + 8 | 0;
     $k5$0 = $1106;
     while (1) {
      if ($k5$0 >>> 0 >= $1112 >>> 0) {
       $$5 = $1108;
       break L1;
      }
      $1152 = HEAP32[$db >> 2] | 0;
      $1153 = $1152 + ($k5$0 * 24 | 0) + 12 | 0;
      HEAP32[$21 >> 2] = 0;
      HEAP32[$21 + 4 >> 2] = 0;
      HEAP32[$21 + 8 >> 2] = 0;
      $1154 = HEAP8[$1153 >> 0] | 0;
      $1156 = ($1154 & 1) == 0;
      $1161 = $1156 ? ($1154 & 255) >>> 1 : HEAP32[$1152 + ($k5$0 * 24 | 0) + 16 >> 2] | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($21, $1156 ? $1153 + 1 | 0 : HEAP32[$1152 + ($k5$0 * 24 | 0) + 20 >> 2] | 0, $1161 >>> 0 < 2 ? $1161 : 2);
      $1168 = HEAP8[$21 >> 0] | 0;
      $1170 = ($1168 & 1) == 0;
      if ((($1170 ? ($1168 & 255) >>> 1 : HEAP32[$1147 >> 2] | 0) | 0) == 2) {
       $1180 = (__ZNSt3__111char_traitsIcE7compareEPKcS3_j($1170 ? $1149 : HEAP32[$1148 >> 2] | 0, 14652, 2) | 0) == 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
       $1181 = HEAP32[$db >> 2] | 0;
       if ($1180) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1181 + ($k5$0 * 24 | 0) | 0, 14713) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k5$0 * 24 | 0) + 12 | 0, 0, 14663) | 0;
       } else {
        $1186 = $1181;
        label = 361;
       }
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
       $1186 = HEAP32[$db >> 2] | 0;
       label = 361;
      }
      if ((label | 0) == 361) {
       label = 0;
       $1187 = HEAP16[$1186 + ($k5$0 * 24 | 0) + 12 >> 1] | 0;
       if (!($1187 & 1)) $1194 = ($1187 & 65535) >>> 8 & 255; else $1194 = HEAP8[HEAP32[$1186 + ($k5$0 * 24 | 0) + 20 >> 2] >> 0] | 0;
       if ($1194 << 24 >> 24 == 40) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1186 + ($k5$0 * 24 | 0) | 0, 14661) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k5$0 * 24 | 0) + 12 | 0, 0, 14663) | 0;
       }
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$db >> 2] | 0) + ($k5$0 * 24 | 0) | 0, 14705) | 0;
      $1201 = HEAP32[$1117 >> 2] | 0;
      $1202 = $1201 + -16 | 0;
      $1203 = HEAP32[$db >> 2] | 0;
      $1204 = $1203 + ($k5$0 * 24 | 0) | 0;
      $1205 = $1201 + -12 | 0;
      $1206 = HEAP32[$1205 >> 2] | 0;
      $1208 = HEAP32[$1201 + -8 >> 2] | 0;
      $1210 = $1208;
      if (($1206 | 0) == ($1208 | 0)) {
       $1217 = HEAP32[$1202 >> 2] | 0;
       $1219 = ($1206 - $1217 | 0) / 24 | 0;
       $1220 = $1219 + 1 | 0;
       if ($1220 >>> 0 > 178956970) {
        $$lcssa655 = $1202;
        break;
       }
       $1223 = ($1210 - $1217 | 0) / 24 | 0;
       if ($1223 >>> 0 < 89478485) {
        $1225 = $1223 << 1;
        $$0$i$i$i105 = $1225 >>> 0 < $1220 >>> 0 ? $1220 : $1225;
       } else $$0$i$i$i105 = 178956970;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i105, $1219, $1201 + -4 | 0);
       $1228 = HEAP32[$1150 >> 2] | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1228, $1204);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1228 + 12 | 0, $1203 + ($k5$0 * 24 | 0) + 12 | 0);
       HEAP32[$1150 >> 2] = $1228 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1202, $__v$i$i$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1206, $1204);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1206 + 12 | 0, $1203 + ($k5$0 * 24 | 0) + 12 | 0);
       HEAP32[$1205 >> 2] = (HEAP32[$1205 >> 2] | 0) + 24;
      }
      $k5$0 = $k5$0 + 1 | 0;
     }
     __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa655);
     break;
    }
   case 80:
    {
     $1233 = $db + 4 | 0;
     $1237 = ((HEAP32[$1233 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $1238 = $first + 1 | 0;
     $1239 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1238, $last, $db) | 0;
     $1243 = ((HEAP32[$1233 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     if (($1239 | 0) == ($1238 | 0)) {
      $$5 = $first;
      break L1;
     }
     $1245 = $db + 16 | 0;
     $1247 = HEAP32[$db + 12 >> 2] | 0;
     $1248 = $db + 20 | 0;
     $1249 = HEAP32[$1248 >> 2] | 0;
     $1251 = HEAP32[$db + 24 >> 2] | 0;
     $1253 = $1251;
     if ($1249 >>> 0 < $1251 >>> 0) {
      HEAP32[$1249 >> 2] = 0;
      HEAP32[$1249 + 4 >> 2] = 0;
      HEAP32[$1249 + 8 >> 2] = 0;
      HEAP32[$1249 + 12 >> 2] = $1247;
      HEAP32[$1248 >> 2] = (HEAP32[$1248 >> 2] | 0) + 16;
     } else {
      $1261 = HEAP32[$1245 >> 2] | 0;
      $1263 = $1249 - $1261 >> 4;
      $1264 = $1263 + 1 | 0;
      if ($1264 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1245);
      $1266 = $1253 - $1261 | 0;
      if ($1266 >> 4 >>> 0 < 134217727) {
       $1269 = $1266 >> 3;
       $$0$i$i$i113 = $1269 >>> 0 < $1264 >>> 0 ? $1264 : $1269;
      } else $$0$i$i$i113 = 268435455;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i113, $1263, $db + 28 | 0);
      $1272 = $__v$i$i$i + 8 | 0;
      $1273 = HEAP32[$1272 >> 2] | 0;
      HEAP32[$1273 >> 2] = 0;
      HEAP32[$1273 + 4 >> 2] = 0;
      HEAP32[$1273 + 8 >> 2] = 0;
      HEAP32[$1273 + 12 >> 2] = $1247;
      HEAP32[$1272 >> 2] = $1273 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1245, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     $1278 = $22 + 4 | 0;
     $1279 = $22 + 8 | 0;
     $1280 = $22 + 1 | 0;
     $1281 = $23 + 4 | 0;
     $1282 = $23 + 8 | 0;
     $1283 = $23 + 1 | 0;
     $1284 = $__v$i$i$i + 8 | 0;
     $k8$0 = $1237;
     while (1) {
      if ($k8$0 >>> 0 >= $1243 >>> 0) {
       $$5 = $1239;
       break L1;
      }
      $1286 = HEAP32[$db >> 2] | 0;
      $1287 = $1286 + ($k8$0 * 24 | 0) + 12 | 0;
      HEAP32[$22 >> 2] = 0;
      HEAP32[$22 + 4 >> 2] = 0;
      HEAP32[$22 + 8 >> 2] = 0;
      $1288 = HEAP8[$1287 >> 0] | 0;
      $1290 = ($1288 & 1) == 0;
      $1295 = $1290 ? ($1288 & 255) >>> 1 : HEAP32[$1286 + ($k8$0 * 24 | 0) + 16 >> 2] | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($22, $1290 ? $1287 + 1 | 0 : HEAP32[$1286 + ($k8$0 * 24 | 0) + 20 >> 2] | 0, $1295 >>> 0 < 2 ? $1295 : 2);
      $1302 = HEAP8[$22 >> 0] | 0;
      $1304 = ($1302 & 1) == 0;
      if ((($1304 ? ($1302 & 255) >>> 1 : HEAP32[$1278 >> 2] | 0) | 0) == 2) {
       $1314 = (__ZNSt3__111char_traitsIcE7compareEPKcS3_j($1304 ? $1280 : HEAP32[$1279 >> 2] | 0, 14652, 2) | 0) == 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
       $1315 = HEAP32[$db >> 2] | 0;
       if ($1314) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1315 + ($k8$0 * 24 | 0) | 0, 14713) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k8$0 * 24 | 0) + 12 | 0, 0, 14663) | 0;
       } else {
        $1320 = $1315;
        label = 388;
       }
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
       $1320 = HEAP32[$db >> 2] | 0;
       label = 388;
      }
      if ((label | 0) == 388) {
       label = 0;
       $1321 = HEAP16[$1320 + ($k8$0 * 24 | 0) + 12 >> 1] | 0;
       if (!($1321 & 1)) $1328 = ($1321 & 65535) >>> 8 & 255; else $1328 = HEAP8[HEAP32[$1320 + ($k8$0 * 24 | 0) + 20 >> 2] >> 0] | 0;
       if ($1328 << 24 >> 24 == 40) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1320 + ($k8$0 * 24 | 0) | 0, 14661) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k8$0 * 24 | 0) + 12 | 0, 0, 14663) | 0;
       }
      }
      $1335 = HEAP32[$db >> 2] | 0;
      $1336 = $1335 + ($k8$0 * 24 | 0) | 0;
      do if ((HEAP8[$1238 >> 0] | 0) == 85) {
       HEAP32[$23 >> 2] = 0;
       HEAP32[$23 + 4 >> 2] = 0;
       HEAP32[$23 + 8 >> 2] = 0;
       $1337 = HEAP8[$1336 >> 0] | 0;
       $1339 = ($1337 & 1) == 0;
       $1344 = $1339 ? ($1337 & 255) >>> 1 : HEAP32[$1335 + ($k8$0 * 24 | 0) + 4 >> 2] | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($23, $1339 ? $1336 + 1 | 0 : HEAP32[$1335 + ($k8$0 * 24 | 0) + 8 >> 2] | 0, $1344 >>> 0 < 12 ? $1344 : 12);
       $1351 = HEAP8[$23 >> 0] | 0;
       $1353 = ($1351 & 1) == 0;
       if ((($1353 ? ($1351 & 255) >>> 1 : HEAP32[$1281 >> 2] | 0) | 0) != 12) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
        $1366 = (HEAP32[$db >> 2] | 0) + ($k8$0 * 24 | 0) | 0;
        label = 397;
        break;
       }
       $phitmp$i = (__ZNSt3__111char_traitsIcE7compareEPKcS3_j($1353 ? $1283 : HEAP32[$1282 >> 2] | 0, 15924, 12) | 0) == 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
       $1364 = HEAP32[$db >> 2] | 0;
       $1365 = $1364 + ($k8$0 * 24 | 0) | 0;
       if ($phitmp$i) {
        $1367 = HEAP8[$1365 >> 0] | 0;
        if (!($1367 & 1)) {
         $1371 = ($1367 & 255) >>> 1;
         $1382 = $1371;
         $1383 = $1371 >>> 0 < 11 ? $1371 : 11;
         $1385 = 10;
         $1388 = $1367;
        } else {
         $1375 = HEAP32[$1364 + ($k8$0 * 24 | 0) + 4 >> 2] | 0;
         $1378 = HEAP32[$1365 >> 2] | 0;
         $1382 = $1375;
         $1383 = $1375 >>> 0 < 11 ? $1375 : 11;
         $1385 = ($1378 & -2) + -1 | 0;
         $1388 = $1378 & 255;
        }
        if (($1383 - $1382 + $1385 | 0) >>> 0 < 2) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($1365, $1385, 2 - $1383 + $1382 - $1385 | 0, $1382, 0, $1383, 2, 15937);
         break;
        }
        if (!($1388 & 1)) $1397 = $1365 + 1 | 0; else $1397 = HEAP32[$1364 + ($k8$0 * 24 | 0) + 8 >> 2] | 0;
        L541 : do if (($1383 | 0) == 2) {
         $$29$i3$i = 2;
         $$3$i6$i = 0;
         $$35$i5$i = 15937;
         $$39$i4$i = 2;
         label = 416;
        } else {
         $1394 = $1382 - $1383 | 0;
         if (($1382 | 0) == ($1383 | 0)) {
          $$29$i3$i = $1383;
          $$3$i6$i = 0;
          $$35$i5$i = 15937;
          $$39$i4$i = 2;
          label = 416;
         } else {
          if ($1383 >>> 0 > 2) {
           HEAP8[$1397 >> 0] = 105;
           HEAP8[$1397 + 1 >> 0] = 100;
           _memmove($1397 + 2 | 0, $1397 + $1383 | 0, $1394 | 0) | 0;
           $$310$i$i = $1383;
           $$4$i$i = 2;
           break;
          }
          $1403 = $1397 + $1383 | 0;
          do if ($1397 >>> 0 < 15937 >>> 0 & ($1397 + $1382 | 0) >>> 0 > 15937 >>> 0) {
           if ($1403 >>> 0 <= 15937 >>> 0) {
            $$02$i$ph$i = 15937 + (2 - $1383) | 0;
            break;
           }
           if ($1383 | 0) _memcpy($1397 | 0, 15937, $1383 | 0) | 0;
           $1409 = 2 - $1383 | 0;
           _memmove($1403 + $1409 | 0, $1403 | 0, $1394 | 0) | 0;
           if (!$1409) {
            $$310$i$i = 0;
            $$4$i$i = 0;
            break L541;
           } else {
            $$29$i3$i = 0;
            $$3$i6$i = $1383;
            $$35$i5$i = 15939;
            $$39$i4$i = $1409;
            label = 416;
            break L541;
           }
          } else $$02$i$ph$i = 15937; while (0);
          _memmove($1397 + 2 | 0, $1403 | 0, $1394 | 0) | 0;
          $$29$i3$i = $1383;
          $$3$i6$i = 0;
          $$35$i5$i = $$02$i$ph$i;
          $$39$i4$i = 2;
          label = 416;
         }
        } while (0);
        if ((label | 0) == 416) {
         label = 0;
         _memmove($1397 + $$3$i6$i | 0, $$35$i5$i | 0, $$39$i4$i | 0) | 0;
         $$310$i$i = $$29$i3$i;
         $$4$i$i = $$39$i4$i;
        }
        $1414 = $$4$i$i - $$310$i$i + $1382 | 0;
        if (!(HEAP8[$1365 >> 0] & 1)) HEAP8[$1365 >> 0] = $1414 << 1; else HEAP32[$1364 + ($k8$0 * 24 | 0) + 4 >> 2] = $1414;
        HEAP8[$1397 + $1414 >> 0] = 0;
       } else {
        $1366 = $1365;
        label = 397;
       }
      } else {
       $1366 = $1336;
       label = 397;
      } while (0);
      if ((label | 0) == 397) {
       label = 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1366, 14782) | 0;
      }
      $1425 = HEAP32[$1248 >> 2] | 0;
      $1426 = $1425 + -16 | 0;
      $1427 = HEAP32[$db >> 2] | 0;
      $1428 = $1427 + ($k8$0 * 24 | 0) | 0;
      $1429 = $1425 + -12 | 0;
      $1430 = HEAP32[$1429 >> 2] | 0;
      $1432 = HEAP32[$1425 + -8 >> 2] | 0;
      $1434 = $1432;
      if (($1430 | 0) == ($1432 | 0)) {
       $1441 = HEAP32[$1426 >> 2] | 0;
       $1443 = ($1430 - $1441 | 0) / 24 | 0;
       $1444 = $1443 + 1 | 0;
       if ($1444 >>> 0 > 178956970) {
        $$lcssa661 = $1426;
        break;
       }
       $1447 = ($1434 - $1441 | 0) / 24 | 0;
       if ($1447 >>> 0 < 89478485) {
        $1449 = $1447 << 1;
        $$0$i$i$i125 = $1449 >>> 0 < $1444 >>> 0 ? $1444 : $1449;
       } else $$0$i$i$i125 = 178956970;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i125, $1443, $1425 + -4 | 0);
       $1452 = HEAP32[$1284 >> 2] | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1452, $1428);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1452 + 12 | 0, $1427 + ($k8$0 * 24 | 0) + 12 | 0);
       HEAP32[$1284 >> 2] = $1452 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1426, $__v$i$i$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1430, $1428);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1430 + 12 | 0, $1427 + ($k8$0 * 24 | 0) + 12 | 0);
       HEAP32[$1429 >> 2] = (HEAP32[$1429 >> 2] | 0) + 24;
      }
      $k8$0 = $k8$0 + 1 | 0;
     }
     __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa661);
     break;
    }
   case 82:
    {
     $1457 = $db + 4 | 0;
     $1461 = ((HEAP32[$1457 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $1462 = $first + 1 | 0;
     $1463 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1462, $last, $db) | 0;
     $1467 = ((HEAP32[$1457 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     if (($1463 | 0) == ($1462 | 0)) {
      $$5 = $first;
      break L1;
     }
     $1469 = $db + 16 | 0;
     $1471 = HEAP32[$db + 12 >> 2] | 0;
     $1472 = $db + 20 | 0;
     $1473 = HEAP32[$1472 >> 2] | 0;
     $1475 = HEAP32[$db + 24 >> 2] | 0;
     $1477 = $1475;
     if ($1473 >>> 0 < $1475 >>> 0) {
      HEAP32[$1473 >> 2] = 0;
      HEAP32[$1473 + 4 >> 2] = 0;
      HEAP32[$1473 + 8 >> 2] = 0;
      HEAP32[$1473 + 12 >> 2] = $1471;
      HEAP32[$1472 >> 2] = (HEAP32[$1472 >> 2] | 0) + 16;
     } else {
      $1485 = HEAP32[$1469 >> 2] | 0;
      $1487 = $1473 - $1485 >> 4;
      $1488 = $1487 + 1 | 0;
      if ($1488 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1469);
      $1490 = $1477 - $1485 | 0;
      if ($1490 >> 4 >>> 0 < 134217727) {
       $1493 = $1490 >> 3;
       $$0$i$i$i133 = $1493 >>> 0 < $1488 >>> 0 ? $1488 : $1493;
      } else $$0$i$i$i133 = 268435455;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i133, $1487, $db + 28 | 0);
      $1496 = $__v$i$i$i + 8 | 0;
      $1497 = HEAP32[$1496 >> 2] | 0;
      HEAP32[$1497 >> 2] = 0;
      HEAP32[$1497 + 4 >> 2] = 0;
      HEAP32[$1497 + 8 >> 2] = 0;
      HEAP32[$1497 + 12 >> 2] = $1471;
      HEAP32[$1496 >> 2] = $1497 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1469, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     $1502 = $24 + 4 | 0;
     $1503 = $24 + 8 | 0;
     $1504 = $24 + 1 | 0;
     $1505 = $__v$i$i$i + 8 | 0;
     $k11$0 = $1461;
     while (1) {
      if ($k11$0 >>> 0 >= $1467 >>> 0) {
       $$5 = $1463;
       break L1;
      }
      $1507 = HEAP32[$db >> 2] | 0;
      $1508 = $1507 + ($k11$0 * 24 | 0) + 12 | 0;
      HEAP32[$24 >> 2] = 0;
      HEAP32[$24 + 4 >> 2] = 0;
      HEAP32[$24 + 8 >> 2] = 0;
      $1509 = HEAP8[$1508 >> 0] | 0;
      $1511 = ($1509 & 1) == 0;
      $1516 = $1511 ? ($1509 & 255) >>> 1 : HEAP32[$1507 + ($k11$0 * 24 | 0) + 16 >> 2] | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($24, $1511 ? $1508 + 1 | 0 : HEAP32[$1507 + ($k11$0 * 24 | 0) + 20 >> 2] | 0, $1516 >>> 0 < 2 ? $1516 : 2);
      $1523 = HEAP8[$24 >> 0] | 0;
      $1525 = ($1523 & 1) == 0;
      if ((($1525 ? ($1523 & 255) >>> 1 : HEAP32[$1502 >> 2] | 0) | 0) == 2) {
       $1535 = (__ZNSt3__111char_traitsIcE7compareEPKcS3_j($1525 ? $1504 : HEAP32[$1503 >> 2] | 0, 14652, 2) | 0) == 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
       $1536 = HEAP32[$db >> 2] | 0;
       if ($1535) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1536 + ($k11$0 * 24 | 0) | 0, 14713) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k11$0 * 24 | 0) + 12 | 0, 0, 14663) | 0;
       } else {
        $1541 = $1536;
        label = 444;
       }
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
       $1541 = HEAP32[$db >> 2] | 0;
       label = 444;
      }
      if ((label | 0) == 444) {
       label = 0;
       $1542 = HEAP16[$1541 + ($k11$0 * 24 | 0) + 12 >> 1] | 0;
       if (!($1542 & 1)) $1549 = ($1542 & 65535) >>> 8 & 255; else $1549 = HEAP8[HEAP32[$1541 + ($k11$0 * 24 | 0) + 20 >> 2] >> 0] | 0;
       if ($1549 << 24 >> 24 == 40) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1541 + ($k11$0 * 24 | 0) | 0, 14661) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k11$0 * 24 | 0) + 12 | 0, 0, 14663) | 0;
       }
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$db >> 2] | 0) + ($k11$0 * 24 | 0) | 0, 14716) | 0;
      $1556 = HEAP32[$1472 >> 2] | 0;
      $1557 = $1556 + -16 | 0;
      $1558 = HEAP32[$db >> 2] | 0;
      $1559 = $1558 + ($k11$0 * 24 | 0) | 0;
      $1560 = $1556 + -12 | 0;
      $1561 = HEAP32[$1560 >> 2] | 0;
      $1563 = HEAP32[$1556 + -8 >> 2] | 0;
      $1565 = $1563;
      if (($1561 | 0) == ($1563 | 0)) {
       $1572 = HEAP32[$1557 >> 2] | 0;
       $1574 = ($1561 - $1572 | 0) / 24 | 0;
       $1575 = $1574 + 1 | 0;
       if ($1575 >>> 0 > 178956970) {
        $$lcssa668 = $1557;
        break;
       }
       $1578 = ($1565 - $1572 | 0) / 24 | 0;
       if ($1578 >>> 0 < 89478485) {
        $1580 = $1578 << 1;
        $$0$i$i$i144 = $1580 >>> 0 < $1575 >>> 0 ? $1575 : $1580;
       } else $$0$i$i$i144 = 178956970;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i144, $1574, $1556 + -4 | 0);
       $1583 = HEAP32[$1505 >> 2] | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1583, $1559);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1583 + 12 | 0, $1558 + ($k11$0 * 24 | 0) + 12 | 0);
       HEAP32[$1505 >> 2] = $1583 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1557, $__v$i$i$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1561, $1559);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1561 + 12 | 0, $1558 + ($k11$0 * 24 | 0) + 12 | 0);
       HEAP32[$1560 >> 2] = (HEAP32[$1560 >> 2] | 0) + 24;
      }
      $k11$0 = $k11$0 + 1 | 0;
     }
     __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa668);
     break;
    }
   case 84:
    {
     $1588 = $db + 4 | 0;
     $1592 = ((HEAP32[$1588 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $1593 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     $1597 = ((HEAP32[$1588 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     if (($1593 | 0) == ($first | 0)) {
      $$5 = $first;
      break L1;
     }
     $1599 = $db + 16 | 0;
     $1600 = $db + 12 | 0;
     $1601 = HEAP32[$1600 >> 2] | 0;
     $1602 = $db + 20 | 0;
     $1603 = HEAP32[$1602 >> 2] | 0;
     $1604 = $db + 24 | 0;
     $1605 = HEAP32[$1604 >> 2] | 0;
     $1607 = $1605;
     if ($1603 >>> 0 < $1605 >>> 0) {
      HEAP32[$1603 >> 2] = 0;
      HEAP32[$1603 + 4 >> 2] = 0;
      HEAP32[$1603 + 8 >> 2] = 0;
      HEAP32[$1603 + 12 >> 2] = $1601;
      HEAP32[$1602 >> 2] = (HEAP32[$1602 >> 2] | 0) + 16;
     } else {
      $1615 = HEAP32[$1599 >> 2] | 0;
      $1617 = $1603 - $1615 >> 4;
      $1618 = $1617 + 1 | 0;
      if ($1618 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1599);
      $1620 = $1607 - $1615 | 0;
      if ($1620 >> 4 >>> 0 < 134217727) {
       $1623 = $1620 >> 3;
       $$0$i$i$i152 = $1623 >>> 0 < $1618 >>> 0 ? $1618 : $1623;
      } else $$0$i$i$i152 = 268435455;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i152, $1617, $db + 28 | 0);
      $1626 = $__v$i$i$i + 8 | 0;
      $1627 = HEAP32[$1626 >> 2] | 0;
      HEAP32[$1627 >> 2] = 0;
      HEAP32[$1627 + 4 >> 2] = 0;
      HEAP32[$1627 + 8 >> 2] = 0;
      HEAP32[$1627 + 12 >> 2] = $1601;
      HEAP32[$1626 >> 2] = $1627 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1599, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     $1632 = $__v$i$i$i + 8 | 0;
     $k15$0 = $1592;
     while (1) {
      if ($k15$0 >>> 0 >= $1597 >>> 0) break;
      $1639 = HEAP32[$1602 >> 2] | 0;
      $1640 = $1639 + -16 | 0;
      $1641 = HEAP32[$db >> 2] | 0;
      $1642 = $1641 + ($k15$0 * 24 | 0) | 0;
      $1643 = $1639 + -12 | 0;
      $1644 = HEAP32[$1643 >> 2] | 0;
      $1646 = HEAP32[$1639 + -8 >> 2] | 0;
      $1648 = $1646;
      if (($1644 | 0) == ($1646 | 0)) {
       $1655 = HEAP32[$1640 >> 2] | 0;
       $1657 = ($1644 - $1655 | 0) / 24 | 0;
       $1658 = $1657 + 1 | 0;
       if ($1658 >>> 0 > 178956970) {
        $$lcssa675 = $1640;
        label = 471;
        break;
       }
       $1661 = ($1648 - $1655 | 0) / 24 | 0;
       if ($1661 >>> 0 < 89478485) {
        $1663 = $1661 << 1;
        $$0$i$i$i157 = $1663 >>> 0 < $1658 >>> 0 ? $1658 : $1663;
       } else $$0$i$i$i157 = 178956970;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i157, $1657, $1639 + -4 | 0);
       $1666 = HEAP32[$1632 >> 2] | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1666, $1642);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1666 + 12 | 0, $1641 + ($k15$0 * 24 | 0) + 12 | 0);
       HEAP32[$1632 >> 2] = $1666 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1640, $__v$i$i$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1644, $1642);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1644 + 12 | 0, $1641 + ($k15$0 * 24 | 0) + 12 | 0);
       HEAP32[$1643 >> 2] = (HEAP32[$1643 >> 2] | 0) + 24;
      }
      $k15$0 = $k15$0 + 1 | 0;
     }
     if ((label | 0) == 471) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa675);
     if (!(($1597 | 0) == ($1592 + 1 | 0) & (HEAP8[$db + 63 >> 0] | 0) != 0)) {
      $$5 = $1593;
      break L1;
     }
     $1671 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1593, $last, $db) | 0;
     if (($1671 | 0) == ($1593 | 0)) {
      $$5 = $1593;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, (HEAP32[$1588 >> 2] | 0) + -24 | 0);
     $1675 = HEAP32[$1588 >> 2] | 0;
     $1676 = $1675 + -24 | 0;
     $1677 = $1675;
     while (1) {
      if (($1677 | 0) == ($1676 | 0)) break;
      $1679 = $1677 + -24 | 0;
      HEAP32[$1588 >> 2] = $1679;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1679);
      $1677 = HEAP32[$1588 >> 2] | 0;
     }
     $1681 = HEAP8[$0 >> 0] | 0;
     $1683 = ($1681 & 1) == 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1675 + -48 | 0, $1683 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $1683 ? ($1681 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
     $1694 = (HEAP32[$1588 >> 2] | 0) + -24 | 0;
     HEAP32[$26 >> 2] = HEAP32[$1600 >> 2];
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($25, $1694, $26);
     $1696 = HEAP32[$1602 >> 2] | 0;
     $1697 = HEAP32[$1604 >> 2] | 0;
     $1699 = $1697;
     if ($1696 >>> 0 < $1697 >>> 0) {
      HEAP32[$1696 + 12 >> 2] = HEAP32[$25 + 12 >> 2];
      HEAP32[$1696 >> 2] = HEAP32[$25 >> 2];
      $1705 = $25 + 4 | 0;
      HEAP32[$1696 + 4 >> 2] = HEAP32[$1705 >> 2];
      $1707 = $25 + 8 | 0;
      HEAP32[$1696 + 8 >> 2] = HEAP32[$1707 >> 2];
      HEAP32[$1707 >> 2] = 0;
      HEAP32[$1705 >> 2] = 0;
      HEAP32[$25 >> 2] = 0;
      HEAP32[$1602 >> 2] = (HEAP32[$1602 >> 2] | 0) + 16;
     } else {
      $1714 = HEAP32[$1599 >> 2] | 0;
      $1716 = $1696 - $1714 >> 4;
      $1717 = $1716 + 1 | 0;
      if ($1717 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1599);
      $1719 = $1699 - $1714 | 0;
      if ($1719 >> 4 >>> 0 < 134217727) {
       $1722 = $1719 >> 3;
       $$0$i$i$i169 = $1722 >>> 0 < $1717 >>> 0 ? $1717 : $1722;
      } else $$0$i$i$i169 = 268435455;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i169, $1716, $db + 28 | 0);
      $1725 = $__v$i$i$i + 8 | 0;
      $1726 = HEAP32[$1725 >> 2] | 0;
      HEAP32[$1726 + 12 >> 2] = HEAP32[$25 + 12 >> 2];
      HEAP32[$1726 >> 2] = HEAP32[$25 >> 2];
      $1732 = $25 + 4 | 0;
      HEAP32[$1726 + 4 >> 2] = HEAP32[$1732 >> 2];
      $1734 = $25 + 8 | 0;
      HEAP32[$1726 + 8 >> 2] = HEAP32[$1734 >> 2];
      HEAP32[$1734 >> 2] = 0;
      HEAP32[$1732 >> 2] = 0;
      HEAP32[$25 >> 2] = 0;
      HEAP32[$1725 >> 2] = $1726 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1599, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($25);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
     $$5 = $1671;
     break L1;
     break;
    }
   case 85:
    {
     $1738 = $first + 1 | 0;
     if (($1738 | 0) == ($last | 0)) {
      $$5 = $first;
      break L1;
     }
     $1740 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($1738, $last, $db) | 0;
     if (($1740 | 0) == ($1738 | 0)) {
      $$5 = $first;
      break L1;
     }
     $1742 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1740, $last, $db) | 0;
     if (($1742 | 0) == ($1740 | 0)) {
      $$5 = $first;
      break L1;
     }
     $1744 = $db + 4 | 0;
     $1745 = HEAP32[$1744 >> 2] | 0;
     if ((($1745 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$5 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $1745 + -24 | 0);
     $1752 = HEAP32[$1744 >> 2] | 0;
     $1753 = $1752 + -24 | 0;
     $1754 = $1752;
     while (1) {
      if (($1754 | 0) == ($1753 | 0)) break;
      $1756 = $1754 + -24 | 0;
      HEAP32[$1744 >> 2] = $1756;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1756);
      $1754 = HEAP32[$1744 >> 2] | 0;
     }
     $1757 = $1752 + -48 | 0;
     HEAP32[$27 >> 2] = 0;
     HEAP32[$27 + 4 >> 2] = 0;
     HEAP32[$27 + 8 >> 2] = 0;
     $1758 = HEAP8[$1757 >> 0] | 0;
     $1760 = ($1758 & 1) == 0;
     $1765 = $1760 ? ($1758 & 255) >>> 1 : HEAP32[$1752 + -44 >> 2] | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($27, $1760 ? $1757 + 1 | 0 : HEAP32[$1752 + -40 >> 2] | 0, $1765 >>> 0 < 9 ? $1765 : 9);
     $1772 = HEAP8[$27 >> 0] | 0;
     $1774 = ($1772 & 1) == 0;
     if ((($1774 ? ($1772 & 255) >>> 1 : HEAP32[$27 + 4 >> 2] | 0) | 0) == 9) {
      $phitmp$i183 = (__ZNSt3__111char_traitsIcE7compareEPKcS3_j($1774 ? $27 + 1 | 0 : HEAP32[$27 + 8 >> 2] | 0, 15940, 9) | 0) == 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
      if ($phitmp$i183) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($1, (HEAP32[$1744 >> 2] | 0) + -24 | 0);
       $1807 = HEAP32[$1744 >> 2] | 0;
       $1808 = $1807 + -24 | 0;
       $1809 = $1807;
       while (1) {
        if (($1809 | 0) == ($1808 | 0)) break;
        $1811 = $1809 + -24 | 0;
        HEAP32[$1744 >> 2] = $1811;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1811);
        $1809 = HEAP32[$1744 >> 2] | 0;
       }
       $1812 = HEAP8[$1 >> 0] | 0;
       $1814 = ($1812 & 1) == 0;
       $1815 = $1 + 8 | 0;
       $1817 = $1 + 1 | 0;
       $1818 = $1814 ? $1817 : HEAP32[$1815 >> 2] | 0;
       $1820 = $1 + 4 | 0;
       $1826 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($1818 + 9 | 0, $1818 + ($1814 ? ($1812 & 255) >>> 1 : HEAP32[$1820 >> 2] | 0) | 0, $db) | 0;
       if (($1826 | 0) == (((HEAP8[$1 >> 0] & 1) == 0 ? $1817 : HEAP32[$1815 >> 2] | 0) + 9 | 0)) {
        __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($39, $0, 15752);
        $1856 = HEAP8[$1 >> 0] | 0;
        $1858 = ($1856 & 1) == 0;
        $1865 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($39, $1858 ? $1817 : HEAP32[$1815 >> 2] | 0, $1858 ? ($1856 & 255) >>> 1 : HEAP32[$1820 >> 2] | 0) | 0;
        HEAP32[$38 >> 2] = HEAP32[$1865 >> 2];
        HEAP32[$38 + 4 >> 2] = HEAP32[$1865 + 4 >> 2];
        HEAP32[$38 + 8 >> 2] = HEAP32[$1865 + 8 >> 2];
        $__i$0$i$i$i200 = 0;
        while (1) {
         if (($__i$0$i$i$i200 | 0) == 3) break;
         HEAP32[$1865 + ($__i$0$i$i$i200 << 2) >> 2] = 0;
         $__i$0$i$i$i200 = $__i$0$i$i$i200 + 1 | 0;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($37, $38);
        $1868 = HEAP32[$1744 >> 2] | 0;
        $1870 = HEAP32[$db + 8 >> 2] | 0;
        $1872 = $1870;
        if ($1868 >>> 0 < $1870 >>> 0) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1868, $37);
         HEAP32[$1744 >> 2] = (HEAP32[$1744 >> 2] | 0) + 24;
        } else {
         $1877 = HEAP32[$db >> 2] | 0;
         $1879 = ($1868 - $1877 | 0) / 24 | 0;
         $1880 = $1879 + 1 | 0;
         if ($1880 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
         $1883 = ($1872 - $1877 | 0) / 24 | 0;
         if ($1883 >>> 0 < 89478485) {
          $1885 = $1883 << 1;
          $$0$i$i$i204 = $1885 >>> 0 < $1880 >>> 0 ? $1880 : $1885;
         } else $$0$i$i$i204 = 178956970;
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i204, $1879, $db + 12 | 0);
         $1888 = $__v$i$i$i + 8 | 0;
         $1889 = HEAP32[$1888 >> 2] | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1889, $37);
         HEAP32[$1888 >> 2] = $1889 + 24;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($38);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($39);
       } else {
        $1835 = (HEAP32[$1744 >> 2] | 0) + -24 | 0;
        __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($35, $0, 15293);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($36, (HEAP32[$1744 >> 2] | 0) + -24 | 0);
        $1838 = HEAP8[$36 >> 0] | 0;
        $1840 = ($1838 & 1) == 0;
        $1850 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($35, $1840 ? $36 + 1 | 0 : HEAP32[$36 + 8 >> 2] | 0, $1840 ? ($1838 & 255) >>> 1 : HEAP32[$36 + 4 >> 2] | 0) | 0;
        HEAP32[$34 >> 2] = HEAP32[$1850 >> 2];
        HEAP32[$34 + 4 >> 2] = HEAP32[$1850 + 4 >> 2];
        HEAP32[$34 + 8 >> 2] = HEAP32[$1850 + 8 >> 2];
        $__i$0$i$i$i193 = 0;
        while (1) {
         if (($__i$0$i$i$i193 | 0) == 3) break;
         HEAP32[$1850 + ($__i$0$i$i$i193 << 2) >> 2] = 0;
         $__i$0$i$i$i193 = $__i$0$i$i$i193 + 1 | 0;
        }
        $1853 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($34, 14708) | 0;
        HEAP32[$33 >> 2] = HEAP32[$1853 >> 2];
        HEAP32[$33 + 4 >> 2] = HEAP32[$1853 + 4 >> 2];
        HEAP32[$33 + 8 >> 2] = HEAP32[$1853 + 8 >> 2];
        $__i$0$i$i$i197 = 0;
        while (1) {
         if (($__i$0$i$i$i197 | 0) == 3) break;
         HEAP32[$1853 + ($__i$0$i$i$i197 << 2) >> 2] = 0;
         $__i$0$i$i$i197 = $__i$0$i$i$i197 + 1 | 0;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($32, $33);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1835, $32);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($33);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($36);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
      } else label = 498;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
      label = 498;
     }
     if ((label | 0) == 498) {
      $1787 = (HEAP32[$1744 >> 2] | 0) + -24 | 0;
      __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($30, $0, 15752);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($31, (HEAP32[$1744 >> 2] | 0) + -24 | 0);
      $1790 = HEAP8[$31 >> 0] | 0;
      $1792 = ($1790 & 1) == 0;
      $1802 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($30, $1792 ? $31 + 1 | 0 : HEAP32[$31 + 8 >> 2] | 0, $1792 ? ($1790 & 255) >>> 1 : HEAP32[$31 + 4 >> 2] | 0) | 0;
      HEAP32[$29 >> 2] = HEAP32[$1802 >> 2];
      HEAP32[$29 + 4 >> 2] = HEAP32[$1802 + 4 >> 2];
      HEAP32[$29 + 8 >> 2] = HEAP32[$1802 + 8 >> 2];
      $__i$0$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i | 0) == 3) break;
       HEAP32[$1802 + ($__i$0$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($28, $29);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1787, $28);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
     }
     $1892 = (HEAP32[$1744 >> 2] | 0) + -24 | 0;
     HEAP32[$41 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($40, $1892, $41);
     $1895 = $db + 16 | 0;
     $1896 = $db + 20 | 0;
     $1897 = HEAP32[$1896 >> 2] | 0;
     $1899 = HEAP32[$db + 24 >> 2] | 0;
     $1901 = $1899;
     if ($1897 >>> 0 < $1899 >>> 0) {
      HEAP32[$1897 + 12 >> 2] = HEAP32[$40 + 12 >> 2];
      HEAP32[$1897 >> 2] = HEAP32[$40 >> 2];
      $1907 = $40 + 4 | 0;
      HEAP32[$1897 + 4 >> 2] = HEAP32[$1907 >> 2];
      $1909 = $40 + 8 | 0;
      HEAP32[$1897 + 8 >> 2] = HEAP32[$1909 >> 2];
      HEAP32[$1909 >> 2] = 0;
      HEAP32[$1907 >> 2] = 0;
      HEAP32[$40 >> 2] = 0;
      HEAP32[$1896 >> 2] = (HEAP32[$1896 >> 2] | 0) + 16;
     } else {
      $1916 = HEAP32[$1895 >> 2] | 0;
      $1918 = $1897 - $1916 >> 4;
      $1919 = $1918 + 1 | 0;
      if ($1919 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1895);
      $1921 = $1901 - $1916 | 0;
      if ($1921 >> 4 >>> 0 < 134217727) {
       $1924 = $1921 >> 3;
       $$0$i$i$i174 = $1924 >>> 0 < $1919 >>> 0 ? $1919 : $1924;
      } else $$0$i$i$i174 = 268435455;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i174, $1918, $db + 28 | 0);
      $1927 = $__v$i$i$i + 8 | 0;
      $1928 = HEAP32[$1927 >> 2] | 0;
      HEAP32[$1928 + 12 >> 2] = HEAP32[$40 + 12 >> 2];
      HEAP32[$1928 >> 2] = HEAP32[$40 >> 2];
      $1934 = $40 + 4 | 0;
      HEAP32[$1928 + 4 >> 2] = HEAP32[$1934 >> 2];
      $1936 = $40 + 8 | 0;
      HEAP32[$1928 + 8 >> 2] = HEAP32[$1936 >> 2];
      HEAP32[$1936 >> 2] = 0;
      HEAP32[$1934 >> 2] = 0;
      HEAP32[$40 >> 2] = 0;
      HEAP32[$1927 >> 2] = $1928 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1895, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($40);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
     $$5 = $1742;
     break L1;
     break;
    }
   case 83:
    {
     $1940 = $first + 1 | 0;
     if (($1940 | 0) != ($last | 0)) if ((HEAP8[$1940 >> 0] | 0) == 116) {
      $1944 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      if (($1944 | 0) == ($first | 0)) {
       $$5 = $first;
       break L1;
      }
      $1948 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($1948 | 0)) {
       $$5 = $first;
       break L1;
      }
      $1950 = $db + 16 | 0;
      HEAP32[$43 >> 2] = HEAP32[$db + 12 >> 2];
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($42, $1948 + -24 | 0, $43);
      $1954 = $db + 20 | 0;
      $1955 = HEAP32[$1954 >> 2] | 0;
      $1957 = HEAP32[$db + 24 >> 2] | 0;
      $1959 = $1957;
      if ($1955 >>> 0 < $1957 >>> 0) {
       HEAP32[$1955 + 12 >> 2] = HEAP32[$42 + 12 >> 2];
       HEAP32[$1955 >> 2] = HEAP32[$42 >> 2];
       $1965 = $42 + 4 | 0;
       HEAP32[$1955 + 4 >> 2] = HEAP32[$1965 >> 2];
       $1967 = $42 + 8 | 0;
       HEAP32[$1955 + 8 >> 2] = HEAP32[$1967 >> 2];
       HEAP32[$1967 >> 2] = 0;
       HEAP32[$1965 >> 2] = 0;
       HEAP32[$42 >> 2] = 0;
       HEAP32[$1954 >> 2] = (HEAP32[$1954 >> 2] | 0) + 16;
      } else {
       $1974 = HEAP32[$1950 >> 2] | 0;
       $1976 = $1955 - $1974 >> 4;
       $1977 = $1976 + 1 | 0;
       if ($1977 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1950);
       $1979 = $1959 - $1974 | 0;
       if ($1979 >> 4 >>> 0 < 134217727) {
        $1982 = $1979 >> 3;
        $$0$i$i$i70 = $1982 >>> 0 < $1977 >>> 0 ? $1977 : $1982;
       } else $$0$i$i$i70 = 268435455;
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i70, $1976, $db + 28 | 0);
       $1985 = $__v$i$i$i + 8 | 0;
       $1986 = HEAP32[$1985 >> 2] | 0;
       HEAP32[$1986 + 12 >> 2] = HEAP32[$42 + 12 >> 2];
       HEAP32[$1986 >> 2] = HEAP32[$42 >> 2];
       $1992 = $42 + 4 | 0;
       HEAP32[$1986 + 4 >> 2] = HEAP32[$1992 >> 2];
       $1994 = $42 + 8 | 0;
       HEAP32[$1986 + 8 >> 2] = HEAP32[$1994 >> 2];
       HEAP32[$1994 >> 2] = 0;
       HEAP32[$1992 >> 2] = 0;
       HEAP32[$42 >> 2] = 0;
       HEAP32[$1985 >> 2] = $1986 + 16;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1950, $__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($42);
      $$5 = $1944;
      break L1;
     }
     $1998 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     if (($1998 | 0) == ($first | 0)) {
      $$5 = $first;
      break L1;
     }
     $2000 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1998, $last, $db) | 0;
     if (($2000 | 0) == ($1998 | 0)) {
      $$5 = $1998;
      break L1;
     }
     $2002 = $db + 4 | 0;
     $2003 = HEAP32[$2002 >> 2] | 0;
     if ((($2003 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$5 = $1998;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, $2003 + -24 | 0);
     $2010 = HEAP32[$2002 >> 2] | 0;
     $2011 = $2010 + -24 | 0;
     $2012 = $2010;
     while (1) {
      if (($2012 | 0) == ($2011 | 0)) break;
      $2014 = $2012 + -24 | 0;
      HEAP32[$2002 >> 2] = $2014;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2014);
      $2012 = HEAP32[$2002 >> 2] | 0;
     }
     $2016 = HEAP8[$0 >> 0] | 0;
     $2018 = ($2016 & 1) == 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2010 + -48 | 0, $2018 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $2018 ? ($2016 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
     $2029 = (HEAP32[$2002 >> 2] | 0) + -24 | 0;
     HEAP32[$45 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($44, $2029, $45);
     $2032 = $db + 16 | 0;
     $2033 = $db + 20 | 0;
     $2034 = HEAP32[$2033 >> 2] | 0;
     $2036 = HEAP32[$db + 24 >> 2] | 0;
     $2038 = $2036;
     if ($2034 >>> 0 < $2036 >>> 0) {
      HEAP32[$2034 + 12 >> 2] = HEAP32[$44 + 12 >> 2];
      HEAP32[$2034 >> 2] = HEAP32[$44 >> 2];
      $2044 = $44 + 4 | 0;
      HEAP32[$2034 + 4 >> 2] = HEAP32[$2044 >> 2];
      $2046 = $44 + 8 | 0;
      HEAP32[$2034 + 8 >> 2] = HEAP32[$2046 >> 2];
      HEAP32[$2046 >> 2] = 0;
      HEAP32[$2044 >> 2] = 0;
      HEAP32[$44 >> 2] = 0;
      HEAP32[$2033 >> 2] = (HEAP32[$2033 >> 2] | 0) + 16;
     } else {
      $2053 = HEAP32[$2032 >> 2] | 0;
      $2055 = $2034 - $2053 >> 4;
      $2056 = $2055 + 1 | 0;
      if ($2056 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2032);
      $2058 = $2038 - $2053 | 0;
      if ($2058 >> 4 >>> 0 < 134217727) {
       $2061 = $2058 >> 3;
       $$0$i$i$i50 = $2061 >>> 0 < $2056 >>> 0 ? $2056 : $2061;
      } else $$0$i$i$i50 = 268435455;
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i50, $2055, $db + 28 | 0);
      $2064 = $__v$i$i$i + 8 | 0;
      $2065 = HEAP32[$2064 >> 2] | 0;
      HEAP32[$2065 + 12 >> 2] = HEAP32[$44 + 12 >> 2];
      HEAP32[$2065 >> 2] = HEAP32[$44 >> 2];
      $2071 = $44 + 4 | 0;
      HEAP32[$2065 + 4 >> 2] = HEAP32[$2071 >> 2];
      $2073 = $44 + 8 | 0;
      HEAP32[$2065 + 8 >> 2] = HEAP32[$2073 >> 2];
      HEAP32[$2073 >> 2] = 0;
      HEAP32[$2071 >> 2] = 0;
      HEAP32[$44 >> 2] = 0;
      HEAP32[$2064 >> 2] = $2065 + 16;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2032, $__v$i$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($44);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
     $$5 = $2000;
     break L1;
     break;
    }
   case 68:
    {
     $2077 = $first + 1 | 0;
     if (($2077 | 0) != ($last | 0)) {
      $2079 = HEAP8[$2077 >> 0] | 0;
      switch ($2079 << 24 >> 24 | 0) {
      case 112:
       {
        $2081 = $db + 4 | 0;
        $2085 = ((HEAP32[$2081 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
        $2086 = $first + 2 | 0;
        $2087 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2086, $last, $db) | 0;
        $2091 = ((HEAP32[$2081 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
        if (($2087 | 0) == ($2086 | 0)) break L69;
        $2093 = $db + 16 | 0;
        $2095 = HEAP32[$db + 12 >> 2] | 0;
        $2096 = $db + 20 | 0;
        $2097 = HEAP32[$2096 >> 2] | 0;
        $2099 = HEAP32[$db + 24 >> 2] | 0;
        $2101 = $2099;
        if ($2097 >>> 0 < $2099 >>> 0) {
         HEAP32[$2097 >> 2] = 0;
         HEAP32[$2097 + 4 >> 2] = 0;
         HEAP32[$2097 + 8 >> 2] = 0;
         HEAP32[$2097 + 12 >> 2] = $2095;
         HEAP32[$2096 >> 2] = (HEAP32[$2096 >> 2] | 0) + 16;
        } else {
         $2109 = HEAP32[$2093 >> 2] | 0;
         $2111 = $2097 - $2109 >> 4;
         $2112 = $2111 + 1 | 0;
         if ($2112 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2093);
         $2114 = $2101 - $2109 | 0;
         if ($2114 >> 4 >>> 0 < 134217727) {
          $2117 = $2114 >> 3;
          $$0$i$i$i48 = $2117 >>> 0 < $2112 >>> 0 ? $2112 : $2117;
         } else $$0$i$i$i48 = 268435455;
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i48, $2111, $db + 28 | 0);
         $2120 = $__v$i$i$i + 8 | 0;
         $2121 = HEAP32[$2120 >> 2] | 0;
         HEAP32[$2121 >> 2] = 0;
         HEAP32[$2121 + 4 >> 2] = 0;
         HEAP32[$2121 + 8 >> 2] = 0;
         HEAP32[$2121 + 12 >> 2] = $2095;
         HEAP32[$2120 >> 2] = $2121 + 16;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2093, $__v$i$i$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
        }
        $2126 = $__v$i$i$i + 8 | 0;
        $k20$0 = $2085;
        while (1) {
         if ($k20$0 >>> 0 >= $2091 >>> 0) {
          $$5 = $2087;
          break L1;
         }
         $2128 = HEAP32[$2096 >> 2] | 0;
         $2129 = $2128 + -16 | 0;
         $2130 = HEAP32[$db >> 2] | 0;
         $2131 = $2130 + ($k20$0 * 24 | 0) | 0;
         $2132 = $2128 + -12 | 0;
         $2133 = HEAP32[$2132 >> 2] | 0;
         $2135 = HEAP32[$2128 + -8 >> 2] | 0;
         $2137 = $2135;
         if (($2133 | 0) == ($2135 | 0)) {
          $2144 = HEAP32[$2129 >> 2] | 0;
          $2146 = ($2133 - $2144 | 0) / 24 | 0;
          $2147 = $2146 + 1 | 0;
          if ($2147 >>> 0 > 178956970) {
           $$lcssa682 = $2129;
           break;
          }
          $2150 = ($2137 - $2144 | 0) / 24 | 0;
          if ($2150 >>> 0 < 89478485) {
           $2152 = $2150 << 1;
           $$0$i$i$i46 = $2152 >>> 0 < $2147 >>> 0 ? $2147 : $2152;
          } else $$0$i$i$i46 = 178956970;
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i46, $2146, $2128 + -4 | 0);
          $2155 = HEAP32[$2126 >> 2] | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2155, $2131);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2155 + 12 | 0, $2130 + ($k20$0 * 24 | 0) + 12 | 0);
          HEAP32[$2126 >> 2] = $2155 + 24;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($2129, $__v$i$i$i);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
         } else {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2133, $2131);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2133 + 12 | 0, $2130 + ($k20$0 * 24 | 0) + 12 | 0);
          HEAP32[$2132 >> 2] = (HEAP32[$2132 >> 2] | 0) + 24;
         }
         $k20$0 = $k20$0 + 1 | 0;
        }
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa682);
        break;
       }
      case 84:
      case 116:
       {
        $2160 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
        if (($2160 | 0) == ($first | 0)) break L69;
        $2164 = HEAP32[$db + 4 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($2164 | 0)) {
         $$5 = $first;
         break L1;
        }
        $2166 = $db + 16 | 0;
        HEAP32[$47 >> 2] = HEAP32[$db + 12 >> 2];
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($46, $2164 + -24 | 0, $47);
        $2170 = $db + 20 | 0;
        $2171 = HEAP32[$2170 >> 2] | 0;
        $2173 = HEAP32[$db + 24 >> 2] | 0;
        $2175 = $2173;
        if ($2171 >>> 0 < $2173 >>> 0) {
         HEAP32[$2171 + 12 >> 2] = HEAP32[$46 + 12 >> 2];
         HEAP32[$2171 >> 2] = HEAP32[$46 >> 2];
         $2181 = $46 + 4 | 0;
         HEAP32[$2171 + 4 >> 2] = HEAP32[$2181 >> 2];
         $2183 = $46 + 8 | 0;
         HEAP32[$2171 + 8 >> 2] = HEAP32[$2183 >> 2];
         HEAP32[$2183 >> 2] = 0;
         HEAP32[$2181 >> 2] = 0;
         HEAP32[$46 >> 2] = 0;
         HEAP32[$2170 >> 2] = (HEAP32[$2170 >> 2] | 0) + 16;
        } else {
         $2190 = HEAP32[$2166 >> 2] | 0;
         $2192 = $2171 - $2190 >> 4;
         $2193 = $2192 + 1 | 0;
         if ($2193 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2166);
         $2195 = $2175 - $2190 | 0;
         if ($2195 >> 4 >>> 0 < 134217727) {
          $2198 = $2195 >> 3;
          $$0$i$i$i41 = $2198 >>> 0 < $2193 >>> 0 ? $2193 : $2198;
         } else $$0$i$i$i41 = 268435455;
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i41, $2192, $db + 28 | 0);
         $2201 = $__v$i$i$i + 8 | 0;
         $2202 = HEAP32[$2201 >> 2] | 0;
         HEAP32[$2202 + 12 >> 2] = HEAP32[$46 + 12 >> 2];
         HEAP32[$2202 >> 2] = HEAP32[$46 >> 2];
         $2208 = $46 + 4 | 0;
         HEAP32[$2202 + 4 >> 2] = HEAP32[$2208 >> 2];
         $2210 = $46 + 8 | 0;
         HEAP32[$2202 + 8 >> 2] = HEAP32[$2210 >> 2];
         HEAP32[$2210 >> 2] = 0;
         HEAP32[$2208 >> 2] = 0;
         HEAP32[$46 >> 2] = 0;
         HEAP32[$2201 >> 2] = $2202 + 16;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2166, $__v$i$i$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($46);
        $$5 = $2160;
        break L1;
        break;
       }
      case 118:
       {
        L788 : do if (($last - $first | 0) > 3 & $194 << 24 >> 24 == 68 & $2079 << 24 >> 24 == 118) {
         $2220 = $first + 2 | 0;
         $2221 = HEAP8[$2220 >> 0] | 0;
         if (($2221 + -49 & 255) < 9) {
          $2223 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($2220, $last) | 0;
          if (($2223 | 0) == ($last | 0)) {
           $$9$i296 = $first;
           break;
          }
          if ((HEAP8[$2223 >> 0] | 0) != 95) {
           $$9$i296 = $first;
           break;
          }
          $2229 = $2223 - $2220 | 0;
          $2230 = $2223 + 1 | 0;
          if (($2230 | 0) == ($last | 0)) {
           $$9$i296 = $first;
           break;
          }
          if ((HEAP8[$2230 >> 0] | 0) != 112) {
           $2234 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2230, $last, $db) | 0;
           if (($2234 | 0) == ($2230 | 0)) {
            $$9$i296 = $first;
            break;
           }
           $2238 = HEAP32[$db + 4 >> 2] | 0;
           if ((HEAP32[$db >> 2] | 0) == ($2238 | 0)) {
            $$9$i296 = $first;
            break;
           }
           $2240 = $2238 + -24 | 0;
           HEAP32[$2 >> 2] = 0;
           HEAP32[$2 + 4 >> 2] = 0;
           HEAP32[$2 + 8 >> 2] = 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2, $2220, $2229);
           $2241 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2, 0, 15971) | 0;
           HEAP32[$1 >> 2] = HEAP32[$2241 >> 2];
           HEAP32[$1 + 4 >> 2] = HEAP32[$2241 + 4 >> 2];
           HEAP32[$1 + 8 >> 2] = HEAP32[$2241 + 8 >> 2];
           $__i$0$i$i$i$i260 = 0;
           while (1) {
            if (($__i$0$i$i$i$i260 | 0) == 3) break;
            HEAP32[$2241 + ($__i$0$i$i$i$i260 << 2) >> 2] = 0;
            $__i$0$i$i$i$i260 = $__i$0$i$i$i$i260 + 1 | 0;
           }
           $2244 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1, 14659) | 0;
           HEAP32[$0 >> 2] = HEAP32[$2244 >> 2];
           HEAP32[$0 + 4 >> 2] = HEAP32[$2244 + 4 >> 2];
           HEAP32[$0 + 8 >> 2] = HEAP32[$2244 + 8 >> 2];
           $__i$0$i$i$i34$i = 0;
           while (1) {
            if (($__i$0$i$i$i34$i | 0) == 3) break;
            HEAP32[$2244 + ($__i$0$i$i$i34$i << 2) >> 2] = 0;
            $__i$0$i$i$i34$i = $__i$0$i$i$i34$i + 1 | 0;
           }
           $2247 = HEAP8[$0 >> 0] | 0;
           $2249 = ($2247 & 1) == 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2240, $2249 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $2249 ? ($2247 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           $$9$i296 = $2234;
           break;
          }
          $2259 = $2223 + 2 | 0;
          HEAP32[$6 >> 2] = 0;
          HEAP32[$6 + 4 >> 2] = 0;
          HEAP32[$6 + 8 >> 2] = 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6, $2220, $2229);
          $2260 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6, 0, 15980) | 0;
          HEAP32[$5 >> 2] = HEAP32[$2260 >> 2];
          HEAP32[$5 + 4 >> 2] = HEAP32[$2260 + 4 >> 2];
          HEAP32[$5 + 8 >> 2] = HEAP32[$2260 + 8 >> 2];
          $__i$0$i$i$i38$i = 0;
          while (1) {
           if (($__i$0$i$i$i38$i | 0) == 3) break;
           HEAP32[$2260 + ($__i$0$i$i$i38$i << 2) >> 2] = 0;
           $__i$0$i$i$i38$i = $__i$0$i$i$i38$i + 1 | 0;
          }
          $2263 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 14659) | 0;
          HEAP32[$4 >> 2] = HEAP32[$2263 >> 2];
          HEAP32[$4 + 4 >> 2] = HEAP32[$2263 + 4 >> 2];
          HEAP32[$4 + 8 >> 2] = HEAP32[$2263 + 8 >> 2];
          $__i$0$i$i$i42$i = 0;
          while (1) {
           if (($__i$0$i$i$i42$i | 0) == 3) break;
           HEAP32[$2263 + ($__i$0$i$i$i42$i << 2) >> 2] = 0;
           $__i$0$i$i$i42$i = $__i$0$i$i$i42$i + 1 | 0;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
          $2266 = $db + 4 | 0;
          $2267 = HEAP32[$2266 >> 2] | 0;
          $2269 = HEAP32[$db + 8 >> 2] | 0;
          $2271 = $2269;
          if ($2267 >>> 0 < $2269 >>> 0) {
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2267, $3);
           HEAP32[$2266 >> 2] = (HEAP32[$2266 >> 2] | 0) + 24;
          } else {
           $2276 = HEAP32[$db >> 2] | 0;
           $2278 = ($2267 - $2276 | 0) / 24 | 0;
           $2279 = $2278 + 1 | 0;
           if ($2279 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
           $2282 = ($2271 - $2276 | 0) / 24 | 0;
           if ($2282 >>> 0 < 89478485) {
            $2284 = $2282 << 1;
            $$0$i$i$i$i = $2284 >>> 0 < $2279 >>> 0 ? $2279 : $2284;
           } else $$0$i$i$i$i = 178956970;
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i$i, $2278, $db + 12 | 0);
           $2287 = $__v$i$i$i + 8 | 0;
           $2288 = HEAP32[$2287 >> 2] | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2288, $3);
           HEAP32[$2287 >> 2] = $2288 + 24;
           __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i);
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
          $$9$i296 = $2259;
          break;
         };
         HEAP32[$__v$i$i$i >> 2] = 0;
         HEAP32[$__v$i$i$i + 4 >> 2] = 0;
         HEAP32[$__v$i$i$i + 8 >> 2] = 0;
         $__i$0$i$i$i270 = 0;
         while (1) {
          if (($__i$0$i$i$i270 | 0) == 3) break;
          HEAP32[$__v$i$i$i + ($__i$0$i$i$i270 << 2) >> 2] = 0;
          $__i$0$i$i$i270 = $__i$0$i$i$i270 + 1 | 0;
         }
         L831 : do if ($2221 << 24 >> 24 == 95) {
          $t13$2$i = $2220;
          label = 640;
         } else {
          $2293 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2220, $last, $db) | 0;
          if (($2293 | 0) == ($2220 | 0)) {
           $t13$2$i = $2220;
           label = 640;
          } else {
           $2296 = $db + 4 | 0;
           $2297 = HEAP32[$2296 >> 2] | 0;
           if ((HEAP32[$db >> 2] | 0) != ($2297 | 0)) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7, $2297 + -24 | 0);
            L835 : do if (!(HEAP8[$__v$i$i$i >> 0] & 1)) {
             HEAP8[$__v$i$i$i + 1 >> 0] = 0;
             HEAP8[$__v$i$i$i >> 0] = 0;
            } else {
             $2304 = $__v$i$i$i + 8 | 0;
             $2305 = HEAP32[$2304 >> 2] | 0;
             HEAP8[$2305 >> 0] = 0;
             $2306 = $__v$i$i$i + 4 | 0;
             HEAP32[$2306 >> 2] = 0;
             $2307 = HEAP32[$__v$i$i$i >> 2] | 0;
             $phitmp$i$i$i$i$i$i$i275 = ($2307 & -2) + -1 | 0;
             $2309 = $2307 & 255;
             do if (!($2309 & 1)) {
              $2313 = $2307 >>> 1 & 127;
              if (($2309 & 255) < 22) {
               _memcpy($__v$i$i$i + 1 | 0, $2305 | 0, ($2307 >>> 1 & 127) + 1 | 0) | 0;
               _free($2305);
               $$ph474 = $2313;
               break;
              }
              $2316 = $2313 + 16 & 240;
              $phitmp$i2$i$i$i$i$i$i278 = $2316 + -1 | 0;
              if (($phitmp$i2$i$i$i$i$i$i278 | 0) == ($phitmp$i$i$i$i$i$i$i275 | 0)) break L835;
              $2319 = _malloc($2316) | 0;
              if ($phitmp$i2$i$i$i$i$i$i278 >>> 0 <= $phitmp$i$i$i$i$i$i$i275 >>> 0 & ($2319 | 0) == 0) break L835;
              _memcpy($2319 | 0, $__v$i$i$i + 1 | 0, ($2307 >>> 1 & 127) + 1 | 0) | 0;
              HEAP32[$__v$i$i$i >> 2] = $2316 | 1;
              HEAP32[$2306 >> 2] = $2313;
              HEAP32[$2304 >> 2] = $2319;
              break L835;
             } else {
              HEAP8[$__v$i$i$i + 1 >> 0] = 0;
              _free($2305);
              $$ph474 = 0;
             } while (0);
             HEAP8[$__v$i$i$i >> 0] = $$ph474 << 1;
            } while (0);
            HEAP32[$__v$i$i$i >> 2] = HEAP32[$7 >> 2];
            HEAP32[$__v$i$i$i + 4 >> 2] = HEAP32[$7 + 4 >> 2];
            HEAP32[$__v$i$i$i + 8 >> 2] = HEAP32[$7 + 8 >> 2];
            $__i$0$i$i$i$i$i288 = 0;
            while (1) {
             if (($__i$0$i$i$i$i$i288 | 0) == 3) break;
             HEAP32[$7 + ($__i$0$i$i$i$i$i288 << 2) >> 2] = 0;
             $__i$0$i$i$i$i$i288 = $__i$0$i$i$i$i$i288 + 1 | 0;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
            $2333 = HEAP32[$2296 >> 2] | 0;
            $2334 = $2333 + -24 | 0;
            $2335 = $2333;
            while (1) {
             if (($2335 | 0) == ($2334 | 0)) {
              $t13$2$i = $2293;
              label = 640;
              break L831;
             }
             $2337 = $2335 + -24 | 0;
             HEAP32[$2296 >> 2] = $2337;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2337);
             $2335 = HEAP32[$2296 >> 2] | 0;
            }
           }
          }
         } while (0);
         do if ((label | 0) == 640) {
          if (($t13$2$i | 0) == ($last | 0)) $$812$i$ph = $first; else if ((HEAP8[$t13$2$i >> 0] | 0) == 95) {
           $2341 = $t13$2$i + 1 | 0;
           if (($2341 | 0) == ($last | 0)) $$812$i$ph = $first; else {
            $2343 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2341, $last, $db) | 0;
            if (($2343 | 0) == ($2341 | 0)) $$812$i$ph = $first; else {
             $2347 = HEAP32[$db + 4 >> 2] | 0;
             if ((HEAP32[$db >> 2] | 0) == ($2347 | 0)) break;
             $2349 = $2347 + -24 | 0;
             __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($9, 15971, $__v$i$i$i);
             $2350 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9, 14659) | 0;
             HEAP32[$8 >> 2] = HEAP32[$2350 >> 2];
             HEAP32[$8 + 4 >> 2] = HEAP32[$2350 + 4 >> 2];
             HEAP32[$8 + 8 >> 2] = HEAP32[$2350 + 8 >> 2];
             $__i$0$i$i$i47$i = 0;
             while (1) {
              if (($__i$0$i$i$i47$i | 0) == 3) break;
              HEAP32[$2350 + ($__i$0$i$i$i47$i << 2) >> 2] = 0;
              $__i$0$i$i$i47$i = $__i$0$i$i$i47$i + 1 | 0;
             }
             $2353 = HEAP8[$8 >> 0] | 0;
             $2355 = ($2353 & 1) == 0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2349, $2355 ? $8 + 1 | 0 : HEAP32[$8 + 8 >> 2] | 0, $2355 ? ($2353 & 255) >>> 1 : HEAP32[$8 + 4 >> 2] | 0) | 0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
             $$812$i$ph = $2343;
            }
           }
          } else $$812$i$ph = $first;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i$i);
          $$9$i296 = $$812$i$ph;
          break L788;
         } while (0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i$i);
         $$9$i296 = $first;
        } else $$9$i296 = $first; while (0);
        if (($$9$i296 | 0) == ($first | 0)) break L69;
        $2368 = HEAP32[$db + 4 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($2368 | 0)) {
         $$5 = $first;
         break L1;
        }
        $2370 = $db + 16 | 0;
        HEAP32[$49 >> 2] = HEAP32[$db + 12 >> 2];
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($48, $2368 + -24 | 0, $49);
        $2374 = $db + 20 | 0;
        $2375 = HEAP32[$2374 >> 2] | 0;
        $2377 = HEAP32[$db + 24 >> 2] | 0;
        $2379 = $2377;
        if ($2375 >>> 0 < $2377 >>> 0) {
         HEAP32[$2375 + 12 >> 2] = HEAP32[$48 + 12 >> 2];
         HEAP32[$2375 >> 2] = HEAP32[$48 >> 2];
         $2385 = $48 + 4 | 0;
         HEAP32[$2375 + 4 >> 2] = HEAP32[$2385 >> 2];
         $2387 = $48 + 8 | 0;
         HEAP32[$2375 + 8 >> 2] = HEAP32[$2387 >> 2];
         HEAP32[$2387 >> 2] = 0;
         HEAP32[$2385 >> 2] = 0;
         HEAP32[$48 >> 2] = 0;
         HEAP32[$2374 >> 2] = (HEAP32[$2374 >> 2] | 0) + 16;
        } else {
         $2394 = HEAP32[$2370 >> 2] | 0;
         $2396 = $2375 - $2394 >> 4;
         $2397 = $2396 + 1 | 0;
         if ($2397 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2370);
         $2399 = $2379 - $2394 | 0;
         if ($2399 >> 4 >>> 0 < 134217727) {
          $2402 = $2399 >> 3;
          $$0$i$i$i36 = $2402 >>> 0 < $2397 >>> 0 ? $2397 : $2402;
         } else $$0$i$i$i36 = 268435455;
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i36, $2396, $db + 28 | 0);
         $2405 = $__v$i$i$i + 8 | 0;
         $2406 = HEAP32[$2405 >> 2] | 0;
         HEAP32[$2406 + 12 >> 2] = HEAP32[$48 + 12 >> 2];
         HEAP32[$2406 >> 2] = HEAP32[$48 >> 2];
         $2412 = $48 + 4 | 0;
         HEAP32[$2406 + 4 >> 2] = HEAP32[$2412 >> 2];
         $2414 = $48 + 8 | 0;
         HEAP32[$2406 + 8 >> 2] = HEAP32[$2414 >> 2];
         HEAP32[$2414 >> 2] = 0;
         HEAP32[$2412 >> 2] = 0;
         HEAP32[$48 >> 2] = 0;
         HEAP32[$2405 >> 2] = $2406 + 16;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2370, $__v$i$i$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($48);
        $$5 = $$9$i296;
        break L1;
        break;
       }
      default:
       break L69;
      }
     }
     break;
    }
   default:
    {}
   } while (0);
   $2418 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   if (($2418 | 0) == ($first | 0)) {
    $2420 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    if (($2420 | 0) == ($first | 0)) $$5 = $first; else {
     $2424 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($2424 | 0)) $$5 = $first; else {
      $2426 = $db + 16 | 0;
      HEAP32[$51 >> 2] = HEAP32[$db + 12 >> 2];
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($50, $2424 + -24 | 0, $51);
      $2430 = $db + 20 | 0;
      $2431 = HEAP32[$2430 >> 2] | 0;
      $2433 = HEAP32[$db + 24 >> 2] | 0;
      $2435 = $2433;
      if ($2431 >>> 0 < $2433 >>> 0) {
       HEAP32[$2431 + 12 >> 2] = HEAP32[$50 + 12 >> 2];
       HEAP32[$2431 >> 2] = HEAP32[$50 >> 2];
       $2441 = $50 + 4 | 0;
       HEAP32[$2431 + 4 >> 2] = HEAP32[$2441 >> 2];
       $2443 = $50 + 8 | 0;
       HEAP32[$2431 + 8 >> 2] = HEAP32[$2443 >> 2];
       HEAP32[$2443 >> 2] = 0;
       HEAP32[$2441 >> 2] = 0;
       HEAP32[$50 >> 2] = 0;
       HEAP32[$2430 >> 2] = (HEAP32[$2430 >> 2] | 0) + 16;
      } else {
       $2450 = HEAP32[$2426 >> 2] | 0;
       $2452 = $2431 - $2450 >> 4;
       $2453 = $2452 + 1 | 0;
       if ($2453 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2426);
       $2455 = $2435 - $2450 | 0;
       if ($2455 >> 4 >>> 0 < 134217727) {
        $2458 = $2455 >> 3;
        $$0$i$i$i = $2458 >>> 0 < $2453 >>> 0 ? $2453 : $2458;
       } else $$0$i$i$i = 268435455;
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i, $$0$i$i$i, $2452, $db + 28 | 0);
       $2461 = $__v$i$i$i + 8 | 0;
       $2462 = HEAP32[$2461 >> 2] | 0;
       HEAP32[$2462 + 12 >> 2] = HEAP32[$50 + 12 >> 2];
       HEAP32[$2462 >> 2] = HEAP32[$50 >> 2];
       $2468 = $50 + 4 | 0;
       HEAP32[$2462 + 4 >> 2] = HEAP32[$2468 >> 2];
       $2470 = $50 + 8 | 0;
       HEAP32[$2462 + 8 >> 2] = HEAP32[$2470 >> 2];
       HEAP32[$2470 >> 2] = 0;
       HEAP32[$2468 >> 2] = 0;
       HEAP32[$50 >> 2] = 0;
       HEAP32[$2461 >> 2] = $2462 + 16;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2426, $__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($50);
      $$5 = $2420;
     }
    }
   } else $$5 = $2418;
  } else $$5 = $192;
 } while (0);
 STACKTOP = sp;
 return $$5 | 0;
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i103 = 0, $$0$i$i$i108 = 0, $$0$i$i$i113 = 0, $$0$i$i$i118 = 0, $$0$i$i$i123 = 0, $$0$i$i$i128 = 0, $$0$i$i$i13 = 0, $$0$i$i$i133 = 0, $$0$i$i$i138 = 0, $$0$i$i$i143 = 0, $$0$i$i$i148 = 0, $$0$i$i$i153 = 0, $$0$i$i$i158 = 0, $$0$i$i$i163 = 0, $$0$i$i$i168 = 0, $$0$i$i$i173 = 0, $$0$i$i$i178 = 0, $$0$i$i$i18 = 0, $$0$i$i$i183 = 0, $$0$i$i$i188 = 0, $$0$i$i$i193 = 0, $$0$i$i$i198 = 0, $$0$i$i$i203 = 0, $$0$i$i$i208 = 0, $$0$i$i$i213 = 0, $$0$i$i$i218 = 0, $$0$i$i$i223 = 0, $$0$i$i$i228 = 0, $$0$i$i$i23 = 0, $$0$i$i$i233 = 0, $$0$i$i$i28 = 0, $$0$i$i$i33 = 0, $$0$i$i$i38 = 0, $$0$i$i$i43 = 0, $$0$i$i$i48 = 0, $$0$i$i$i53 = 0, $$0$i$i$i58 = 0, $$0$i$i$i63 = 0, $$0$i$i$i68 = 0, $$0$i$i$i73 = 0, $$0$i$i$i78 = 0, $$0$i$i$i83 = 0, $$0$i$i$i88 = 0, $$0$i$i$i93 = 0, $$0$i$i$i98 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $1002 = 0, $1004 = 0, $1007 = 0, $1008 = 0, $101 = 0, $1011 = 0, $1012 = 0, $1014 = 0, $1016 = 0, $102 = 0, $1021 = 0, $1023 = 0, $1024 = 0, $1027 = 0, $1029 = 0, $1032 = 0, $1033 = 0, $1036 = 0, $1037 = 0, $1039 = 0, $1041 = 0, $1046 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1052 = 0, $1054 = 0, $1057 = 0, $1058 = 0, $106 = 0, $1061 = 0, $1062 = 0, $1064 = 0, $1066 = 0, $1071 = 0, $1073 = 0, $1074 = 0, $1077 = 0, $1079 = 0, $108 = 0, $1082 = 0, $1083 = 0, $1086 = 0, $1087 = 0, $1089 = 0, $1091 = 0, $1096 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1102 = 0, $1104 = 0, $1107 = 0, $1108 = 0, $1111 = 0, $1112 = 0, $1114 = 0, $1116 = 0, $1121 = 0, $1123 = 0, $1124 = 0, $1127 = 0, $1129 = 0, $1132 = 0, $1133 = 0, $1139 = 0, $1140 = 0, $1142 = 0, $1144 = 0, $1149 = 0, $115 = 0, $1151 = 0, $1152 = 0, $1155 = 0, $1157 = 0, $1160 = 0, $1161 = 0, $1167 = 0, $1168 = 0, $117 = 0, $1170 = 0, $1172 = 0, $1177 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1183 = 0, $1185 = 0, $1188 = 0, $1189 = 0, $1192 = 0, $1193 = 0, $1195 = 0, $1197 = 0, $12 = 0, $1202 = 0, $1204 = 0, $1205 = 0, $1208 = 0, $121 = 0, $1210 = 0, $1213 = 0, $1214 = 0, $1217 = 0, $1218 = 0, $1220 = 0, $1222 = 0, $1227 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1233 = 0, $1235 = 0, $1238 = 0, $1239 = 0, $1242 = 0, $1243 = 0, $1245 = 0, $1247 = 0, $1252 = 0, $1254 = 0, $1255 = 0, $1258 = 0, $126 = 0, $1260 = 0, $1263 = 0, $1264 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1275 = 0, $13 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $146 = 0, $148 = 0, $15 = 0, $151 = 0, $152 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $174 = 0, $176 = 0, $179 = 0, $18 = 0, $180 = 0, $183 = 0, $184 = 0, $186 = 0, $188 = 0, $19 = 0, $193 = 0, $195 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $204 = 0, $205 = 0, $208 = 0, $209 = 0, $21 = 0, $211 = 0, $213 = 0, $218 = 0, $22 = 0, $220 = 0, $221 = 0, $224 = 0, $226 = 0, $229 = 0, $23 = 0, $230 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $240 = 0, $247 = 0, $248 = 0, $25 = 0, $250 = 0, $252 = 0, $257 = 0, $259 = 0, $26 = 0, $260 = 0, $263 = 0, $265 = 0, $268 = 0, $269 = 0, $27 = 0, $272 = 0, $273 = 0, $275 = 0, $277 = 0, $28 = 0, $282 = 0, $284 = 0, $285 = 0, $288 = 0, $29 = 0, $290 = 0, $293 = 0, $294 = 0, $297 = 0, $3 = 0, $30 = 0, $301 = 0, $304 = 0, $305 = 0, $307 = 0, $309 = 0, $31 = 0, $314 = 0, $316 = 0, $317 = 0, $32 = 0, $320 = 0, $322 = 0, $325 = 0, $326 = 0, $329 = 0, $33 = 0, $330 = 0, $332 = 0, $334 = 0, $339 = 0, $34 = 0, $341 = 0, $342 = 0, $345 = 0, $347 = 0, $35 = 0, $350 = 0, $351 = 0, $354 = 0, $355 = 0, $357 = 0, $359 = 0, $36 = 0, $364 = 0, $366 = 0, $367 = 0, $37 = 0, $370 = 0, $372 = 0, $375 = 0, $376 = 0, $38 = 0, $382 = 0, $383 = 0, $385 = 0, $387 = 0, $39 = 0, $392 = 0, $394 = 0, $395 = 0, $398 = 0, $4 = 0, $40 = 0, $400 = 0, $403 = 0, $404 = 0, $407 = 0, $408 = 0, $41 = 0, $410 = 0, $412 = 0, $417 = 0, $419 = 0, $42 = 0, $420 = 0, $423 = 0, $425 = 0, $428 = 0, $429 = 0, $43 = 0, $432 = 0, $433 = 0, $435 = 0, $437 = 0, $44 = 0, $442 = 0, $444 = 0, $445 = 0, $448 = 0, $45 = 0, $450 = 0, $453 = 0, $454 = 0, $460 = 0, $461 = 0, $463 = 0, $465 = 0, $470 = 0, $472 = 0, $473 = 0, $476 = 0, $478 = 0, $481 = 0, $482 = 0, $485 = 0, $486 = 0, $488 = 0, $490 = 0, $495 = 0, $497 = 0, $498 = 0, $5 = 0, $501 = 0, $503 = 0, $506 = 0, $507 = 0, $513 = 0, $514 = 0, $516 = 0, $518 = 0, $523 = 0, $525 = 0, $526 = 0, $529 = 0, $531 = 0, $534 = 0, $535 = 0, $541 = 0, $542 = 0, $544 = 0, $546 = 0, $55 = 0, $551 = 0, $553 = 0, $554 = 0, $557 = 0, $559 = 0, $56 = 0, $562 = 0, $563 = 0, $566 = 0, $567 = 0, $571 = 0, $574 = 0, $575 = 0, $577 = 0, $579 = 0, $58 = 0, $584 = 0, $586 = 0, $587 = 0, $590 = 0, $592 = 0, $595 = 0, $596 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $602 = 0, $604 = 0, $609 = 0, $611 = 0, $612 = 0, $615 = 0, $617 = 0, $620 = 0, $621 = 0, $624 = 0, $625 = 0, $627 = 0, $629 = 0, $634 = 0, $636 = 0, $637 = 0, $640 = 0, $642 = 0, $645 = 0, $646 = 0, $65 = 0, $652 = 0, $653 = 0, $655 = 0, $657 = 0, $662 = 0, $664 = 0, $665 = 0, $668 = 0, $67 = 0, $670 = 0, $673 = 0, $674 = 0, $677 = 0, $678 = 0, $68 = 0, $680 = 0, $682 = 0, $687 = 0, $689 = 0, $690 = 0, $693 = 0, $695 = 0, $698 = 0, $699 = 0, $7 = 0, $702 = 0, $703 = 0, $705 = 0, $707 = 0, $71 = 0, $712 = 0, $714 = 0, $715 = 0, $718 = 0, $720 = 0, $723 = 0, $724 = 0, $727 = 0, $728 = 0, $73 = 0, $730 = 0, $732 = 0, $737 = 0, $739 = 0, $740 = 0, $743 = 0, $745 = 0, $748 = 0, $749 = 0, $752 = 0, $753 = 0, $755 = 0, $757 = 0, $76 = 0, $762 = 0, $764 = 0, $765 = 0, $768 = 0, $77 = 0, $770 = 0, $773 = 0, $774 = 0, $780 = 0, $781 = 0, $783 = 0, $785 = 0, $790 = 0, $792 = 0, $793 = 0, $796 = 0, $798 = 0, $8 = 0, $80 = 0, $801 = 0, $802 = 0, $805 = 0, $806 = 0, $808 = 0, $81 = 0, $810 = 0, $815 = 0, $817 = 0, $818 = 0, $821 = 0, $823 = 0, $826 = 0, $827 = 0, $83 = 0, $830 = 0, $831 = 0, $833 = 0, $835 = 0, $840 = 0, $842 = 0, $843 = 0, $846 = 0, $848 = 0, $85 = 0, $851 = 0, $852 = 0, $855 = 0, $856 = 0, $858 = 0, $860 = 0, $865 = 0, $867 = 0, $868 = 0, $871 = 0, $873 = 0, $876 = 0, $877 = 0, $880 = 0, $881 = 0, $883 = 0, $885 = 0, $890 = 0, $892 = 0, $893 = 0, $896 = 0, $898 = 0, $9 = 0, $90 = 0, $901 = 0, $902 = 0, $908 = 0, $909 = 0, $911 = 0, $913 = 0, $918 = 0, $92 = 0, $920 = 0, $921 = 0, $924 = 0, $926 = 0, $929 = 0, $93 = 0, $930 = 0, $933 = 0, $934 = 0, $936 = 0, $938 = 0, $943 = 0, $945 = 0, $946 = 0, $949 = 0, $951 = 0, $954 = 0, $955 = 0, $958 = 0, $959 = 0, $96 = 0, $961 = 0, $963 = 0, $968 = 0, $970 = 0, $971 = 0, $974 = 0, $976 = 0, $979 = 0, $98 = 0, $980 = 0, $986 = 0, $987 = 0, $989 = 0, $991 = 0, $996 = 0, $998 = 0, $999 = 0, $__i$0$i$i$i = 0, $__v$i$i232 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i232 = sp + 1104 | 0;
 $0 = sp + 1080 | 0;
 $1 = sp + 1056 | 0;
 $2 = sp + 1032 | 0;
 $3 = sp + 1008 | 0;
 $4 = sp + 984 | 0;
 $5 = sp + 960 | 0;
 $6 = sp + 936 | 0;
 $7 = sp + 912 | 0;
 $8 = sp + 888 | 0;
 $9 = sp + 864 | 0;
 $10 = sp + 840 | 0;
 $11 = sp + 816 | 0;
 $12 = sp + 792 | 0;
 $13 = sp + 768 | 0;
 $14 = sp + 744 | 0;
 $15 = sp + 720 | 0;
 $16 = sp + 696 | 0;
 $17 = sp + 672 | 0;
 $18 = sp + 648 | 0;
 $19 = sp + 624 | 0;
 $20 = sp + 600 | 0;
 $21 = sp + 576 | 0;
 $22 = sp + 552 | 0;
 $23 = sp + 528 | 0;
 $24 = sp + 504 | 0;
 $25 = sp + 480 | 0;
 $26 = sp + 456 | 0;
 $27 = sp + 432 | 0;
 $28 = sp + 408 | 0;
 $29 = sp + 384 | 0;
 $30 = sp + 360 | 0;
 $31 = sp + 336 | 0;
 $32 = sp + 312 | 0;
 $33 = sp + 288 | 0;
 $34 = sp + 264 | 0;
 $35 = sp + 240 | 0;
 $36 = sp + 216 | 0;
 $37 = sp + 192 | 0;
 $38 = sp + 168 | 0;
 $39 = sp + 144 | 0;
 $40 = sp + 120 | 0;
 $41 = sp + 96 | 0;
 $42 = sp + 72 | 0;
 $43 = sp + 48 | 0;
 $44 = sp + 24 | 0;
 $45 = sp;
 L1 : do if (($last - $first | 0) > 1) do switch (HEAP8[$first >> 0] | 0) {
 case 97:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($0, 14792);
     $55 = $db + 4 | 0;
     $56 = HEAP32[$55 >> 2] | 0;
     $58 = HEAP32[$db + 8 >> 2] | 0;
     $60 = $58;
     if ($56 >>> 0 < $58 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($56, $0);
      HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 24;
     } else {
      $65 = HEAP32[$db >> 2] | 0;
      $67 = ($56 - $65 | 0) / 24 | 0;
      $68 = $67 + 1 | 0;
      if ($68 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $71 = ($60 - $65 | 0) / 24 | 0;
      if ($71 >>> 0 < 89478485) {
       $73 = $71 << 1;
       $$0$i$i$i = $73 >>> 0 < $68 >>> 0 ? $68 : $73;
      } else $$0$i$i$i = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i, $67, $db + 12 | 0);
      $76 = $__v$i$i232 + 8 | 0;
      $77 = HEAP32[$76 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($77, $0);
      HEAP32[$76 >> 2] = $77 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 110:
   case 100:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($1, 14803);
     $80 = $db + 4 | 0;
     $81 = HEAP32[$80 >> 2] | 0;
     $83 = HEAP32[$db + 8 >> 2] | 0;
     $85 = $83;
     if ($81 >>> 0 < $83 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($81, $1);
      HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 24;
     } else {
      $90 = HEAP32[$db >> 2] | 0;
      $92 = ($81 - $90 | 0) / 24 | 0;
      $93 = $92 + 1 | 0;
      if ($93 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $96 = ($85 - $90 | 0) / 24 | 0;
      if ($96 >>> 0 < 89478485) {
       $98 = $96 << 1;
       $$0$i$i$i13 = $98 >>> 0 < $93 >>> 0 ? $93 : $98;
      } else $$0$i$i$i13 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i13, $92, $db + 12 | 0);
      $101 = $__v$i$i232 + 8 | 0;
      $102 = HEAP32[$101 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($102, $1);
      HEAP32[$101 >> 2] = $102 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 78:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($2, 14813);
     $105 = $db + 4 | 0;
     $106 = HEAP32[$105 >> 2] | 0;
     $108 = HEAP32[$db + 8 >> 2] | 0;
     $110 = $108;
     if ($106 >>> 0 < $108 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($106, $2);
      HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + 24;
     } else {
      $115 = HEAP32[$db >> 2] | 0;
      $117 = ($106 - $115 | 0) / 24 | 0;
      $118 = $117 + 1 | 0;
      if ($118 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $121 = ($110 - $115 | 0) / 24 | 0;
      if ($121 >>> 0 < 89478485) {
       $123 = $121 << 1;
       $$0$i$i$i18 = $123 >>> 0 < $118 >>> 0 ? $118 : $123;
      } else $$0$i$i$i18 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i18, $117, $db + 12 | 0);
      $126 = $__v$i$i232 + 8 | 0;
      $127 = HEAP32[$126 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($127, $2);
      HEAP32[$126 >> 2] = $127 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 83:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 14824);
     $130 = $db + 4 | 0;
     $131 = HEAP32[$130 >> 2] | 0;
     $133 = HEAP32[$db + 8 >> 2] | 0;
     $135 = $133;
     if ($131 >>> 0 < $133 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($131, $3);
      HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 24;
     } else {
      $140 = HEAP32[$db >> 2] | 0;
      $142 = ($131 - $140 | 0) / 24 | 0;
      $143 = $142 + 1 | 0;
      if ($143 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $146 = ($135 - $140 | 0) / 24 | 0;
      if ($146 >>> 0 < 89478485) {
       $148 = $146 << 1;
       $$0$i$i$i23 = $148 >>> 0 < $143 >>> 0 ? $143 : $148;
      } else $$0$i$i$i23 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i23, $142, $db + 12 | 0);
      $151 = $__v$i$i232 + 8 | 0;
      $152 = HEAP32[$151 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($152, $3);
      HEAP32[$151 >> 2] = $152 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $first;
     break L1;
    }
   }
   break;
  }
 case 99:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 108:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($4, 14834);
     $158 = $db + 4 | 0;
     $159 = HEAP32[$158 >> 2] | 0;
     $161 = HEAP32[$db + 8 >> 2] | 0;
     $163 = $161;
     if ($159 >>> 0 < $161 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($159, $4);
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + 24;
     } else {
      $168 = HEAP32[$db >> 2] | 0;
      $170 = ($159 - $168 | 0) / 24 | 0;
      $171 = $170 + 1 | 0;
      if ($171 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $174 = ($163 - $168 | 0) / 24 | 0;
      if ($174 >>> 0 < 89478485) {
       $176 = $174 << 1;
       $$0$i$i$i28 = $176 >>> 0 < $171 >>> 0 ? $171 : $176;
      } else $$0$i$i$i28 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i28, $170, $db + 12 | 0);
      $179 = $__v$i$i232 + 8 | 0;
      $180 = HEAP32[$179 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($180, $4);
      HEAP32[$179 >> 2] = $180 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($5, 14845);
     $183 = $db + 4 | 0;
     $184 = HEAP32[$183 >> 2] | 0;
     $186 = HEAP32[$db + 8 >> 2] | 0;
     $188 = $186;
     if ($184 >>> 0 < $186 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($184, $5);
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + 24;
     } else {
      $193 = HEAP32[$db >> 2] | 0;
      $195 = ($184 - $193 | 0) / 24 | 0;
      $196 = $195 + 1 | 0;
      if ($196 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $199 = ($188 - $193 | 0) / 24 | 0;
      if ($199 >>> 0 < 89478485) {
       $201 = $199 << 1;
       $$0$i$i$i33 = $201 >>> 0 < $196 >>> 0 ? $196 : $201;
      } else $$0$i$i$i33 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i33, $195, $db + 12 | 0);
      $204 = $__v$i$i232 + 8 | 0;
      $205 = HEAP32[$204 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($205, $5);
      HEAP32[$204 >> 2] = $205 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 111:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($6, 14855);
     $208 = $db + 4 | 0;
     $209 = HEAP32[$208 >> 2] | 0;
     $211 = HEAP32[$db + 8 >> 2] | 0;
     $213 = $211;
     if ($209 >>> 0 < $211 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($209, $6);
      HEAP32[$208 >> 2] = (HEAP32[$208 >> 2] | 0) + 24;
     } else {
      $218 = HEAP32[$db >> 2] | 0;
      $220 = ($209 - $218 | 0) / 24 | 0;
      $221 = $220 + 1 | 0;
      if ($221 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $224 = ($213 - $218 | 0) / 24 | 0;
      if ($224 >>> 0 < 89478485) {
       $226 = $224 << 1;
       $$0$i$i$i38 = $226 >>> 0 < $221 >>> 0 ? $221 : $226;
      } else $$0$i$i$i38 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i38, $220, $db + 12 | 0);
      $229 = $__v$i$i232 + 8 | 0;
      $230 = HEAP32[$229 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($230, $6);
      HEAP32[$229 >> 2] = $230 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 118:
    {
     $233 = $db + 63 | 0;
     $234 = HEAP8[$233 >> 0] | 0;
     HEAP8[$233 >> 0] = 0;
     $235 = $first + 2 | 0;
     $236 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($235, $last, $db) | 0;
     HEAP8[$233 >> 0] = $234;
     if (($236 | 0) == ($235 | 0)) {
      $$3 = $first;
      break L1;
     }
     $240 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($240 | 0)) {
      $$3 = $first;
      break L1;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($240 + -24 | 0, 0, 14865) | 0;
     HEAP8[$db + 60 >> 0] = 1;
     $$3 = $236;
     break L1;
     break;
    }
   default:
    {
     $$3 = $first;
     break L1;
    }
   }
   break;
  }
 case 100:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($7, 14875);
     $247 = $db + 4 | 0;
     $248 = HEAP32[$247 >> 2] | 0;
     $250 = HEAP32[$db + 8 >> 2] | 0;
     $252 = $250;
     if ($248 >>> 0 < $250 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($248, $7);
      HEAP32[$247 >> 2] = (HEAP32[$247 >> 2] | 0) + 24;
     } else {
      $257 = HEAP32[$db >> 2] | 0;
      $259 = ($248 - $257 | 0) / 24 | 0;
      $260 = $259 + 1 | 0;
      if ($260 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $263 = ($252 - $257 | 0) / 24 | 0;
      if ($263 >>> 0 < 89478485) {
       $265 = $263 << 1;
       $$0$i$i$i43 = $265 >>> 0 < $260 >>> 0 ? $260 : $265;
      } else $$0$i$i$i43 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i43, $259, $db + 12 | 0);
      $268 = $__v$i$i232 + 8 | 0;
      $269 = HEAP32[$268 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($269, $7);
      HEAP32[$268 >> 2] = $269 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($8, 14893);
     $272 = $db + 4 | 0;
     $273 = HEAP32[$272 >> 2] | 0;
     $275 = HEAP32[$db + 8 >> 2] | 0;
     $277 = $275;
     if ($273 >>> 0 < $275 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($273, $8);
      HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + 24;
     } else {
      $282 = HEAP32[$db >> 2] | 0;
      $284 = ($273 - $282 | 0) / 24 | 0;
      $285 = $284 + 1 | 0;
      if ($285 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $288 = ($277 - $282 | 0) / 24 | 0;
      if ($288 >>> 0 < 89478485) {
       $290 = $288 << 1;
       $$0$i$i$i48 = $290 >>> 0 < $285 >>> 0 ? $285 : $290;
      } else $$0$i$i$i48 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i48, $284, $db + 12 | 0);
      $293 = $__v$i$i232 + 8 | 0;
      $294 = HEAP32[$293 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($294, $8);
      HEAP32[$293 >> 2] = $294 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 108:
    {
     HEAP32[$9 >> 2] = 0;
     $297 = _malloc(16) | 0;
     HEAP32[$9 + 8 >> 2] = $297;
     HEAP32[$9 >> 2] = 17;
     HEAP32[$9 + 4 >> 2] = 15;
     dest = $297;
     src = 14903;
     stop = dest + 15 | 0;
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
     } while ((dest | 0) < (stop | 0));
     HEAP8[$297 + 15 >> 0] = 0;
     $301 = $9 + 12 | 0;
     HEAP32[$301 >> 2] = 0;
     HEAP32[$301 + 4 >> 2] = 0;
     HEAP32[$301 + 8 >> 2] = 0;
     $__i$0$i$i$i = 0;
     while (1) {
      if (($__i$0$i$i$i | 0) == 3) break;
      HEAP32[$301 + ($__i$0$i$i$i << 2) >> 2] = 0;
      $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
     }
     $304 = $db + 4 | 0;
     $305 = HEAP32[$304 >> 2] | 0;
     $307 = HEAP32[$db + 8 >> 2] | 0;
     $309 = $307;
     if ($305 >>> 0 < $307 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($305, $9);
      HEAP32[$304 >> 2] = (HEAP32[$304 >> 2] | 0) + 24;
     } else {
      $314 = HEAP32[$db >> 2] | 0;
      $316 = ($305 - $314 | 0) / 24 | 0;
      $317 = $316 + 1 | 0;
      if ($317 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $320 = ($309 - $314 | 0) / 24 | 0;
      if ($320 >>> 0 < 89478485) {
       $322 = $320 << 1;
       $$0$i$i$i53 = $322 >>> 0 < $317 >>> 0 ? $317 : $322;
      } else $$0$i$i$i53 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i53, $316, $db + 12 | 0);
      $325 = $__v$i$i232 + 8 | 0;
      $326 = HEAP32[$325 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($326, $9);
      HEAP32[$325 >> 2] = $326 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 118:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($10, 14919);
     $329 = $db + 4 | 0;
     $330 = HEAP32[$329 >> 2] | 0;
     $332 = HEAP32[$db + 8 >> 2] | 0;
     $334 = $332;
     if ($330 >>> 0 < $332 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($330, $10);
      HEAP32[$329 >> 2] = (HEAP32[$329 >> 2] | 0) + 24;
     } else {
      $339 = HEAP32[$db >> 2] | 0;
      $341 = ($330 - $339 | 0) / 24 | 0;
      $342 = $341 + 1 | 0;
      if ($342 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $345 = ($334 - $339 | 0) / 24 | 0;
      if ($345 >>> 0 < 89478485) {
       $347 = $345 << 1;
       $$0$i$i$i58 = $347 >>> 0 < $342 >>> 0 ? $342 : $347;
      } else $$0$i$i$i58 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i58, $341, $db + 12 | 0);
      $350 = $__v$i$i232 + 8 | 0;
      $351 = HEAP32[$350 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($351, $10);
      HEAP32[$350 >> 2] = $351 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 86:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($11, 14929);
     $354 = $db + 4 | 0;
     $355 = HEAP32[$354 >> 2] | 0;
     $357 = HEAP32[$db + 8 >> 2] | 0;
     $359 = $357;
     if ($355 >>> 0 < $357 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($355, $11);
      HEAP32[$354 >> 2] = (HEAP32[$354 >> 2] | 0) + 24;
     } else {
      $364 = HEAP32[$db >> 2] | 0;
      $366 = ($355 - $364 | 0) / 24 | 0;
      $367 = $366 + 1 | 0;
      if ($367 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $370 = ($359 - $364 | 0) / 24 | 0;
      if ($370 >>> 0 < 89478485) {
       $372 = $370 << 1;
       $$0$i$i$i63 = $372 >>> 0 < $367 >>> 0 ? $367 : $372;
      } else $$0$i$i$i63 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i63, $366, $db + 12 | 0);
      $375 = $__v$i$i232 + 8 | 0;
      $376 = HEAP32[$375 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($376, $11);
      HEAP32[$375 >> 2] = $376 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $first;
     break L1;
    }
   }
   break;
  }
 case 101:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 111:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($12, 14940);
     $382 = $db + 4 | 0;
     $383 = HEAP32[$382 >> 2] | 0;
     $385 = HEAP32[$db + 8 >> 2] | 0;
     $387 = $385;
     if ($383 >>> 0 < $385 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($383, $12);
      HEAP32[$382 >> 2] = (HEAP32[$382 >> 2] | 0) + 24;
     } else {
      $392 = HEAP32[$db >> 2] | 0;
      $394 = ($383 - $392 | 0) / 24 | 0;
      $395 = $394 + 1 | 0;
      if ($395 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $398 = ($387 - $392 | 0) / 24 | 0;
      if ($398 >>> 0 < 89478485) {
       $400 = $398 << 1;
       $$0$i$i$i68 = $400 >>> 0 < $395 >>> 0 ? $395 : $400;
      } else $$0$i$i$i68 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i68, $394, $db + 12 | 0);
      $403 = $__v$i$i232 + 8 | 0;
      $404 = HEAP32[$403 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($404, $12);
      HEAP32[$403 >> 2] = $404 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 79:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($13, 14950);
     $407 = $db + 4 | 0;
     $408 = HEAP32[$407 >> 2] | 0;
     $410 = HEAP32[$db + 8 >> 2] | 0;
     $412 = $410;
     if ($408 >>> 0 < $410 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($408, $13);
      HEAP32[$407 >> 2] = (HEAP32[$407 >> 2] | 0) + 24;
     } else {
      $417 = HEAP32[$db >> 2] | 0;
      $419 = ($408 - $417 | 0) / 24 | 0;
      $420 = $419 + 1 | 0;
      if ($420 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $423 = ($412 - $417 | 0) / 24 | 0;
      if ($423 >>> 0 < 89478485) {
       $425 = $423 << 1;
       $$0$i$i$i73 = $425 >>> 0 < $420 >>> 0 ? $420 : $425;
      } else $$0$i$i$i73 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i73, $419, $db + 12 | 0);
      $428 = $__v$i$i232 + 8 | 0;
      $429 = HEAP32[$428 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($429, $13);
      HEAP32[$428 >> 2] = $429 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 113:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($14, 14961);
     $432 = $db + 4 | 0;
     $433 = HEAP32[$432 >> 2] | 0;
     $435 = HEAP32[$db + 8 >> 2] | 0;
     $437 = $435;
     if ($433 >>> 0 < $435 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($433, $14);
      HEAP32[$432 >> 2] = (HEAP32[$432 >> 2] | 0) + 24;
     } else {
      $442 = HEAP32[$db >> 2] | 0;
      $444 = ($433 - $442 | 0) / 24 | 0;
      $445 = $444 + 1 | 0;
      if ($445 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $448 = ($437 - $442 | 0) / 24 | 0;
      if ($448 >>> 0 < 89478485) {
       $450 = $448 << 1;
       $$0$i$i$i78 = $450 >>> 0 < $445 >>> 0 ? $445 : $450;
      } else $$0$i$i$i78 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i78, $444, $db + 12 | 0);
      $453 = $__v$i$i232 + 8 | 0;
      $454 = HEAP32[$453 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($454, $14);
      HEAP32[$453 >> 2] = $454 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $first;
     break L1;
    }
   }
   break;
  }
 case 103:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($15, 14972);
     $460 = $db + 4 | 0;
     $461 = HEAP32[$460 >> 2] | 0;
     $463 = HEAP32[$db + 8 >> 2] | 0;
     $465 = $463;
     if ($461 >>> 0 < $463 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($461, $15);
      HEAP32[$460 >> 2] = (HEAP32[$460 >> 2] | 0) + 24;
     } else {
      $470 = HEAP32[$db >> 2] | 0;
      $472 = ($461 - $470 | 0) / 24 | 0;
      $473 = $472 + 1 | 0;
      if ($473 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $476 = ($465 - $470 | 0) / 24 | 0;
      if ($476 >>> 0 < 89478485) {
       $478 = $476 << 1;
       $$0$i$i$i83 = $478 >>> 0 < $473 >>> 0 ? $473 : $478;
      } else $$0$i$i$i83 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i83, $472, $db + 12 | 0);
      $481 = $__v$i$i232 + 8 | 0;
      $482 = HEAP32[$481 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($482, $15);
      HEAP32[$481 >> 2] = $482 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($16, 14983);
     $485 = $db + 4 | 0;
     $486 = HEAP32[$485 >> 2] | 0;
     $488 = HEAP32[$db + 8 >> 2] | 0;
     $490 = $488;
     if ($486 >>> 0 < $488 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($486, $16);
      HEAP32[$485 >> 2] = (HEAP32[$485 >> 2] | 0) + 24;
     } else {
      $495 = HEAP32[$db >> 2] | 0;
      $497 = ($486 - $495 | 0) / 24 | 0;
      $498 = $497 + 1 | 0;
      if ($498 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $501 = ($490 - $495 | 0) / 24 | 0;
      if ($501 >>> 0 < 89478485) {
       $503 = $501 << 1;
       $$0$i$i$i88 = $503 >>> 0 < $498 >>> 0 ? $498 : $503;
      } else $$0$i$i$i88 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i88, $497, $db + 12 | 0);
      $506 = $__v$i$i232 + 8 | 0;
      $507 = HEAP32[$506 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($507, $16);
      HEAP32[$506 >> 2] = $507 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $first;
     break L1;
    }
   }
   break;
  }
 case 105:
  {
   if ((HEAP8[$first + 1 >> 0] | 0) != 120) {
    $$3 = $first;
    break L1;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($17, 14993);
   $513 = $db + 4 | 0;
   $514 = HEAP32[$513 >> 2] | 0;
   $516 = HEAP32[$db + 8 >> 2] | 0;
   $518 = $516;
   if ($514 >>> 0 < $516 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($514, $17);
    HEAP32[$513 >> 2] = (HEAP32[$513 >> 2] | 0) + 24;
   } else {
    $523 = HEAP32[$db >> 2] | 0;
    $525 = ($514 - $523 | 0) / 24 | 0;
    $526 = $525 + 1 | 0;
    if ($526 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $529 = ($518 - $523 | 0) / 24 | 0;
    if ($529 >>> 0 < 89478485) {
     $531 = $529 << 1;
     $$0$i$i$i93 = $531 >>> 0 < $526 >>> 0 ? $526 : $531;
    } else $$0$i$i$i93 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i93, $525, $db + 12 | 0);
    $534 = $__v$i$i232 + 8 | 0;
    $535 = HEAP32[$534 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($535, $17);
    HEAP32[$534 >> 2] = $535 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
   $$3 = $first + 2 | 0;
   break L1;
   break;
  }
 case 108:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($18, 15004);
     $541 = $db + 4 | 0;
     $542 = HEAP32[$541 >> 2] | 0;
     $544 = HEAP32[$db + 8 >> 2] | 0;
     $546 = $544;
     if ($542 >>> 0 < $544 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($542, $18);
      HEAP32[$541 >> 2] = (HEAP32[$541 >> 2] | 0) + 24;
     } else {
      $551 = HEAP32[$db >> 2] | 0;
      $553 = ($542 - $551 | 0) / 24 | 0;
      $554 = $553 + 1 | 0;
      if ($554 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $557 = ($546 - $551 | 0) / 24 | 0;
      if ($557 >>> 0 < 89478485) {
       $559 = $557 << 1;
       $$0$i$i$i98 = $559 >>> 0 < $554 >>> 0 ? $554 : $559;
      } else $$0$i$i$i98 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i98, $553, $db + 12 | 0);
      $562 = $__v$i$i232 + 8 | 0;
      $563 = HEAP32[$562 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($563, $18);
      HEAP32[$562 >> 2] = $563 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 105:
    {
     $566 = $first + 2 | 0;
     $567 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($566, $last, $db) | 0;
     if (($567 | 0) == ($566 | 0)) {
      $$3 = $first;
      break L1;
     }
     $571 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($571 | 0)) {
      $$3 = $first;
      break L1;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($571 + -24 | 0, 0, 15015) | 0;
     $$3 = $567;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($19, 15027);
     $574 = $db + 4 | 0;
     $575 = HEAP32[$574 >> 2] | 0;
     $577 = HEAP32[$db + 8 >> 2] | 0;
     $579 = $577;
     if ($575 >>> 0 < $577 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($575, $19);
      HEAP32[$574 >> 2] = (HEAP32[$574 >> 2] | 0) + 24;
     } else {
      $584 = HEAP32[$db >> 2] | 0;
      $586 = ($575 - $584 | 0) / 24 | 0;
      $587 = $586 + 1 | 0;
      if ($587 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $590 = ($579 - $584 | 0) / 24 | 0;
      if ($590 >>> 0 < 89478485) {
       $592 = $590 << 1;
       $$0$i$i$i103 = $592 >>> 0 < $587 >>> 0 ? $587 : $592;
      } else $$0$i$i$i103 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i103, $586, $db + 12 | 0);
      $595 = $__v$i$i232 + 8 | 0;
      $596 = HEAP32[$595 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($596, $19);
      HEAP32[$595 >> 2] = $596 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 83:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($20, 15038);
     $599 = $db + 4 | 0;
     $600 = HEAP32[$599 >> 2] | 0;
     $602 = HEAP32[$db + 8 >> 2] | 0;
     $604 = $602;
     if ($600 >>> 0 < $602 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($600, $20);
      HEAP32[$599 >> 2] = (HEAP32[$599 >> 2] | 0) + 24;
     } else {
      $609 = HEAP32[$db >> 2] | 0;
      $611 = ($600 - $609 | 0) / 24 | 0;
      $612 = $611 + 1 | 0;
      if ($612 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $615 = ($604 - $609 | 0) / 24 | 0;
      if ($615 >>> 0 < 89478485) {
       $617 = $615 << 1;
       $$0$i$i$i108 = $617 >>> 0 < $612 >>> 0 ? $612 : $617;
      } else $$0$i$i$i108 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i108, $611, $db + 12 | 0);
      $620 = $__v$i$i232 + 8 | 0;
      $621 = HEAP32[$620 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($621, $20);
      HEAP32[$620 >> 2] = $621 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($21, 15050);
     $624 = $db + 4 | 0;
     $625 = HEAP32[$624 >> 2] | 0;
     $627 = HEAP32[$db + 8 >> 2] | 0;
     $629 = $627;
     if ($625 >>> 0 < $627 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($625, $21);
      HEAP32[$624 >> 2] = (HEAP32[$624 >> 2] | 0) + 24;
     } else {
      $634 = HEAP32[$db >> 2] | 0;
      $636 = ($625 - $634 | 0) / 24 | 0;
      $637 = $636 + 1 | 0;
      if ($637 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $640 = ($629 - $634 | 0) / 24 | 0;
      if ($640 >>> 0 < 89478485) {
       $642 = $640 << 1;
       $$0$i$i$i113 = $642 >>> 0 < $637 >>> 0 ? $637 : $642;
      } else $$0$i$i$i113 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i113, $636, $db + 12 | 0);
      $645 = $__v$i$i232 + 8 | 0;
      $646 = HEAP32[$645 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($646, $21);
      HEAP32[$645 >> 2] = $646 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $first;
     break L1;
    }
   }
   break;
  }
 case 109:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 105:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($22, 15060);
     $652 = $db + 4 | 0;
     $653 = HEAP32[$652 >> 2] | 0;
     $655 = HEAP32[$db + 8 >> 2] | 0;
     $657 = $655;
     if ($653 >>> 0 < $655 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($653, $22);
      HEAP32[$652 >> 2] = (HEAP32[$652 >> 2] | 0) + 24;
     } else {
      $662 = HEAP32[$db >> 2] | 0;
      $664 = ($653 - $662 | 0) / 24 | 0;
      $665 = $664 + 1 | 0;
      if ($665 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $668 = ($657 - $662 | 0) / 24 | 0;
      if ($668 >>> 0 < 89478485) {
       $670 = $668 << 1;
       $$0$i$i$i118 = $670 >>> 0 < $665 >>> 0 ? $665 : $670;
      } else $$0$i$i$i118 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i118, $664, $db + 12 | 0);
      $673 = $__v$i$i232 + 8 | 0;
      $674 = HEAP32[$673 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($674, $22);
      HEAP32[$673 >> 2] = $674 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 73:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($23, 15070);
     $677 = $db + 4 | 0;
     $678 = HEAP32[$677 >> 2] | 0;
     $680 = HEAP32[$db + 8 >> 2] | 0;
     $682 = $680;
     if ($678 >>> 0 < $680 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($678, $23);
      HEAP32[$677 >> 2] = (HEAP32[$677 >> 2] | 0) + 24;
     } else {
      $687 = HEAP32[$db >> 2] | 0;
      $689 = ($678 - $687 | 0) / 24 | 0;
      $690 = $689 + 1 | 0;
      if ($690 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $693 = ($682 - $687 | 0) / 24 | 0;
      if ($693 >>> 0 < 89478485) {
       $695 = $693 << 1;
       $$0$i$i$i123 = $695 >>> 0 < $690 >>> 0 ? $690 : $695;
      } else $$0$i$i$i123 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i123, $689, $db + 12 | 0);
      $698 = $__v$i$i232 + 8 | 0;
      $699 = HEAP32[$698 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($699, $23);
      HEAP32[$698 >> 2] = $699 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 108:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($24, 14893);
     $702 = $db + 4 | 0;
     $703 = HEAP32[$702 >> 2] | 0;
     $705 = HEAP32[$db + 8 >> 2] | 0;
     $707 = $705;
     if ($703 >>> 0 < $705 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($703, $24);
      HEAP32[$702 >> 2] = (HEAP32[$702 >> 2] | 0) + 24;
     } else {
      $712 = HEAP32[$db >> 2] | 0;
      $714 = ($703 - $712 | 0) / 24 | 0;
      $715 = $714 + 1 | 0;
      if ($715 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $718 = ($707 - $712 | 0) / 24 | 0;
      if ($718 >>> 0 < 89478485) {
       $720 = $718 << 1;
       $$0$i$i$i128 = $720 >>> 0 < $715 >>> 0 ? $715 : $720;
      } else $$0$i$i$i128 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i128, $714, $db + 12 | 0);
      $723 = $__v$i$i232 + 8 | 0;
      $724 = HEAP32[$723 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($724, $24);
      HEAP32[$723 >> 2] = $724 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 76:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($25, 15081);
     $727 = $db + 4 | 0;
     $728 = HEAP32[$727 >> 2] | 0;
     $730 = HEAP32[$db + 8 >> 2] | 0;
     $732 = $730;
     if ($728 >>> 0 < $730 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($728, $25);
      HEAP32[$727 >> 2] = (HEAP32[$727 >> 2] | 0) + 24;
     } else {
      $737 = HEAP32[$db >> 2] | 0;
      $739 = ($728 - $737 | 0) / 24 | 0;
      $740 = $739 + 1 | 0;
      if ($740 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $743 = ($732 - $737 | 0) / 24 | 0;
      if ($743 >>> 0 < 89478485) {
       $745 = $743 << 1;
       $$0$i$i$i133 = $745 >>> 0 < $740 >>> 0 ? $740 : $745;
      } else $$0$i$i$i133 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i133, $739, $db + 12 | 0);
      $748 = $__v$i$i232 + 8 | 0;
      $749 = HEAP32[$748 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($749, $25);
      HEAP32[$748 >> 2] = $749 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($26, 15092);
     $752 = $db + 4 | 0;
     $753 = HEAP32[$752 >> 2] | 0;
     $755 = HEAP32[$db + 8 >> 2] | 0;
     $757 = $755;
     if ($753 >>> 0 < $755 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($753, $26);
      HEAP32[$752 >> 2] = (HEAP32[$752 >> 2] | 0) + 24;
     } else {
      $762 = HEAP32[$db >> 2] | 0;
      $764 = ($753 - $762 | 0) / 24 | 0;
      $765 = $764 + 1 | 0;
      if ($765 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $768 = ($757 - $762 | 0) / 24 | 0;
      if ($768 >>> 0 < 89478485) {
       $770 = $768 << 1;
       $$0$i$i$i138 = $770 >>> 0 < $765 >>> 0 ? $765 : $770;
      } else $$0$i$i$i138 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i138, $764, $db + 12 | 0);
      $773 = $__v$i$i232 + 8 | 0;
      $774 = HEAP32[$773 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($774, $26);
      HEAP32[$773 >> 2] = $774 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $first;
     break L1;
    }
   }
   break;
  }
 case 110:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($27, 15103);
     $780 = $db + 4 | 0;
     $781 = HEAP32[$780 >> 2] | 0;
     $783 = HEAP32[$db + 8 >> 2] | 0;
     $785 = $783;
     if ($781 >>> 0 < $783 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($781, $27);
      HEAP32[$780 >> 2] = (HEAP32[$780 >> 2] | 0) + 24;
     } else {
      $790 = HEAP32[$db >> 2] | 0;
      $792 = ($781 - $790 | 0) / 24 | 0;
      $793 = $792 + 1 | 0;
      if ($793 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $796 = ($785 - $790 | 0) / 24 | 0;
      if ($796 >>> 0 < 89478485) {
       $798 = $796 << 1;
       $$0$i$i$i143 = $798 >>> 0 < $793 >>> 0 ? $793 : $798;
      } else $$0$i$i$i143 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i143, $792, $db + 12 | 0);
      $801 = $__v$i$i232 + 8 | 0;
      $802 = HEAP32[$801 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($802, $27);
      HEAP32[$801 >> 2] = $802 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($28, 15118);
     $805 = $db + 4 | 0;
     $806 = HEAP32[$805 >> 2] | 0;
     $808 = HEAP32[$db + 8 >> 2] | 0;
     $810 = $808;
     if ($806 >>> 0 < $808 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($806, $28);
      HEAP32[$805 >> 2] = (HEAP32[$805 >> 2] | 0) + 24;
     } else {
      $815 = HEAP32[$db >> 2] | 0;
      $817 = ($806 - $815 | 0) / 24 | 0;
      $818 = $817 + 1 | 0;
      if ($818 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $821 = ($810 - $815 | 0) / 24 | 0;
      if ($821 >>> 0 < 89478485) {
       $823 = $821 << 1;
       $$0$i$i$i148 = $823 >>> 0 < $818 >>> 0 ? $818 : $823;
      } else $$0$i$i$i148 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i148, $817, $db + 12 | 0);
      $826 = $__v$i$i232 + 8 | 0;
      $827 = HEAP32[$826 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($827, $28);
      HEAP32[$826 >> 2] = $827 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 103:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($29, 15060);
     $830 = $db + 4 | 0;
     $831 = HEAP32[$830 >> 2] | 0;
     $833 = HEAP32[$db + 8 >> 2] | 0;
     $835 = $833;
     if ($831 >>> 0 < $833 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($831, $29);
      HEAP32[$830 >> 2] = (HEAP32[$830 >> 2] | 0) + 24;
     } else {
      $840 = HEAP32[$db >> 2] | 0;
      $842 = ($831 - $840 | 0) / 24 | 0;
      $843 = $842 + 1 | 0;
      if ($843 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $846 = ($835 - $840 | 0) / 24 | 0;
      if ($846 >>> 0 < 89478485) {
       $848 = $846 << 1;
       $$0$i$i$i153 = $848 >>> 0 < $843 >>> 0 ? $843 : $848;
      } else $$0$i$i$i153 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i153, $842, $db + 12 | 0);
      $851 = $__v$i$i232 + 8 | 0;
      $852 = HEAP32[$851 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($852, $29);
      HEAP32[$851 >> 2] = $852 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($30, 15129);
     $855 = $db + 4 | 0;
     $856 = HEAP32[$855 >> 2] | 0;
     $858 = HEAP32[$db + 8 >> 2] | 0;
     $860 = $858;
     if ($856 >>> 0 < $858 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($856, $30);
      HEAP32[$855 >> 2] = (HEAP32[$855 >> 2] | 0) + 24;
     } else {
      $865 = HEAP32[$db >> 2] | 0;
      $867 = ($856 - $865 | 0) / 24 | 0;
      $868 = $867 + 1 | 0;
      if ($868 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $871 = ($860 - $865 | 0) / 24 | 0;
      if ($871 >>> 0 < 89478485) {
       $873 = $871 << 1;
       $$0$i$i$i158 = $873 >>> 0 < $868 >>> 0 ? $868 : $873;
      } else $$0$i$i$i158 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i158, $867, $db + 12 | 0);
      $876 = $__v$i$i232 + 8 | 0;
      $877 = HEAP32[$876 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($877, $30);
      HEAP32[$876 >> 2] = $877 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 119:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($31, 15139);
     $880 = $db + 4 | 0;
     $881 = HEAP32[$880 >> 2] | 0;
     $883 = HEAP32[$db + 8 >> 2] | 0;
     $885 = $883;
     if ($881 >>> 0 < $883 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($881, $31);
      HEAP32[$880 >> 2] = (HEAP32[$880 >> 2] | 0) + 24;
     } else {
      $890 = HEAP32[$db >> 2] | 0;
      $892 = ($881 - $890 | 0) / 24 | 0;
      $893 = $892 + 1 | 0;
      if ($893 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $896 = ($885 - $890 | 0) / 24 | 0;
      if ($896 >>> 0 < 89478485) {
       $898 = $896 << 1;
       $$0$i$i$i163 = $898 >>> 0 < $893 >>> 0 ? $893 : $898;
      } else $$0$i$i$i163 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i163, $892, $db + 12 | 0);
      $901 = $__v$i$i232 + 8 | 0;
      $902 = HEAP32[$901 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($902, $31);
      HEAP32[$901 >> 2] = $902 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $first;
     break L1;
    }
   }
   break;
  }
 case 111:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 111:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($32, 15152);
     $908 = $db + 4 | 0;
     $909 = HEAP32[$908 >> 2] | 0;
     $911 = HEAP32[$db + 8 >> 2] | 0;
     $913 = $911;
     if ($909 >>> 0 < $911 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($909, $32);
      HEAP32[$908 >> 2] = (HEAP32[$908 >> 2] | 0) + 24;
     } else {
      $918 = HEAP32[$db >> 2] | 0;
      $920 = ($909 - $918 | 0) / 24 | 0;
      $921 = $920 + 1 | 0;
      if ($921 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $924 = ($913 - $918 | 0) / 24 | 0;
      if ($924 >>> 0 < 89478485) {
       $926 = $924 << 1;
       $$0$i$i$i168 = $926 >>> 0 < $921 >>> 0 ? $921 : $926;
      } else $$0$i$i$i168 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i168, $920, $db + 12 | 0);
      $929 = $__v$i$i232 + 8 | 0;
      $930 = HEAP32[$929 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($930, $32);
      HEAP32[$929 >> 2] = $930 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 114:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($33, 15163);
     $933 = $db + 4 | 0;
     $934 = HEAP32[$933 >> 2] | 0;
     $936 = HEAP32[$db + 8 >> 2] | 0;
     $938 = $936;
     if ($934 >>> 0 < $936 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($934, $33);
      HEAP32[$933 >> 2] = (HEAP32[$933 >> 2] | 0) + 24;
     } else {
      $943 = HEAP32[$db >> 2] | 0;
      $945 = ($934 - $943 | 0) / 24 | 0;
      $946 = $945 + 1 | 0;
      if ($946 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $949 = ($938 - $943 | 0) / 24 | 0;
      if ($949 >>> 0 < 89478485) {
       $951 = $949 << 1;
       $$0$i$i$i173 = $951 >>> 0 < $946 >>> 0 ? $946 : $951;
      } else $$0$i$i$i173 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i173, $945, $db + 12 | 0);
      $954 = $__v$i$i232 + 8 | 0;
      $955 = HEAP32[$954 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($955, $33);
      HEAP32[$954 >> 2] = $955 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 82:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($34, 15173);
     $958 = $db + 4 | 0;
     $959 = HEAP32[$958 >> 2] | 0;
     $961 = HEAP32[$db + 8 >> 2] | 0;
     $963 = $961;
     if ($959 >>> 0 < $961 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($959, $34);
      HEAP32[$958 >> 2] = (HEAP32[$958 >> 2] | 0) + 24;
     } else {
      $968 = HEAP32[$db >> 2] | 0;
      $970 = ($959 - $968 | 0) / 24 | 0;
      $971 = $970 + 1 | 0;
      if ($971 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $974 = ($963 - $968 | 0) / 24 | 0;
      if ($974 >>> 0 < 89478485) {
       $976 = $974 << 1;
       $$0$i$i$i178 = $976 >>> 0 < $971 >>> 0 ? $971 : $976;
      } else $$0$i$i$i178 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i178, $970, $db + 12 | 0);
      $979 = $__v$i$i232 + 8 | 0;
      $980 = HEAP32[$979 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($980, $34);
      HEAP32[$979 >> 2] = $980 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $first;
     break L1;
    }
   }
   break;
  }
 case 112:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($35, 15184);
     $986 = $db + 4 | 0;
     $987 = HEAP32[$986 >> 2] | 0;
     $989 = HEAP32[$db + 8 >> 2] | 0;
     $991 = $989;
     if ($987 >>> 0 < $989 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($987, $35);
      HEAP32[$986 >> 2] = (HEAP32[$986 >> 2] | 0) + 24;
     } else {
      $996 = HEAP32[$db >> 2] | 0;
      $998 = ($987 - $996 | 0) / 24 | 0;
      $999 = $998 + 1 | 0;
      if ($999 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $1002 = ($991 - $996 | 0) / 24 | 0;
      if ($1002 >>> 0 < 89478485) {
       $1004 = $1002 << 1;
       $$0$i$i$i183 = $1004 >>> 0 < $999 >>> 0 ? $999 : $1004;
      } else $$0$i$i$i183 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i183, $998, $db + 12 | 0);
      $1007 = $__v$i$i232 + 8 | 0;
      $1008 = HEAP32[$1007 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1008, $35);
      HEAP32[$1007 >> 2] = $1008 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 108:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($36, 15196);
     $1011 = $db + 4 | 0;
     $1012 = HEAP32[$1011 >> 2] | 0;
     $1014 = HEAP32[$db + 8 >> 2] | 0;
     $1016 = $1014;
     if ($1012 >>> 0 < $1014 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1012, $36);
      HEAP32[$1011 >> 2] = (HEAP32[$1011 >> 2] | 0) + 24;
     } else {
      $1021 = HEAP32[$db >> 2] | 0;
      $1023 = ($1012 - $1021 | 0) / 24 | 0;
      $1024 = $1023 + 1 | 0;
      if ($1024 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $1027 = ($1016 - $1021 | 0) / 24 | 0;
      if ($1027 >>> 0 < 89478485) {
       $1029 = $1027 << 1;
       $$0$i$i$i188 = $1029 >>> 0 < $1024 >>> 0 ? $1024 : $1029;
      } else $$0$i$i$i188 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i188, $1023, $db + 12 | 0);
      $1032 = $__v$i$i232 + 8 | 0;
      $1033 = HEAP32[$1032 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1033, $36);
      HEAP32[$1032 >> 2] = $1033 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 76:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($37, 15206);
     $1036 = $db + 4 | 0;
     $1037 = HEAP32[$1036 >> 2] | 0;
     $1039 = HEAP32[$db + 8 >> 2] | 0;
     $1041 = $1039;
     if ($1037 >>> 0 < $1039 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1037, $37);
      HEAP32[$1036 >> 2] = (HEAP32[$1036 >> 2] | 0) + 24;
     } else {
      $1046 = HEAP32[$db >> 2] | 0;
      $1048 = ($1037 - $1046 | 0) / 24 | 0;
      $1049 = $1048 + 1 | 0;
      if ($1049 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $1052 = ($1041 - $1046 | 0) / 24 | 0;
      if ($1052 >>> 0 < 89478485) {
       $1054 = $1052 << 1;
       $$0$i$i$i193 = $1054 >>> 0 < $1049 >>> 0 ? $1049 : $1054;
      } else $$0$i$i$i193 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i193, $1048, $db + 12 | 0);
      $1057 = $__v$i$i232 + 8 | 0;
      $1058 = HEAP32[$1057 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1058, $37);
      HEAP32[$1057 >> 2] = $1058 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 112:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($38, 15217);
     $1061 = $db + 4 | 0;
     $1062 = HEAP32[$1061 >> 2] | 0;
     $1064 = HEAP32[$db + 8 >> 2] | 0;
     $1066 = $1064;
     if ($1062 >>> 0 < $1064 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1062, $38);
      HEAP32[$1061 >> 2] = (HEAP32[$1061 >> 2] | 0) + 24;
     } else {
      $1071 = HEAP32[$db >> 2] | 0;
      $1073 = ($1062 - $1071 | 0) / 24 | 0;
      $1074 = $1073 + 1 | 0;
      if ($1074 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $1077 = ($1066 - $1071 | 0) / 24 | 0;
      if ($1077 >>> 0 < 89478485) {
       $1079 = $1077 << 1;
       $$0$i$i$i198 = $1079 >>> 0 < $1074 >>> 0 ? $1074 : $1079;
      } else $$0$i$i$i198 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i198, $1073, $db + 12 | 0);
      $1082 = $__v$i$i232 + 8 | 0;
      $1083 = HEAP32[$1082 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1083, $38);
      HEAP32[$1082 >> 2] = $1083 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($39, 15196);
     $1086 = $db + 4 | 0;
     $1087 = HEAP32[$1086 >> 2] | 0;
     $1089 = HEAP32[$db + 8 >> 2] | 0;
     $1091 = $1089;
     if ($1087 >>> 0 < $1089 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1087, $39);
      HEAP32[$1086 >> 2] = (HEAP32[$1086 >> 2] | 0) + 24;
     } else {
      $1096 = HEAP32[$db >> 2] | 0;
      $1098 = ($1087 - $1096 | 0) / 24 | 0;
      $1099 = $1098 + 1 | 0;
      if ($1099 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $1102 = ($1091 - $1096 | 0) / 24 | 0;
      if ($1102 >>> 0 < 89478485) {
       $1104 = $1102 << 1;
       $$0$i$i$i203 = $1104 >>> 0 < $1099 >>> 0 ? $1099 : $1104;
      } else $$0$i$i$i203 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i203, $1098, $db + 12 | 0);
      $1107 = $__v$i$i232 + 8 | 0;
      $1108 = HEAP32[$1107 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1108, $39);
      HEAP32[$1107 >> 2] = $1108 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 116:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($40, 15228);
     $1111 = $db + 4 | 0;
     $1112 = HEAP32[$1111 >> 2] | 0;
     $1114 = HEAP32[$db + 8 >> 2] | 0;
     $1116 = $1114;
     if ($1112 >>> 0 < $1114 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1112, $40);
      HEAP32[$1111 >> 2] = (HEAP32[$1111 >> 2] | 0) + 24;
     } else {
      $1121 = HEAP32[$db >> 2] | 0;
      $1123 = ($1112 - $1121 | 0) / 24 | 0;
      $1124 = $1123 + 1 | 0;
      if ($1124 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $1127 = ($1116 - $1121 | 0) / 24 | 0;
      if ($1127 >>> 0 < 89478485) {
       $1129 = $1127 << 1;
       $$0$i$i$i208 = $1129 >>> 0 < $1124 >>> 0 ? $1124 : $1129;
      } else $$0$i$i$i208 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i208, $1123, $db + 12 | 0);
      $1132 = $__v$i$i232 + 8 | 0;
      $1133 = HEAP32[$1132 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1133, $40);
      HEAP32[$1132 >> 2] = $1133 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $first;
     break L1;
    }
   }
   break;
  }
 case 113:
  {
   if ((HEAP8[$first + 1 >> 0] | 0) != 117) {
    $$3 = $first;
    break L1;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($41, 15239);
   $1139 = $db + 4 | 0;
   $1140 = HEAP32[$1139 >> 2] | 0;
   $1142 = HEAP32[$db + 8 >> 2] | 0;
   $1144 = $1142;
   if ($1140 >>> 0 < $1142 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1140, $41);
    HEAP32[$1139 >> 2] = (HEAP32[$1139 >> 2] | 0) + 24;
   } else {
    $1149 = HEAP32[$db >> 2] | 0;
    $1151 = ($1140 - $1149 | 0) / 24 | 0;
    $1152 = $1151 + 1 | 0;
    if ($1152 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $1155 = ($1144 - $1149 | 0) / 24 | 0;
    if ($1155 >>> 0 < 89478485) {
     $1157 = $1155 << 1;
     $$0$i$i$i213 = $1157 >>> 0 < $1152 >>> 0 ? $1152 : $1157;
    } else $$0$i$i$i213 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i213, $1151, $db + 12 | 0);
    $1160 = $__v$i$i232 + 8 | 0;
    $1161 = HEAP32[$1160 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1161, $41);
    HEAP32[$1160 >> 2] = $1161 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
   $$3 = $first + 2 | 0;
   break L1;
   break;
  }
 case 114:
  {
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 109:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($42, 15249);
     $1167 = $db + 4 | 0;
     $1168 = HEAP32[$1167 >> 2] | 0;
     $1170 = HEAP32[$db + 8 >> 2] | 0;
     $1172 = $1170;
     if ($1168 >>> 0 < $1170 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1168, $42);
      HEAP32[$1167 >> 2] = (HEAP32[$1167 >> 2] | 0) + 24;
     } else {
      $1177 = HEAP32[$db >> 2] | 0;
      $1179 = ($1168 - $1177 | 0) / 24 | 0;
      $1180 = $1179 + 1 | 0;
      if ($1180 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $1183 = ($1172 - $1177 | 0) / 24 | 0;
      if ($1183 >>> 0 < 89478485) {
       $1185 = $1183 << 1;
       $$0$i$i$i218 = $1185 >>> 0 < $1180 >>> 0 ? $1180 : $1185;
      } else $$0$i$i$i218 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i218, $1179, $db + 12 | 0);
      $1188 = $__v$i$i232 + 8 | 0;
      $1189 = HEAP32[$1188 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1189, $42);
      HEAP32[$1188 >> 2] = $1189 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 77:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($43, 15259);
     $1192 = $db + 4 | 0;
     $1193 = HEAP32[$1192 >> 2] | 0;
     $1195 = HEAP32[$db + 8 >> 2] | 0;
     $1197 = $1195;
     if ($1193 >>> 0 < $1195 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1193, $43);
      HEAP32[$1192 >> 2] = (HEAP32[$1192 >> 2] | 0) + 24;
     } else {
      $1202 = HEAP32[$db >> 2] | 0;
      $1204 = ($1193 - $1202 | 0) / 24 | 0;
      $1205 = $1204 + 1 | 0;
      if ($1205 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $1208 = ($1197 - $1202 | 0) / 24 | 0;
      if ($1208 >>> 0 < 89478485) {
       $1210 = $1208 << 1;
       $$0$i$i$i223 = $1210 >>> 0 < $1205 >>> 0 ? $1205 : $1210;
      } else $$0$i$i$i223 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i223, $1204, $db + 12 | 0);
      $1213 = $__v$i$i232 + 8 | 0;
      $1214 = HEAP32[$1213 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1214, $43);
      HEAP32[$1213 >> 2] = $1214 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($44, 15270);
     $1217 = $db + 4 | 0;
     $1218 = HEAP32[$1217 >> 2] | 0;
     $1220 = HEAP32[$db + 8 >> 2] | 0;
     $1222 = $1220;
     if ($1218 >>> 0 < $1220 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1218, $44);
      HEAP32[$1217 >> 2] = (HEAP32[$1217 >> 2] | 0) + 24;
     } else {
      $1227 = HEAP32[$db >> 2] | 0;
      $1229 = ($1218 - $1227 | 0) / 24 | 0;
      $1230 = $1229 + 1 | 0;
      if ($1230 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $1233 = ($1222 - $1227 | 0) / 24 | 0;
      if ($1233 >>> 0 < 89478485) {
       $1235 = $1233 << 1;
       $$0$i$i$i228 = $1235 >>> 0 < $1230 >>> 0 ? $1230 : $1235;
      } else $$0$i$i$i228 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i228, $1229, $db + 12 | 0);
      $1238 = $__v$i$i232 + 8 | 0;
      $1239 = HEAP32[$1238 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1239, $44);
      HEAP32[$1238 >> 2] = $1239 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   case 83:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($45, 15281);
     $1242 = $db + 4 | 0;
     $1243 = HEAP32[$1242 >> 2] | 0;
     $1245 = HEAP32[$db + 8 >> 2] | 0;
     $1247 = $1245;
     if ($1243 >>> 0 < $1245 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1243, $45);
      HEAP32[$1242 >> 2] = (HEAP32[$1242 >> 2] | 0) + 24;
     } else {
      $1252 = HEAP32[$db >> 2] | 0;
      $1254 = ($1243 - $1252 | 0) / 24 | 0;
      $1255 = $1254 + 1 | 0;
      if ($1255 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $1258 = ($1247 - $1252 | 0) / 24 | 0;
      if ($1258 >>> 0 < 89478485) {
       $1260 = $1258 << 1;
       $$0$i$i$i233 = $1260 >>> 0 < $1255 >>> 0 ? $1255 : $1260;
      } else $$0$i$i$i233 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232, $$0$i$i$i233, $1254, $db + 12 | 0);
      $1263 = $__v$i$i232 + 8 | 0;
      $1264 = HEAP32[$1263 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1264, $45);
      HEAP32[$1263 >> 2] = $1264 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i232);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
     $$3 = $first + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$3 = $first;
     break L1;
    }
   }
   break;
  }
 case 118:
  {
   if (((HEAP8[$first + 1 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
    $$3 = $first;
    break L1;
   }
   $1270 = $first + 2 | 0;
   $1271 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($1270, $last, $db) | 0;
   if (($1271 | 0) == ($1270 | 0)) {
    $$3 = $first;
    break L1;
   }
   $1275 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($1275 | 0)) {
    $$3 = $first;
    break L1;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1275 + -24 | 0, 0, 14865) | 0;
   $$3 = $1271;
   break L1;
   break;
  }
 default:
  {
   $$3 = $first;
   break L1;
  }
 } while (0); else $$3 = $first; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _arPattGetImage2($imageProcMode, $pattDetectMode, $patt_size, $sample_size, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, $pattRatio, $ext_patt) {
 $imageProcMode = $imageProcMode | 0;
 $pattDetectMode = $pattDetectMode | 0;
 $patt_size = $patt_size | 0;
 $sample_size = $sample_size | 0;
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $pixelFormat = $pixelFormat | 0;
 $paramLTf = $paramLTf | 0;
 $vertex = $vertex | 0;
 $pattRatio = +$pattRatio;
 $ext_patt = $ext_patt | 0;
 var $$0 = 0, $100 = 0, $1002 = 0.0, $101 = 0, $1012 = 0.0, $102 = 0, $1021 = 0.0, $1022 = 0.0, $103 = 0, $104 = 0, $1041 = 0, $105 = 0, $1051 = 0, $1057 = 0.0, $106 = 0, $1063 = 0.0, $1064 = 0.0, $1068 = 0, $107 = 0.0, $1074 = 0, $1078 = 0, $108 = 0.0, $1080 = 0, $1086 = 0, $1087 = 0, $109 = 0.0, $1091 = 0, $1095 = 0, $1099 = 0, $110 = 0, $1102 = 0, $111 = 0, $1112 = 0.0, $1118 = 0.0, $112 = 0, $1125 = 0.0, $113 = 0, $1135 = 0.0, $114 = 0, $1144 = 0.0, $1145 = 0.0, $115 = 0, $116 = 0, $1166 = 0, $117 = 0, $1170 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1184 = 0, $119 = 0.0, $1192 = 0, $1198 = 0, $120 = 0.0, $1208 = 0.0, $121 = 0.0, $1214 = 0.0, $122 = 0, $1221 = 0.0, $123 = 0, $1231 = 0.0, $124 = 0, $1240 = 0.0, $1241 = 0.0, $125 = 0, $126 = 0, $1262 = 0, $1266 = 0, $127 = 0, $1274 = 0, $1275 = 0, $128 = 0, $1280 = 0, $1288 = 0, $129 = 0, $1294 = 0, $130 = 0, $1304 = 0.0, $131 = 0.0, $1310 = 0.0, $1317 = 0.0, $132 = 0.0, $1327 = 0.0, $133 = 0.0, $1336 = 0.0, $1337 = 0.0, $134 = 0, $135 = 0, $1358 = 0, $136 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1375 = 0, $138 = 0, $1380 = 0, $1386 = 0, $139 = 0, $1398 = 0, $14 = 0.0, $140 = 0, $1401 = 0.0, $1402 = 0.0, $1403 = 0.0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0.0, $1414 = 0.0, $1415 = 0.0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1426 = 0, $143 = 0.0, $1431 = 0.0, $1437 = 0.0, $144 = 0.0, $1444 = 0.0, $145 = 0.0, $1454 = 0.0, $146 = 0, $1463 = 0.0, $1464 = 0.0, $147 = 0, $148 = 0, $1485 = 0, $149 = 0, $150 = 0, $1504 = 0, $151 = 0, $1514 = 0.0, $152 = 0, $1520 = 0.0, $1527 = 0.0, $153 = 0, $1537 = 0.0, $154 = 0, $1546 = 0.0, $1547 = 0.0, $156 = 0, $1568 = 0, $1587 = 0, $1592 = 0, $1594 = 0.0, $1595 = 0.0, $1596 = 0.0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0.0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $161 = 0.0, $1611 = 0.0, $1617 = 0.0, $1624 = 0.0, $1634 = 0.0, $1643 = 0.0, $1644 = 0.0, $1665 = 0, $167 = 0.0, $1685 = 0, $1694 = 0.0, $1695 = 0.0, $1696 = 0.0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0.0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1711 = 0.0, $1717 = 0.0, $1724 = 0.0, $1734 = 0.0, $174 = 0.0, $1743 = 0.0, $1744 = 0.0, $1765 = 0, $1772 = 0, $1777 = 0.0, $1778 = 0.0, $1779 = 0.0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0.0, $1790 = 0.0, $1791 = 0.0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $1800 = 0, $1801 = 0.0, $1802 = 0.0, $1803 = 0.0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0.0, $1814 = 0.0, $1815 = 0.0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0.0, $1826 = 0.0, $1827 = 0.0, $1828 = 0, $1829 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $184 = 0.0, $1842 = 0.0, $1848 = 0.0, $1855 = 0.0, $1865 = 0.0, $1874 = 0.0, $1875 = 0.0, $1898 = 0, $1905 = 0, $1915 = 0.0, $1921 = 0.0, $1928 = 0.0, $193 = 0.0, $1938 = 0.0, $194 = 0.0, $1947 = 0.0, $1948 = 0.0, $1970 = 0, $1977 = 0, $1987 = 0.0, $1993 = 0.0, $20 = 0.0, $2000 = 0.0, $2010 = 0.0, $2019 = 0.0, $2020 = 0.0, $2041 = 0, $2044 = 0, $2052 = 0, $2067 = 0, $2077 = 0.0, $2083 = 0.0, $2090 = 0.0, $2100 = 0.0, $2109 = 0.0, $2110 = 0.0, $2131 = 0, $2134 = 0, $2142 = 0, $215 = 0, $2157 = 0, $2167 = 0.0, $2173 = 0.0, $2180 = 0.0, $2190 = 0.0, $2199 = 0.0, $22 = 0.0, $2200 = 0.0, $2221 = 0, $2224 = 0, $224 = 0, $2243 = 0, $225 = 0, $23 = 0.0, $233 = 0, $240 = 0, $250 = 0.0, $256 = 0.0, $26 = 0, $263 = 0.0, $273 = 0.0, $28 = 0.0, $282 = 0.0, $283 = 0.0, $30 = 0.0, $304 = 0, $31 = 0.0, $312 = 0, $313 = 0, $321 = 0, $329 = 0, $339 = 0.0, $34 = 0.0, $345 = 0.0, $352 = 0.0, $36 = 0.0, $362 = 0.0, $37 = 0.0, $371 = 0.0, $372 = 0.0, $393 = 0, $40 = 0, $402 = 0, $403 = 0, $41 = 0.0, $411 = 0, $418 = 0, $428 = 0.0, $43 = 0.0, $434 = 0.0, $441 = 0.0, $451 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $47 = 0.0, $482 = 0, $49 = 0.0, $490 = 0, $491 = 0, $499 = 0, $507 = 0, $517 = 0.0, $52 = 0, $523 = 0.0, $530 = 0.0, $540 = 0.0, $549 = 0.0, $550 = 0.0, $571 = 0, $58 = 0, $580 = 0, $581 = 0, $589 = 0, $597 = 0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $62 = 0, $624 = 0.0, $630 = 0.0, $637 = 0.0, $647 = 0.0, $656 = 0.0, $657 = 0.0, $678 = 0, $680 = 0, $685 = 0, $686 = 0, $690 = 0, $694 = 0, $699 = 0.0, $700 = 0.0, $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0.0, $712 = 0.0, $713 = 0.0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0.0, $736 = 0.0, $737 = 0.0, $738 = 0, $739 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0.0, $748 = 0.0, $749 = 0.0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0.0, $760 = 0.0, $761 = 0.0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $776 = 0.0, $782 = 0.0, $789 = 0.0, $799 = 0.0, $808 = 0.0, $809 = 0.0, $830 = 0, $839 = 0, $84 = 0, $840 = 0, $848 = 0, $85 = 0, $856 = 0, $866 = 0.0, $872 = 0.0, $879 = 0.0, $88 = 0.0, $889 = 0.0, $89 = 0.0, $898 = 0.0, $899 = 0.0, $91 = 0, $918 = 0, $92 = 0, $921 = 0, $926 = 0.0, $93 = 0, $940 = 0.0, $941 = 0.0, $945 = 0, $95 = 0.0, $951 = 0, $955 = 0, $957 = 0, $96 = 0.0, $963 = 0, $964 = 0, $968 = 0, $97 = 0.0, $972 = 0, $976 = 0, $979 = 0, $98 = 0, $989 = 0.0, $99 = 0, $995 = 0.0, $ext_patt2$0 = 0, $i$0 = 0, $i$1 = 0, $i$10 = 0, $i$11 = 0, $i$12 = 0, $i$13 = 0, $i$14 = 0, $i$15 = 0, $i$16 = 0, $i$17 = 0, $i$18 = 0, $i$19 = 0, $i$2 = 0, $i$20 = 0, $i$21 = 0, $i$22 = 0, $i$23 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $i$8 = 0, $i$9 = 0, $j$0 = 0, $j$1 = 0, $j$10 = 0, $j$11 = 0, $j$12 = 0, $j$13 = 0, $j$14 = 0, $j$15 = 0, $j$16 = 0, $j$17 = 0, $j$18 = 0, $j$19 = 0, $j$2 = 0, $j$20 = 0, $j$3 = 0, $j$4 = 0, $j$5 = 0, $j$6 = 0, $j$7 = 0, $j$8 = 0, $j$9 = 0, $local = 0, $para = 0, $sample_size$xdiv2$2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $world = 0, $xc$0 = 0, $xc$1 = 0, $xc$10 = 0, $xc$11 = 0, $xc$12 = 0, $xc$13 = 0, $xc$14 = 0, $xc$15 = 0, $xc$16 = 0, $xc$17 = 0, $xc$18 = 0, $xc$19 = 0, $xc$2 = 0, $xc$20 = 0, $xc$3 = 0, $xc$4 = 0, $xc$5 = 0, $xc$6 = 0, $xc$7 = 0, $xc$8 = 0, $xc$9 = 0, $xc2 = 0, $xdiv2$0 = 0, $xdiv2$0$lcssa = 0, $xdiv2$1 = 0, $xdiv2$1$lcssa = 0, $xdiv2$2 = 0, $yc$0 = 0, $yc$1 = 0, $yc$10 = 0, $yc$11 = 0, $yc$12 = 0, $yc$13 = 0, $yc$14 = 0, $yc$15 = 0, $yc$16 = 0, $yc$17 = 0, $yc$18 = 0, $yc$19 = 0, $yc$2 = 0, $yc$20 = 0, $yc$3 = 0, $yc$4 = 0, $yc$5 = 0, $yc$6 = 0, $yc$7 = 0, $yc$8 = 0, $yc$9 = 0, $yc2 = 0, $ydiv2$0 = 0, $ydiv2$1 = 0, $ydiv2$2 = 0, $ydiv2$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer5 = sp + 224 | 0;
 $vararg_buffer3 = sp + 216 | 0;
 $vararg_buffer1 = sp + 208 | 0;
 $vararg_buffer = sp + 200 | 0;
 $world = sp + 136 | 0;
 $local = sp + 72 | 0;
 $para = sp;
 $xc2 = sp + 232 | 0;
 $yc2 = sp + 228 | 0;
 HEAPF64[$world >> 3] = 100.0;
 HEAPF64[$world + 8 >> 3] = 100.0;
 HEAPF64[$world + 16 >> 3] = 110.0;
 HEAPF64[$world + 24 >> 3] = 100.0;
 HEAPF64[$world + 32 >> 3] = 110.0;
 HEAPF64[$world + 40 >> 3] = 110.0;
 HEAPF64[$world + 48 >> 3] = 100.0;
 HEAPF64[$world + 56 >> 3] = 110.0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 4) break;
  HEAPF64[$local + ($i$0 << 4) >> 3] = +HEAPF64[$vertex + ($i$0 << 4) >> 3];
  HEAPF64[$local + ($i$0 << 4) + 8 >> 3] = +HEAPF64[$vertex + ($i$0 << 4) + 8 >> 3];
  $i$0 = $i$0 + 1 | 0;
 }
 _get_cpara($world, $local, $para);
 $14 = +HEAPF64[$local >> 3];
 $16 = +HEAPF64[$local + 16 >> 3];
 $17 = $14 - $16;
 $20 = +HEAPF64[$local + 8 >> 3];
 $22 = +HEAPF64[$local + 24 >> 3];
 $23 = $20 - $22;
 $26 = ~~($17 * $17 + $23 * $23);
 $28 = +HEAPF64[$local + 32 >> 3];
 $30 = +HEAPF64[$local + 48 >> 3];
 $31 = $28 - $30;
 $34 = +HEAPF64[$local + 40 >> 3];
 $36 = +HEAPF64[$local + 56 >> 3];
 $37 = $34 - $36;
 $40 = ~~($31 * $31 + $37 * $37);
 $41 = $16 - $28;
 $43 = $22 - $34;
 $46 = ~~($41 * $41 + $43 * $43);
 $47 = $30 - $14;
 $49 = $36 - $20;
 $52 = ~~($47 * $47 + $49 * $49);
 $58 = ~~(+((($40 | 0) > ($26 | 0) ? $40 : $26) | 0) * $pattRatio * $pattRatio);
 $62 = ~~(+((($52 | 0) > ($46 | 0) ? $52 : $46) | 0) * $pattRatio * $pattRatio);
 if (!$imageProcMode) {
  $xdiv2$0 = $patt_size;
  while (1) if (($xdiv2$0 | 0) < ($sample_size | 0) & (Math_imul($xdiv2$0, $xdiv2$0) | 0) < ($58 | 0)) $xdiv2$0 = $xdiv2$0 << 1; else {
   $xdiv2$0$lcssa = $xdiv2$0;
   break;
  }
  $ydiv2$0 = $patt_size;
  while (1) if (($ydiv2$0 | 0) < ($sample_size | 0) & (Math_imul($ydiv2$0, $ydiv2$0) | 0) < ($62 | 0)) $ydiv2$0 = $ydiv2$0 << 1; else {
   $xdiv2$2 = $xdiv2$0$lcssa;
   $ydiv2$2 = $ydiv2$0;
   break;
  }
 } else {
  $xdiv2$1 = $patt_size;
  while (1) if (($xdiv2$1 | 0) < ($sample_size | 0) & (Math_imul($xdiv2$1 << 2, $xdiv2$1) | 0) < ($58 | 0)) $xdiv2$1 = $xdiv2$1 << 1; else {
   $xdiv2$1$lcssa = $xdiv2$1;
   break;
  }
  $ydiv2$1 = $patt_size;
  while (1) if (($ydiv2$1 | 0) < ($sample_size | 0) & (Math_imul($ydiv2$1 << 2, $ydiv2$1) | 0) < ($62 | 0)) $ydiv2$1 = $ydiv2$1 << 1; else {
   $xdiv2$2 = $xdiv2$1$lcssa;
   $ydiv2$2 = $ydiv2$1;
   break;
  }
 }
 $sample_size$xdiv2$2 = ($xdiv2$2 | 0) > ($sample_size | 0) ? $sample_size : $xdiv2$2;
 $ydiv2$3 = ($ydiv2$2 | 0) > ($sample_size | 0) ? $sample_size : $ydiv2$2;
 $84 = ($sample_size$xdiv2$2 | 0) / ($patt_size | 0) | 0;
 $85 = ($ydiv2$3 | 0) / ($patt_size | 0) | 0;
 $88 = (1.0 - $pattRatio) * .5 * 10.0;
 $89 = $pattRatio * 10.0;
 $91 = Math_imul($patt_size, $patt_size) | 0;
 L17 : do if (!$pattDetectMode) {
  $92 = $91 * 3 | 0;
  $93 = _calloc($92, 4) | 0;
  if (!$93) {
   _arLog(3, 4491, $vararg_buffer);
   _exit(1);
  }
  L22 : do switch ($pixelFormat | 0) {
  case 0:
   {
    $143 = $88 + 100.0;
    $144 = +($ydiv2$3 | 0);
    $145 = +($sample_size$xdiv2$2 | 0);
    $146 = $para + 48 | 0;
    $147 = $para + 56 | 0;
    $148 = $para + 64 | 0;
    $149 = $para + 8 | 0;
    $150 = $para + 16 | 0;
    $151 = $para + 24 | 0;
    $152 = $para + 32 | 0;
    $153 = $para + 40 | 0;
    $154 = ($imageProcMode | 0) == 1;
    $j$0 = 0;
    while (1) {
     if (($j$0 | 0) >= ($ydiv2$3 | 0)) break L22;
     $161 = $143 + $89 * (+($j$0 | 0) + .5) / $144;
     $i$1 = 0;
     while (1) {
      if (($i$1 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $167 = $143 + $89 * (+($i$1 | 0) + .5) / $145;
      $174 = +HEAPF64[$148 >> 3] + ($167 * +HEAPF64[$146 >> 3] + $161 * +HEAPF64[$147 >> 3]);
      if ($174 == 0.0) {
       $ext_patt2$0 = $93;
       label = 306;
       break L17;
      }
      $184 = (+HEAPF64[$150 >> 3] + ($167 * +HEAPF64[$para >> 3] + $161 * +HEAPF64[$149 >> 3])) / $174;
      HEAPF32[$xc2 >> 2] = $184;
      $193 = (+HEAPF64[$153 >> 3] + ($167 * +HEAPF64[$151 >> 3] + $161 * +HEAPF64[$152 >> 3])) / $174;
      HEAPF32[$yc2 >> 2] = $193;
      _arParamIdeal2ObservLTf($paramLTf, $184, $193, $xc2, $yc2) | 0;
      $194 = +HEAPF32[$xc2 >> 2];
      if ($154) {
       $xc$0 = ((~~($194 + 1.0) | 0) / 2 | 0) << 1;
       $yc$0 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$0 = ~~($194 + .5);
       $yc$0 = ~~(+HEAPF32[$yc2 >> 2] + .5);
      }
      if (($xc$0 | 0) > -1) if (($yc$0 | 0) < ($ysize | 0) & (($yc$0 | 0) > -1 & ($xc$0 | 0) < ($xsize | 0))) {
       $215 = ((Math_imul($yc$0, $xsize) | 0) + $xc$0 | 0) * 3 | 0;
       $224 = ((Math_imul(($j$0 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$1 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
       $225 = $93 + ($224 << 2) | 0;
       HEAP32[$225 >> 2] = (HEAP32[$225 >> 2] | 0) + (HEAPU8[$image + ($215 + 2) >> 0] | 0);
       $233 = $93 + ($224 + 1 << 2) | 0;
       HEAP32[$233 >> 2] = (HEAP32[$233 >> 2] | 0) + (HEAPU8[$image + ($215 + 1) >> 0] | 0);
       $240 = $93 + ($224 + 2 << 2) | 0;
       HEAP32[$240 >> 2] = (HEAP32[$240 >> 2] | 0) + (HEAPU8[$image + $215 >> 0] | 0);
      }
      $i$1 = $i$1 + 1 | 0;
     }
     $j$0 = $j$0 + 1 | 0;
    }
    break;
   }
  case 1:
   {
    $131 = $88 + 100.0;
    $132 = +($ydiv2$3 | 0);
    $133 = +($sample_size$xdiv2$2 | 0);
    $134 = $para + 48 | 0;
    $135 = $para + 56 | 0;
    $136 = $para + 64 | 0;
    $137 = $para + 8 | 0;
    $138 = $para + 16 | 0;
    $139 = $para + 24 | 0;
    $140 = $para + 32 | 0;
    $141 = $para + 40 | 0;
    $142 = ($imageProcMode | 0) == 1;
    $j$1 = 0;
    while (1) {
     if (($j$1 | 0) >= ($ydiv2$3 | 0)) break L22;
     $250 = $131 + $89 * (+($j$1 | 0) + .5) / $132;
     $i$2 = 0;
     while (1) {
      if (($i$2 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $256 = $131 + $89 * (+($i$2 | 0) + .5) / $133;
      $263 = +HEAPF64[$136 >> 3] + ($256 * +HEAPF64[$134 >> 3] + $250 * +HEAPF64[$135 >> 3]);
      if ($263 == 0.0) {
       $ext_patt2$0 = $93;
       label = 306;
       break L17;
      }
      $273 = (+HEAPF64[$138 >> 3] + ($256 * +HEAPF64[$para >> 3] + $250 * +HEAPF64[$137 >> 3])) / $263;
      HEAPF32[$xc2 >> 2] = $273;
      $282 = (+HEAPF64[$141 >> 3] + ($256 * +HEAPF64[$139 >> 3] + $250 * +HEAPF64[$140 >> 3])) / $263;
      HEAPF32[$yc2 >> 2] = $282;
      _arParamIdeal2ObservLTf($paramLTf, $273, $282, $xc2, $yc2) | 0;
      $283 = +HEAPF32[$xc2 >> 2];
      if ($142) {
       $xc$1 = ((~~($283 + 1.0) | 0) / 2 | 0) << 1;
       $yc$1 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$1 = ~~($283 + .5);
       $yc$1 = ~~(+HEAPF32[$yc2 >> 2] + .5);
      }
      if (($xc$1 | 0) > -1) if (($yc$1 | 0) < ($ysize | 0) & (($yc$1 | 0) > -1 & ($xc$1 | 0) < ($xsize | 0))) {
       $304 = ((Math_imul($yc$1, $xsize) | 0) + $xc$1 | 0) * 3 | 0;
       $312 = ((Math_imul(($j$1 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$2 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
       $313 = $93 + ($312 << 2) | 0;
       HEAP32[$313 >> 2] = (HEAP32[$313 >> 2] | 0) + (HEAPU8[$image + $304 >> 0] | 0);
       $321 = $93 + ($312 + 1 << 2) | 0;
       HEAP32[$321 >> 2] = (HEAP32[$321 >> 2] | 0) + (HEAPU8[$image + ($304 + 1) >> 0] | 0);
       $329 = $93 + ($312 + 2 << 2) | 0;
       HEAP32[$329 >> 2] = (HEAP32[$329 >> 2] | 0) + (HEAPU8[$image + ($304 + 2) >> 0] | 0);
      }
      $i$2 = $i$2 + 1 | 0;
     }
     $j$1 = $j$1 + 1 | 0;
    }
    break;
   }
  case 2:
   {
    $119 = $88 + 100.0;
    $120 = +($ydiv2$3 | 0);
    $121 = +($sample_size$xdiv2$2 | 0);
    $122 = $para + 48 | 0;
    $123 = $para + 56 | 0;
    $124 = $para + 64 | 0;
    $125 = $para + 8 | 0;
    $126 = $para + 16 | 0;
    $127 = $para + 24 | 0;
    $128 = $para + 32 | 0;
    $129 = $para + 40 | 0;
    $130 = ($imageProcMode | 0) == 1;
    $j$2 = 0;
    while (1) {
     if (($j$2 | 0) >= ($ydiv2$3 | 0)) break L22;
     $339 = $119 + $89 * (+($j$2 | 0) + .5) / $120;
     $i$3 = 0;
     while (1) {
      if (($i$3 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $345 = $119 + $89 * (+($i$3 | 0) + .5) / $121;
      $352 = +HEAPF64[$124 >> 3] + ($345 * +HEAPF64[$122 >> 3] + $339 * +HEAPF64[$123 >> 3]);
      if ($352 == 0.0) {
       $ext_patt2$0 = $93;
       label = 306;
       break L17;
      }
      $362 = (+HEAPF64[$126 >> 3] + ($345 * +HEAPF64[$para >> 3] + $339 * +HEAPF64[$125 >> 3])) / $352;
      HEAPF32[$xc2 >> 2] = $362;
      $371 = (+HEAPF64[$129 >> 3] + ($345 * +HEAPF64[$127 >> 3] + $339 * +HEAPF64[$128 >> 3])) / $352;
      HEAPF32[$yc2 >> 2] = $371;
      _arParamIdeal2ObservLTf($paramLTf, $362, $371, $xc2, $yc2) | 0;
      $372 = +HEAPF32[$xc2 >> 2];
      if ($130) {
       $xc$2 = ((~~($372 + 1.0) | 0) / 2 | 0) << 1;
       $yc$2 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$2 = ~~($372 + .5);
       $yc$2 = ~~(+HEAPF32[$yc2 >> 2] + .5);
      }
      if (($xc$2 | 0) > -1) if (($yc$2 | 0) < ($ysize | 0) & (($yc$2 | 0) > -1 & ($xc$2 | 0) < ($xsize | 0))) {
       $393 = (Math_imul($yc$2, $xsize) | 0) + $xc$2 << 2;
       $402 = ((Math_imul(($j$2 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$3 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
       $403 = $93 + ($402 << 2) | 0;
       HEAP32[$403 >> 2] = (HEAP32[$403 >> 2] | 0) + (HEAPU8[$image + ($393 | 2) >> 0] | 0);
       $411 = $93 + ($402 + 1 << 2) | 0;
       HEAP32[$411 >> 2] = (HEAP32[$411 >> 2] | 0) + (HEAPU8[$image + ($393 | 1) >> 0] | 0);
       $418 = $93 + ($402 + 2 << 2) | 0;
       HEAP32[$418 >> 2] = (HEAP32[$418 >> 2] | 0) + (HEAPU8[$image + $393 >> 0] | 0);
      }
      $i$3 = $i$3 + 1 | 0;
     }
     $j$2 = $j$2 + 1 | 0;
    }
    break;
   }
  case 3:
   {
    $107 = $88 + 100.0;
    $108 = +($ydiv2$3 | 0);
    $109 = +($sample_size$xdiv2$2 | 0);
    $110 = $para + 48 | 0;
    $111 = $para + 56 | 0;
    $112 = $para + 64 | 0;
    $113 = $para + 8 | 0;
    $114 = $para + 16 | 0;
    $115 = $para + 24 | 0;
    $116 = $para + 32 | 0;
    $117 = $para + 40 | 0;
    $118 = ($imageProcMode | 0) == 1;
    $j$3 = 0;
    while (1) {
     if (($j$3 | 0) >= ($ydiv2$3 | 0)) break L22;
     $428 = $107 + $89 * (+($j$3 | 0) + .5) / $108;
     $i$4 = 0;
     while (1) {
      if (($i$4 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $434 = $107 + $89 * (+($i$4 | 0) + .5) / $109;
      $441 = +HEAPF64[$112 >> 3] + ($434 * +HEAPF64[$110 >> 3] + $428 * +HEAPF64[$111 >> 3]);
      if ($441 == 0.0) {
       $ext_patt2$0 = $93;
       label = 306;
       break L17;
      }
      $451 = (+HEAPF64[$114 >> 3] + ($434 * +HEAPF64[$para >> 3] + $428 * +HEAPF64[$113 >> 3])) / $441;
      HEAPF32[$xc2 >> 2] = $451;
      $460 = (+HEAPF64[$117 >> 3] + ($434 * +HEAPF64[$115 >> 3] + $428 * +HEAPF64[$116 >> 3])) / $441;
      HEAPF32[$yc2 >> 2] = $460;
      _arParamIdeal2ObservLTf($paramLTf, $451, $460, $xc2, $yc2) | 0;
      $461 = +HEAPF32[$xc2 >> 2];
      if ($118) {
       $xc$3 = ((~~($461 + 1.0) | 0) / 2 | 0) << 1;
       $yc$3 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$3 = ~~($461 + .5);
       $yc$3 = ~~(+HEAPF32[$yc2 >> 2] + .5);
      }
      if (($xc$3 | 0) > -1) if (($yc$3 | 0) < ($ysize | 0) & (($yc$3 | 0) > -1 & ($xc$3 | 0) < ($xsize | 0))) {
       $482 = (Math_imul($yc$3, $xsize) | 0) + $xc$3 << 2;
       $490 = ((Math_imul(($j$3 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$4 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
       $491 = $93 + ($490 << 2) | 0;
       HEAP32[$491 >> 2] = (HEAP32[$491 >> 2] | 0) + (HEAPU8[$image + $482 >> 0] | 0);
       $499 = $93 + ($490 + 1 << 2) | 0;
       HEAP32[$499 >> 2] = (HEAP32[$499 >> 2] | 0) + (HEAPU8[$image + ($482 | 1) >> 0] | 0);
       $507 = $93 + ($490 + 2 << 2) | 0;
       HEAP32[$507 >> 2] = (HEAP32[$507 >> 2] | 0) + (HEAPU8[$image + ($482 | 2) >> 0] | 0);
      }
      $i$4 = $i$4 + 1 | 0;
     }
     $j$3 = $j$3 + 1 | 0;
    }
    break;
   }
  case 4:
   {
    $95 = $88 + 100.0;
    $96 = +($ydiv2$3 | 0);
    $97 = +($sample_size$xdiv2$2 | 0);
    $98 = $para + 48 | 0;
    $99 = $para + 56 | 0;
    $100 = $para + 64 | 0;
    $101 = $para + 8 | 0;
    $102 = $para + 16 | 0;
    $103 = $para + 24 | 0;
    $104 = $para + 32 | 0;
    $105 = $para + 40 | 0;
    $106 = ($imageProcMode | 0) == 1;
    $j$4 = 0;
    while (1) {
     if (($j$4 | 0) >= ($ydiv2$3 | 0)) break L22;
     $517 = $95 + $89 * (+($j$4 | 0) + .5) / $96;
     $i$5 = 0;
     while (1) {
      if (($i$5 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $523 = $95 + $89 * (+($i$5 | 0) + .5) / $97;
      $530 = +HEAPF64[$100 >> 3] + ($523 * +HEAPF64[$98 >> 3] + $517 * +HEAPF64[$99 >> 3]);
      if ($530 == 0.0) {
       $ext_patt2$0 = $93;
       label = 306;
       break L17;
      }
      $540 = (+HEAPF64[$102 >> 3] + ($523 * +HEAPF64[$para >> 3] + $517 * +HEAPF64[$101 >> 3])) / $530;
      HEAPF32[$xc2 >> 2] = $540;
      $549 = (+HEAPF64[$105 >> 3] + ($523 * +HEAPF64[$103 >> 3] + $517 * +HEAPF64[$104 >> 3])) / $530;
      HEAPF32[$yc2 >> 2] = $549;
      _arParamIdeal2ObservLTf($paramLTf, $540, $549, $xc2, $yc2) | 0;
      $550 = +HEAPF32[$xc2 >> 2];
      if ($106) {
       $xc$4 = ((~~($550 + 1.0) | 0) / 2 | 0) << 1;
       $yc$4 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$4 = ~~($550 + .5);
       $yc$4 = ~~(+HEAPF32[$yc2 >> 2] + .5);
      }
      if (($xc$4 | 0) > -1) if (($yc$4 | 0) < ($ysize | 0) & (($yc$4 | 0) > -1 & ($xc$4 | 0) < ($xsize | 0))) {
       $571 = (Math_imul($yc$4, $xsize) | 0) + $xc$4 << 2;
       $580 = ((Math_imul(($j$4 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$5 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
       $581 = $93 + ($580 << 2) | 0;
       HEAP32[$581 >> 2] = (HEAP32[$581 >> 2] | 0) + (HEAPU8[$image + ($571 | 1) >> 0] | 0);
       $589 = $93 + ($580 + 1 << 2) | 0;
       HEAP32[$589 >> 2] = (HEAP32[$589 >> 2] | 0) + (HEAPU8[$image + ($571 | 2) >> 0] | 0);
       $597 = $93 + ($580 + 2 << 2) | 0;
       HEAP32[$597 >> 2] = (HEAP32[$597 >> 2] | 0) + (HEAPU8[$image + ($571 | 3) >> 0] | 0);
      }
      $i$5 = $i$5 + 1 | 0;
     }
     $j$4 = $j$4 + 1 | 0;
    }
    break;
   }
  default:
   {
    if (($pixelFormat | 2 | 0) == 14 | ($pixelFormat | 8 | 0) == 13) {
     $607 = $88 + 100.0;
     $608 = +($ydiv2$3 | 0);
     $609 = +($sample_size$xdiv2$2 | 0);
     $610 = $para + 48 | 0;
     $611 = $para + 56 | 0;
     $612 = $para + 64 | 0;
     $613 = $para + 8 | 0;
     $614 = $para + 16 | 0;
     $615 = $para + 24 | 0;
     $616 = $para + 32 | 0;
     $617 = $para + 40 | 0;
     $618 = ($imageProcMode | 0) == 1;
     $j$5 = 0;
     while (1) {
      if (($j$5 | 0) >= ($ydiv2$3 | 0)) break L22;
      $624 = $607 + $89 * (+($j$5 | 0) + .5) / $608;
      $i$6 = 0;
      while (1) {
       if (($i$6 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $630 = $607 + $89 * (+($i$6 | 0) + .5) / $609;
       $637 = +HEAPF64[$612 >> 3] + ($630 * +HEAPF64[$610 >> 3] + $624 * +HEAPF64[$611 >> 3]);
       if ($637 == 0.0) {
        $ext_patt2$0 = $93;
        label = 306;
        break L17;
       }
       $647 = (+HEAPF64[$614 >> 3] + ($630 * +HEAPF64[$para >> 3] + $624 * +HEAPF64[$613 >> 3])) / $637;
       HEAPF32[$xc2 >> 2] = $647;
       $656 = (+HEAPF64[$617 >> 3] + ($630 * +HEAPF64[$615 >> 3] + $624 * +HEAPF64[$616 >> 3])) / $637;
       HEAPF32[$yc2 >> 2] = $656;
       _arParamIdeal2ObservLTf($paramLTf, $647, $656, $xc2, $yc2) | 0;
       $657 = +HEAPF32[$xc2 >> 2];
       if ($618) {
        $xc$5 = ((~~($657 + 1.0) | 0) / 2 | 0) << 1;
        $yc$5 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$5 = ~~($657 + .5);
        $yc$5 = ~~(+HEAPF32[$yc2 >> 2] + .5);
       }
       if (($xc$5 | 0) > -1) if (($yc$5 | 0) < ($ysize | 0) & (($yc$5 | 0) > -1 & ($xc$5 | 0) < ($xsize | 0))) {
        $678 = $image + ((Math_imul($yc$5, $xsize) | 0) + $xc$5) | 0;
        $680 = HEAPU8[$678 >> 0] | 0;
        $685 = ((Math_imul(($j$5 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$6 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
        $686 = $93 + ($685 << 2) | 0;
        HEAP32[$686 >> 2] = (HEAP32[$686 >> 2] | 0) + $680;
        $690 = $93 + ($685 + 1 << 2) | 0;
        HEAP32[$690 >> 2] = (HEAP32[$690 >> 2] | 0) + $680;
        $694 = $93 + ($685 + 2 << 2) | 0;
        HEAP32[$694 >> 2] = (HEAP32[$694 >> 2] | 0) + $680;
       }
       $i$6 = $i$6 + 1 | 0;
      }
      $j$5 = $j$5 + 1 | 0;
     }
    }
    switch ($pixelFormat | 0) {
    case 6:
     {
      $759 = $88 + 100.0;
      $760 = +($ydiv2$3 | 0);
      $761 = +($sample_size$xdiv2$2 | 0);
      $762 = $para + 48 | 0;
      $763 = $para + 56 | 0;
      $764 = $para + 64 | 0;
      $765 = $para + 8 | 0;
      $766 = $para + 16 | 0;
      $767 = $para + 24 | 0;
      $768 = $para + 32 | 0;
      $769 = $para + 40 | 0;
      $770 = ($imageProcMode | 0) == 1;
      $j$6 = 0;
      while (1) {
       if (($j$6 | 0) >= ($ydiv2$3 | 0)) break L22;
       $776 = $759 + $89 * (+($j$6 | 0) + .5) / $760;
       $i$7 = 0;
       while (1) {
        if (($i$7 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $782 = $759 + $89 * (+($i$7 | 0) + .5) / $761;
        $789 = +HEAPF64[$764 >> 3] + ($782 * +HEAPF64[$762 >> 3] + $776 * +HEAPF64[$763 >> 3]);
        if ($789 == 0.0) {
         $ext_patt2$0 = $93;
         label = 306;
         break L17;
        }
        $799 = (+HEAPF64[$766 >> 3] + ($782 * +HEAPF64[$para >> 3] + $776 * +HEAPF64[$765 >> 3])) / $789;
        HEAPF32[$xc2 >> 2] = $799;
        $808 = (+HEAPF64[$769 >> 3] + ($782 * +HEAPF64[$767 >> 3] + $776 * +HEAPF64[$768 >> 3])) / $789;
        HEAPF32[$yc2 >> 2] = $808;
        _arParamIdeal2ObservLTf($paramLTf, $799, $808, $xc2, $yc2) | 0;
        $809 = +HEAPF32[$xc2 >> 2];
        if ($770) {
         $xc$6 = ((~~($809 + 1.0) | 0) / 2 | 0) << 1;
         $yc$6 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$6 = ~~($809 + .5);
         $yc$6 = ~~(+HEAPF32[$yc2 >> 2] + .5);
        }
        if (($xc$6 | 0) > -1) if (($yc$6 | 0) < ($ysize | 0) & (($yc$6 | 0) > -1 & ($xc$6 | 0) < ($xsize | 0))) {
         $830 = (Math_imul($yc$6, $xsize) | 0) + $xc$6 << 2;
         $839 = ((Math_imul(($j$6 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$7 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
         $840 = $93 + ($839 << 2) | 0;
         HEAP32[$840 >> 2] = (HEAP32[$840 >> 2] | 0) + (HEAPU8[$image + ($830 | 3) >> 0] | 0);
         $848 = $93 + ($839 + 1 << 2) | 0;
         HEAP32[$848 >> 2] = (HEAP32[$848 >> 2] | 0) + (HEAPU8[$image + ($830 | 2) >> 0] | 0);
         $856 = $93 + ($839 + 2 << 2) | 0;
         HEAP32[$856 >> 2] = (HEAP32[$856 >> 2] | 0) + (HEAPU8[$image + ($830 | 1) >> 0] | 0);
        }
        $i$7 = $i$7 + 1 | 0;
       }
       $j$6 = $j$6 + 1 | 0;
      }
      break;
     }
    case 7:
     {
      $747 = $88 + 100.0;
      $748 = +($ydiv2$3 | 0);
      $749 = +($sample_size$xdiv2$2 | 0);
      $750 = $para + 48 | 0;
      $751 = $para + 56 | 0;
      $752 = $para + 64 | 0;
      $753 = $para + 8 | 0;
      $754 = $para + 16 | 0;
      $755 = $para + 24 | 0;
      $756 = $para + 32 | 0;
      $757 = $para + 40 | 0;
      $758 = ($imageProcMode | 0) == 1;
      $j$7 = 0;
      while (1) {
       if (($j$7 | 0) >= ($ydiv2$3 | 0)) break L22;
       $866 = $747 + $89 * (+($j$7 | 0) + .5) / $748;
       $i$8 = 0;
       while (1) {
        if (($i$8 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $872 = $747 + $89 * (+($i$8 | 0) + .5) / $749;
        $879 = +HEAPF64[$752 >> 3] + ($872 * +HEAPF64[$750 >> 3] + $866 * +HEAPF64[$751 >> 3]);
        if ($879 == 0.0) {
         $ext_patt2$0 = $93;
         label = 306;
         break L17;
        }
        $889 = (+HEAPF64[$754 >> 3] + ($872 * +HEAPF64[$para >> 3] + $866 * +HEAPF64[$753 >> 3])) / $879;
        HEAPF32[$xc2 >> 2] = $889;
        $898 = (+HEAPF64[$757 >> 3] + ($872 * +HEAPF64[$755 >> 3] + $866 * +HEAPF64[$756 >> 3])) / $879;
        HEAPF32[$yc2 >> 2] = $898;
        _arParamIdeal2ObservLTf($paramLTf, $889, $898, $xc2, $yc2) | 0;
        $899 = +HEAPF32[$xc2 >> 2];
        if ($758) {
         $xc$7 = ((~~($899 + 1.0) | 0) / 2 | 0) << 1;
         $yc$7 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$7 = ~~($899 + .5);
         $yc$7 = ~~(+HEAPF32[$yc2 >> 2] + .5);
        }
        if (($xc$7 | 0) > -1) if (($yc$7 | 0) < ($ysize | 0) & (($yc$7 | 0) > -1 & ($xc$7 | 0) < ($xsize | 0))) {
         $918 = Math_imul($yc$7, $xsize) | 0;
         $921 = ($xc$7 & 65534) + $918 << 1;
         $926 = +((HEAPU8[$image + $921 >> 0] | 0) + -128 | 0);
         $940 = +((HEAPU8[$image + ($921 + 2) >> 0] | 0) + -128 | 0);
         $941 = +((HEAPU8[$image + ($918 + $xc$7 << 1 | 1) >> 0] | 0) + -16 | 0) * 298.0820007324219;
         $945 = ~~($926 * 516.4110107421875 + $941) >> 8;
         $951 = ~~($941 - $926 * 100.29100036621094 - $940 * 208.1199951171875) >> 8;
         $955 = ~~($941 + $940 * 408.5830078125) >> 8;
         $957 = ($945 | 0) > 0 ? $945 : 0;
         $963 = ((Math_imul(($j$7 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$8 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
         $964 = $93 + ($963 << 2) | 0;
         HEAP32[$964 >> 2] = (($957 | 0) < 255 ? $957 : 255) + (HEAP32[$964 >> 2] | 0);
         $968 = ($951 | 0) > 0 ? $951 : 0;
         $972 = $93 + ($963 + 1 << 2) | 0;
         HEAP32[$972 >> 2] = (($968 | 0) < 255 ? $968 : 255) + (HEAP32[$972 >> 2] | 0);
         $976 = ($955 | 0) > 0 ? $955 : 0;
         $979 = $93 + ($963 + 2 << 2) | 0;
         HEAP32[$979 >> 2] = (($976 | 0) < 255 ? $976 : 255) + (HEAP32[$979 >> 2] | 0);
        }
        $i$8 = $i$8 + 1 | 0;
       }
       $j$7 = $j$7 + 1 | 0;
      }
      break;
     }
    case 8:
     {
      $735 = $88 + 100.0;
      $736 = +($ydiv2$3 | 0);
      $737 = +($sample_size$xdiv2$2 | 0);
      $738 = $para + 48 | 0;
      $739 = $para + 56 | 0;
      $740 = $para + 64 | 0;
      $741 = $para + 8 | 0;
      $742 = $para + 16 | 0;
      $743 = $para + 24 | 0;
      $744 = $para + 32 | 0;
      $745 = $para + 40 | 0;
      $746 = ($imageProcMode | 0) == 1;
      $j$8 = 0;
      while (1) {
       if (($j$8 | 0) >= ($ydiv2$3 | 0)) break L22;
       $989 = $735 + $89 * (+($j$8 | 0) + .5) / $736;
       $i$9 = 0;
       while (1) {
        if (($i$9 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $995 = $735 + $89 * (+($i$9 | 0) + .5) / $737;
        $1002 = +HEAPF64[$740 >> 3] + ($995 * +HEAPF64[$738 >> 3] + $989 * +HEAPF64[$739 >> 3]);
        if ($1002 == 0.0) {
         $ext_patt2$0 = $93;
         label = 306;
         break L17;
        }
        $1012 = (+HEAPF64[$742 >> 3] + ($995 * +HEAPF64[$para >> 3] + $989 * +HEAPF64[$741 >> 3])) / $1002;
        HEAPF32[$xc2 >> 2] = $1012;
        $1021 = (+HEAPF64[$745 >> 3] + ($995 * +HEAPF64[$743 >> 3] + $989 * +HEAPF64[$744 >> 3])) / $1002;
        HEAPF32[$yc2 >> 2] = $1021;
        _arParamIdeal2ObservLTf($paramLTf, $1012, $1021, $xc2, $yc2) | 0;
        $1022 = +HEAPF32[$xc2 >> 2];
        if ($746) {
         $xc$8 = ((~~($1022 + 1.0) | 0) / 2 | 0) << 1;
         $yc$8 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$8 = ~~($1022 + .5);
         $yc$8 = ~~(+HEAPF32[$yc2 >> 2] + .5);
        }
        if (($xc$8 | 0) > -1) if (($yc$8 | 0) < ($ysize | 0) & (($yc$8 | 0) > -1 & ($xc$8 | 0) < ($xsize | 0))) {
         $1041 = Math_imul($yc$8, $xsize) | 0;
         $1051 = ($xc$8 & 65534) + $1041 << 1;
         $1057 = +((HEAPU8[$image + ($1051 | 1) >> 0] | 0) + -128 | 0);
         $1063 = +((HEAPU8[$image + ($1051 + 3) >> 0] | 0) + -128 | 0);
         $1064 = +((HEAPU8[$image + ($1041 + $xc$8 << 1) >> 0] | 0) + -16 | 0) * 298.0820007324219;
         $1068 = ~~($1064 + $1057 * 516.4110107421875) >> 8;
         $1074 = ~~($1064 - $1057 * 100.29100036621094 - $1063 * 208.1199951171875) >> 8;
         $1078 = ~~($1064 + $1063 * 408.5830078125) >> 8;
         $1080 = ($1068 | 0) > 0 ? $1068 : 0;
         $1086 = ((Math_imul(($j$8 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$9 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
         $1087 = $93 + ($1086 << 2) | 0;
         HEAP32[$1087 >> 2] = (($1080 | 0) < 255 ? $1080 : 255) + (HEAP32[$1087 >> 2] | 0);
         $1091 = ($1074 | 0) > 0 ? $1074 : 0;
         $1095 = $93 + ($1086 + 1 << 2) | 0;
         HEAP32[$1095 >> 2] = (($1091 | 0) < 255 ? $1091 : 255) + (HEAP32[$1095 >> 2] | 0);
         $1099 = ($1078 | 0) > 0 ? $1078 : 0;
         $1102 = $93 + ($1086 + 2 << 2) | 0;
         HEAP32[$1102 >> 2] = (($1099 | 0) < 255 ? $1099 : 255) + (HEAP32[$1102 >> 2] | 0);
        }
        $i$9 = $i$9 + 1 | 0;
       }
       $j$8 = $j$8 + 1 | 0;
      }
      break;
     }
    case 9:
     {
      $723 = $88 + 100.0;
      $724 = +($ydiv2$3 | 0);
      $725 = +($sample_size$xdiv2$2 | 0);
      $726 = $para + 48 | 0;
      $727 = $para + 56 | 0;
      $728 = $para + 64 | 0;
      $729 = $para + 8 | 0;
      $730 = $para + 16 | 0;
      $731 = $para + 24 | 0;
      $732 = $para + 32 | 0;
      $733 = $para + 40 | 0;
      $734 = ($imageProcMode | 0) == 1;
      $j$9 = 0;
      while (1) {
       if (($j$9 | 0) >= ($ydiv2$3 | 0)) break L22;
       $1112 = $723 + $89 * (+($j$9 | 0) + .5) / $724;
       $i$10 = 0;
       while (1) {
        if (($i$10 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $1118 = $723 + $89 * (+($i$10 | 0) + .5) / $725;
        $1125 = +HEAPF64[$728 >> 3] + ($1118 * +HEAPF64[$726 >> 3] + $1112 * +HEAPF64[$727 >> 3]);
        if ($1125 == 0.0) {
         $ext_patt2$0 = $93;
         label = 306;
         break L17;
        }
        $1135 = (+HEAPF64[$730 >> 3] + ($1118 * +HEAPF64[$para >> 3] + $1112 * +HEAPF64[$729 >> 3])) / $1125;
        HEAPF32[$xc2 >> 2] = $1135;
        $1144 = (+HEAPF64[$733 >> 3] + ($1118 * +HEAPF64[$731 >> 3] + $1112 * +HEAPF64[$732 >> 3])) / $1125;
        HEAPF32[$yc2 >> 2] = $1144;
        _arParamIdeal2ObservLTf($paramLTf, $1135, $1144, $xc2, $yc2) | 0;
        $1145 = +HEAPF32[$xc2 >> 2];
        if ($734) {
         $xc$9 = ((~~($1145 + 1.0) | 0) / 2 | 0) << 1;
         $yc$9 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$9 = ~~($1145 + .5);
         $yc$9 = ~~(+HEAPF32[$yc2 >> 2] + .5);
        }
        if (($xc$9 | 0) > -1) if (($yc$9 | 0) < ($ysize | 0) & (($yc$9 | 0) > -1 & ($xc$9 | 0) < ($xsize | 0))) {
         $1166 = (Math_imul($yc$9, $xsize) | 0) + $xc$9 << 1;
         $1170 = HEAPU8[$image + ($1166 | 1) >> 0] | 0;
         $1178 = ((Math_imul(($j$9 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$10 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
         $1179 = $93 + ($1178 << 2) | 0;
         HEAP32[$1179 >> 2] = ($1170 << 3 & 248 | 4) + (HEAP32[$1179 >> 2] | 0);
         $1184 = HEAPU8[$image + $1166 >> 0] | 0;
         $1192 = $93 + ($1178 + 1 << 2) | 0;
         HEAP32[$1192 >> 2] = ($1184 << 5 & 224 | $1170 >>> 3 & 28 | 2) + (HEAP32[$1192 >> 2] | 0);
         $1198 = $93 + ($1178 + 2 << 2) | 0;
         HEAP32[$1198 >> 2] = ($1184 & 248 | 4) + (HEAP32[$1198 >> 2] | 0);
        }
        $i$10 = $i$10 + 1 | 0;
       }
       $j$9 = $j$9 + 1 | 0;
      }
      break;
     }
    case 10:
     {
      $711 = $88 + 100.0;
      $712 = +($ydiv2$3 | 0);
      $713 = +($sample_size$xdiv2$2 | 0);
      $714 = $para + 48 | 0;
      $715 = $para + 56 | 0;
      $716 = $para + 64 | 0;
      $717 = $para + 8 | 0;
      $718 = $para + 16 | 0;
      $719 = $para + 24 | 0;
      $720 = $para + 32 | 0;
      $721 = $para + 40 | 0;
      $722 = ($imageProcMode | 0) == 1;
      $j$10 = 0;
      while (1) {
       if (($j$10 | 0) >= ($ydiv2$3 | 0)) break L22;
       $1208 = $711 + $89 * (+($j$10 | 0) + .5) / $712;
       $i$11 = 0;
       while (1) {
        if (($i$11 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $1214 = $711 + $89 * (+($i$11 | 0) + .5) / $713;
        $1221 = +HEAPF64[$716 >> 3] + ($1214 * +HEAPF64[$714 >> 3] + $1208 * +HEAPF64[$715 >> 3]);
        if ($1221 == 0.0) {
         $ext_patt2$0 = $93;
         label = 306;
         break L17;
        }
        $1231 = (+HEAPF64[$718 >> 3] + ($1214 * +HEAPF64[$para >> 3] + $1208 * +HEAPF64[$717 >> 3])) / $1221;
        HEAPF32[$xc2 >> 2] = $1231;
        $1240 = (+HEAPF64[$721 >> 3] + ($1214 * +HEAPF64[$719 >> 3] + $1208 * +HEAPF64[$720 >> 3])) / $1221;
        HEAPF32[$yc2 >> 2] = $1240;
        _arParamIdeal2ObservLTf($paramLTf, $1231, $1240, $xc2, $yc2) | 0;
        $1241 = +HEAPF32[$xc2 >> 2];
        if ($722) {
         $xc$10 = ((~~($1241 + 1.0) | 0) / 2 | 0) << 1;
         $yc$10 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$10 = ~~($1241 + .5);
         $yc$10 = ~~(+HEAPF32[$yc2 >> 2] + .5);
        }
        if (($xc$10 | 0) > -1) if (($yc$10 | 0) < ($ysize | 0) & (($yc$10 | 0) > -1 & ($xc$10 | 0) < ($xsize | 0))) {
         $1262 = (Math_imul($yc$10, $xsize) | 0) + $xc$10 << 1;
         $1266 = HEAPU8[$image + ($1262 | 1) >> 0] | 0;
         $1274 = ((Math_imul(($j$10 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$11 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
         $1275 = $93 + ($1274 << 2) | 0;
         HEAP32[$1275 >> 2] = ($1266 << 2 & 248 | 4) + (HEAP32[$1275 >> 2] | 0);
         $1280 = HEAPU8[$image + $1262 >> 0] | 0;
         $1288 = $93 + ($1274 + 1 << 2) | 0;
         HEAP32[$1288 >> 2] = ($1280 << 5 & 224 | $1266 >>> 3 & 24 | 4) + (HEAP32[$1288 >> 2] | 0);
         $1294 = $93 + ($1274 + 2 << 2) | 0;
         HEAP32[$1294 >> 2] = ($1280 & 248 | 4) + (HEAP32[$1294 >> 2] | 0);
        }
        $i$11 = $i$11 + 1 | 0;
       }
       $j$10 = $j$10 + 1 | 0;
      }
      break;
     }
    case 11:
     {
      $699 = $88 + 100.0;
      $700 = +($ydiv2$3 | 0);
      $701 = +($sample_size$xdiv2$2 | 0);
      $702 = $para + 48 | 0;
      $703 = $para + 56 | 0;
      $704 = $para + 64 | 0;
      $705 = $para + 8 | 0;
      $706 = $para + 16 | 0;
      $707 = $para + 24 | 0;
      $708 = $para + 32 | 0;
      $709 = $para + 40 | 0;
      $710 = ($imageProcMode | 0) == 1;
      $j$11 = 0;
      while (1) {
       if (($j$11 | 0) >= ($ydiv2$3 | 0)) break L22;
       $1304 = $699 + $89 * (+($j$11 | 0) + .5) / $700;
       $i$12 = 0;
       while (1) {
        if (($i$12 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $1310 = $699 + $89 * (+($i$12 | 0) + .5) / $701;
        $1317 = +HEAPF64[$704 >> 3] + ($1310 * +HEAPF64[$702 >> 3] + $1304 * +HEAPF64[$703 >> 3]);
        if ($1317 == 0.0) {
         $ext_patt2$0 = $93;
         label = 306;
         break L17;
        }
        $1327 = (+HEAPF64[$706 >> 3] + ($1310 * +HEAPF64[$para >> 3] + $1304 * +HEAPF64[$705 >> 3])) / $1317;
        HEAPF32[$xc2 >> 2] = $1327;
        $1336 = (+HEAPF64[$709 >> 3] + ($1310 * +HEAPF64[$707 >> 3] + $1304 * +HEAPF64[$708 >> 3])) / $1317;
        HEAPF32[$yc2 >> 2] = $1336;
        _arParamIdeal2ObservLTf($paramLTf, $1327, $1336, $xc2, $yc2) | 0;
        $1337 = +HEAPF32[$xc2 >> 2];
        if ($710) {
         $xc$11 = ((~~($1337 + 1.0) | 0) / 2 | 0) << 1;
         $yc$11 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$11 = ~~($1337 + .5);
         $yc$11 = ~~(+HEAPF32[$yc2 >> 2] + .5);
        }
        if (($xc$11 | 0) > -1) if (($yc$11 | 0) < ($ysize | 0) & (($yc$11 | 0) > -1 & ($xc$11 | 0) < ($xsize | 0))) {
         $1358 = (Math_imul($yc$11, $xsize) | 0) + $xc$11 << 1;
         $1369 = ((Math_imul(($j$11 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$12 | 0) / ($84 | 0) | 0) | 0) * 3 | 0;
         $1370 = $93 + ($1369 << 2) | 0;
         HEAP32[$1370 >> 2] = (HEAP32[$1370 >> 2] | 0) + ((HEAPU8[$image + ($1358 | 1) >> 0] | 0) & 240 | 8);
         $1375 = HEAPU8[$image + $1358 >> 0] | 0;
         $1380 = $93 + ($1369 + 1 << 2) | 0;
         HEAP32[$1380 >> 2] = ($1375 << 4 & 240 | 8) + (HEAP32[$1380 >> 2] | 0);
         $1386 = $93 + ($1369 + 2 << 2) | 0;
         HEAP32[$1386 >> 2] = ($1375 & 240 | 8) + (HEAP32[$1386 >> 2] | 0);
        }
        $i$12 = $i$12 + 1 | 0;
       }
       $j$11 = $j$11 + 1 | 0;
      }
      break;
     }
    default:
     {
      _arLog(3, 3635, $vararg_buffer1);
      $ext_patt2$0 = $93;
      label = 306;
      break L17;
     }
    }
   }
  } while (0);
  $156 = Math_imul($85, $84) | 0;
  $i$13 = 0;
  while (1) {
   if (($i$13 | 0) >= ($92 | 0)) break;
   HEAP8[$ext_patt + $i$13 >> 0] = ((HEAP32[$93 + ($i$13 << 2) >> 2] | 0) >>> 0) / ($156 >>> 0) | 0;
   $i$13 = $i$13 + 1 | 0;
  }
  _free($93);
  $$0 = 0;
 } else {
  $1398 = _calloc($91, 4) | 0;
  if (!$1398) {
   _arLog(3, 4491, $vararg_buffer3);
   _exit(1);
  }
  L241 : do switch ($pixelFormat | 1 | 0) {
  case 1:
   {
    $1413 = $88 + 100.0;
    $1414 = +($ydiv2$3 | 0);
    $1415 = +($sample_size$xdiv2$2 | 0);
    $1416 = $para + 48 | 0;
    $1417 = $para + 56 | 0;
    $1418 = $para + 64 | 0;
    $1419 = $para + 8 | 0;
    $1420 = $para + 16 | 0;
    $1421 = $para + 24 | 0;
    $1422 = $para + 32 | 0;
    $1423 = $para + 40 | 0;
    $1424 = ($imageProcMode | 0) == 1;
    $j$12 = 0;
    while (1) {
     if (($j$12 | 0) >= ($ydiv2$3 | 0)) break L241;
     $1431 = $1413 + $89 * (+($j$12 | 0) + .5) / $1414;
     $i$14 = 0;
     while (1) {
      if (($i$14 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $1437 = $1413 + $89 * (+($i$14 | 0) + .5) / $1415;
      $1444 = +HEAPF64[$1418 >> 3] + ($1437 * +HEAPF64[$1416 >> 3] + $1431 * +HEAPF64[$1417 >> 3]);
      if ($1444 == 0.0) {
       $ext_patt2$0 = $1398;
       label = 306;
       break L17;
      }
      $1454 = (+HEAPF64[$1420 >> 3] + ($1437 * +HEAPF64[$para >> 3] + $1431 * +HEAPF64[$1419 >> 3])) / $1444;
      HEAPF32[$xc2 >> 2] = $1454;
      $1463 = (+HEAPF64[$1423 >> 3] + ($1437 * +HEAPF64[$1421 >> 3] + $1431 * +HEAPF64[$1422 >> 3])) / $1444;
      HEAPF32[$yc2 >> 2] = $1463;
      _arParamIdeal2ObservLTf($paramLTf, $1454, $1463, $xc2, $yc2) | 0;
      $1464 = +HEAPF32[$xc2 >> 2];
      if ($1424) {
       $xc$12 = ((~~($1464 + 1.0) | 0) / 2 | 0) << 1;
       $yc$12 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$12 = ~~($1464 + .5);
       $yc$12 = ~~(+HEAPF32[$yc2 >> 2] + .5);
      }
      if (($xc$12 | 0) > -1) if (($yc$12 | 0) < ($ysize | 0) & (($yc$12 | 0) > -1 & ($xc$12 | 0) < ($xsize | 0))) {
       $1485 = ((Math_imul($yc$12, $xsize) | 0) + $xc$12 | 0) * 3 | 0;
       $1504 = $1398 + ((Math_imul(($j$12 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$14 | 0) / ($84 | 0) | 0) << 2) | 0;
       HEAP32[$1504 >> 2] = (HEAP32[$1504 >> 2] | 0) + ((((HEAPU8[$image + ($1485 + 1) >> 0] | 0) + (HEAPU8[$image + $1485 >> 0] | 0) + (HEAPU8[$image + ($1485 + 2) >> 0] | 0) | 0) >>> 0) / 3 | 0);
      }
      $i$14 = $i$14 + 1 | 0;
     }
     $j$12 = $j$12 + 1 | 0;
    }
    break;
   }
  case 3:
   {
    $1401 = $88 + 100.0;
    $1402 = +($ydiv2$3 | 0);
    $1403 = +($sample_size$xdiv2$2 | 0);
    $1404 = $para + 48 | 0;
    $1405 = $para + 56 | 0;
    $1406 = $para + 64 | 0;
    $1407 = $para + 8 | 0;
    $1408 = $para + 16 | 0;
    $1409 = $para + 24 | 0;
    $1410 = $para + 32 | 0;
    $1411 = $para + 40 | 0;
    $1412 = ($imageProcMode | 0) == 1;
    $j$13 = 0;
    while (1) {
     if (($j$13 | 0) >= ($ydiv2$3 | 0)) break L241;
     $1514 = $1401 + $89 * (+($j$13 | 0) + .5) / $1402;
     $i$15 = 0;
     while (1) {
      if (($i$15 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $1520 = $1401 + $89 * (+($i$15 | 0) + .5) / $1403;
      $1527 = +HEAPF64[$1406 >> 3] + ($1520 * +HEAPF64[$1404 >> 3] + $1514 * +HEAPF64[$1405 >> 3]);
      if ($1527 == 0.0) {
       $ext_patt2$0 = $1398;
       label = 306;
       break L17;
      }
      $1537 = (+HEAPF64[$1408 >> 3] + ($1520 * +HEAPF64[$para >> 3] + $1514 * +HEAPF64[$1407 >> 3])) / $1527;
      HEAPF32[$xc2 >> 2] = $1537;
      $1546 = (+HEAPF64[$1411 >> 3] + ($1520 * +HEAPF64[$1409 >> 3] + $1514 * +HEAPF64[$1410 >> 3])) / $1527;
      HEAPF32[$yc2 >> 2] = $1546;
      _arParamIdeal2ObservLTf($paramLTf, $1537, $1546, $xc2, $yc2) | 0;
      $1547 = +HEAPF32[$xc2 >> 2];
      if ($1412) {
       $xc$13 = ((~~($1547 + 1.0) | 0) / 2 | 0) << 1;
       $yc$13 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$13 = ~~($1547 + .5);
       $yc$13 = ~~(+HEAPF32[$yc2 >> 2] + .5);
      }
      if (($xc$13 | 0) > -1) if (($yc$13 | 0) < ($ysize | 0) & (($yc$13 | 0) > -1 & ($xc$13 | 0) < ($xsize | 0))) {
       $1568 = (Math_imul($yc$13, $xsize) | 0) + $xc$13 << 2;
       $1587 = $1398 + ((Math_imul(($j$13 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$15 | 0) / ($84 | 0) | 0) << 2) | 0;
       HEAP32[$1587 >> 2] = (HEAP32[$1587 >> 2] | 0) + ((((HEAPU8[$image + ($1568 | 1) >> 0] | 0) + (HEAPU8[$image + $1568 >> 0] | 0) + (HEAPU8[$image + ($1568 | 2) >> 0] | 0) | 0) >>> 0) / 3 | 0);
      }
      $i$15 = $i$15 + 1 | 0;
     }
     $j$13 = $j$13 + 1 | 0;
    }
    break;
   }
  default:
   {
    $1592 = $pixelFormat | 2;
    if (($1592 | 0) == 6) {
     $1594 = $88 + 100.0;
     $1595 = +($ydiv2$3 | 0);
     $1596 = +($sample_size$xdiv2$2 | 0);
     $1597 = $para + 48 | 0;
     $1598 = $para + 56 | 0;
     $1599 = $para + 64 | 0;
     $1600 = $para + 8 | 0;
     $1601 = $para + 16 | 0;
     $1602 = $para + 24 | 0;
     $1603 = $para + 32 | 0;
     $1604 = $para + 40 | 0;
     $1605 = ($imageProcMode | 0) == 1;
     $j$14 = 0;
     while (1) {
      if (($j$14 | 0) >= ($ydiv2$3 | 0)) break L241;
      $1611 = $1594 + $89 * (+($j$14 | 0) + .5) / $1595;
      $i$16 = 0;
      while (1) {
       if (($i$16 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $1617 = $1594 + $89 * (+($i$16 | 0) + .5) / $1596;
       $1624 = +HEAPF64[$1599 >> 3] + ($1617 * +HEAPF64[$1597 >> 3] + $1611 * +HEAPF64[$1598 >> 3]);
       if ($1624 == 0.0) {
        $ext_patt2$0 = $1398;
        label = 306;
        break L17;
       }
       $1634 = (+HEAPF64[$1601 >> 3] + ($1617 * +HEAPF64[$para >> 3] + $1611 * +HEAPF64[$1600 >> 3])) / $1624;
       HEAPF32[$xc2 >> 2] = $1634;
       $1643 = (+HEAPF64[$1604 >> 3] + ($1617 * +HEAPF64[$1602 >> 3] + $1611 * +HEAPF64[$1603 >> 3])) / $1624;
       HEAPF32[$yc2 >> 2] = $1643;
       _arParamIdeal2ObservLTf($paramLTf, $1634, $1643, $xc2, $yc2) | 0;
       $1644 = +HEAPF32[$xc2 >> 2];
       if ($1605) {
        $xc$14 = ((~~($1644 + 1.0) | 0) / 2 | 0) << 1;
        $yc$14 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$14 = ~~($1644 + .5);
        $yc$14 = ~~(+HEAPF32[$yc2 >> 2] + .5);
       }
       if (($xc$14 | 0) > -1) if (($yc$14 | 0) < ($ysize | 0) & (($yc$14 | 0) > -1 & ($xc$14 | 0) < ($xsize | 0))) {
        $1665 = (Math_imul($yc$14, $xsize) | 0) + $xc$14 << 2;
        $1685 = $1398 + ((Math_imul(($j$14 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$16 | 0) / ($84 | 0) | 0) << 2) | 0;
        HEAP32[$1685 >> 2] = (HEAP32[$1685 >> 2] | 0) + ((((HEAPU8[$image + ($1665 | 2) >> 0] | 0) + (HEAPU8[$image + ($1665 | 1) >> 0] | 0) + (HEAPU8[$image + ($1665 | 3) >> 0] | 0) | 0) >>> 0) / 3 | 0);
       }
       $i$16 = $i$16 + 1 | 0;
      }
      $j$14 = $j$14 + 1 | 0;
     }
    }
    if (($1592 | 0) == 14 | ($pixelFormat | 8 | 0) == 13) {
     $1694 = $88 + 100.0;
     $1695 = +($ydiv2$3 | 0);
     $1696 = +($sample_size$xdiv2$2 | 0);
     $1697 = $para + 48 | 0;
     $1698 = $para + 56 | 0;
     $1699 = $para + 64 | 0;
     $1700 = $para + 8 | 0;
     $1701 = $para + 16 | 0;
     $1702 = $para + 24 | 0;
     $1703 = $para + 32 | 0;
     $1704 = $para + 40 | 0;
     $1705 = ($imageProcMode | 0) == 1;
     $j$15 = 0;
     while (1) {
      if (($j$15 | 0) >= ($ydiv2$3 | 0)) break L241;
      $1711 = $1694 + $89 * (+($j$15 | 0) + .5) / $1695;
      $i$17 = 0;
      while (1) {
       if (($i$17 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $1717 = $1694 + $89 * (+($i$17 | 0) + .5) / $1696;
       $1724 = +HEAPF64[$1699 >> 3] + ($1717 * +HEAPF64[$1697 >> 3] + $1711 * +HEAPF64[$1698 >> 3]);
       if ($1724 == 0.0) {
        $ext_patt2$0 = $1398;
        label = 306;
        break L17;
       }
       $1734 = (+HEAPF64[$1701 >> 3] + ($1717 * +HEAPF64[$para >> 3] + $1711 * +HEAPF64[$1700 >> 3])) / $1724;
       HEAPF32[$xc2 >> 2] = $1734;
       $1743 = (+HEAPF64[$1704 >> 3] + ($1717 * +HEAPF64[$1702 >> 3] + $1711 * +HEAPF64[$1703 >> 3])) / $1724;
       HEAPF32[$yc2 >> 2] = $1743;
       _arParamIdeal2ObservLTf($paramLTf, $1734, $1743, $xc2, $yc2) | 0;
       $1744 = +HEAPF32[$xc2 >> 2];
       if ($1705) {
        $xc$15 = ((~~($1744 + 1.0) | 0) / 2 | 0) << 1;
        $yc$15 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$15 = ~~($1744 + .5);
        $yc$15 = ~~(+HEAPF32[$yc2 >> 2] + .5);
       }
       if (($xc$15 | 0) > -1) if (($yc$15 | 0) < ($ysize | 0) & (($yc$15 | 0) > -1 & ($xc$15 | 0) < ($xsize | 0))) {
        $1765 = $image + ((Math_imul($yc$15, $xsize) | 0) + $xc$15) | 0;
        $1772 = $1398 + ((Math_imul(($j$15 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$17 | 0) / ($84 | 0) | 0) << 2) | 0;
        HEAP32[$1772 >> 2] = (HEAP32[$1772 >> 2] | 0) + (HEAPU8[$1765 >> 0] | 0);
       }
       $i$17 = $i$17 + 1 | 0;
      }
      $j$15 = $j$15 + 1 | 0;
     }
    }
    switch ($pixelFormat | 0) {
    case 7:
     {
      $1825 = $88 + 100.0;
      $1826 = +($ydiv2$3 | 0);
      $1827 = +($sample_size$xdiv2$2 | 0);
      $1828 = $para + 48 | 0;
      $1829 = $para + 56 | 0;
      $1830 = $para + 64 | 0;
      $1831 = $para + 8 | 0;
      $1832 = $para + 16 | 0;
      $1833 = $para + 24 | 0;
      $1834 = $para + 32 | 0;
      $1835 = $para + 40 | 0;
      $1836 = ($imageProcMode | 0) == 1;
      $j$16 = 0;
      while (1) {
       if (($j$16 | 0) >= ($ydiv2$3 | 0)) break L241;
       $1842 = $1825 + $89 * (+($j$16 | 0) + .5) / $1826;
       $i$18 = 0;
       while (1) {
        if (($i$18 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $1848 = $1825 + $89 * (+($i$18 | 0) + .5) / $1827;
        $1855 = +HEAPF64[$1830 >> 3] + ($1848 * +HEAPF64[$1828 >> 3] + $1842 * +HEAPF64[$1829 >> 3]);
        if ($1855 == 0.0) {
         $ext_patt2$0 = $1398;
         label = 306;
         break L17;
        }
        $1865 = (+HEAPF64[$1832 >> 3] + ($1848 * +HEAPF64[$para >> 3] + $1842 * +HEAPF64[$1831 >> 3])) / $1855;
        HEAPF32[$xc2 >> 2] = $1865;
        $1874 = (+HEAPF64[$1835 >> 3] + ($1848 * +HEAPF64[$1833 >> 3] + $1842 * +HEAPF64[$1834 >> 3])) / $1855;
        HEAPF32[$yc2 >> 2] = $1874;
        _arParamIdeal2ObservLTf($paramLTf, $1865, $1874, $xc2, $yc2) | 0;
        $1875 = +HEAPF32[$xc2 >> 2];
        if ($1836) {
         $xc$16 = ((~~($1875 + 1.0) | 0) / 2 | 0) << 1;
         $yc$16 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$16 = ~~($1875 + .5);
         $yc$16 = ~~(+HEAPF32[$yc2 >> 2] + .5);
        }
        if (($xc$16 | 0) > -1) if (($yc$16 | 0) < ($ysize | 0) & (($yc$16 | 0) > -1 & ($xc$16 | 0) < ($xsize | 0))) {
         $1898 = $image + ((Math_imul($yc$16, $xsize) | 0) + $xc$16 << 1 | 1) | 0;
         $1905 = $1398 + ((Math_imul(($j$16 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$18 | 0) / ($84 | 0) | 0) << 2) | 0;
         HEAP32[$1905 >> 2] = (HEAP32[$1905 >> 2] | 0) + (HEAPU8[$1898 >> 0] | 0);
        }
        $i$18 = $i$18 + 1 | 0;
       }
       $j$16 = $j$16 + 1 | 0;
      }
      break;
     }
    case 8:
     {
      $1813 = $88 + 100.0;
      $1814 = +($ydiv2$3 | 0);
      $1815 = +($sample_size$xdiv2$2 | 0);
      $1816 = $para + 48 | 0;
      $1817 = $para + 56 | 0;
      $1818 = $para + 64 | 0;
      $1819 = $para + 8 | 0;
      $1820 = $para + 16 | 0;
      $1821 = $para + 24 | 0;
      $1822 = $para + 32 | 0;
      $1823 = $para + 40 | 0;
      $1824 = ($imageProcMode | 0) == 1;
      $j$17 = 0;
      while (1) {
       if (($j$17 | 0) >= ($ydiv2$3 | 0)) break L241;
       $1915 = $1813 + $89 * (+($j$17 | 0) + .5) / $1814;
       $i$19 = 0;
       while (1) {
        if (($i$19 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $1921 = $1813 + $89 * (+($i$19 | 0) + .5) / $1815;
        $1928 = +HEAPF64[$1818 >> 3] + ($1921 * +HEAPF64[$1816 >> 3] + $1915 * +HEAPF64[$1817 >> 3]);
        if ($1928 == 0.0) {
         $ext_patt2$0 = $1398;
         label = 306;
         break L17;
        }
        $1938 = (+HEAPF64[$1820 >> 3] + ($1921 * +HEAPF64[$para >> 3] + $1915 * +HEAPF64[$1819 >> 3])) / $1928;
        HEAPF32[$xc2 >> 2] = $1938;
        $1947 = (+HEAPF64[$1823 >> 3] + ($1921 * +HEAPF64[$1821 >> 3] + $1915 * +HEAPF64[$1822 >> 3])) / $1928;
        HEAPF32[$yc2 >> 2] = $1947;
        _arParamIdeal2ObservLTf($paramLTf, $1938, $1947, $xc2, $yc2) | 0;
        $1948 = +HEAPF32[$xc2 >> 2];
        if ($1824) {
         $xc$17 = ((~~($1948 + 1.0) | 0) / 2 | 0) << 1;
         $yc$17 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$17 = ~~($1948 + .5);
         $yc$17 = ~~(+HEAPF32[$yc2 >> 2] + .5);
        }
        if (($xc$17 | 0) > -1) if (($yc$17 | 0) < ($ysize | 0) & (($yc$17 | 0) > -1 & ($xc$17 | 0) < ($xsize | 0))) {
         $1970 = $image + ((Math_imul($yc$17, $xsize) | 0) + $xc$17 << 1) | 0;
         $1977 = $1398 + ((Math_imul(($j$17 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$19 | 0) / ($84 | 0) | 0) << 2) | 0;
         HEAP32[$1977 >> 2] = (HEAP32[$1977 >> 2] | 0) + (HEAPU8[$1970 >> 0] | 0);
        }
        $i$19 = $i$19 + 1 | 0;
       }
       $j$17 = $j$17 + 1 | 0;
      }
      break;
     }
    case 9:
     {
      $1801 = $88 + 100.0;
      $1802 = +($ydiv2$3 | 0);
      $1803 = +($sample_size$xdiv2$2 | 0);
      $1804 = $para + 48 | 0;
      $1805 = $para + 56 | 0;
      $1806 = $para + 64 | 0;
      $1807 = $para + 8 | 0;
      $1808 = $para + 16 | 0;
      $1809 = $para + 24 | 0;
      $1810 = $para + 32 | 0;
      $1811 = $para + 40 | 0;
      $1812 = ($imageProcMode | 0) == 1;
      $j$18 = 0;
      while (1) {
       if (($j$18 | 0) >= ($ydiv2$3 | 0)) break L241;
       $1987 = $1801 + $89 * (+($j$18 | 0) + .5) / $1802;
       $i$20 = 0;
       while (1) {
        if (($i$20 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $1993 = $1801 + $89 * (+($i$20 | 0) + .5) / $1803;
        $2000 = +HEAPF64[$1806 >> 3] + ($1993 * +HEAPF64[$1804 >> 3] + $1987 * +HEAPF64[$1805 >> 3]);
        if ($2000 == 0.0) {
         $ext_patt2$0 = $1398;
         label = 306;
         break L17;
        }
        $2010 = (+HEAPF64[$1808 >> 3] + ($1993 * +HEAPF64[$para >> 3] + $1987 * +HEAPF64[$1807 >> 3])) / $2000;
        HEAPF32[$xc2 >> 2] = $2010;
        $2019 = (+HEAPF64[$1811 >> 3] + ($1993 * +HEAPF64[$1809 >> 3] + $1987 * +HEAPF64[$1810 >> 3])) / $2000;
        HEAPF32[$yc2 >> 2] = $2019;
        _arParamIdeal2ObservLTf($paramLTf, $2010, $2019, $xc2, $yc2) | 0;
        $2020 = +HEAPF32[$xc2 >> 2];
        if ($1812) {
         $xc$18 = ((~~($2020 + 1.0) | 0) / 2 | 0) << 1;
         $yc$18 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$18 = ~~($2020 + .5);
         $yc$18 = ~~(+HEAPF32[$yc2 >> 2] + .5);
        }
        if (($xc$18 | 0) > -1) if (($yc$18 | 0) < ($ysize | 0) & (($yc$18 | 0) > -1 & ($xc$18 | 0) < ($xsize | 0))) {
         $2041 = (Math_imul($yc$18, $xsize) | 0) + $xc$18 << 1;
         $2044 = HEAPU8[$image + $2041 >> 0] | 0;
         $2052 = HEAPU8[$image + ($2041 | 1) >> 0] | 0;
         $2067 = $1398 + ((Math_imul(($j$18 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$20 | 0) / ($84 | 0) | 0) << 2) | 0;
         HEAP32[$2067 >> 2] = (((($2052 << 3 & 248 | 4) + ($2044 & 248 | 4) + ($2044 << 5 & 224 | $2052 >>> 3 & 28 | 2) | 0) >>> 0) / 3 | 0) + (HEAP32[$2067 >> 2] | 0);
        }
        $i$20 = $i$20 + 1 | 0;
       }
       $j$18 = $j$18 + 1 | 0;
      }
      break;
     }
    case 10:
     {
      $1789 = $88 + 100.0;
      $1790 = +($ydiv2$3 | 0);
      $1791 = +($sample_size$xdiv2$2 | 0);
      $1792 = $para + 48 | 0;
      $1793 = $para + 56 | 0;
      $1794 = $para + 64 | 0;
      $1795 = $para + 8 | 0;
      $1796 = $para + 16 | 0;
      $1797 = $para + 24 | 0;
      $1798 = $para + 32 | 0;
      $1799 = $para + 40 | 0;
      $1800 = ($imageProcMode | 0) == 1;
      $j$19 = 0;
      while (1) {
       if (($j$19 | 0) >= ($ydiv2$3 | 0)) break L241;
       $2077 = $1789 + $89 * (+($j$19 | 0) + .5) / $1790;
       $i$21 = 0;
       while (1) {
        if (($i$21 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $2083 = $1789 + $89 * (+($i$21 | 0) + .5) / $1791;
        $2090 = +HEAPF64[$1794 >> 3] + ($2083 * +HEAPF64[$1792 >> 3] + $2077 * +HEAPF64[$1793 >> 3]);
        if ($2090 == 0.0) {
         $ext_patt2$0 = $1398;
         label = 306;
         break L17;
        }
        $2100 = (+HEAPF64[$1796 >> 3] + ($2083 * +HEAPF64[$para >> 3] + $2077 * +HEAPF64[$1795 >> 3])) / $2090;
        HEAPF32[$xc2 >> 2] = $2100;
        $2109 = (+HEAPF64[$1799 >> 3] + ($2083 * +HEAPF64[$1797 >> 3] + $2077 * +HEAPF64[$1798 >> 3])) / $2090;
        HEAPF32[$yc2 >> 2] = $2109;
        _arParamIdeal2ObservLTf($paramLTf, $2100, $2109, $xc2, $yc2) | 0;
        $2110 = +HEAPF32[$xc2 >> 2];
        if ($1800) {
         $xc$19 = ((~~($2110 + 1.0) | 0) / 2 | 0) << 1;
         $yc$19 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$19 = ~~($2110 + .5);
         $yc$19 = ~~(+HEAPF32[$yc2 >> 2] + .5);
        }
        if (($xc$19 | 0) > -1) if (($yc$19 | 0) < ($ysize | 0) & (($yc$19 | 0) > -1 & ($xc$19 | 0) < ($xsize | 0))) {
         $2131 = (Math_imul($yc$19, $xsize) | 0) + $xc$19 << 1;
         $2134 = HEAPU8[$image + $2131 >> 0] | 0;
         $2142 = HEAPU8[$image + ($2131 | 1) >> 0] | 0;
         $2157 = $1398 + ((Math_imul(($j$19 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$21 | 0) / ($84 | 0) | 0) << 2) | 0;
         HEAP32[$2157 >> 2] = (((($2142 << 2 & 248 | 4) + ($2134 & 248 | 4) + ($2134 << 5 & 224 | $2142 >>> 3 & 24 | 4) | 0) >>> 0) / 3 | 0) + (HEAP32[$2157 >> 2] | 0);
        }
        $i$21 = $i$21 + 1 | 0;
       }
       $j$19 = $j$19 + 1 | 0;
      }
      break;
     }
    case 11:
     {
      $1777 = $88 + 100.0;
      $1778 = +($ydiv2$3 | 0);
      $1779 = +($sample_size$xdiv2$2 | 0);
      $1780 = $para + 48 | 0;
      $1781 = $para + 56 | 0;
      $1782 = $para + 64 | 0;
      $1783 = $para + 8 | 0;
      $1784 = $para + 16 | 0;
      $1785 = $para + 24 | 0;
      $1786 = $para + 32 | 0;
      $1787 = $para + 40 | 0;
      $1788 = ($imageProcMode | 0) == 1;
      $j$20 = 0;
      while (1) {
       if (($j$20 | 0) >= ($ydiv2$3 | 0)) break L241;
       $2167 = $1777 + $89 * (+($j$20 | 0) + .5) / $1778;
       $i$22 = 0;
       while (1) {
        if (($i$22 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $2173 = $1777 + $89 * (+($i$22 | 0) + .5) / $1779;
        $2180 = +HEAPF64[$1782 >> 3] + ($2173 * +HEAPF64[$1780 >> 3] + $2167 * +HEAPF64[$1781 >> 3]);
        if ($2180 == 0.0) {
         $ext_patt2$0 = $1398;
         label = 306;
         break L17;
        }
        $2190 = (+HEAPF64[$1784 >> 3] + ($2173 * +HEAPF64[$para >> 3] + $2167 * +HEAPF64[$1783 >> 3])) / $2180;
        HEAPF32[$xc2 >> 2] = $2190;
        $2199 = (+HEAPF64[$1787 >> 3] + ($2173 * +HEAPF64[$1785 >> 3] + $2167 * +HEAPF64[$1786 >> 3])) / $2180;
        HEAPF32[$yc2 >> 2] = $2199;
        _arParamIdeal2ObservLTf($paramLTf, $2190, $2199, $xc2, $yc2) | 0;
        $2200 = +HEAPF32[$xc2 >> 2];
        if ($1788) {
         $xc$20 = ((~~($2200 + 1.0) | 0) / 2 | 0) << 1;
         $yc$20 = ((~~(+HEAPF32[$yc2 >> 2] + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$20 = ~~($2200 + .5);
         $yc$20 = ~~(+HEAPF32[$yc2 >> 2] + .5);
        }
        if (($xc$20 | 0) > -1) if (($yc$20 | 0) < ($ysize | 0) & (($yc$20 | 0) > -1 & ($xc$20 | 0) < ($xsize | 0))) {
         $2221 = (Math_imul($yc$20, $xsize) | 0) + $xc$20 << 1;
         $2224 = HEAPU8[$image + $2221 >> 0] | 0;
         $2243 = $1398 + ((Math_imul(($j$20 | 0) / ($85 | 0) | 0, $patt_size) | 0) + (($i$22 | 0) / ($84 | 0) | 0) << 2) | 0;
         HEAP32[$2243 >> 2] = (((($2224 << 4 & 240 | 8) + ($2224 & 240 | 8) + ((HEAPU8[$image + ($2221 | 1) >> 0] | 0) & 240 | 8) | 0) >>> 0) / 3 | 0) + (HEAP32[$2243 >> 2] | 0);
        }
        $i$22 = $i$22 + 1 | 0;
       }
       $j$20 = $j$20 + 1 | 0;
      }
      break;
     }
    default:
     {
      _arLog(3, 3635, $vararg_buffer5);
      $ext_patt2$0 = $1398;
      label = 306;
      break L17;
     }
    }
   }
  } while (0);
  $1426 = Math_imul($85, $84) | 0;
  $i$23 = 0;
  while (1) {
   if (($i$23 | 0) >= ($91 | 0)) break;
   HEAP8[$ext_patt + $i$23 >> 0] = ((HEAP32[$1398 + ($i$23 << 2) >> 2] | 0) >>> 0) / ($1426 >>> 0) | 0;
   $i$23 = $i$23 + 1 | 0;
  }
  _free($1398);
  $$0 = 0;
 } while (0);
 if ((label | 0) == 306) {
  _free($ext_patt2$0);
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i103 = 0, $$0$i$i$i108 = 0, $$0$i$i$i113 = 0, $$0$i$i$i118 = 0, $$0$i$i$i123 = 0, $$0$i$i$i128 = 0, $$0$i$i$i133 = 0, $$0$i$i$i138 = 0, $$0$i$i$i14 = 0, $$0$i$i$i143 = 0, $$0$i$i$i19 = 0, $$0$i$i$i24 = 0, $$0$i$i$i29 = 0, $$0$i$i$i34 = 0, $$0$i$i$i39 = 0, $$0$i$i$i4 = 0, $$0$i$i$i44 = 0, $$0$i$i$i49 = 0, $$0$i$i$i54 = 0, $$0$i$i$i59 = 0, $$0$i$i$i66 = 0, $$0$i$i$i71 = 0, $$0$i$i$i76 = 0, $$0$i$i$i81 = 0, $$0$i$i$i88 = 0, $$0$i$i$i9 = 0, $$0$i$i$i93 = 0, $$0$i$i$i98 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $108 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $12 = 0, $122 = 0, $124 = 0, $125 = 0, $128 = 0, $13 = 0, $130 = 0, $133 = 0, $134 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $153 = 0, $155 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $165 = 0, $167 = 0, $17 = 0, $172 = 0, $174 = 0, $175 = 0, $178 = 0, $18 = 0, $180 = 0, $183 = 0, $184 = 0, $187 = 0, $188 = 0, $19 = 0, $190 = 0, $192 = 0, $197 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $203 = 0, $205 = 0, $208 = 0, $209 = 0, $21 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $228 = 0, $23 = 0, $230 = 0, $233 = 0, $234 = 0, $237 = 0, $238 = 0, $24 = 0, $240 = 0, $242 = 0, $247 = 0, $249 = 0, $25 = 0, $250 = 0, $253 = 0, $255 = 0, $258 = 0, $259 = 0, $26 = 0, $262 = 0, $263 = 0, $265 = 0, $267 = 0, $27 = 0, $272 = 0, $274 = 0, $275 = 0, $278 = 0, $28 = 0, $280 = 0, $283 = 0, $284 = 0, $287 = 0, $288 = 0, $290 = 0, $292 = 0, $297 = 0, $299 = 0, $3 = 0, $300 = 0, $303 = 0, $305 = 0, $308 = 0, $309 = 0, $312 = 0, $313 = 0, $315 = 0, $317 = 0, $32 = 0, $322 = 0, $324 = 0, $325 = 0, $328 = 0, $33 = 0, $330 = 0, $333 = 0, $334 = 0, $337 = 0, $338 = 0, $340 = 0, $342 = 0, $347 = 0, $349 = 0, $35 = 0, $350 = 0, $353 = 0, $355 = 0, $358 = 0, $359 = 0, $362 = 0, $366 = 0, $369 = 0, $37 = 0, $370 = 0, $372 = 0, $374 = 0, $379 = 0, $381 = 0, $382 = 0, $385 = 0, $387 = 0, $390 = 0, $391 = 0, $394 = 0, $395 = 0, $397 = 0, $399 = 0, $4 = 0, $404 = 0, $406 = 0, $407 = 0, $410 = 0, $412 = 0, $415 = 0, $416 = 0, $419 = 0, $42 = 0, $420 = 0, $422 = 0, $424 = 0, $429 = 0, $431 = 0, $432 = 0, $435 = 0, $437 = 0, $44 = 0, $440 = 0, $441 = 0, $444 = 0, $445 = 0, $447 = 0, $449 = 0, $45 = 0, $454 = 0, $456 = 0, $457 = 0, $460 = 0, $462 = 0, $465 = 0, $466 = 0, $469 = 0, $471 = 0, $474 = 0, $475 = 0, $477 = 0, $479 = 0, $48 = 0, $484 = 0, $486 = 0, $487 = 0, $490 = 0, $492 = 0, $495 = 0, $496 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $502 = 0, $504 = 0, $509 = 0, $511 = 0, $512 = 0, $515 = 0, $517 = 0, $520 = 0, $521 = 0, $524 = 0, $525 = 0, $527 = 0, $529 = 0, $53 = 0, $534 = 0, $536 = 0, $537 = 0, $54 = 0, $540 = 0, $542 = 0, $545 = 0, $546 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $559 = 0, $561 = 0, $562 = 0, $565 = 0, $567 = 0, $57 = 0, $570 = 0, $571 = 0, $574 = 0, $575 = 0, $577 = 0, $581 = 0, $582 = 0, $584 = 0, $586 = 0, $59 = 0, $591 = 0, $593 = 0, $594 = 0, $597 = 0, $599 = 0, $6 = 0, $602 = 0, $603 = 0, $606 = 0, $607 = 0, $609 = 0, $611 = 0, $616 = 0, $618 = 0, $619 = 0, $62 = 0, $622 = 0, $624 = 0, $627 = 0, $628 = 0, $63 = 0, $631 = 0, $632 = 0, $634 = 0, $636 = 0, $641 = 0, $643 = 0, $644 = 0, $647 = 0, $649 = 0, $65 = 0, $652 = 0, $653 = 0, $656 = 0, $657 = 0, $659 = 0, $661 = 0, $666 = 0, $668 = 0, $669 = 0, $67 = 0, $672 = 0, $674 = 0, $677 = 0, $678 = 0, $681 = 0, $682 = 0, $684 = 0, $686 = 0, $691 = 0, $693 = 0, $694 = 0, $697 = 0, $699 = 0, $7 = 0, $702 = 0, $703 = 0, $706 = 0, $707 = 0, $709 = 0, $711 = 0, $716 = 0, $718 = 0, $719 = 0, $72 = 0, $722 = 0, $724 = 0, $727 = 0, $728 = 0, $731 = 0, $732 = 0, $734 = 0, $736 = 0, $74 = 0, $741 = 0, $743 = 0, $744 = 0, $747 = 0, $749 = 0, $75 = 0, $752 = 0, $753 = 0, $756 = 0, $757 = 0, $759 = 0, $761 = 0, $766 = 0, $768 = 0, $769 = 0, $772 = 0, $774 = 0, $777 = 0, $778 = 0, $78 = 0, $8 = 0, $80 = 0, $83 = 0, $84 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $97 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i63 = 0, $__i$0$i$i$i85 = 0, $__v$i$i142 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i142 = sp + 696 | 0;
 $0 = sp + 672 | 0;
 $1 = sp + 648 | 0;
 $2 = sp + 624 | 0;
 $3 = sp + 600 | 0;
 $4 = sp + 576 | 0;
 $5 = sp + 552 | 0;
 $6 = sp + 528 | 0;
 $7 = sp + 504 | 0;
 $8 = sp + 480 | 0;
 $9 = sp + 456 | 0;
 $10 = sp + 432 | 0;
 $11 = sp + 408 | 0;
 $12 = sp + 384 | 0;
 $13 = sp + 360 | 0;
 $14 = sp + 336 | 0;
 $15 = sp + 312 | 0;
 $16 = sp + 288 | 0;
 $17 = sp + 264 | 0;
 $18 = sp + 240 | 0;
 $19 = sp + 216 | 0;
 $20 = sp + 192 | 0;
 $21 = sp + 168 | 0;
 $22 = sp + 144 | 0;
 $23 = sp + 120 | 0;
 $24 = sp + 96 | 0;
 $25 = sp + 72 | 0;
 $26 = sp + 48 | 0;
 $27 = sp + 24 | 0;
 $28 = sp;
 L1 : do if (($first | 0) == ($last | 0)) $$1 = $first; else do switch (HEAP8[$first >> 0] | 0) {
 case 118:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($0, 14338);
   $32 = $db + 4 | 0;
   $33 = HEAP32[$32 >> 2] | 0;
   $35 = HEAP32[$db + 8 >> 2] | 0;
   $37 = $35;
   if ($33 >>> 0 < $35 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($33, $0);
    HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 24;
   } else {
    $42 = HEAP32[$db >> 2] | 0;
    $44 = ($33 - $42 | 0) / 24 | 0;
    $45 = $44 + 1 | 0;
    if ($45 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $48 = ($37 - $42 | 0) / 24 | 0;
    if ($48 >>> 0 < 89478485) {
     $50 = $48 << 1;
     $$0$i$i$i = $50 >>> 0 < $45 >>> 0 ? $45 : $50;
    } else $$0$i$i$i = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i, $44, $db + 12 | 0);
    $53 = $__v$i$i142 + 8 | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($54, $0);
    HEAP32[$53 >> 2] = $54 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 119:
  {
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP8[$1 >> 0] = 14;
   $57 = $1 + 1 | 0;
   HEAP8[$57 >> 0] = HEAP8[14343] | 0;
   HEAP8[$57 + 1 >> 0] = HEAP8[14344] | 0;
   HEAP8[$57 + 2 >> 0] = HEAP8[14345] | 0;
   HEAP8[$57 + 3 >> 0] = HEAP8[14346] | 0;
   HEAP8[$57 + 4 >> 0] = HEAP8[14347] | 0;
   HEAP8[$57 + 5 >> 0] = HEAP8[14348] | 0;
   HEAP8[$57 + 6 >> 0] = HEAP8[14349] | 0;
   HEAP8[$1 + 8 >> 0] = 0;
   $59 = $1 + 12 | 0;
   HEAP32[$59 >> 2] = 0;
   HEAP32[$59 + 4 >> 2] = 0;
   HEAP32[$59 + 8 >> 2] = 0;
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$59 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   $62 = $db + 4 | 0;
   $63 = HEAP32[$62 >> 2] | 0;
   $65 = HEAP32[$db + 8 >> 2] | 0;
   $67 = $65;
   if ($63 >>> 0 < $65 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($63, $1);
    HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + 24;
   } else {
    $72 = HEAP32[$db >> 2] | 0;
    $74 = ($63 - $72 | 0) / 24 | 0;
    $75 = $74 + 1 | 0;
    if ($75 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $78 = ($67 - $72 | 0) / 24 | 0;
    if ($78 >>> 0 < 89478485) {
     $80 = $78 << 1;
     $$0$i$i$i4 = $80 >>> 0 < $75 >>> 0 ? $75 : $80;
    } else $$0$i$i$i4 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i4, $74, $db + 12 | 0);
    $83 = $__v$i$i142 + 8 | 0;
    $84 = HEAP32[$83 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($84, $1);
    HEAP32[$83 >> 2] = $84 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 98:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($2, 14351);
   $87 = $db + 4 | 0;
   $88 = HEAP32[$87 >> 2] | 0;
   $90 = HEAP32[$db + 8 >> 2] | 0;
   $92 = $90;
   if ($88 >>> 0 < $90 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($88, $2);
    HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 24;
   } else {
    $97 = HEAP32[$db >> 2] | 0;
    $99 = ($88 - $97 | 0) / 24 | 0;
    $100 = $99 + 1 | 0;
    if ($100 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $103 = ($92 - $97 | 0) / 24 | 0;
    if ($103 >>> 0 < 89478485) {
     $105 = $103 << 1;
     $$0$i$i$i9 = $105 >>> 0 < $100 >>> 0 ? $100 : $105;
    } else $$0$i$i$i9 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i9, $99, $db + 12 | 0);
    $108 = $__v$i$i142 + 8 | 0;
    $109 = HEAP32[$108 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($109, $2);
    HEAP32[$108 >> 2] = $109 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 99:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 14356);
   $112 = $db + 4 | 0;
   $113 = HEAP32[$112 >> 2] | 0;
   $115 = HEAP32[$db + 8 >> 2] | 0;
   $117 = $115;
   if ($113 >>> 0 < $115 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($113, $3);
    HEAP32[$112 >> 2] = (HEAP32[$112 >> 2] | 0) + 24;
   } else {
    $122 = HEAP32[$db >> 2] | 0;
    $124 = ($113 - $122 | 0) / 24 | 0;
    $125 = $124 + 1 | 0;
    if ($125 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $128 = ($117 - $122 | 0) / 24 | 0;
    if ($128 >>> 0 < 89478485) {
     $130 = $128 << 1;
     $$0$i$i$i14 = $130 >>> 0 < $125 >>> 0 ? $125 : $130;
    } else $$0$i$i$i14 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i14, $124, $db + 12 | 0);
    $133 = $__v$i$i142 + 8 | 0;
    $134 = HEAP32[$133 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($134, $3);
    HEAP32[$133 >> 2] = $134 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 97:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($4, 14361);
   $137 = $db + 4 | 0;
   $138 = HEAP32[$137 >> 2] | 0;
   $140 = HEAP32[$db + 8 >> 2] | 0;
   $142 = $140;
   if ($138 >>> 0 < $140 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($138, $4);
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 24;
   } else {
    $147 = HEAP32[$db >> 2] | 0;
    $149 = ($138 - $147 | 0) / 24 | 0;
    $150 = $149 + 1 | 0;
    if ($150 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $153 = ($142 - $147 | 0) / 24 | 0;
    if ($153 >>> 0 < 89478485) {
     $155 = $153 << 1;
     $$0$i$i$i19 = $155 >>> 0 < $150 >>> 0 ? $150 : $155;
    } else $$0$i$i$i19 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i19, $149, $db + 12 | 0);
    $158 = $__v$i$i142 + 8 | 0;
    $159 = HEAP32[$158 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($159, $4);
    HEAP32[$158 >> 2] = $159 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 104:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($5, 14373);
   $162 = $db + 4 | 0;
   $163 = HEAP32[$162 >> 2] | 0;
   $165 = HEAP32[$db + 8 >> 2] | 0;
   $167 = $165;
   if ($163 >>> 0 < $165 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($163, $5);
    HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 24;
   } else {
    $172 = HEAP32[$db >> 2] | 0;
    $174 = ($163 - $172 | 0) / 24 | 0;
    $175 = $174 + 1 | 0;
    if ($175 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $178 = ($167 - $172 | 0) / 24 | 0;
    if ($178 >>> 0 < 89478485) {
     $180 = $178 << 1;
     $$0$i$i$i24 = $180 >>> 0 < $175 >>> 0 ? $175 : $180;
    } else $$0$i$i$i24 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i24, $174, $db + 12 | 0);
    $183 = $__v$i$i142 + 8 | 0;
    $184 = HEAP32[$183 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($184, $5);
    HEAP32[$183 >> 2] = $184 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 115:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($6, 14387);
   $187 = $db + 4 | 0;
   $188 = HEAP32[$187 >> 2] | 0;
   $190 = HEAP32[$db + 8 >> 2] | 0;
   $192 = $190;
   if ($188 >>> 0 < $190 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($188, $6);
    HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 24;
   } else {
    $197 = HEAP32[$db >> 2] | 0;
    $199 = ($188 - $197 | 0) / 24 | 0;
    $200 = $199 + 1 | 0;
    if ($200 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $203 = ($192 - $197 | 0) / 24 | 0;
    if ($203 >>> 0 < 89478485) {
     $205 = $203 << 1;
     $$0$i$i$i29 = $205 >>> 0 < $200 >>> 0 ? $200 : $205;
    } else $$0$i$i$i29 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i29, $199, $db + 12 | 0);
    $208 = $__v$i$i142 + 8 | 0;
    $209 = HEAP32[$208 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($209, $6);
    HEAP32[$208 >> 2] = $209 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 116:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($7, 14393);
   $212 = $db + 4 | 0;
   $213 = HEAP32[$212 >> 2] | 0;
   $215 = HEAP32[$db + 8 >> 2] | 0;
   $217 = $215;
   if ($213 >>> 0 < $215 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($213, $7);
    HEAP32[$212 >> 2] = (HEAP32[$212 >> 2] | 0) + 24;
   } else {
    $222 = HEAP32[$db >> 2] | 0;
    $224 = ($213 - $222 | 0) / 24 | 0;
    $225 = $224 + 1 | 0;
    if ($225 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $228 = ($217 - $222 | 0) / 24 | 0;
    if ($228 >>> 0 < 89478485) {
     $230 = $228 << 1;
     $$0$i$i$i34 = $230 >>> 0 < $225 >>> 0 ? $225 : $230;
    } else $$0$i$i$i34 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i34, $224, $db + 12 | 0);
    $233 = $__v$i$i142 + 8 | 0;
    $234 = HEAP32[$233 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($234, $7);
    HEAP32[$233 >> 2] = $234 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 105:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($8, 14408);
   $237 = $db + 4 | 0;
   $238 = HEAP32[$237 >> 2] | 0;
   $240 = HEAP32[$db + 8 >> 2] | 0;
   $242 = $240;
   if ($238 >>> 0 < $240 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($238, $8);
    HEAP32[$237 >> 2] = (HEAP32[$237 >> 2] | 0) + 24;
   } else {
    $247 = HEAP32[$db >> 2] | 0;
    $249 = ($238 - $247 | 0) / 24 | 0;
    $250 = $249 + 1 | 0;
    if ($250 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $253 = ($242 - $247 | 0) / 24 | 0;
    if ($253 >>> 0 < 89478485) {
     $255 = $253 << 1;
     $$0$i$i$i39 = $255 >>> 0 < $250 >>> 0 ? $250 : $255;
    } else $$0$i$i$i39 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i39, $249, $db + 12 | 0);
    $258 = $__v$i$i142 + 8 | 0;
    $259 = HEAP32[$258 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($259, $8);
    HEAP32[$258 >> 2] = $259 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 106:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($9, 14412);
   $262 = $db + 4 | 0;
   $263 = HEAP32[$262 >> 2] | 0;
   $265 = HEAP32[$db + 8 >> 2] | 0;
   $267 = $265;
   if ($263 >>> 0 < $265 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($263, $9);
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + 24;
   } else {
    $272 = HEAP32[$db >> 2] | 0;
    $274 = ($263 - $272 | 0) / 24 | 0;
    $275 = $274 + 1 | 0;
    if ($275 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $278 = ($267 - $272 | 0) / 24 | 0;
    if ($278 >>> 0 < 89478485) {
     $280 = $278 << 1;
     $$0$i$i$i44 = $280 >>> 0 < $275 >>> 0 ? $275 : $280;
    } else $$0$i$i$i44 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i44, $274, $db + 12 | 0);
    $283 = $__v$i$i142 + 8 | 0;
    $284 = HEAP32[$283 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($284, $9);
    HEAP32[$283 >> 2] = $284 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 108:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($10, 14425);
   $287 = $db + 4 | 0;
   $288 = HEAP32[$287 >> 2] | 0;
   $290 = HEAP32[$db + 8 >> 2] | 0;
   $292 = $290;
   if ($288 >>> 0 < $290 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($288, $10);
    HEAP32[$287 >> 2] = (HEAP32[$287 >> 2] | 0) + 24;
   } else {
    $297 = HEAP32[$db >> 2] | 0;
    $299 = ($288 - $297 | 0) / 24 | 0;
    $300 = $299 + 1 | 0;
    if ($300 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $303 = ($292 - $297 | 0) / 24 | 0;
    if ($303 >>> 0 < 89478485) {
     $305 = $303 << 1;
     $$0$i$i$i49 = $305 >>> 0 < $300 >>> 0 ? $300 : $305;
    } else $$0$i$i$i49 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i49, $299, $db + 12 | 0);
    $308 = $__v$i$i142 + 8 | 0;
    $309 = HEAP32[$308 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($309, $10);
    HEAP32[$308 >> 2] = $309 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 109:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($11, 14430);
   $312 = $db + 4 | 0;
   $313 = HEAP32[$312 >> 2] | 0;
   $315 = HEAP32[$db + 8 >> 2] | 0;
   $317 = $315;
   if ($313 >>> 0 < $315 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($313, $11);
    HEAP32[$312 >> 2] = (HEAP32[$312 >> 2] | 0) + 24;
   } else {
    $322 = HEAP32[$db >> 2] | 0;
    $324 = ($313 - $322 | 0) / 24 | 0;
    $325 = $324 + 1 | 0;
    if ($325 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $328 = ($317 - $322 | 0) / 24 | 0;
    if ($328 >>> 0 < 89478485) {
     $330 = $328 << 1;
     $$0$i$i$i54 = $330 >>> 0 < $325 >>> 0 ? $325 : $330;
    } else $$0$i$i$i54 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i54, $324, $db + 12 | 0);
    $333 = $__v$i$i142 + 8 | 0;
    $334 = HEAP32[$333 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($334, $11);
    HEAP32[$333 >> 2] = $334 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 120:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($12, 14444);
   $337 = $db + 4 | 0;
   $338 = HEAP32[$337 >> 2] | 0;
   $340 = HEAP32[$db + 8 >> 2] | 0;
   $342 = $340;
   if ($338 >>> 0 < $340 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($338, $12);
    HEAP32[$337 >> 2] = (HEAP32[$337 >> 2] | 0) + 24;
   } else {
    $347 = HEAP32[$db >> 2] | 0;
    $349 = ($338 - $347 | 0) / 24 | 0;
    $350 = $349 + 1 | 0;
    if ($350 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $353 = ($342 - $347 | 0) / 24 | 0;
    if ($353 >>> 0 < 89478485) {
     $355 = $353 << 1;
     $$0$i$i$i59 = $355 >>> 0 < $350 >>> 0 ? $350 : $355;
    } else $$0$i$i$i59 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i59, $349, $db + 12 | 0);
    $358 = $__v$i$i142 + 8 | 0;
    $359 = HEAP32[$358 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($359, $12);
    HEAP32[$358 >> 2] = $359 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 121:
  {
   HEAP32[$13 >> 2] = 0;
   $362 = _malloc(32) | 0;
   HEAP32[$13 + 8 >> 2] = $362;
   HEAP32[$13 >> 2] = 33;
   HEAP32[$13 + 4 >> 2] = 18;
   dest = $362;
   src = 14454;
   stop = dest + 18 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP8[$362 + 18 >> 0] = 0;
   $366 = $13 + 12 | 0;
   HEAP32[$366 >> 2] = 0;
   HEAP32[$366 + 4 >> 2] = 0;
   HEAP32[$366 + 8 >> 2] = 0;
   $__i$0$i$i$i63 = 0;
   while (1) {
    if (($__i$0$i$i$i63 | 0) == 3) break;
    HEAP32[$366 + ($__i$0$i$i$i63 << 2) >> 2] = 0;
    $__i$0$i$i$i63 = $__i$0$i$i$i63 + 1 | 0;
   }
   $369 = $db + 4 | 0;
   $370 = HEAP32[$369 >> 2] | 0;
   $372 = HEAP32[$db + 8 >> 2] | 0;
   $374 = $372;
   if ($370 >>> 0 < $372 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($370, $13);
    HEAP32[$369 >> 2] = (HEAP32[$369 >> 2] | 0) + 24;
   } else {
    $379 = HEAP32[$db >> 2] | 0;
    $381 = ($370 - $379 | 0) / 24 | 0;
    $382 = $381 + 1 | 0;
    if ($382 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $385 = ($374 - $379 | 0) / 24 | 0;
    if ($385 >>> 0 < 89478485) {
     $387 = $385 << 1;
     $$0$i$i$i66 = $387 >>> 0 < $382 >>> 0 ? $382 : $387;
    } else $$0$i$i$i66 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i66, $381, $db + 12 | 0);
    $390 = $__v$i$i142 + 8 | 0;
    $391 = HEAP32[$390 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($391, $13);
    HEAP32[$390 >> 2] = $391 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 110:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($14, 14473);
   $394 = $db + 4 | 0;
   $395 = HEAP32[$394 >> 2] | 0;
   $397 = HEAP32[$db + 8 >> 2] | 0;
   $399 = $397;
   if ($395 >>> 0 < $397 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($395, $14);
    HEAP32[$394 >> 2] = (HEAP32[$394 >> 2] | 0) + 24;
   } else {
    $404 = HEAP32[$db >> 2] | 0;
    $406 = ($395 - $404 | 0) / 24 | 0;
    $407 = $406 + 1 | 0;
    if ($407 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $410 = ($399 - $404 | 0) / 24 | 0;
    if ($410 >>> 0 < 89478485) {
     $412 = $410 << 1;
     $$0$i$i$i71 = $412 >>> 0 < $407 >>> 0 ? $407 : $412;
    } else $$0$i$i$i71 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i71, $406, $db + 12 | 0);
    $415 = $__v$i$i142 + 8 | 0;
    $416 = HEAP32[$415 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($416, $14);
    HEAP32[$415 >> 2] = $416 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 111:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($15, 14482);
   $419 = $db + 4 | 0;
   $420 = HEAP32[$419 >> 2] | 0;
   $422 = HEAP32[$db + 8 >> 2] | 0;
   $424 = $422;
   if ($420 >>> 0 < $422 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($420, $15);
    HEAP32[$419 >> 2] = (HEAP32[$419 >> 2] | 0) + 24;
   } else {
    $429 = HEAP32[$db >> 2] | 0;
    $431 = ($420 - $429 | 0) / 24 | 0;
    $432 = $431 + 1 | 0;
    if ($432 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $435 = ($424 - $429 | 0) / 24 | 0;
    if ($435 >>> 0 < 89478485) {
     $437 = $435 << 1;
     $$0$i$i$i76 = $437 >>> 0 < $432 >>> 0 ? $432 : $437;
    } else $$0$i$i$i76 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i76, $431, $db + 12 | 0);
    $440 = $__v$i$i142 + 8 | 0;
    $441 = HEAP32[$440 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($441, $15);
    HEAP32[$440 >> 2] = $441 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 102:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($16, 14500);
   $444 = $db + 4 | 0;
   $445 = HEAP32[$444 >> 2] | 0;
   $447 = HEAP32[$db + 8 >> 2] | 0;
   $449 = $447;
   if ($445 >>> 0 < $447 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($445, $16);
    HEAP32[$444 >> 2] = (HEAP32[$444 >> 2] | 0) + 24;
   } else {
    $454 = HEAP32[$db >> 2] | 0;
    $456 = ($445 - $454 | 0) / 24 | 0;
    $457 = $456 + 1 | 0;
    if ($457 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $460 = ($449 - $454 | 0) / 24 | 0;
    if ($460 >>> 0 < 89478485) {
     $462 = $460 << 1;
     $$0$i$i$i81 = $462 >>> 0 < $457 >>> 0 ? $457 : $462;
    } else $$0$i$i$i81 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i81, $456, $db + 12 | 0);
    $465 = $__v$i$i142 + 8 | 0;
    $466 = HEAP32[$465 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($466, $16);
    HEAP32[$465 >> 2] = $466 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 100:
  {
   HEAP32[$17 >> 2] = 0;
   HEAP32[$17 + 4 >> 2] = 0;
   HEAP32[$17 + 8 >> 2] = 0;
   HEAP8[$17 >> 0] = 12;
   $469 = $17 + 1 | 0;
   HEAP8[$469 >> 0] = HEAP8[14506] | 0;
   HEAP8[$469 + 1 >> 0] = HEAP8[14507] | 0;
   HEAP8[$469 + 2 >> 0] = HEAP8[14508] | 0;
   HEAP8[$469 + 3 >> 0] = HEAP8[14509] | 0;
   HEAP8[$469 + 4 >> 0] = HEAP8[14510] | 0;
   HEAP8[$469 + 5 >> 0] = HEAP8[14511] | 0;
   HEAP8[$17 + 7 >> 0] = 0;
   $471 = $17 + 12 | 0;
   HEAP32[$471 >> 2] = 0;
   HEAP32[$471 + 4 >> 2] = 0;
   HEAP32[$471 + 8 >> 2] = 0;
   $__i$0$i$i$i85 = 0;
   while (1) {
    if (($__i$0$i$i$i85 | 0) == 3) break;
    HEAP32[$471 + ($__i$0$i$i$i85 << 2) >> 2] = 0;
    $__i$0$i$i$i85 = $__i$0$i$i$i85 + 1 | 0;
   }
   $474 = $db + 4 | 0;
   $475 = HEAP32[$474 >> 2] | 0;
   $477 = HEAP32[$db + 8 >> 2] | 0;
   $479 = $477;
   if ($475 >>> 0 < $477 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($475, $17);
    HEAP32[$474 >> 2] = (HEAP32[$474 >> 2] | 0) + 24;
   } else {
    $484 = HEAP32[$db >> 2] | 0;
    $486 = ($475 - $484 | 0) / 24 | 0;
    $487 = $486 + 1 | 0;
    if ($487 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $490 = ($479 - $484 | 0) / 24 | 0;
    if ($490 >>> 0 < 89478485) {
     $492 = $490 << 1;
     $$0$i$i$i88 = $492 >>> 0 < $487 >>> 0 ? $487 : $492;
    } else $$0$i$i$i88 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i88, $486, $db + 12 | 0);
    $495 = $__v$i$i142 + 8 | 0;
    $496 = HEAP32[$495 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($496, $17);
    HEAP32[$495 >> 2] = $496 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 101:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($18, 14513);
   $499 = $db + 4 | 0;
   $500 = HEAP32[$499 >> 2] | 0;
   $502 = HEAP32[$db + 8 >> 2] | 0;
   $504 = $502;
   if ($500 >>> 0 < $502 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($500, $18);
    HEAP32[$499 >> 2] = (HEAP32[$499 >> 2] | 0) + 24;
   } else {
    $509 = HEAP32[$db >> 2] | 0;
    $511 = ($500 - $509 | 0) / 24 | 0;
    $512 = $511 + 1 | 0;
    if ($512 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $515 = ($504 - $509 | 0) / 24 | 0;
    if ($515 >>> 0 < 89478485) {
     $517 = $515 << 1;
     $$0$i$i$i93 = $517 >>> 0 < $512 >>> 0 ? $512 : $517;
    } else $$0$i$i$i93 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i93, $511, $db + 12 | 0);
    $520 = $__v$i$i142 + 8 | 0;
    $521 = HEAP32[$520 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($521, $18);
    HEAP32[$520 >> 2] = $521 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 103:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($19, 14525);
   $524 = $db + 4 | 0;
   $525 = HEAP32[$524 >> 2] | 0;
   $527 = HEAP32[$db + 8 >> 2] | 0;
   $529 = $527;
   if ($525 >>> 0 < $527 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($525, $19);
    HEAP32[$524 >> 2] = (HEAP32[$524 >> 2] | 0) + 24;
   } else {
    $534 = HEAP32[$db >> 2] | 0;
    $536 = ($525 - $534 | 0) / 24 | 0;
    $537 = $536 + 1 | 0;
    if ($537 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $540 = ($529 - $534 | 0) / 24 | 0;
    if ($540 >>> 0 < 89478485) {
     $542 = $540 << 1;
     $$0$i$i$i98 = $542 >>> 0 < $537 >>> 0 ? $537 : $542;
    } else $$0$i$i$i98 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i98, $536, $db + 12 | 0);
    $545 = $__v$i$i142 + 8 | 0;
    $546 = HEAP32[$545 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($546, $19);
    HEAP32[$545 >> 2] = $546 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 122:
  {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($20, 14536);
   $549 = $db + 4 | 0;
   $550 = HEAP32[$549 >> 2] | 0;
   $552 = HEAP32[$db + 8 >> 2] | 0;
   $554 = $552;
   if ($550 >>> 0 < $552 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($550, $20);
    HEAP32[$549 >> 2] = (HEAP32[$549 >> 2] | 0) + 24;
   } else {
    $559 = HEAP32[$db >> 2] | 0;
    $561 = ($550 - $559 | 0) / 24 | 0;
    $562 = $561 + 1 | 0;
    if ($562 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $565 = ($554 - $559 | 0) / 24 | 0;
    if ($565 >>> 0 < 89478485) {
     $567 = $565 << 1;
     $$0$i$i$i103 = $567 >>> 0 < $562 >>> 0 ? $562 : $567;
    } else $$0$i$i$i103 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i103, $561, $db + 12 | 0);
    $570 = $__v$i$i142 + 8 | 0;
    $571 = HEAP32[$570 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($571, $20);
    HEAP32[$570 >> 2] = $571 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
   $$1 = $first + 1 | 0;
   break L1;
   break;
  }
 case 117:
  {
   $574 = $first + 1 | 0;
   $575 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($574, $last, $db) | 0;
   $$1 = ($575 | 0) == ($574 | 0) ? $first : $575;
   break L1;
   break;
  }
 case 68:
  {
   $577 = $first + 1 | 0;
   if (($577 | 0) == ($last | 0)) {
    $$1 = $first;
    break L1;
   }
   switch (HEAP8[$577 >> 0] | 0) {
   case 100:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($21, 14573);
     $581 = $db + 4 | 0;
     $582 = HEAP32[$581 >> 2] | 0;
     $584 = HEAP32[$db + 8 >> 2] | 0;
     $586 = $584;
     if ($582 >>> 0 < $584 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($582, $21);
      HEAP32[$581 >> 2] = (HEAP32[$581 >> 2] | 0) + 24;
     } else {
      $591 = HEAP32[$db >> 2] | 0;
      $593 = ($582 - $591 | 0) / 24 | 0;
      $594 = $593 + 1 | 0;
      if ($594 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $597 = ($586 - $591 | 0) / 24 | 0;
      if ($597 >>> 0 < 89478485) {
       $599 = $597 << 1;
       $$0$i$i$i108 = $599 >>> 0 < $594 >>> 0 ? $594 : $599;
      } else $$0$i$i$i108 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i108, $593, $db + 12 | 0);
      $602 = $__v$i$i142 + 8 | 0;
      $603 = HEAP32[$602 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($603, $21);
      HEAP32[$602 >> 2] = $603 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
     $$1 = $first + 2 | 0;
     break L1;
     break;
    }
   case 101:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($22, 14583);
     $606 = $db + 4 | 0;
     $607 = HEAP32[$606 >> 2] | 0;
     $609 = HEAP32[$db + 8 >> 2] | 0;
     $611 = $609;
     if ($607 >>> 0 < $609 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($607, $22);
      HEAP32[$606 >> 2] = (HEAP32[$606 >> 2] | 0) + 24;
     } else {
      $616 = HEAP32[$db >> 2] | 0;
      $618 = ($607 - $616 | 0) / 24 | 0;
      $619 = $618 + 1 | 0;
      if ($619 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $622 = ($611 - $616 | 0) / 24 | 0;
      if ($622 >>> 0 < 89478485) {
       $624 = $622 << 1;
       $$0$i$i$i113 = $624 >>> 0 < $619 >>> 0 ? $619 : $624;
      } else $$0$i$i$i113 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i113, $618, $db + 12 | 0);
      $627 = $__v$i$i142 + 8 | 0;
      $628 = HEAP32[$627 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($628, $22);
      HEAP32[$627 >> 2] = $628 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
     $$1 = $first + 2 | 0;
     break L1;
     break;
    }
   case 102:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($23, 14594);
     $631 = $db + 4 | 0;
     $632 = HEAP32[$631 >> 2] | 0;
     $634 = HEAP32[$db + 8 >> 2] | 0;
     $636 = $634;
     if ($632 >>> 0 < $634 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($632, $23);
      HEAP32[$631 >> 2] = (HEAP32[$631 >> 2] | 0) + 24;
     } else {
      $641 = HEAP32[$db >> 2] | 0;
      $643 = ($632 - $641 | 0) / 24 | 0;
      $644 = $643 + 1 | 0;
      if ($644 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $647 = ($636 - $641 | 0) / 24 | 0;
      if ($647 >>> 0 < 89478485) {
       $649 = $647 << 1;
       $$0$i$i$i118 = $649 >>> 0 < $644 >>> 0 ? $644 : $649;
      } else $$0$i$i$i118 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i118, $643, $db + 12 | 0);
      $652 = $__v$i$i142 + 8 | 0;
      $653 = HEAP32[$652 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($653, $23);
      HEAP32[$652 >> 2] = $653 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
     $$1 = $first + 2 | 0;
     break L1;
     break;
    }
   case 104:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($24, 14604);
     $656 = $db + 4 | 0;
     $657 = HEAP32[$656 >> 2] | 0;
     $659 = HEAP32[$db + 8 >> 2] | 0;
     $661 = $659;
     if ($657 >>> 0 < $659 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($657, $24);
      HEAP32[$656 >> 2] = (HEAP32[$656 >> 2] | 0) + 24;
     } else {
      $666 = HEAP32[$db >> 2] | 0;
      $668 = ($657 - $666 | 0) / 24 | 0;
      $669 = $668 + 1 | 0;
      if ($669 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $672 = ($661 - $666 | 0) / 24 | 0;
      if ($672 >>> 0 < 89478485) {
       $674 = $672 << 1;
       $$0$i$i$i123 = $674 >>> 0 < $669 >>> 0 ? $669 : $674;
      } else $$0$i$i$i123 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i123, $668, $db + 12 | 0);
      $677 = $__v$i$i142 + 8 | 0;
      $678 = HEAP32[$677 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($678, $24);
      HEAP32[$677 >> 2] = $678 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
     $$1 = $first + 2 | 0;
     break L1;
     break;
    }
   case 105:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($25, 14614);
     $681 = $db + 4 | 0;
     $682 = HEAP32[$681 >> 2] | 0;
     $684 = HEAP32[$db + 8 >> 2] | 0;
     $686 = $684;
     if ($682 >>> 0 < $684 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($682, $25);
      HEAP32[$681 >> 2] = (HEAP32[$681 >> 2] | 0) + 24;
     } else {
      $691 = HEAP32[$db >> 2] | 0;
      $693 = ($682 - $691 | 0) / 24 | 0;
      $694 = $693 + 1 | 0;
      if ($694 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $697 = ($686 - $691 | 0) / 24 | 0;
      if ($697 >>> 0 < 89478485) {
       $699 = $697 << 1;
       $$0$i$i$i128 = $699 >>> 0 < $694 >>> 0 ? $694 : $699;
      } else $$0$i$i$i128 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i128, $693, $db + 12 | 0);
      $702 = $__v$i$i142 + 8 | 0;
      $703 = HEAP32[$702 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($703, $25);
      HEAP32[$702 >> 2] = $703 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
     $$1 = $first + 2 | 0;
     break L1;
     break;
    }
   case 115:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($26, 14623);
     $706 = $db + 4 | 0;
     $707 = HEAP32[$706 >> 2] | 0;
     $709 = HEAP32[$db + 8 >> 2] | 0;
     $711 = $709;
     if ($707 >>> 0 < $709 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($707, $26);
      HEAP32[$706 >> 2] = (HEAP32[$706 >> 2] | 0) + 24;
     } else {
      $716 = HEAP32[$db >> 2] | 0;
      $718 = ($707 - $716 | 0) / 24 | 0;
      $719 = $718 + 1 | 0;
      if ($719 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $722 = ($711 - $716 | 0) / 24 | 0;
      if ($722 >>> 0 < 89478485) {
       $724 = $722 << 1;
       $$0$i$i$i133 = $724 >>> 0 < $719 >>> 0 ? $719 : $724;
      } else $$0$i$i$i133 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i133, $718, $db + 12 | 0);
      $727 = $__v$i$i142 + 8 | 0;
      $728 = HEAP32[$727 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($728, $26);
      HEAP32[$727 >> 2] = $728 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
     $$1 = $first + 2 | 0;
     break L1;
     break;
    }
   case 97:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($27, 14632);
     $731 = $db + 4 | 0;
     $732 = HEAP32[$731 >> 2] | 0;
     $734 = HEAP32[$db + 8 >> 2] | 0;
     $736 = $734;
     if ($732 >>> 0 < $734 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($732, $27);
      HEAP32[$731 >> 2] = (HEAP32[$731 >> 2] | 0) + 24;
     } else {
      $741 = HEAP32[$db >> 2] | 0;
      $743 = ($732 - $741 | 0) / 24 | 0;
      $744 = $743 + 1 | 0;
      if ($744 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $747 = ($736 - $741 | 0) / 24 | 0;
      if ($747 >>> 0 < 89478485) {
       $749 = $747 << 1;
       $$0$i$i$i138 = $749 >>> 0 < $744 >>> 0 ? $744 : $749;
      } else $$0$i$i$i138 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i138, $743, $db + 12 | 0);
      $752 = $__v$i$i142 + 8 | 0;
      $753 = HEAP32[$752 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($753, $27);
      HEAP32[$752 >> 2] = $753 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
     $$1 = $first + 2 | 0;
     break L1;
     break;
    }
   case 110:
    {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($28, 14637);
     $756 = $db + 4 | 0;
     $757 = HEAP32[$756 >> 2] | 0;
     $759 = HEAP32[$db + 8 >> 2] | 0;
     $761 = $759;
     if ($757 >>> 0 < $759 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($757, $28);
      HEAP32[$756 >> 2] = (HEAP32[$756 >> 2] | 0) + 24;
     } else {
      $766 = HEAP32[$db >> 2] | 0;
      $768 = ($757 - $766 | 0) / 24 | 0;
      $769 = $768 + 1 | 0;
      if ($769 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $772 = ($761 - $766 | 0) / 24 | 0;
      if ($772 >>> 0 < 89478485) {
       $774 = $772 << 1;
       $$0$i$i$i143 = $774 >>> 0 < $769 >>> 0 ? $769 : $774;
      } else $$0$i$i$i143 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i143, $768, $db + 12 | 0);
      $777 = $__v$i$i142 + 8 | 0;
      $778 = HEAP32[$777 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($778, $28);
      HEAP32[$777 >> 2] = $778 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
     $$1 = $first + 2 | 0;
     break L1;
     break;
    }
   default:
    {
     $$1 = $first;
     break L1;
    }
   }
   break;
  }
 default:
  {
   $$1 = $first;
   break L1;
  }
 } while (0); while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3112$i = 0, $$in = 0, $$lcssa = 0, $$lcssa258 = 0, $$lcssa258$lcssa = 0, $$lcssa259 = 0, $$lcssa259$lcssa = 0, $$lcssa265 = 0, $$lcssa266 = 0, $$lcssa267 = 0, $$lcssa277 = 0, $$not$i = 0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi43$iZ2D = 0.0, $$sink$off0$i = 0, $0 = 0, $1 = 0, $103 = 0, $113 = 0, $115 = 0, $123 = 0, $125 = 0, $132 = 0, $139 = 0, $147 = 0, $15 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $168 = 0, $170 = 0, $183 = 0.0, $190 = 0, $192 = 0, $2 = 0, $201 = 0, $205 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $223 = 0, $224 = 0, $225 = 0, $235 = 0, $236 = 0, $249 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $266 = 0, $270 = 0, $272 = 0, $279 = 0, $283 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $295 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $310 = 0.0, $322 = 0.0, $324 = 0, $330 = 0, $331 = 0, $338 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $358 = 0, $36 = 0, $360 = 0, $362 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $371 = 0, $376 = 0, $377 = 0, $381 = 0, $39 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $402 = 0, $403 = 0, $412 = 0, $413 = 0, $414 = 0, $42 = 0, $421 = 0, $422 = 0, $426 = 0, $428 = 0, $429 = 0, $431 = 0, $444 = 0, $446 = 0, $452 = 0, $456 = 0, $458 = 0, $464 = 0, $470 = 0, $471 = 0, $472 = 0, $493 = 0, $505 = 0, $509 = 0, $512 = 0, $514 = 0, $515 = 0, $516 = 0, $519 = 0, $520 = 0, $532 = 0, $533 = 0, $534 = 0, $538 = 0, $540 = 0, $542 = 0, $543 = 0, $549 = 0, $551 = 0, $556 = 0, $559 = 0, $563 = 0, $566 = 0, $571 = 0, $575 = 0, $576 = 0, $578 = 0, $582 = 0, $584 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $593 = 0, $594 = 0, $60 = 0, $602 = 0, $608 = 0, $609 = 0, $616 = 0, $618 = 0.0, $620 = 0, $624 = 0.0, $625 = 0.0, $628 = 0.0, $632 = 0, $635 = 0, $642 = 0.0, $660 = 0.0, $662 = 0, $668 = 0, $669 = 0, $67 = 0, $676 = 0, $679 = 0, $69 = 0, $690 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $76 = 0, $82 = 0, $9 = 0, $90 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa250 = 0, $a$4$i251 = 0, $a$4$ph$i = 0, $a$4$ph167$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i248 = 0, $e2$1$ph$i = 0, $e2$1$ph166$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa244 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa275 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3108$i = 0, $gotdig$3108$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1109$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0, $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0111$i = 0, $j$0111$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0110$i = 0, $k$0110$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0, $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0107$i = 0, $lnz$0107$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond21$i = 0, $or$cond25$i = 0, $or$cond9$i = 0, $rp$0$lcssa162$i = 0, $rp$092$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0, $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $x$i = sp;
 switch ($prec | 0) {
 case 0:
  {
   $bits$0$ph = 24;
   $emin$0$ph = -149;
   label = 4;
   break;
  }
 case 1:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 case 2:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 default:
  $$0 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $0 = $f + 4 | 0;
  $1 = $f + 100 | 0;
  do {
   $2 = HEAP32[$0 >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $2 + 1;
    $9 = HEAPU8[$2 >> 0] | 0;
   } else $9 = ___shgetc($f) | 0;
  } while ((_isspace($9) | 0) != 0);
  $$lcssa277 = $9;
  L13 : do switch ($$lcssa277 | 0) {
  case 43:
  case 45:
   {
    $15 = 1 - ((($$lcssa277 | 0) == 45 & 1) << 1) | 0;
    $16 = HEAP32[$0 >> 2] | 0;
    if ($16 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $16 + 1;
     $c$0 = HEAPU8[$16 >> 0] | 0;
     $sign$0 = $15;
     break L13;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $sign$0 = $15;
     break L13;
    }
    break;
   }
  default:
   {
    $c$0 = $$lcssa277;
    $sign$0 = 1;
   }
  } while (0);
  $c$179 = $c$0;
  $i$078 = 0;
  while (1) {
   if (($c$179 | 32 | 0) != (HEAP8[13817 + $i$078 >> 0] | 0)) {
    $c$1$lcssa = $c$179;
    $i$0$lcssa = $i$078;
    break;
   }
   do if ($i$078 >>> 0 < 7) {
    $29 = HEAP32[$0 >> 2] | 0;
    if ($29 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $29 + 1;
     $c$2 = HEAPU8[$29 >> 0] | 0;
     break;
    } else {
     $c$2 = ___shgetc($f) | 0;
     break;
    }
   } else $c$2 = $c$179; while (0);
   $36 = $i$078 + 1 | 0;
   if ($36 >>> 0 < 8) {
    $c$179 = $c$2;
    $i$078 = $36;
   } else {
    $c$1$lcssa = $c$2;
    $i$0$lcssa = $36;
    break;
   }
  }
  L29 : do switch ($i$0$lcssa | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $39 = ($pok | 0) != 0;
    if ($39 & $i$0$lcssa >>> 0 > 3) if (($i$0$lcssa | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$i$0$lcssa) {
     $c$377 = $c$1$lcssa;
     $i$276 = 0;
     while (1) {
      if (($c$377 | 32 | 0) != (HEAP8[13826 + $i$276 >> 0] | 0)) {
       $c$5 = $c$377;
       $i$3 = $i$276;
       break L34;
      }
      do if ($i$276 >>> 0 < 2) {
       $60 = HEAP32[$0 >> 2] | 0;
       if ($60 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $60 + 1;
        $c$4 = HEAPU8[$60 >> 0] | 0;
        break;
       } else {
        $c$4 = ___shgetc($f) | 0;
        break;
       }
      } else $c$4 = $c$377; while (0);
      $67 = $i$276 + 1 | 0;
      if ($67 >>> 0 < 3) {
       $c$377 = $c$4;
       $i$276 = $67;
      } else {
       $c$5 = $c$4;
       $i$3 = $67;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;
     $i$3 = $i$0$lcssa;
    } while (0);
    switch ($i$3 | 0) {
    case 3:
     {
      $69 = HEAP32[$0 >> 2] | 0;
      if ($69 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $69 + 1;
       $76 = HEAPU8[$69 >> 0] | 0;
      } else $76 = ___shgetc($f) | 0;
      if (($76 | 0) == 40) $i$4 = 1; else {
       if (!(HEAP32[$1 >> 2] | 0)) {
        $$0 = nan;
        break L4;
       }
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       $$0 = nan;
       break L4;
      }
      while (1) {
       $82 = HEAP32[$0 >> 2] | 0;
       if ($82 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $82 + 1;
        $90 = HEAPU8[$82 >> 0] | 0;
       } else $90 = ___shgetc($f) | 0;
       if (!(($90 + -48 | 0) >>> 0 < 10 | ($90 + -65 | 0) >>> 0 < 26)) if (!(($90 | 0) == 95 | ($90 + -97 | 0) >>> 0 < 26)) {
        $$lcssa = $90;
        $i$4$lcssa = $i$4;
        break;
       }
       $i$4 = $i$4 + 1 | 0;
      }
      if (($$lcssa | 0) == 41) {
       $$0 = nan;
       break L4;
      }
      $99 = (HEAP32[$1 >> 2] | 0) == 0;
      if (!$99) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      if (!$39) {
       $103 = ___errno_location() | 0;
       HEAP32[$103 >> 2] = 22;
       ___shlim($f, 0);
       $$0 = 0.0;
       break L4;
      }
      if (!$i$4$lcssa) {
       $$0 = nan;
       break L4;
      } else $$in = $i$4$lcssa;
      while (1) {
       $$in = $$in + -1 | 0;
       if (!$99) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       if (!$$in) {
        $$0 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      do if (($c$5 | 0) == 48) {
       $115 = HEAP32[$0 >> 2] | 0;
       if ($115 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $115 + 1;
        $123 = HEAPU8[$115 >> 0] | 0;
       } else $123 = ___shgetc($f) | 0;
       if (($123 | 32 | 0) != 120) {
        if (!(HEAP32[$1 >> 2] | 0)) {
         $c$6 = 48;
         break;
        }
        HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        $c$6 = 48;
        break;
       }
       $125 = HEAP32[$0 >> 2] | 0;
       if ($125 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $125 + 1;
        $c$0$i = HEAPU8[$125 >> 0] | 0;
        $gotdig$0$i = 0;
       } else {
        $c$0$i = ___shgetc($f) | 0;
        $gotdig$0$i = 0;
       }
       L94 : while (1) {
        switch ($c$0$i | 0) {
        case 46:
         {
          $gotdig$0$i$lcssa244 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
        case 48:
         break;
        default:
         {
          $168 = 0;
          $170 = 0;
          $693 = 0;
          $694 = 0;
          $c$2$i = $c$0$i;
          $gotdig$2$i = $gotdig$0$i;
          $gotrad$0$i = 0;
          $gottail$0$i = 0;
          $scale$0$i = 1.0;
          $x$0$i = 0;
          $y$0$i = 0.0;
          break L94;
         }
        }
        $132 = HEAP32[$0 >> 2] | 0;
        if ($132 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $132 + 1;
         $c$0$i = HEAPU8[$132 >> 0] | 0;
         $gotdig$0$i = 1;
         continue;
        } else {
         $c$0$i = ___shgetc($f) | 0;
         $gotdig$0$i = 1;
         continue;
        }
       }
       if ((label | 0) == 74) {
        $139 = HEAP32[$0 >> 2] | 0;
        if ($139 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $139 + 1;
         $c$1$ph$i = HEAPU8[$139 >> 0] | 0;
        } else $c$1$ph$i = ___shgetc($f) | 0;
        if (($c$1$ph$i | 0) == 48) {
         $154 = 0;
         $155 = 0;
         while (1) {
          $147 = HEAP32[$0 >> 2] | 0;
          if ($147 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
           HEAP32[$0 >> 2] = $147 + 1;
           $158 = HEAPU8[$147 >> 0] | 0;
          } else $158 = ___shgetc($f) | 0;
          $156 = _i64Add($154 | 0, $155 | 0, -1, -1) | 0;
          $157 = tempRet0;
          if (($158 | 0) == 48) {
           $154 = $156;
           $155 = $157;
          } else {
           $168 = 0;
           $170 = 0;
           $693 = $156;
           $694 = $157;
           $c$2$i = $158;
           $gotdig$2$i = 1;
           $gotrad$0$i = 1;
           $gottail$0$i = 0;
           $scale$0$i = 1.0;
           $x$0$i = 0;
           $y$0$i = 0.0;
           break;
          }
         }
        } else {
         $168 = 0;
         $170 = 0;
         $693 = 0;
         $694 = 0;
         $c$2$i = $c$1$ph$i;
         $gotdig$2$i = $gotdig$0$i$lcssa244;
         $gotrad$0$i = 1;
         $gottail$0$i = 0;
         $scale$0$i = 1.0;
         $x$0$i = 0;
         $y$0$i = 0.0;
        }
       }
       while (1) {
        $160 = $c$2$i + -48 | 0;
        $$pre$i = $c$2$i | 32;
        if ($160 >>> 0 < 10) label = 86; else {
         $164 = ($c$2$i | 0) == 46;
         if (!($164 | ($$pre$i + -97 | 0) >>> 0 < 6)) {
          $212 = $693;
          $213 = $170;
          $215 = $694;
          $216 = $168;
          $c$2$lcssa$i = $c$2$i;
          $gotdig$2$i$lcssa = $gotdig$2$i;
          $gotrad$0$i$lcssa = $gotrad$0$i;
          $x$0$i$lcssa = $x$0$i;
          $y$0$i$lcssa = $y$0$i;
          break;
         }
         if ($164) if (!$gotrad$0$i) {
          $695 = $170;
          $696 = $168;
          $697 = $170;
          $698 = $168;
          $gotdig$3$i = $gotdig$2$i;
          $gotrad$1$i = 1;
          $gottail$2$i = $gottail$0$i;
          $scale$2$i = $scale$0$i;
          $x$2$i = $x$0$i;
          $y$2$i = $y$0$i;
         } else {
          $212 = $693;
          $213 = $170;
          $215 = $694;
          $216 = $168;
          $c$2$lcssa$i = 46;
          $gotdig$2$i$lcssa = $gotdig$2$i;
          $gotrad$0$i$lcssa = $gotrad$0$i;
          $x$0$i$lcssa = $x$0$i;
          $y$0$i$lcssa = $y$0$i;
          break;
         } else label = 86;
        }
        if ((label | 0) == 86) {
         label = 0;
         $d$0$i = ($c$2$i | 0) > 57 ? $$pre$i + -87 | 0 : $160;
         do if (($168 | 0) < 0 | ($168 | 0) == 0 & $170 >>> 0 < 8) {
          $gottail$1$i = $gottail$0$i;
          $scale$1$i = $scale$0$i;
          $x$1$i = $d$0$i + ($x$0$i << 4) | 0;
          $y$1$i = $y$0$i;
         } else {
          if (($168 | 0) < 0 | ($168 | 0) == 0 & $170 >>> 0 < 14) {
           $183 = $scale$0$i * .0625;
           $gottail$1$i = $gottail$0$i;
           $scale$1$i = $183;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i + $183 * +($d$0$i | 0);
           break;
          }
          if (($gottail$0$i | 0) != 0 | ($d$0$i | 0) == 0) {
           $gottail$1$i = $gottail$0$i;
           $scale$1$i = $scale$0$i;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i;
          } else {
           $gottail$1$i = 1;
           $scale$1$i = $scale$0$i;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i + $scale$0$i * .5;
          }
         } while (0);
         $190 = _i64Add($170 | 0, $168 | 0, 1, 0) | 0;
         $695 = $693;
         $696 = $694;
         $697 = $190;
         $698 = tempRet0;
         $gotdig$3$i = 1;
         $gotrad$1$i = $gotrad$0$i;
         $gottail$2$i = $gottail$1$i;
         $scale$2$i = $scale$1$i;
         $x$2$i = $x$1$i;
         $y$2$i = $y$1$i;
        }
        $192 = HEAP32[$0 >> 2] | 0;
        if ($192 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $192 + 1;
         $168 = $698;
         $170 = $697;
         $693 = $695;
         $694 = $696;
         $c$2$i = HEAPU8[$192 >> 0] | 0;
         $gotdig$2$i = $gotdig$3$i;
         $gotrad$0$i = $gotrad$1$i;
         $gottail$0$i = $gottail$2$i;
         $scale$0$i = $scale$2$i;
         $x$0$i = $x$2$i;
         $y$0$i = $y$2$i;
         continue;
        } else {
         $168 = $698;
         $170 = $697;
         $693 = $695;
         $694 = $696;
         $c$2$i = ___shgetc($f) | 0;
         $gotdig$2$i = $gotdig$3$i;
         $gotrad$0$i = $gotrad$1$i;
         $gottail$0$i = $gottail$2$i;
         $scale$0$i = $scale$2$i;
         $x$0$i = $x$2$i;
         $y$0$i = $y$2$i;
         continue;
        }
       }
       if (!$gotdig$2$i$lcssa) {
        $201 = (HEAP32[$1 >> 2] | 0) == 0;
        if (!$201) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        if (!$pok) ___shlim($f, 0); else if (!$201) {
         $205 = HEAP32[$0 >> 2] | 0;
         HEAP32[$0 >> 2] = $205 + -1;
         if ($gotrad$0$i$lcssa | 0) HEAP32[$0 >> 2] = $205 + -2;
        }
        $$0 = +($sign$0 | 0) * 0.0;
        break L4;
       }
       $211 = ($gotrad$0$i$lcssa | 0) == 0;
       $214 = $211 ? $213 : $212;
       $217 = $211 ? $216 : $215;
       if (($216 | 0) < 0 | ($216 | 0) == 0 & $213 >>> 0 < 8) {
        $224 = $213;
        $225 = $216;
        $x$324$i = $x$0$i$lcssa;
        while (1) {
         $223 = $x$324$i << 4;
         $224 = _i64Add($224 | 0, $225 | 0, 1, 0) | 0;
         $225 = tempRet0;
         if (!(($225 | 0) < 0 | ($225 | 0) == 0 & $224 >>> 0 < 8)) {
          $x$3$lcssa$i = $223;
          break;
         } else $x$324$i = $223;
        }
       } else $x$3$lcssa$i = $x$0$i$lcssa;
       if (($c$2$lcssa$i | 32 | 0) == 112) {
        $235 = _scanexp($f, $pok) | 0;
        $236 = tempRet0;
        if (($235 | 0) == 0 & ($236 | 0) == -2147483648) {
         if (!$pok) {
          ___shlim($f, 0);
          $$0 = 0.0;
          break L4;
         }
         if (!(HEAP32[$1 >> 2] | 0)) {
          $253 = 0;
          $254 = 0;
         } else {
          HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
          $253 = 0;
          $254 = 0;
         }
        } else {
         $253 = $235;
         $254 = $236;
        }
       } else if (!(HEAP32[$1 >> 2] | 0)) {
        $253 = 0;
        $254 = 0;
       } else {
        HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        $253 = 0;
        $254 = 0;
       }
       $249 = _bitshift64Shl($214 | 0, $217 | 0, 2) | 0;
       $251 = _i64Add($249 | 0, tempRet0 | 0, -32, -1) | 0;
       $255 = _i64Add($251 | 0, tempRet0 | 0, $253 | 0, $254 | 0) | 0;
       $256 = tempRet0;
       if (!$x$3$lcssa$i) {
        $$0 = +($sign$0 | 0) * 0.0;
        break L4;
       }
       if (($256 | 0) > 0 | ($256 | 0) == 0 & $255 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
        $266 = ___errno_location() | 0;
        HEAP32[$266 >> 2] = 34;
        $$0 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break L4;
       }
       $270 = $emin$0$ph + -106 | 0;
       $272 = (($270 | 0) < 0) << 31 >> 31;
       if (($256 | 0) < ($272 | 0) | ($256 | 0) == ($272 | 0) & $255 >>> 0 < $270 >>> 0) {
        $279 = ___errno_location() | 0;
        HEAP32[$279 >> 2] = 34;
        $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break L4;
       }
       if (($x$3$lcssa$i | 0) > -1) {
        $288 = $255;
        $289 = $256;
        $x$419$i = $x$3$lcssa$i;
        $y$320$i = $y$0$i$lcssa;
        while (1) {
         $283 = !($y$320$i >= .5);
         $287 = $283 & 1 | $x$419$i << 1;
         $x$5$i = $287 ^ 1;
         $y$4$i = $y$320$i + ($283 ? $y$320$i : $y$320$i + -1.0);
         $290 = _i64Add($288 | 0, $289 | 0, -1, -1) | 0;
         $291 = tempRet0;
         if (($287 | 0) > -1) {
          $288 = $290;
          $289 = $291;
          $x$419$i = $x$5$i;
          $y$320$i = $y$4$i;
         } else {
          $297 = $290;
          $298 = $291;
          $x$4$lcssa$i = $x$5$i;
          $y$3$lcssa$i = $y$4$i;
          break;
         }
        }
       } else {
        $297 = $255;
        $298 = $256;
        $x$4$lcssa$i = $x$3$lcssa$i;
        $y$3$lcssa$i = $y$0$i$lcssa;
       }
       $295 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0;
       $299 = _i64Add($297 | 0, $298 | 0, $295 | 0, tempRet0 | 0) | 0;
       $300 = tempRet0;
       if (0 > ($300 | 0) | 0 == ($300 | 0) & $bits$0$ph >>> 0 > $299 >>> 0) if (($299 | 0) < 0) {
        $$0710$i = 0;
        label = 127;
       } else {
        $$07$i = $299;
        label = 125;
       } else {
        $$07$i = $bits$0$ph;
        label = 125;
       }
       if ((label | 0) == 125) if (($$07$i | 0) < 53) {
        $$0710$i = $$07$i;
        label = 127;
       } else {
        $$0711$i = $$07$i;
        $$pre$phi43$iZ2D = +($sign$0 | 0);
        $bias$0$i = 0.0;
       }
       if ((label | 0) == 127) {
        $310 = +($sign$0 | 0);
        $$0711$i = $$0710$i;
        $$pre$phi43$iZ2D = $310;
        $bias$0$i = +_copysignl(+_scalbn(1.0, 84 - $$0710$i | 0), $310);
       }
       $or$cond9$i = ($x$4$lcssa$i & 1 | 0) == 0 & ($y$3$lcssa$i != 0.0 & ($$0711$i | 0) < 32);
       $322 = $$pre$phi43$iZ2D * ($or$cond9$i ? 0.0 : $y$3$lcssa$i) + ($bias$0$i + $$pre$phi43$iZ2D * +((($or$cond9$i & 1) + $x$4$lcssa$i | 0) >>> 0)) - $bias$0$i;
       if (!($322 != 0.0)) {
        $324 = ___errno_location() | 0;
        HEAP32[$324 >> 2] = 34;
       }
       $$0 = +_scalbnl($322, $297);
       break L4;
      } else $c$6 = $c$5; while (0);
      $sum$i = $emin$0$ph + $bits$0$ph | 0;
      $330 = 0 - $sum$i | 0;
      $$010$i = $c$6;
      $gotdig$0$i12 = 0;
      L184 : while (1) {
       switch ($$010$i | 0) {
       case 46:
        {
         $gotdig$0$i12$lcssa275 = $gotdig$0$i12;
         label = 138;
         break L184;
         break;
        }
       case 48:
        break;
       default:
        {
         $$2$i = $$010$i;
         $699 = 0;
         $700 = 0;
         $gotdig$2$i13 = $gotdig$0$i12;
         $gotrad$0$i14 = 0;
         break L184;
        }
       }
       $331 = HEAP32[$0 >> 2] | 0;
       if ($331 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $331 + 1;
        $$010$i = HEAPU8[$331 >> 0] | 0;
        $gotdig$0$i12 = 1;
        continue;
       } else {
        $$010$i = ___shgetc($f) | 0;
        $gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label | 0) == 138) {
       $338 = HEAP32[$0 >> 2] | 0;
       if ($338 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $338 + 1;
        $$111$ph$i = HEAPU8[$338 >> 0] | 0;
       } else $$111$ph$i = ___shgetc($f) | 0;
       if (($$111$ph$i | 0) == 48) {
        $346 = 0;
        $347 = 0;
        while (1) {
         $348 = _i64Add($346 | 0, $347 | 0, -1, -1) | 0;
         $349 = tempRet0;
         $350 = HEAP32[$0 >> 2] | 0;
         if ($350 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
          HEAP32[$0 >> 2] = $350 + 1;
          $$111$be$i = HEAPU8[$350 >> 0] | 0;
         } else $$111$be$i = ___shgetc($f) | 0;
         if (($$111$be$i | 0) == 48) {
          $346 = $348;
          $347 = $349;
         } else {
          $$2$i = $$111$be$i;
          $699 = $348;
          $700 = $349;
          $gotdig$2$i13 = 1;
          $gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;
        $699 = 0;
        $700 = 0;
        $gotdig$2$i13 = $gotdig$0$i12$lcssa275;
        $gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i >> 2] = 0;
      $358 = $$2$i + -48 | 0;
      $360 = ($$2$i | 0) == 46;
      L203 : do if ($360 | $358 >>> 0 < 10) {
       $362 = $x$i + 496 | 0;
       $$3112$i = $$2$i;
       $365 = 0;
       $366 = 0;
       $701 = $360;
       $702 = $358;
       $703 = $699;
       $704 = $700;
       $gotdig$3108$i = $gotdig$2$i13;
       $gotrad$1109$i = $gotrad$0$i14;
       $j$0111$i = 0;
       $k$0110$i = 0;
       $lnz$0107$i = 0;
       L205 : while (1) {
        do if ($701) if (!$gotrad$1109$i) {
         $705 = $365;
         $706 = $366;
         $707 = $365;
         $708 = $366;
         $gotdig$4$i = $gotdig$3108$i;
         $gotrad$2$i = 1;
         $j$2$i = $j$0111$i;
         $k$2$i = $k$0110$i;
         $lnz$2$i = $lnz$0107$i;
        } else {
         $709 = $703;
         $710 = $704;
         $711 = $365;
         $712 = $366;
         $gotdig$3108$i$lcssa = $gotdig$3108$i;
         $j$0111$i$lcssa = $j$0111$i;
         $k$0110$i$lcssa = $k$0110$i;
         $lnz$0107$i$lcssa = $lnz$0107$i;
         break L205;
        } else {
         $367 = _i64Add($365 | 0, $366 | 0, 1, 0) | 0;
         $368 = tempRet0;
         $369 = ($$3112$i | 0) != 48;
         if (($k$0110$i | 0) >= 125) {
          if (!$369) {
           $705 = $703;
           $706 = $704;
           $707 = $367;
           $708 = $368;
           $gotdig$4$i = $gotdig$3108$i;
           $gotrad$2$i = $gotrad$1109$i;
           $j$2$i = $j$0111$i;
           $k$2$i = $k$0110$i;
           $lnz$2$i = $lnz$0107$i;
           break;
          }
          HEAP32[$362 >> 2] = HEAP32[$362 >> 2] | 1;
          $705 = $703;
          $706 = $704;
          $707 = $367;
          $708 = $368;
          $gotdig$4$i = $gotdig$3108$i;
          $gotrad$2$i = $gotrad$1109$i;
          $j$2$i = $j$0111$i;
          $k$2$i = $k$0110$i;
          $lnz$2$i = $lnz$0107$i;
          break;
         }
         $371 = $x$i + ($k$0110$i << 2) | 0;
         if (!$j$0111$i) $storemerge$i = $702; else $storemerge$i = $$3112$i + -48 + ((HEAP32[$371 >> 2] | 0) * 10 | 0) | 0;
         HEAP32[$371 >> 2] = $storemerge$i;
         $376 = $j$0111$i + 1 | 0;
         $377 = ($376 | 0) == 9;
         $705 = $703;
         $706 = $704;
         $707 = $367;
         $708 = $368;
         $gotdig$4$i = 1;
         $gotrad$2$i = $gotrad$1109$i;
         $j$2$i = $377 ? 0 : $376;
         $k$2$i = ($377 & 1) + $k$0110$i | 0;
         $lnz$2$i = $369 ? $367 : $lnz$0107$i;
        } while (0);
        $381 = HEAP32[$0 >> 2] | 0;
        if ($381 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $381 + 1;
         $$3$be$i = HEAPU8[$381 >> 0] | 0;
        } else $$3$be$i = ___shgetc($f) | 0;
        $702 = $$3$be$i + -48 | 0;
        $701 = ($$3$be$i | 0) == 46;
        if (!($701 | $702 >>> 0 < 10)) {
         $$3$lcssa$i = $$3$be$i;
         $393 = $705;
         $394 = $707;
         $396 = $706;
         $397 = $708;
         $gotdig$3$lcssa$i = $gotdig$4$i;
         $gotrad$1$lcssa$i = $gotrad$2$i;
         $j$0$lcssa$i = $j$2$i;
         $k$0$lcssa$i = $k$2$i;
         $lnz$0$lcssa$i = $lnz$2$i;
         label = 161;
         break L203;
        } else {
         $$3112$i = $$3$be$i;
         $365 = $707;
         $366 = $708;
         $703 = $705;
         $704 = $706;
         $gotdig$3108$i = $gotdig$4$i;
         $gotrad$1109$i = $gotrad$2$i;
         $j$0111$i = $j$2$i;
         $k$0110$i = $k$2$i;
         $lnz$0107$i = $lnz$2$i;
        }
       }
       $713 = $711;
       $714 = $712;
       $715 = $709;
       $716 = $710;
       $717 = ($gotdig$3108$i$lcssa | 0) != 0;
       $j$077$i = $j$0111$i$lcssa;
       $k$073$i = $k$0110$i$lcssa;
       $lnz$067$i = $lnz$0107$i$lcssa;
       label = 169;
      } else {
       $$3$lcssa$i = $$2$i;
       $393 = $699;
       $394 = 0;
       $396 = $700;
       $397 = 0;
       $gotdig$3$lcssa$i = $gotdig$2$i13;
       $gotrad$1$lcssa$i = $gotrad$0$i14;
       $j$0$lcssa$i = 0;
       $k$0$lcssa$i = 0;
       $lnz$0$lcssa$i = 0;
       label = 161;
      } while (0);
      do if ((label | 0) == 161) {
       $392 = ($gotrad$1$lcssa$i | 0) == 0;
       $395 = $392 ? $394 : $393;
       $398 = $392 ? $397 : $396;
       $399 = ($gotdig$3$lcssa$i | 0) != 0;
       if (!(($$3$lcssa$i | 32 | 0) == 101 & $399)) if (($$3$lcssa$i | 0) > -1) {
        $713 = $394;
        $714 = $397;
        $715 = $395;
        $716 = $398;
        $717 = $399;
        $j$077$i = $j$0$lcssa$i;
        $k$073$i = $k$0$lcssa$i;
        $lnz$067$i = $lnz$0$lcssa$i;
        label = 169;
        break;
       } else {
        $718 = $394;
        $719 = $397;
        $720 = $399;
        $721 = $395;
        $722 = $398;
        $j$076$i = $j$0$lcssa$i;
        $k$072$i = $k$0$lcssa$i;
        $lnz$066$i = $lnz$0$lcssa$i;
        label = 171;
        break;
       }
       $402 = _scanexp($f, $pok) | 0;
       $403 = tempRet0;
       if (($402 | 0) == 0 & ($403 | 0) == -2147483648) {
        if (!$pok) {
         ___shlim($f, 0);
         $$1$i = 0.0;
         break;
        }
        if (!(HEAP32[$1 >> 2] | 0)) {
         $412 = 0;
         $413 = 0;
        } else {
         HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
         $412 = 0;
         $413 = 0;
        }
       } else {
        $412 = $402;
        $413 = $403;
       }
       $414 = _i64Add($412 | 0, $413 | 0, $395 | 0, $398 | 0) | 0;
       $426 = $414;
       $428 = $394;
       $429 = tempRet0;
       $431 = $397;
       $j$075$i = $j$0$lcssa$i;
       $k$071$i = $k$0$lcssa$i;
       $lnz$065$i = $lnz$0$lcssa$i;
       label = 173;
      } while (0);
      if ((label | 0) == 169) if (!(HEAP32[$1 >> 2] | 0)) {
       $718 = $713;
       $719 = $714;
       $720 = $717;
       $721 = $715;
       $722 = $716;
       $j$076$i = $j$077$i;
       $k$072$i = $k$073$i;
       $lnz$066$i = $lnz$067$i;
       label = 171;
      } else {
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       if ($717) {
        $426 = $715;
        $428 = $713;
        $429 = $716;
        $431 = $714;
        $j$075$i = $j$077$i;
        $k$071$i = $k$073$i;
        $lnz$065$i = $lnz$067$i;
        label = 173;
       } else label = 172;
      }
      if ((label | 0) == 171) if ($720) {
       $426 = $721;
       $428 = $718;
       $429 = $722;
       $431 = $719;
       $j$075$i = $j$076$i;
       $k$071$i = $k$072$i;
       $lnz$065$i = $lnz$066$i;
       label = 173;
      } else label = 172;
      do if ((label | 0) == 172) {
       $421 = ___errno_location() | 0;
       HEAP32[$421 >> 2] = 22;
       ___shlim($f, 0);
       $$1$i = 0.0;
      } else if ((label | 0) == 173) {
       $422 = HEAP32[$x$i >> 2] | 0;
       if (!$422) {
        $$1$i = +($sign$0 | 0) * 0.0;
        break;
       }
       if ((($431 | 0) < 0 | ($431 | 0) == 0 & $428 >>> 0 < 10) & (($426 | 0) == ($428 | 0) & ($429 | 0) == ($431 | 0))) if ($bits$0$ph >>> 0 > 30 | ($422 >>> $bits$0$ph | 0) == 0) {
        $$1$i = +($sign$0 | 0) * +($422 >>> 0);
        break;
       }
       $444 = ($emin$0$ph | 0) / -2 | 0;
       $446 = (($444 | 0) < 0) << 31 >> 31;
       if (($429 | 0) > ($446 | 0) | ($429 | 0) == ($446 | 0) & $426 >>> 0 > $444 >>> 0) {
        $452 = ___errno_location() | 0;
        HEAP32[$452 >> 2] = 34;
        $$1$i = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break;
       }
       $456 = $emin$0$ph + -106 | 0;
       $458 = (($456 | 0) < 0) << 31 >> 31;
       if (($429 | 0) < ($458 | 0) | ($429 | 0) == ($458 | 0) & $426 >>> 0 < $456 >>> 0) {
        $464 = ___errno_location() | 0;
        HEAP32[$464 >> 2] = 34;
        $$1$i = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break;
       }
       if (!$j$075$i) $k$3$i = $k$071$i; else {
        if (($j$075$i | 0) < 9) {
         $470 = $x$i + ($k$071$i << 2) | 0;
         $472 = HEAP32[$470 >> 2] | 0;
         $j$3102$i = $j$075$i;
         while (1) {
          $471 = $472 * 10 | 0;
          $j$3102$i = $j$3102$i + 1 | 0;
          if (($j$3102$i | 0) == 9) {
           $$lcssa267 = $471;
           break;
          } else $472 = $471;
         }
         HEAP32[$470 >> 2] = $$lcssa267;
        }
        $k$3$i = $k$071$i + 1 | 0;
       }
       if (($lnz$065$i | 0) < 9) if (($lnz$065$i | 0) <= ($426 | 0) & ($426 | 0) < 18) {
        if (($426 | 0) == 9) {
         $$1$i = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0);
         break;
        }
        if (($426 | 0) < 9) {
         $$1$i = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0) / +(HEAP32[2340 + (8 - $426 << 2) >> 2] | 0);
         break;
        }
        $493 = $bits$0$ph + 27 + (Math_imul($426, -3) | 0) | 0;
        $$pre$i17 = HEAP32[$x$i >> 2] | 0;
        if (($493 | 0) > 30 | ($$pre$i17 >>> $493 | 0) == 0) {
         $$1$i = +($sign$0 | 0) * +($$pre$i17 >>> 0) * +(HEAP32[2340 + ($426 + -10 << 2) >> 2] | 0);
         break;
        }
       }
       $505 = ($426 | 0) % 9 | 0;
       if (!$505) {
        $a$2$ph46$i = 0;
        $e2$0$ph$i = 0;
        $rp$2$ph44$i = $426;
        $z$1$ph45$i = $k$3$i;
       } else {
        $509 = ($426 | 0) > -1 ? $505 : $505 + 9 | 0;
        $512 = HEAP32[2340 + (8 - $509 << 2) >> 2] | 0;
        if (!$k$3$i) {
         $a$0$lcssa161$i = 0;
         $rp$0$lcssa162$i = $426;
         $z$0$i = 0;
        } else {
         $514 = 1e9 / ($512 | 0) | 0;
         $a$093$i = 0;
         $carry$095$i = 0;
         $k$494$i = 0;
         $rp$092$i = $426;
         while (1) {
          $515 = $x$i + ($k$494$i << 2) | 0;
          $516 = HEAP32[$515 >> 2] | 0;
          $519 = (($516 >>> 0) / ($512 >>> 0) | 0) + $carry$095$i | 0;
          HEAP32[$515 >> 2] = $519;
          $520 = Math_imul(($516 >>> 0) % ($512 >>> 0) | 0, $514) | 0;
          $or$cond21$i = ($k$494$i | 0) == ($a$093$i | 0) & ($519 | 0) == 0;
          $k$494$i = $k$494$i + 1 | 0;
          $rp$1$i18 = $or$cond21$i ? $rp$092$i + -9 | 0 : $rp$092$i;
          $a$1$i = $or$cond21$i ? $k$494$i & 127 : $a$093$i;
          if (($k$494$i | 0) == ($k$3$i | 0)) {
           $$lcssa266 = $520;
           $a$1$i$lcssa = $a$1$i;
           $rp$1$i18$lcssa = $rp$1$i18;
           break;
          } else {
           $a$093$i = $a$1$i;
           $carry$095$i = $520;
           $rp$092$i = $rp$1$i18;
          }
         }
         if (!$$lcssa266) {
          $a$0$lcssa161$i = $a$1$i$lcssa;
          $rp$0$lcssa162$i = $rp$1$i18$lcssa;
          $z$0$i = $k$3$i;
         } else {
          HEAP32[$x$i + ($k$3$i << 2) >> 2] = $$lcssa266;
          $a$0$lcssa161$i = $a$1$i$lcssa;
          $rp$0$lcssa162$i = $rp$1$i18$lcssa;
          $z$0$i = $k$3$i + 1 | 0;
         }
        }
        $a$2$ph46$i = $a$0$lcssa161$i;
        $e2$0$ph$i = 0;
        $rp$2$ph44$i = 9 - $509 + $rp$0$lcssa162$i | 0;
        $z$1$ph45$i = $z$0$i;
       }
       L284 : while (1) {
        $532 = ($rp$2$ph44$i | 0) < 18;
        $533 = ($rp$2$ph44$i | 0) == 18;
        $534 = $x$i + ($a$2$ph46$i << 2) | 0;
        $e2$0$i19 = $e2$0$ph$i;
        $z$1$i = $z$1$ph45$i;
        while (1) {
         if (!$532) {
          if (!$533) {
           $a$4$ph$i = $a$2$ph46$i;
           $e2$1$ph$i = $e2$0$i19;
           $rp$4$ph42$i = $rp$2$ph44$i;
           $z$6$ph$i = $z$1$i;
           break L284;
          }
          if ((HEAP32[$534 >> 2] | 0) >>> 0 >= 9007199) {
           $a$4$ph$i = $a$2$ph46$i;
           $e2$1$ph$i = $e2$0$i19;
           $rp$4$ph42$i = 18;
           $z$6$ph$i = $z$1$i;
           break L284;
          }
         }
         $carry1$0$i = 0;
         $k$5$in$i = $z$1$i + 127 | 0;
         $z$2$i = $z$1$i;
         while (1) {
          $k$5$i = $k$5$in$i & 127;
          $538 = $x$i + ($k$5$i << 2) | 0;
          $540 = _bitshift64Shl(HEAP32[$538 >> 2] | 0, 0, 29) | 0;
          $542 = _i64Add($540 | 0, tempRet0 | 0, $carry1$0$i | 0, 0) | 0;
          $543 = tempRet0;
          if ($543 >>> 0 > 0 | ($543 | 0) == 0 & $542 >>> 0 > 1e9) {
           $549 = ___udivdi3($542 | 0, $543 | 0, 1e9, 0) | 0;
           $551 = ___uremdi3($542 | 0, $543 | 0, 1e9, 0) | 0;
           $$sink$off0$i = $551;
           $carry1$1$i = $549;
          } else {
           $$sink$off0$i = $542;
           $carry1$1$i = 0;
          }
          HEAP32[$538 >> 2] = $$sink$off0$i;
          $556 = ($k$5$i | 0) == ($a$2$ph46$i | 0);
          $z$3$i = ($k$5$i | 0) != ($z$2$i + 127 & 127 | 0) | $556 ? $z$2$i : ($$sink$off0$i | 0) == 0 ? $k$5$i : $z$2$i;
          if ($556) {
           $carry1$1$i$lcssa = $carry1$1$i;
           $z$3$i$lcssa = $z$3$i;
           break;
          } else {
           $carry1$0$i = $carry1$1$i;
           $k$5$in$i = $k$5$i + -1 | 0;
           $z$2$i = $z$3$i;
          }
         }
         $559 = $e2$0$i19 + -29 | 0;
         if (!$carry1$1$i$lcssa) {
          $e2$0$i19 = $559;
          $z$1$i = $z$3$i$lcssa;
         } else {
          $$lcssa265 = $559;
          $carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;
          $z$3$i$lcssa$lcssa = $z$3$i$lcssa;
          break;
         }
        }
        $563 = $a$2$ph46$i + 127 & 127;
        if (($563 | 0) == ($z$3$i$lcssa$lcssa | 0)) {
         $566 = $z$3$i$lcssa$lcssa + 127 & 127;
         $571 = $x$i + (($z$3$i$lcssa$lcssa + 126 & 127) << 2) | 0;
         HEAP32[$571 >> 2] = HEAP32[$571 >> 2] | HEAP32[$x$i + ($566 << 2) >> 2];
         $z$4$i = $566;
        } else $z$4$i = $z$3$i$lcssa$lcssa;
        HEAP32[$x$i + ($563 << 2) >> 2] = $carry1$1$i$lcssa$lcssa;
        $a$2$ph46$i = $563;
        $e2$0$ph$i = $$lcssa265;
        $rp$2$ph44$i = $rp$2$ph44$i + 9 | 0;
        $z$1$ph45$i = $z$4$i;
       }
       L302 : while (1) {
        $602 = $z$6$ph$i + 1 & 127;
        $608 = $x$i + (($z$6$ph$i + 127 & 127) << 2) | 0;
        $a$4$ph167$i = $a$4$ph$i;
        $e2$1$ph166$i = $e2$1$ph$i;
        $rp$4$ph$i = $rp$4$ph42$i;
        while (1) {
         $609 = ($rp$4$ph$i | 0) == 18;
         $$24$i = ($rp$4$ph$i | 0) > 27 ? 9 : 1;
         $$not$i = $609 ^ 1;
         $a$4$i = $a$4$ph167$i;
         $e2$1$i = $e2$1$ph166$i;
         while (1) {
          $575 = $a$4$i & 127;
          $576 = ($575 | 0) == ($z$6$ph$i | 0);
          do if ($576) label = 219; else {
           $578 = HEAP32[$x$i + ($575 << 2) >> 2] | 0;
           if ($578 >>> 0 < 9007199) {
            label = 219;
            break;
           }
           if ($578 >>> 0 > 9007199) break;
           $582 = $a$4$i + 1 & 127;
           if (($582 | 0) == ($z$6$ph$i | 0)) {
            label = 219;
            break;
           }
           $690 = HEAP32[$x$i + ($582 << 2) >> 2] | 0;
           if ($690 >>> 0 < 254740991) {
            label = 219;
            break;
           }
           if (!($690 >>> 0 > 254740991 | $$not$i)) {
            $616 = $575;
            $a$4$i251 = $a$4$i;
            $e2$1$i248 = $e2$1$i;
            $z$10$i = $z$6$ph$i;
            break L302;
           }
          } while (0);
          if ((label | 0) == 219) {
           label = 0;
           if ($609) {
            label = 220;
            break L302;
           }
          }
          $584 = $e2$1$i + $$24$i | 0;
          if (($a$4$i | 0) == ($z$6$ph$i | 0)) {
           $a$4$i = $z$6$ph$i;
           $e2$1$i = $584;
          } else {
           $$lcssa258 = $584;
           $a$4$i$lcssa250 = $a$4$i;
           break;
          }
         }
         $587 = (1 << $$24$i) + -1 | 0;
         $588 = 1e9 >>> $$24$i;
         $a$586$i = $a$4$i$lcssa250;
         $carry4$089$i = 0;
         $k$687$i = $a$4$i$lcssa250;
         $rp$585$i = $rp$4$ph$i;
         while (1) {
          $589 = $x$i + ($k$687$i << 2) | 0;
          $590 = HEAP32[$589 >> 2] | 0;
          $593 = ($590 >>> $$24$i) + $carry4$089$i | 0;
          HEAP32[$589 >> 2] = $593;
          $594 = Math_imul($590 & $587, $588) | 0;
          $or$cond25$i = ($k$687$i | 0) == ($a$586$i | 0) & ($593 | 0) == 0;
          $k$687$i = $k$687$i + 1 & 127;
          $rp$6$i = $or$cond25$i ? $rp$585$i + -9 | 0 : $rp$585$i;
          $a$6$i = $or$cond25$i ? $k$687$i : $a$586$i;
          if (($k$687$i | 0) == ($z$6$ph$i | 0)) {
           $$lcssa259 = $594;
           $a$6$i$lcssa = $a$6$i;
           $rp$6$i$lcssa = $rp$6$i;
           break;
          } else {
           $a$586$i = $a$6$i;
           $carry4$089$i = $594;
           $rp$585$i = $rp$6$i;
          }
         }
         if (!$$lcssa259) {
          $a$4$ph167$i = $a$6$i$lcssa;
          $e2$1$ph166$i = $$lcssa258;
          $rp$4$ph$i = $rp$6$i$lcssa;
          continue;
         }
         if (($602 | 0) != ($a$6$i$lcssa | 0)) {
          $$lcssa258$lcssa = $$lcssa258;
          $$lcssa259$lcssa = $$lcssa259;
          $a$6$i$lcssa$lcssa = $a$6$i$lcssa;
          $rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
          break;
         }
         HEAP32[$608 >> 2] = HEAP32[$608 >> 2] | 1;
         $a$4$ph167$i = $a$6$i$lcssa;
         $e2$1$ph166$i = $$lcssa258;
         $rp$4$ph$i = $rp$6$i$lcssa;
        }
        HEAP32[$x$i + ($z$6$ph$i << 2) >> 2] = $$lcssa259$lcssa;
        $a$4$ph$i = $a$6$i$lcssa$lcssa;
        $e2$1$ph$i = $$lcssa258$lcssa;
        $rp$4$ph42$i = $rp$6$i$lcssa$lcssa;
        $z$6$ph$i = $602;
       }
       if ((label | 0) == 220) if ($576) {
        HEAP32[$x$i + ($602 + -1 << 2) >> 2] = 0;
        $616 = $z$6$ph$i;
        $a$4$i251 = $a$4$i;
        $e2$1$i248 = $e2$1$i;
        $z$10$i = $602;
       } else {
        $616 = $575;
        $a$4$i251 = $a$4$i;
        $e2$1$i248 = $e2$1$i;
        $z$10$i = $z$6$ph$i;
       }
       $618 = +((HEAP32[$x$i + ($616 << 2) >> 2] | 0) >>> 0);
       $620 = $a$4$i251 + 1 & 127;
       if (($620 | 0) == ($z$10$i | 0)) {
        $679 = $a$4$i251 + 2 & 127;
        HEAP32[$x$i + ($679 + -1 << 2) >> 2] = 0;
        $z$10$1$i = $679;
       } else $z$10$1$i = $z$10$i;
       $642 = +($sign$0 | 0);
       $624 = $642 * ($618 * 1.0e9 + +((HEAP32[$x$i + ($620 << 2) >> 2] | 0) >>> 0));
       $662 = $e2$1$i248 + 53 | 0;
       $668 = $662 - $emin$0$ph | 0;
       $669 = ($668 | 0) < ($bits$0$ph | 0);
       $denormal$0$i = $669 & 1;
       $$012$i = $669 ? (($668 | 0) < 0 ? 0 : $668) : $bits$0$ph;
       if (($$012$i | 0) < 53) {
        $625 = +_copysignl(+_scalbn(1.0, 105 - $$012$i | 0), $624);
        $628 = +_fmodl($624, +_scalbn(1.0, 53 - $$012$i | 0));
        $bias$0$i25 = $625;
        $frac$0$i = $628;
        $y$1$i24 = $625 + ($624 - $628);
       } else {
        $bias$0$i25 = 0.0;
        $frac$0$i = 0.0;
        $y$1$i24 = $624;
       }
       $632 = $a$4$i251 + 2 & 127;
       do if (($632 | 0) == ($z$10$1$i | 0)) $frac$3$i = $frac$0$i; else {
        $635 = HEAP32[$x$i + ($632 << 2) >> 2] | 0;
        do if ($635 >>> 0 < 5e8) {
         if (!$635) if (($a$4$i251 + 3 & 127 | 0) == ($z$10$1$i | 0)) {
          $frac$1$i = $frac$0$i;
          break;
         }
         $frac$1$i = $642 * .25 + $frac$0$i;
        } else {
         if ($635 >>> 0 > 5e8) {
          $frac$1$i = $642 * .75 + $frac$0$i;
          break;
         }
         if (($a$4$i251 + 3 & 127 | 0) == ($z$10$1$i | 0)) {
          $frac$1$i = $642 * .5 + $frac$0$i;
          break;
         } else {
          $frac$1$i = $642 * .75 + $frac$0$i;
          break;
         }
        } while (0);
        if ((53 - $$012$i | 0) <= 1) {
         $frac$3$i = $frac$1$i;
         break;
        }
        if (+_fmodl($frac$1$i, 1.0) != 0.0) {
         $frac$3$i = $frac$1$i;
         break;
        }
        $frac$3$i = $frac$1$i + 1.0;
       } while (0);
       $660 = $y$1$i24 + $frac$3$i - $bias$0$i25;
       do if (($662 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
        if (!(+Math_abs(+$660) >= 9007199254740992.0)) {
         $denormal$2$i = $denormal$0$i;
         $e2$3$i = $e2$1$i248;
         $y$2$i26 = $660;
        } else {
         $denormal$2$i = $669 & ($$012$i | 0) == ($668 | 0) ? 0 : $denormal$0$i;
         $e2$3$i = $e2$1$i248 + 1 | 0;
         $y$2$i26 = $660 * .5;
        }
        if (($e2$3$i + 50 | 0) <= ($330 | 0)) if (!($frac$3$i != 0.0 & ($denormal$2$i | 0) != 0)) {
         $e2$4$i = $e2$3$i;
         $y$3$i = $y$2$i26;
         break;
        }
        $676 = ___errno_location() | 0;
        HEAP32[$676 >> 2] = 34;
        $e2$4$i = $e2$3$i;
        $y$3$i = $y$2$i26;
       } else {
        $e2$4$i = $e2$1$i248;
        $y$3$i = $660;
       } while (0);
       $$1$i = +_scalbnl($y$3$i, $e2$4$i);
      } while (0);
      $$0 = $$1$i;
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$1 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      $113 = ___errno_location() | 0;
      HEAP32[$113 >> 2] = 22;
      ___shlim($f, 0);
      $$0 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $42 = (HEAP32[$1 >> 2] | 0) == 0;
   if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   if (($pok | 0) != 0 & $i$0$lcssa >>> 0 > 3) {
    $i$1 = $i$0$lcssa;
    do {
     if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $i$1 = $i$1 + -1 | 0;
    } while ($i$1 >>> 0 > 3);
   }
  }
  $$0 = +($sign$0 | 0) * inf;
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i34$i = 0, $$0$i$i$i41$i = 0, $$0$i$i$i51$i = 0, $$0$i$i$i60$i = 0, $$0$i$i$i70$i = 0, $$13$i$ph = 0, $$3 = 0, $$4$i = 0, $$414$i = 0, $$first = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $128 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $150 = 0, $152 = 0, $154 = 0, $16 = 0, $162 = 0, $164 = 0, $165 = 0, $167 = 0, $178 = 0, $180 = 0, $181 = 0, $183 = 0, $186 = 0, $189 = 0, $198 = 0, $2 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $208 = 0, $209 = 0, $216 = 0, $218 = 0, $220 = 0, $228 = 0, $23 = 0, $230 = 0, $231 = 0, $233 = 0, $244 = 0, $246 = 0, $247 = 0, $249 = 0, $252 = 0, $255 = 0, $264 = 0, $267 = 0, $272 = 0, $273 = 0, $274 = 0, $276 = 0, $277 = 0, $278 = 0, $28 = 0, $285 = 0, $287 = 0, $289 = 0, $297 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $302 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $321 = 0, $324 = 0, $333 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $342 = 0, $344 = 0, $346 = 0, $35 = 0, $354 = 0, $356 = 0, $357 = 0, $359 = 0, $37 = 0, $370 = 0, $372 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $390 = 0, $392 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $401 = 0, $402 = 0, $403 = 0, $410 = 0, $412 = 0, $414 = 0, $42 = 0, $422 = 0, $424 = 0, $425 = 0, $427 = 0, $438 = 0, $440 = 0, $441 = 0, $443 = 0, $446 = 0, $449 = 0, $458 = 0, $463 = 0, $465 = 0, $466 = 0, $468 = 0, $472 = 0, $473 = 0, $478 = 0, $483 = 0, $486 = 0, $489 = 0, $49 = 0, $491 = 0, $495 = 0, $496 = 0, $498 = 0, $499 = 0, $5 = 0, $506 = 0, $507 = 0, $508 = 0, $51 = 0, $510 = 0, $514 = 0, $516 = 0, $52 = 0, $526 = 0, $527 = 0, $528 = 0, $530 = 0, $531 = 0, $533 = 0, $534 = 0, $535 = 0, $542 = 0, $543 = 0, $544 = 0, $546 = 0, $55 = 0, $550 = 0, $552 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $567 = 0, $57 = 0, $576 = 0, $581 = 0, $582 = 0, $585 = 0, $593 = 0, $594 = 0, $596 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $603 = 0, $605 = 0, $61 = 0, $611 = 0, $613 = 0, $620 = 0, $622 = 0, $623 = 0, $625 = 0, $628 = 0, $631 = 0, $632 = 0, $638 = 0, $64 = 0, $640 = 0, $644 = 0, $646 = 0, $653 = 0, $654 = 0, $655 = 0, $657 = 0, $659 = 0, $661 = 0, $671 = 0, $676 = 0, $678 = 0, $679 = 0, $686 = 0, $687 = 0, $688 = 0, $690 = 0, $692 = 0, $694 = 0, $7 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $St$0$off0$i = 0, $__i$0$i$i$i$i$i$i$i = 0, $__i$0$i$i$i$i$i$i$i$i = 0, $__i$0$i$i1$i$i$i$i$i = 0, $__i$0$i$i1$i$i$i$i$i$i = 0, $__v$i$i69$i = 0, $cv$i = 0, $name$i17 = 0, $pop_subs$0$off0$i$ph = 0, $t0$0$i = 0, $t0$0$i19 = 0, $t0$1$i = 0, $t0$2$i = 0, $t0$2$i$lcssa187 = 0, $t0$2$i$lcssa188 = 0, $t0$2$i$lcssa189 = 0, $t0$2$i$ph = 0, $t0$2$i193 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i69$i = sp + 188 | 0;
 $cv$i = sp + 184 | 0;
 $name$i17 = sp + 172 | 0;
 $0 = sp + 160 | 0;
 $1 = sp + 144 | 0;
 $2 = sp + 140 | 0;
 $3 = sp + 128 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 108 | 0;
 $6 = sp + 96 | 0;
 $7 = sp + 64 | 0;
 $8 = sp + 56 | 0;
 $9 = sp + 40 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 8 | 0;
 $13 = sp;
 $14 = sp + 80 | 0;
 $15 = sp + 60 | 0;
 $16 = $last;
 L1 : do if (($16 - $first | 0) > 1) {
  $$first = (HEAP8[$first >> 0] | 0) == 76 ? $first + 1 | 0 : $first;
  $23 = HEAP8[$$first >> 0] | 0;
  switch ($23 << 24 >> 24 | 0) {
  case 78:
   {
    L46 : do if (($$first | 0) == ($last | 0)) $$414$i = $last; else if ($23 << 24 >> 24 == 78) {
     $28 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($$first + 1 | 0, $last, $cv$i) | 0;
     L49 : do if (($28 | 0) != ($last | 0)) {
      $30 = $db + 52 | 0;
      HEAP32[$30 >> 2] = 0;
      switch (HEAP8[$28 >> 0] | 0) {
      case 82:
       {
        HEAP32[$30 >> 2] = 1;
        $t0$0$i19 = $28 + 1 | 0;
        break;
       }
      case 79:
       {
        HEAP32[$30 >> 2] = 2;
        $t0$0$i19 = $28 + 1 | 0;
        break;
       }
      default:
       $t0$0$i19 = $28;
      }
      $34 = $db + 4 | 0;
      $35 = HEAP32[$34 >> 2] | 0;
      $37 = HEAP32[$db + 8 >> 2] | 0;
      $39 = $37;
      if ($35 >>> 0 < $37 >>> 0) {
       HEAP32[$35 >> 2] = 0;
       HEAP32[$35 + 4 >> 2] = 0;
       HEAP32[$35 + 8 >> 2] = 0;
       HEAP32[$35 + 12 >> 2] = 0;
       HEAP32[$35 + 16 >> 2] = 0;
       HEAP32[$35 + 20 >> 2] = 0;
       $__i$0$i$i$i$i$i$i$i = 0;
       while (1) {
        if (($__i$0$i$i$i$i$i$i$i | 0) == 3) break;
        HEAP32[$35 + ($__i$0$i$i$i$i$i$i$i << 2) >> 2] = 0;
        $__i$0$i$i$i$i$i$i$i = $__i$0$i$i$i$i$i$i$i + 1 | 0;
       }
       $42 = $35 + 12 | 0;
       HEAP32[$42 >> 2] = 0;
       HEAP32[$42 + 4 >> 2] = 0;
       HEAP32[$42 + 8 >> 2] = 0;
       $__i$0$i$i1$i$i$i$i$i = 0;
       while (1) {
        if (($__i$0$i$i1$i$i$i$i$i | 0) == 3) break;
        HEAP32[$42 + ($__i$0$i$i1$i$i$i$i$i << 2) >> 2] = 0;
        $__i$0$i$i1$i$i$i$i$i = $__i$0$i$i1$i$i$i$i$i + 1 | 0;
       }
       HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 24;
      } else {
       $49 = HEAP32[$db >> 2] | 0;
       $51 = ($35 - $49 | 0) / 24 | 0;
       $52 = $51 + 1 | 0;
       if ($52 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       $55 = ($39 - $49 | 0) / 24 | 0;
       if ($55 >>> 0 < 89478485) {
        $57 = $55 << 1;
        $$0$i$i$i$i = $57 >>> 0 < $52 >>> 0 ? $52 : $57;
       } else $$0$i$i$i$i = 178956970;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i69$i, $$0$i$i$i$i, $51, $db + 12 | 0);
       $60 = $__v$i$i69$i + 8 | 0;
       $61 = HEAP32[$60 >> 2] | 0;
       HEAP32[$61 >> 2] = 0;
       HEAP32[$61 + 4 >> 2] = 0;
       HEAP32[$61 + 8 >> 2] = 0;
       HEAP32[$61 + 12 >> 2] = 0;
       HEAP32[$61 + 16 >> 2] = 0;
       HEAP32[$61 + 20 >> 2] = 0;
       $__i$0$i$i$i$i$i$i$i$i = 0;
       while (1) {
        if (($__i$0$i$i$i$i$i$i$i$i | 0) == 3) break;
        HEAP32[$61 + ($__i$0$i$i$i$i$i$i$i$i << 2) >> 2] = 0;
        $__i$0$i$i$i$i$i$i$i$i = $__i$0$i$i$i$i$i$i$i$i + 1 | 0;
       }
       $64 = $61 + 12 | 0;
       HEAP32[$64 >> 2] = 0;
       HEAP32[$64 + 4 >> 2] = 0;
       HEAP32[$64 + 8 >> 2] = 0;
       $__i$0$i$i1$i$i$i$i$i$i = 0;
       while (1) {
        if (($__i$0$i$i1$i$i$i$i$i$i | 0) == 3) break;
        HEAP32[$64 + ($__i$0$i$i1$i$i$i$i$i$i << 2) >> 2] = 0;
        $__i$0$i$i1$i$i$i$i$i$i = $__i$0$i$i1$i$i$i$i$i$i + 1 | 0;
       }
       HEAP32[$60 >> 2] = $61 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i69$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i69$i);
      }
      if (($16 - $t0$0$i19 | 0) > 1) if ((HEAP8[$t0$0$i19 >> 0] | 0) == 83) if ((HEAP8[$t0$0$i19 + 1 >> 0] | 0) == 116) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj((HEAP32[$34 >> 2] | 0) + -24 | 0, 15950, 3);
       $t0$1$i = $t0$0$i19 + 2 | 0;
      } else $t0$1$i = $t0$0$i19; else $t0$1$i = $t0$0$i19; else $t0$1$i = $t0$0$i19;
      if (($t0$1$i | 0) == ($last | 0)) {
       $120 = HEAP32[$34 >> 2] | 0;
       $121 = $120 + -24 | 0;
       $122 = $120;
       while (1) {
        if (($122 | 0) == ($121 | 0)) break L49;
        $124 = $122 + -24 | 0;
        HEAP32[$34 >> 2] = $124;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($124);
        $122 = HEAP32[$34 >> 2] | 0;
       }
      }
      $80 = $name$i17 + 8 | 0;
      $81 = $name$i17 + 1 | 0;
      $82 = $name$i17 + 4 | 0;
      $83 = $db + 12 | 0;
      $84 = $db + 16 | 0;
      $85 = $db + 20 | 0;
      $86 = $db + 24 | 0;
      $87 = $9 + 12 | 0;
      $88 = $9 + 4 | 0;
      $89 = $9 + 8 | 0;
      $90 = $db + 28 | 0;
      $91 = $__v$i$i69$i + 8 | 0;
      $92 = $12 + 12 | 0;
      $93 = $12 + 4 | 0;
      $94 = $12 + 8 | 0;
      $95 = $__v$i$i69$i + 8 | 0;
      $96 = $11 + 8 | 0;
      $97 = $11 + 1 | 0;
      $98 = $11 + 4 | 0;
      $99 = $0 + 8 | 0;
      $100 = $0 + 1 | 0;
      $101 = $0 + 4 | 0;
      $102 = $1 + 12 | 0;
      $103 = $1 + 4 | 0;
      $104 = $1 + 8 | 0;
      $105 = $__v$i$i69$i + 8 | 0;
      $106 = $4 + 12 | 0;
      $107 = $4 + 4 | 0;
      $108 = $4 + 8 | 0;
      $109 = $__v$i$i69$i + 8 | 0;
      $110 = $3 + 8 | 0;
      $111 = $3 + 1 | 0;
      $112 = $3 + 4 | 0;
      $113 = $7 + 12 | 0;
      $114 = $7 + 4 | 0;
      $115 = $7 + 8 | 0;
      $116 = $__v$i$i69$i + 8 | 0;
      $117 = $6 + 8 | 0;
      $118 = $6 + 1 | 0;
      $119 = $6 + 4 | 0;
      $pop_subs$0$off0$i$ph = 0;
      $t0$2$i$ph = $t0$1$i;
      L92 : while (1) {
       $t0$2$i = $t0$2$i$ph;
       L94 : while (1) {
        $125 = HEAP8[$t0$2$i >> 0] | 0;
        if ($125 << 24 >> 24 == 69) {
         label = 129;
         break L92;
        }
        switch ($125 << 24 >> 24 | 0) {
        case 83:
         {
          $t0$2$i$lcssa187 = $t0$2$i;
          label = 39;
          break L94;
          break;
         }
        case 84:
         {
          $t0$2$i$lcssa188 = $t0$2$i;
          label = 59;
          break L94;
          break;
         }
        case 68:
         {
          $t0$2$i$lcssa189 = $t0$2$i;
          label = 77;
          break L94;
          break;
         }
        case 73:
         break;
        case 76:
         {
          $390 = $t0$2$i + 1 | 0;
          if (($390 | 0) == ($last | 0)) break L49; else {
           $t0$2$i = $390;
           continue L94;
          }
          break;
         }
        default:
         {
          $t0$2$i193 = $t0$2$i;
          break L94;
         }
        }
        $333 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($t0$2$i, $last, $db) | 0;
        if (($333 | 0) == ($t0$2$i | 0) | ($333 | 0) == ($last | 0)) break L49;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i17, (HEAP32[$34 >> 2] | 0) + -24 | 0);
        $338 = HEAP32[$34 >> 2] | 0;
        $339 = $338 + -24 | 0;
        $340 = $338;
        while (1) {
         if (($340 | 0) == ($339 | 0)) break;
         $342 = $340 + -24 | 0;
         HEAP32[$34 >> 2] = $342;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($342);
         $340 = HEAP32[$34 >> 2] | 0;
        }
        $344 = HEAP8[$name$i17 >> 0] | 0;
        $346 = ($344 & 1) == 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($338 + -48 | 0, $346 ? $81 : HEAP32[$80 >> 2] | 0, $346 ? ($344 & 255) >>> 1 : HEAP32[$82 >> 2] | 0) | 0;
        $354 = (HEAP32[$34 >> 2] | 0) + -24 | 0;
        HEAP32[$10 >> 2] = HEAP32[$83 >> 2];
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($9, $354, $10);
        $356 = HEAP32[$85 >> 2] | 0;
        $357 = HEAP32[$86 >> 2] | 0;
        $359 = $357;
        if ($356 >>> 0 < $357 >>> 0) {
         HEAP32[$356 + 12 >> 2] = HEAP32[$87 >> 2];
         HEAP32[$356 >> 2] = HEAP32[$9 >> 2];
         HEAP32[$356 + 4 >> 2] = HEAP32[$88 >> 2];
         HEAP32[$356 + 8 >> 2] = HEAP32[$89 >> 2];
         HEAP32[$89 >> 2] = 0;
         HEAP32[$88 >> 2] = 0;
         HEAP32[$9 >> 2] = 0;
         HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 16;
        } else {
         $370 = HEAP32[$84 >> 2] | 0;
         $372 = $356 - $370 >> 4;
         $373 = $372 + 1 | 0;
         if ($373 >>> 0 > 268435455) {
          label = 104;
          break L92;
         }
         $375 = $359 - $370 | 0;
         if ($375 >> 4 >>> 0 < 134217727) {
          $378 = $375 >> 3;
          $$0$i$i$i60$i = $378 >>> 0 < $373 >>> 0 ? $373 : $378;
         } else $$0$i$i$i60$i = 268435455;
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i69$i, $$0$i$i$i60$i, $372, $90);
         $381 = HEAP32[$91 >> 2] | 0;
         HEAP32[$381 + 12 >> 2] = HEAP32[$87 >> 2];
         HEAP32[$381 >> 2] = HEAP32[$9 >> 2];
         HEAP32[$381 + 4 >> 2] = HEAP32[$88 >> 2];
         HEAP32[$381 + 8 >> 2] = HEAP32[$89 >> 2];
         HEAP32[$89 >> 2] = 0;
         HEAP32[$88 >> 2] = 0;
         HEAP32[$9 >> 2] = 0;
         HEAP32[$91 >> 2] = $381 + 16;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84, $__v$i$i69$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i69$i);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i17);
        $t0$2$i = $333;
       }
       L113 : do if ((label | 0) == 39) {
        label = 0;
        $128 = $t0$2$i$lcssa187 + 1 | 0;
        if (($128 | 0) != ($last | 0)) if ((HEAP8[$128 >> 0] | 0) == 116) {
         $t0$2$i193 = $t0$2$i$lcssa187;
         break;
        }
        $132 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($t0$2$i$lcssa187, $last, $db) | 0;
        if (($132 | 0) == ($t0$2$i$lcssa187 | 0) | ($132 | 0) == ($last | 0)) break L49;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i17, (HEAP32[$34 >> 2] | 0) + -24 | 0);
        $137 = HEAP32[$34 >> 2] | 0;
        $138 = $137 + -24 | 0;
        $139 = $137;
        while (1) {
         if (($139 | 0) == ($138 | 0)) break;
         $141 = $139 + -24 | 0;
         HEAP32[$34 >> 2] = $141;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($141);
         $139 = HEAP32[$34 >> 2] | 0;
        }
        $142 = $137 + -48 | 0;
        $143 = HEAP8[$142 >> 0] | 0;
        if (!($143 & 1)) $150 = ($143 & 255) >>> 1; else $150 = HEAP32[$137 + -44 >> 2] | 0;
        if (!$150) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($142, $name$i17); else {
         __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($0, 14755, $name$i17);
         $152 = HEAP8[$0 >> 0] | 0;
         $154 = ($152 & 1) == 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($142, $154 ? $100 : HEAP32[$99 >> 2] | 0, $154 ? ($152 & 255) >>> 1 : HEAP32[$101 >> 2] | 0) | 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         $162 = (HEAP32[$34 >> 2] | 0) + -24 | 0;
         HEAP32[$2 >> 2] = HEAP32[$83 >> 2];
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($1, $162, $2);
         $164 = HEAP32[$85 >> 2] | 0;
         $165 = HEAP32[$86 >> 2] | 0;
         $167 = $165;
         if ($164 >>> 0 < $165 >>> 0) {
          HEAP32[$164 + 12 >> 2] = HEAP32[$102 >> 2];
          HEAP32[$164 >> 2] = HEAP32[$1 >> 2];
          HEAP32[$164 + 4 >> 2] = HEAP32[$103 >> 2];
          HEAP32[$164 + 8 >> 2] = HEAP32[$104 >> 2];
          HEAP32[$104 >> 2] = 0;
          HEAP32[$103 >> 2] = 0;
          HEAP32[$1 >> 2] = 0;
          HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 16;
         } else {
          $178 = HEAP32[$84 >> 2] | 0;
          $180 = $164 - $178 >> 4;
          $181 = $180 + 1 | 0;
          if ($181 >>> 0 > 268435455) {
           label = 52;
           break L92;
          }
          $183 = $167 - $178 | 0;
          if ($183 >> 4 >>> 0 < 134217727) {
           $186 = $183 >> 3;
           $$0$i$i$i34$i = $186 >>> 0 < $181 >>> 0 ? $181 : $186;
          } else $$0$i$i$i34$i = 268435455;
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i69$i, $$0$i$i$i34$i, $180, $90);
          $189 = HEAP32[$105 >> 2] | 0;
          HEAP32[$189 + 12 >> 2] = HEAP32[$102 >> 2];
          HEAP32[$189 >> 2] = HEAP32[$1 >> 2];
          HEAP32[$189 + 4 >> 2] = HEAP32[$103 >> 2];
          HEAP32[$189 + 8 >> 2] = HEAP32[$104 >> 2];
          HEAP32[$104 >> 2] = 0;
          HEAP32[$103 >> 2] = 0;
          HEAP32[$1 >> 2] = 0;
          HEAP32[$105 >> 2] = $189 + 16;
          __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84, $__v$i$i69$i);
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i69$i);
         }
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($1);
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i17);
        $pop_subs$0$off0$i$ph = 1;
        $t0$2$i$ph = $132;
        continue L92;
       } else if ((label | 0) == 59) {
        label = 0;
        $198 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($t0$2$i$lcssa188, $last, $db) | 0;
        if (($198 | 0) == ($t0$2$i$lcssa188 | 0) | ($198 | 0) == ($last | 0)) break L49;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i17, (HEAP32[$34 >> 2] | 0) + -24 | 0);
        $203 = HEAP32[$34 >> 2] | 0;
        $204 = $203 + -24 | 0;
        $205 = $203;
        while (1) {
         if (($205 | 0) == ($204 | 0)) break;
         $207 = $205 + -24 | 0;
         HEAP32[$34 >> 2] = $207;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($207);
         $205 = HEAP32[$34 >> 2] | 0;
        }
        $208 = $203 + -48 | 0;
        $209 = HEAP8[$208 >> 0] | 0;
        if (!($209 & 1)) $216 = ($209 & 255) >>> 1; else $216 = HEAP32[$203 + -44 >> 2] | 0;
        if (!$216) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($208, $name$i17); else {
         __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($3, 14755, $name$i17);
         $218 = HEAP8[$3 >> 0] | 0;
         $220 = ($218 & 1) == 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($208, $220 ? $111 : HEAP32[$110 >> 2] | 0, $220 ? ($218 & 255) >>> 1 : HEAP32[$112 >> 2] | 0) | 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        }
        $228 = (HEAP32[$34 >> 2] | 0) + -24 | 0;
        HEAP32[$5 >> 2] = HEAP32[$83 >> 2];
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4, $228, $5);
        $230 = HEAP32[$85 >> 2] | 0;
        $231 = HEAP32[$86 >> 2] | 0;
        $233 = $231;
        if ($230 >>> 0 < $231 >>> 0) {
         HEAP32[$230 + 12 >> 2] = HEAP32[$106 >> 2];
         HEAP32[$230 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$230 + 4 >> 2] = HEAP32[$107 >> 2];
         HEAP32[$230 + 8 >> 2] = HEAP32[$108 >> 2];
         HEAP32[$108 >> 2] = 0;
         HEAP32[$107 >> 2] = 0;
         HEAP32[$4 >> 2] = 0;
         HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 16;
        } else {
         $244 = HEAP32[$84 >> 2] | 0;
         $246 = $230 - $244 >> 4;
         $247 = $246 + 1 | 0;
         if ($247 >>> 0 > 268435455) {
          label = 72;
          break L92;
         }
         $249 = $233 - $244 | 0;
         if ($249 >> 4 >>> 0 < 134217727) {
          $252 = $249 >> 3;
          $$0$i$i$i41$i = $252 >>> 0 < $247 >>> 0 ? $247 : $252;
         } else $$0$i$i$i41$i = 268435455;
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i69$i, $$0$i$i$i41$i, $246, $90);
         $255 = HEAP32[$109 >> 2] | 0;
         HEAP32[$255 + 12 >> 2] = HEAP32[$106 >> 2];
         HEAP32[$255 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$255 + 4 >> 2] = HEAP32[$107 >> 2];
         HEAP32[$255 + 8 >> 2] = HEAP32[$108 >> 2];
         HEAP32[$108 >> 2] = 0;
         HEAP32[$107 >> 2] = 0;
         HEAP32[$4 >> 2] = 0;
         HEAP32[$109 >> 2] = $255 + 16;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84, $__v$i$i69$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i69$i);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i17);
        $pop_subs$0$off0$i$ph = 1;
        $t0$2$i$ph = $198;
        continue L92;
       } else if ((label | 0) == 77) {
        label = 0;
        $264 = $t0$2$i$lcssa189 + 1 | 0;
        if (($264 | 0) != ($last | 0)) switch (HEAP8[$264 >> 0] | 0) {
        case 84:
        case 116:
         break;
        default:
         {
          $t0$2$i193 = $t0$2$i$lcssa189;
          break L113;
         }
        }
        $267 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($t0$2$i$lcssa189, $last, $db) | 0;
        if (($267 | 0) == ($t0$2$i$lcssa189 | 0) | ($267 | 0) == ($last | 0)) break L49;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i17, (HEAP32[$34 >> 2] | 0) + -24 | 0);
        $272 = HEAP32[$34 >> 2] | 0;
        $273 = $272 + -24 | 0;
        $274 = $272;
        while (1) {
         if (($274 | 0) == ($273 | 0)) break;
         $276 = $274 + -24 | 0;
         HEAP32[$34 >> 2] = $276;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($276);
         $274 = HEAP32[$34 >> 2] | 0;
        }
        $277 = $272 + -48 | 0;
        $278 = HEAP8[$277 >> 0] | 0;
        if (!($278 & 1)) $285 = ($278 & 255) >>> 1; else $285 = HEAP32[$272 + -44 >> 2] | 0;
        if (!$285) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($277, $name$i17); else {
         __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($6, 14755, $name$i17);
         $287 = HEAP8[$6 >> 0] | 0;
         $289 = ($287 & 1) == 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($277, $289 ? $118 : HEAP32[$117 >> 2] | 0, $289 ? ($287 & 255) >>> 1 : HEAP32[$119 >> 2] | 0) | 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        }
        $297 = (HEAP32[$34 >> 2] | 0) + -24 | 0;
        HEAP32[$8 >> 2] = HEAP32[$83 >> 2];
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($7, $297, $8);
        $299 = HEAP32[$85 >> 2] | 0;
        $300 = HEAP32[$86 >> 2] | 0;
        $302 = $300;
        if ($299 >>> 0 < $300 >>> 0) {
         HEAP32[$299 + 12 >> 2] = HEAP32[$113 >> 2];
         HEAP32[$299 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$299 + 4 >> 2] = HEAP32[$114 >> 2];
         HEAP32[$299 + 8 >> 2] = HEAP32[$115 >> 2];
         HEAP32[$115 >> 2] = 0;
         HEAP32[$114 >> 2] = 0;
         HEAP32[$7 >> 2] = 0;
         HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 16;
        } else {
         $313 = HEAP32[$84 >> 2] | 0;
         $315 = $299 - $313 >> 4;
         $316 = $315 + 1 | 0;
         if ($316 >>> 0 > 268435455) {
          label = 92;
          break L92;
         }
         $318 = $302 - $313 | 0;
         if ($318 >> 4 >>> 0 < 134217727) {
          $321 = $318 >> 3;
          $$0$i$i$i51$i = $321 >>> 0 < $316 >>> 0 ? $316 : $321;
         } else $$0$i$i$i51$i = 268435455;
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i69$i, $$0$i$i$i51$i, $315, $90);
         $324 = HEAP32[$116 >> 2] | 0;
         HEAP32[$324 + 12 >> 2] = HEAP32[$113 >> 2];
         HEAP32[$324 >> 2] = HEAP32[$7 >> 2];
         HEAP32[$324 + 4 >> 2] = HEAP32[$114 >> 2];
         HEAP32[$324 + 8 >> 2] = HEAP32[$115 >> 2];
         HEAP32[$115 >> 2] = 0;
         HEAP32[$114 >> 2] = 0;
         HEAP32[$7 >> 2] = 0;
         HEAP32[$116 >> 2] = $324 + 16;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84, $__v$i$i69$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i69$i);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i17);
        $pop_subs$0$off0$i$ph = 1;
        $t0$2$i$ph = $267;
        continue L92;
       } while (0);
       $392 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$2$i193, $last, $db) | 0;
       if (($392 | 0) == ($t0$2$i193 | 0) | ($392 | 0) == ($last | 0)) break L49;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i17, (HEAP32[$34 >> 2] | 0) + -24 | 0);
       $397 = HEAP32[$34 >> 2] | 0;
       $398 = $397 + -24 | 0;
       $399 = $397;
       while (1) {
        if (($399 | 0) == ($398 | 0)) break;
        $401 = $399 + -24 | 0;
        HEAP32[$34 >> 2] = $401;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($401);
        $399 = HEAP32[$34 >> 2] | 0;
       }
       $402 = $397 + -48 | 0;
       $403 = HEAP8[$402 >> 0] | 0;
       if (!($403 & 1)) $410 = ($403 & 255) >>> 1; else $410 = HEAP32[$397 + -44 >> 2] | 0;
       if (!$410) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($402, $name$i17); else {
        __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($11, 14755, $name$i17);
        $412 = HEAP8[$11 >> 0] | 0;
        $414 = ($412 & 1) == 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($402, $414 ? $97 : HEAP32[$96 >> 2] | 0, $414 ? ($412 & 255) >>> 1 : HEAP32[$98 >> 2] | 0) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
       }
       $422 = (HEAP32[$34 >> 2] | 0) + -24 | 0;
       HEAP32[$13 >> 2] = HEAP32[$83 >> 2];
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($12, $422, $13);
       $424 = HEAP32[$85 >> 2] | 0;
       $425 = HEAP32[$86 >> 2] | 0;
       $427 = $425;
       if ($424 >>> 0 < $425 >>> 0) {
        HEAP32[$424 + 12 >> 2] = HEAP32[$92 >> 2];
        HEAP32[$424 >> 2] = HEAP32[$12 >> 2];
        HEAP32[$424 + 4 >> 2] = HEAP32[$93 >> 2];
        HEAP32[$424 + 8 >> 2] = HEAP32[$94 >> 2];
        HEAP32[$94 >> 2] = 0;
        HEAP32[$93 >> 2] = 0;
        HEAP32[$12 >> 2] = 0;
        HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 16;
       } else {
        $438 = HEAP32[$84 >> 2] | 0;
        $440 = $424 - $438 >> 4;
        $441 = $440 + 1 | 0;
        if ($441 >>> 0 > 268435455) {
         label = 123;
         break;
        }
        $443 = $427 - $438 | 0;
        if ($443 >> 4 >>> 0 < 134217727) {
         $446 = $443 >> 3;
         $$0$i$i$i70$i = $446 >>> 0 < $441 >>> 0 ? $441 : $446;
        } else $$0$i$i$i70$i = 268435455;
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i69$i, $$0$i$i$i70$i, $440, $90);
        $449 = HEAP32[$95 >> 2] | 0;
        HEAP32[$449 + 12 >> 2] = HEAP32[$92 >> 2];
        HEAP32[$449 >> 2] = HEAP32[$12 >> 2];
        HEAP32[$449 + 4 >> 2] = HEAP32[$93 >> 2];
        HEAP32[$449 + 8 >> 2] = HEAP32[$94 >> 2];
        HEAP32[$94 >> 2] = 0;
        HEAP32[$93 >> 2] = 0;
        HEAP32[$12 >> 2] = 0;
        HEAP32[$95 >> 2] = $449 + 16;
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84, $__v$i$i69$i);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i69$i);
       }
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($12);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i17);
       $pop_subs$0$off0$i$ph = 1;
       $t0$2$i$ph = $392;
      }
      if ((label | 0) == 52) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($84); else if ((label | 0) == 72) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($84); else if ((label | 0) == 92) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($84); else if ((label | 0) == 104) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($84); else if ((label | 0) == 123) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($84); else if ((label | 0) == 129) {
       $458 = $t0$2$i + 1 | 0;
       HEAP32[$db + 48 >> 2] = HEAP32[$cv$i >> 2];
       L214 : do if ($pop_subs$0$off0$i$ph) {
        $463 = HEAP32[$85 >> 2] | 0;
        if ((HEAP32[$db + 16 >> 2] | 0) != ($463 | 0)) {
         $465 = $463 + -16 | 0;
         $466 = $463;
         while (1) {
          if (($466 | 0) == ($465 | 0)) break L214;
          $468 = $466 + -16 | 0;
          HEAP32[$85 >> 2] = $468;
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($468);
          $466 = HEAP32[$85 >> 2] | 0;
         }
        }
       } while (0);
       $$414$i = $458;
       break L46;
      }
     } while (0);
     $$414$i = $$first;
    } else $$414$i = $$first; while (0);
    $$3 = ($$414$i | 0) == ($$first | 0) ? $first : $$414$i;
    break L1;
    break;
   }
  case 90:
   {
    L225 : do if ($23 << 24 >> 24 == 90 & ($$first | 0) != ($last | 0)) {
     $472 = $$first + 1 | 0;
     $473 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($472, $last, $db) | 0;
     if (($473 | 0) == ($472 | 0) | ($473 | 0) == ($last | 0)) $$4$i = $$first; else if ((HEAP8[$473 >> 0] | 0) == 69) {
      $478 = $473 + 1 | 0;
      if (($478 | 0) == ($last | 0)) $$4$i = $$first; else switch (HEAP8[$478 >> 0] | 0) {
      case 115:
       {
        $483 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($473 + 2 | 0, $last) | 0;
        $486 = HEAP32[$db + 4 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($486 | 0)) {
         $$4$i = $483;
         break L225;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($486 + -24 | 0, 15954) | 0;
        $$4$i = $483;
        break L225;
        break;
       }
      case 100:
       {
        $489 = $473 + 2 | 0;
        if (($489 | 0) == ($last | 0)) {
         $$4$i = $$first;
         break L225;
        }
        $491 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($489, $last) | 0;
        if (($491 | 0) == ($last | 0)) {
         $$4$i = $$first;
         break L225;
        }
        if ((HEAP8[$491 >> 0] | 0) != 95) {
         $$4$i = $$first;
         break L225;
        }
        $495 = $491 + 1 | 0;
        $496 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($495, $last, $db) | 0;
        $498 = $db + 4 | 0;
        if (($496 | 0) == ($495 | 0)) {
         $526 = HEAP32[$498 >> 2] | 0;
         $527 = $526 + -24 | 0;
         $528 = $526;
         while (1) {
          if (($528 | 0) == ($527 | 0)) {
           $$4$i = $$first;
           break L225;
          }
          $530 = $528 + -24 | 0;
          HEAP32[$498 >> 2] = $530;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($530);
          $528 = HEAP32[$498 >> 2] | 0;
         }
        }
        $499 = HEAP32[$498 >> 2] | 0;
        if ((($499 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
         $$4$i = $$first;
         break L225;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($__v$i$i69$i, $499 + -24 | 0);
        $506 = HEAP32[$498 >> 2] | 0;
        $507 = $506 + -24 | 0;
        $508 = $506;
        while (1) {
         if (($508 | 0) == ($507 | 0)) break;
         $510 = $508 + -24 | 0;
         HEAP32[$498 >> 2] = $510;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($510);
         $508 = HEAP32[$498 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($506 + -48 | 0, 14755) | 0;
        $514 = HEAP8[$__v$i$i69$i >> 0] | 0;
        $516 = ($514 & 1) == 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$498 >> 2] | 0) + -24 | 0, $516 ? $__v$i$i69$i + 1 | 0 : HEAP32[$__v$i$i69$i + 8 >> 2] | 0, $516 ? ($514 & 255) >>> 1 : HEAP32[$__v$i$i69$i + 4 >> 2] | 0) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i69$i);
        $$4$i = $496;
        break L225;
        break;
       }
      default:
       {
        $531 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($478, $last, $db) | 0;
        if (($531 | 0) == ($478 | 0)) {
         $562 = $db + 4 | 0;
         $563 = HEAP32[$562 >> 2] | 0;
         $564 = $563 + -24 | 0;
         $565 = $563;
         while (1) {
          if (($565 | 0) == ($564 | 0)) {
           $$4$i = $$first;
           break L225;
          }
          $567 = $565 + -24 | 0;
          HEAP32[$562 >> 2] = $567;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($567);
          $565 = HEAP32[$562 >> 2] | 0;
         }
        }
        $533 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($531, $last) | 0;
        $534 = $db + 4 | 0;
        $535 = HEAP32[$534 >> 2] | 0;
        if ((($535 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
         $$4$i = $533;
         break L225;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($__v$i$i69$i, $535 + -24 | 0);
        $542 = HEAP32[$534 >> 2] | 0;
        $543 = $542 + -24 | 0;
        $544 = $542;
        while (1) {
         if (($544 | 0) == ($543 | 0)) break;
         $546 = $544 + -24 | 0;
         HEAP32[$534 >> 2] = $546;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($546);
         $544 = HEAP32[$534 >> 2] | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($542 + -48 | 0, 14755) | 0;
        $550 = HEAP8[$__v$i$i69$i >> 0] | 0;
        $552 = ($550 & 1) == 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$534 >> 2] | 0) + -24 | 0, $552 ? $__v$i$i69$i + 1 | 0 : HEAP32[$__v$i$i69$i + 8 >> 2] | 0, $552 ? ($550 & 255) >>> 1 : HEAP32[$__v$i$i69$i + 4 >> 2] | 0) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i69$i);
        $$4$i = $533;
        break L225;
       }
      }
     } else $$4$i = $$first;
    } else $$4$i = $$first; while (0);
    $$3 = ($$4$i | 0) == ($$first | 0) ? $first : $$4$i;
    break L1;
    break;
   }
  default:
   {
    do if (($16 - $$first | 0) > 1) {
     if ($23 << 24 >> 24 == 83) if ((HEAP8[$$first + 1 >> 0] | 0) == 116) {
      $576 = $$first + 2 | 0;
      if (($576 | 0) == ($last | 0)) {
       $St$0$off0$i = 0;
       $t0$0$i = $last;
      } else {
       $St$0$off0$i = 0;
       $t0$0$i = (HEAP8[$576 >> 0] | 0) == 76 ? $$first + 3 | 0 : $576;
      }
     } else {
      $St$0$off0$i = 1;
      $t0$0$i = $$first;
     } else {
      $St$0$off0$i = 1;
      $t0$0$i = $$first;
     }
     $581 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$0$i, $last, $db) | 0;
     $582 = ($581 | 0) == ($t0$0$i | 0);
     if ($St$0$off0$i | $582) $$13$i$ph = $582 ? $$first : $581; else {
      $585 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($585 | 0)) break;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($585 + -24 | 0, 0, 15693) | 0;
      $$13$i$ph = $581;
     }
     if (($$13$i$ph | 0) != ($$first | 0)) {
      if (($$13$i$ph | 0) == ($last | 0)) {
       $$3 = $last;
       break L1;
      }
      if ((HEAP8[$$13$i$ph >> 0] | 0) != 73) {
       $$3 = $$13$i$ph;
       break L1;
      }
      $593 = $db + 4 | 0;
      $594 = HEAP32[$593 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($594 | 0)) {
       $$3 = $first;
       break L1;
      }
      $596 = $db + 16 | 0;
      HEAP32[$15 >> 2] = HEAP32[$db + 12 >> 2];
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($14, $594 + -24 | 0, $15);
      $600 = $db + 20 | 0;
      $601 = HEAP32[$600 >> 2] | 0;
      $603 = HEAP32[$db + 24 >> 2] | 0;
      $605 = $603;
      if ($601 >>> 0 < $603 >>> 0) {
       HEAP32[$601 + 12 >> 2] = HEAP32[$14 + 12 >> 2];
       HEAP32[$601 >> 2] = HEAP32[$14 >> 2];
       $611 = $14 + 4 | 0;
       HEAP32[$601 + 4 >> 2] = HEAP32[$611 >> 2];
       $613 = $14 + 8 | 0;
       HEAP32[$601 + 8 >> 2] = HEAP32[$613 >> 2];
       HEAP32[$613 >> 2] = 0;
       HEAP32[$611 >> 2] = 0;
       HEAP32[$14 >> 2] = 0;
       HEAP32[$600 >> 2] = (HEAP32[$600 >> 2] | 0) + 16;
      } else {
       $620 = HEAP32[$596 >> 2] | 0;
       $622 = $601 - $620 >> 4;
       $623 = $622 + 1 | 0;
       if ($623 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($596);
       $625 = $605 - $620 | 0;
       if ($625 >> 4 >>> 0 < 134217727) {
        $628 = $625 >> 3;
        $$0$i$i$i = $628 >>> 0 < $623 >>> 0 ? $623 : $628;
       } else $$0$i$i$i = 268435455;
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i69$i, $$0$i$i$i, $622, $db + 28 | 0);
       $631 = $__v$i$i69$i + 8 | 0;
       $632 = HEAP32[$631 >> 2] | 0;
       HEAP32[$632 + 12 >> 2] = HEAP32[$14 + 12 >> 2];
       HEAP32[$632 >> 2] = HEAP32[$14 >> 2];
       $638 = $14 + 4 | 0;
       HEAP32[$632 + 4 >> 2] = HEAP32[$638 >> 2];
       $640 = $14 + 8 | 0;
       HEAP32[$632 + 8 >> 2] = HEAP32[$640 >> 2];
       HEAP32[$640 >> 2] = 0;
       HEAP32[$638 >> 2] = 0;
       HEAP32[$14 >> 2] = 0;
       HEAP32[$631 >> 2] = $632 + 16;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($596, $__v$i$i69$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i69$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
      $644 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$13$i$ph, $last, $db) | 0;
      if (($644 | 0) == ($$13$i$ph | 0)) {
       $$3 = $first;
       break L1;
      }
      $646 = HEAP32[$593 >> 2] | 0;
      if ((($646 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
       $$3 = $first;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($__v$i$i69$i, $646 + -24 | 0);
      $653 = HEAP32[$593 >> 2] | 0;
      $654 = $653 + -24 | 0;
      $655 = $653;
      while (1) {
       if (($655 | 0) == ($654 | 0)) break;
       $657 = $655 + -24 | 0;
       HEAP32[$593 >> 2] = $657;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($657);
       $655 = HEAP32[$593 >> 2] | 0;
      }
      $659 = HEAP8[$__v$i$i69$i >> 0] | 0;
      $661 = ($659 & 1) == 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($653 + -48 | 0, $661 ? $__v$i$i69$i + 1 | 0 : HEAP32[$__v$i$i69$i + 8 >> 2] | 0, $661 ? ($659 & 255) >>> 1 : HEAP32[$__v$i$i69$i + 4 >> 2] | 0) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i69$i);
      $$3 = $644;
      break L1;
     }
    } while (0);
    $671 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$first, $last, $db) | 0;
    if (($671 | 0) == ($$first | 0) | ($671 | 0) == ($last | 0)) {
     $$3 = $first;
     break L1;
    }
    if ((HEAP8[$671 >> 0] | 0) != 73) {
     $$3 = $first;
     break L1;
    }
    $676 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($671, $last, $db) | 0;
    if (($676 | 0) == ($671 | 0)) {
     $$3 = $first;
     break L1;
    }
    $678 = $db + 4 | 0;
    $679 = HEAP32[$678 >> 2] | 0;
    if ((($679 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$3 = $first;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($__v$i$i69$i, $679 + -24 | 0);
    $686 = HEAP32[$678 >> 2] | 0;
    $687 = $686 + -24 | 0;
    $688 = $686;
    while (1) {
     if (($688 | 0) == ($687 | 0)) break;
     $690 = $688 + -24 | 0;
     HEAP32[$678 >> 2] = $690;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($690);
     $688 = HEAP32[$678 >> 2] | 0;
    }
    $692 = HEAP8[$__v$i$i69$i >> 0] | 0;
    $694 = ($692 & 1) == 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($686 + -48 | 0, $694 ? $__v$i$i69$i + 1 | 0 : HEAP32[$__v$i$i69$i + 8 >> 2] | 0, $694 ? ($692 & 255) >>> 1 : HEAP32[$__v$i$i69$i + 4 >> 2] | 0) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i69$i);
    $$3 = $676;
    break L1;
   }
  }
 } else $$3 = $first; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$4$i = 0, $100 = 0, $1002 = 0, $1008 = 0, $101 = 0, $1011 = 0, $1012 = 0, $1030 = 0, $1032 = 0, $1039 = 0, $1040 = 0, $1041 = 0, $1049 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1059 = 0, $107 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $133 = 0, $139 = 0, $14 = 0, $142 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $17 = 0, $171 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $193 = 0, $198 = 0, $202 = 0, $208 = 0, $215 = 0, $219 = 0, $227 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $238 = 0, $239 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $251 = 0, $252 = 0, $257 = 0, $258 = 0, $261 = 0, $263 = 0, $266 = 0, $271 = 0, $278 = 0, $28 = 0, $287 = 0, $288 = 0, $292 = 0, $298 = 0, $303 = 0, $306 = 0, $310 = 0, $312 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $323 = 0, $325 = 0, $327 = 0, $337 = 0, $338 = 0, $340 = 0, $349 = 0, $35 = 0, $351 = 0, $354 = 0, $356 = 0, $359 = 0, $361 = 0, $364 = 0, $367 = 0, $368 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $382 = 0, $383 = 0, $39 = 0, $392 = 0, $397 = 0, $4 = 0, $401 = 0, $407 = 0, $414 = 0, $418 = 0, $42 = 0, $426 = 0, $429 = 0, $430 = 0, $431 = 0, $435 = 0, $436 = 0, $442 = 0, $447 = 0, $448 = 0, $45 = 0, $451 = 0, $453 = 0, $456 = 0, $461 = 0, $467 = 0, $469 = 0, $47 = 0, $471 = 0, $472 = 0, $48 = 0, $490 = 0, $492 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $509 = 0, $511 = 0, $512 = 0, $514 = 0, $52 = 0, $523 = 0, $527 = 0, $529 = 0, $530 = 0, $531 = 0, $54 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $549 = 0, $551 = 0, $552 = 0, $558 = 0, $56 = 0, $560 = 0, $562 = 0, $569 = 0, $571 = 0, $572 = 0, $573 = 0, $58 = 0, $581 = 0, $582 = 0, $585 = 0, $589 = 0, $593 = 0, $595 = 0, $6 = 0, $60 = 0, $601 = 0, $605 = 0, $609 = 0, $618 = 0, $619 = 0, $62 = 0, $625 = 0, $628 = 0, $631 = 0, $633 = 0, $638 = 0, $644 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $67 = 0, $674 = 0, $679 = 0, $68 = 0, $680 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $722 = 0, $723 = 0, $728 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $78 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $807 = 0, $812 = 0, $815 = 0, $816 = 0, $82 = 0, $822 = 0, $830 = 0, $836 = 0, $839 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $85 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $89 = 0, $900 = 0, $902 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $918 = 0, $92 = 0, $922 = 0, $926 = 0, $928 = 0, $934 = 0, $935 = 0, $937 = 0, $938 = 0, $94 = 0, $942 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $955 = 0, $96 = 0, $962 = 0, $967 = 0, $970 = 0, $971 = 0, $972 = 0, $976 = 0, $977 = 0, $983 = 0, $988 = 0, $989 = 0, $992 = 0, $994 = 0, $997 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $magic$i$i = sp;
 do if ($bytes >>> 0 < 245) {
  $4 = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $5 = $4 >>> 3;
  $6 = HEAP32[4180] | 0;
  $7 = $6 >>> $5;
  if ($7 & 3 | 0) {
   $12 = ($7 & 1 ^ 1) + $5 | 0;
   $14 = 16760 + ($12 << 1 << 2) | 0;
   $15 = $14 + 8 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   do if (($14 | 0) == ($18 | 0)) HEAP32[4180] = $6 & ~(1 << $12); else {
    if ($18 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
    $25 = $18 + 12 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$25 >> 2] = $14;
     HEAP32[$15 >> 2] = $18;
     break;
    } else _abort();
   } while (0);
   $28 = $12 << 3;
   HEAP32[$16 + 4 >> 2] = $28 | 3;
   $32 = $16 + $28 + 4 | 0;
   HEAP32[$32 >> 2] = HEAP32[$32 >> 2] | 1;
   $$0 = $17;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $35 = HEAP32[4182] | 0;
  if ($4 >>> 0 > $35 >>> 0) {
   if ($7 | 0) {
    $39 = 2 << $5;
    $42 = $7 << $5 & ($39 | 0 - $39);
    $45 = ($42 & 0 - $42) + -1 | 0;
    $47 = $45 >>> 12 & 16;
    $48 = $45 >>> $47;
    $50 = $48 >>> 5 & 8;
    $52 = $48 >>> $50;
    $54 = $52 >>> 2 & 4;
    $56 = $52 >>> $54;
    $58 = $56 >>> 1 & 2;
    $60 = $56 >>> $58;
    $62 = $60 >>> 1 & 1;
    $65 = ($50 | $47 | $54 | $58 | $62) + ($60 >>> $62) | 0;
    $67 = 16760 + ($65 << 1 << 2) | 0;
    $68 = $67 + 8 | 0;
    $69 = HEAP32[$68 >> 2] | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    do if (($67 | 0) == ($71 | 0)) {
     HEAP32[4180] = $6 & ~(1 << $65);
     $89 = $35;
    } else {
     if ($71 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
     $78 = $71 + 12 | 0;
     if ((HEAP32[$78 >> 2] | 0) == ($69 | 0)) {
      HEAP32[$78 >> 2] = $67;
      HEAP32[$68 >> 2] = $71;
      $89 = HEAP32[4182] | 0;
      break;
     } else _abort();
    } while (0);
    $82 = ($65 << 3) - $4 | 0;
    HEAP32[$69 + 4 >> 2] = $4 | 3;
    $85 = $69 + $4 | 0;
    HEAP32[$85 + 4 >> 2] = $82 | 1;
    HEAP32[$85 + $82 >> 2] = $82;
    if ($89 | 0) {
     $91 = HEAP32[4185] | 0;
     $92 = $89 >>> 3;
     $94 = 16760 + ($92 << 1 << 2) | 0;
     $95 = HEAP32[4180] | 0;
     $96 = 1 << $92;
     if (!($95 & $96)) {
      HEAP32[4180] = $95 | $96;
      $$pre$phiZ2D = $94 + 8 | 0;
      $F4$0 = $94;
     } else {
      $100 = $94 + 8 | 0;
      $101 = HEAP32[$100 >> 2] | 0;
      if ($101 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $100;
       $F4$0 = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $91;
     HEAP32[$F4$0 + 12 >> 2] = $91;
     HEAP32[$91 + 8 >> 2] = $F4$0;
     HEAP32[$91 + 12 >> 2] = $94;
    }
    HEAP32[4182] = $82;
    HEAP32[4185] = $85;
    $$0 = $70;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $107 = HEAP32[4181] | 0;
   if (!$107) $nb$0 = $4; else {
    $111 = ($107 & 0 - $107) + -1 | 0;
    $113 = $111 >>> 12 & 16;
    $114 = $111 >>> $113;
    $116 = $114 >>> 5 & 8;
    $118 = $114 >>> $116;
    $120 = $118 >>> 2 & 4;
    $122 = $118 >>> $120;
    $124 = $122 >>> 1 & 2;
    $126 = $122 >>> $124;
    $128 = $126 >>> 1 & 1;
    $133 = HEAP32[17024 + (($116 | $113 | $120 | $124 | $128) + ($126 >>> $128) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$133 + 4 >> 2] & -8) - $4 | 0;
    $t$0$i = $133;
    $v$0$i = $133;
    while (1) {
     $139 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$139) {
      $142 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$142) {
       $rsize$0$i$lcssa = $rsize$0$i;
       $v$0$i$lcssa = $v$0$i;
       break;
      } else $145 = $142;
     } else $145 = $139;
     $148 = (HEAP32[$145 + 4 >> 2] & -8) - $4 | 0;
     $149 = $148 >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $149 ? $148 : $rsize$0$i;
     $t$0$i = $145;
     $v$0$i = $149 ? $145 : $v$0$i;
    }
    $150 = HEAP32[4184] | 0;
    if ($v$0$i$lcssa >>> 0 < $150 >>> 0) _abort();
    $152 = $v$0$i$lcssa + $4 | 0;
    if ($v$0$i$lcssa >>> 0 >= $152 >>> 0) _abort();
    $155 = HEAP32[$v$0$i$lcssa + 24 >> 2] | 0;
    $157 = HEAP32[$v$0$i$lcssa + 12 >> 2] | 0;
    do if (($157 | 0) == ($v$0$i$lcssa | 0)) {
     $168 = $v$0$i$lcssa + 20 | 0;
     $169 = HEAP32[$168 >> 2] | 0;
     if (!$169) {
      $171 = $v$0$i$lcssa + 16 | 0;
      $172 = HEAP32[$171 >> 2] | 0;
      if (!$172) {
       $R$3$i = 0;
       break;
      } else {
       $R$1$i = $172;
       $RP$1$i = $171;
      }
     } else {
      $R$1$i = $169;
      $RP$1$i = $168;
     }
     while (1) {
      $174 = $R$1$i + 20 | 0;
      $175 = HEAP32[$174 >> 2] | 0;
      if ($175 | 0) {
       $R$1$i = $175;
       $RP$1$i = $174;
       continue;
      }
      $177 = $R$1$i + 16 | 0;
      $178 = HEAP32[$177 >> 2] | 0;
      if (!$178) {
       $R$1$i$lcssa = $R$1$i;
       $RP$1$i$lcssa = $RP$1$i;
       break;
      } else {
       $R$1$i = $178;
       $RP$1$i = $177;
      }
     }
     if ($RP$1$i$lcssa >>> 0 < $150 >>> 0) _abort(); else {
      HEAP32[$RP$1$i$lcssa >> 2] = 0;
      $R$3$i = $R$1$i$lcssa;
      break;
     }
    } else {
     $160 = HEAP32[$v$0$i$lcssa + 8 >> 2] | 0;
     if ($160 >>> 0 < $150 >>> 0) _abort();
     $162 = $160 + 12 | 0;
     if ((HEAP32[$162 >> 2] | 0) != ($v$0$i$lcssa | 0)) _abort();
     $165 = $157 + 8 | 0;
     if ((HEAP32[$165 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
      HEAP32[$162 >> 2] = $157;
      HEAP32[$165 >> 2] = $160;
      $R$3$i = $157;
      break;
     } else _abort();
    } while (0);
    do if ($155 | 0) {
     $183 = HEAP32[$v$0$i$lcssa + 28 >> 2] | 0;
     $184 = 17024 + ($183 << 2) | 0;
     if (($v$0$i$lcssa | 0) == (HEAP32[$184 >> 2] | 0)) {
      HEAP32[$184 >> 2] = $R$3$i;
      if (!$R$3$i) {
       HEAP32[4181] = HEAP32[4181] & ~(1 << $183);
       break;
      }
     } else {
      if ($155 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
      $193 = $155 + 16 | 0;
      if ((HEAP32[$193 >> 2] | 0) == ($v$0$i$lcssa | 0)) HEAP32[$193 >> 2] = $R$3$i; else HEAP32[$155 + 20 >> 2] = $R$3$i;
      if (!$R$3$i) break;
     }
     $198 = HEAP32[4184] | 0;
     if ($R$3$i >>> 0 < $198 >>> 0) _abort();
     HEAP32[$R$3$i + 24 >> 2] = $155;
     $202 = HEAP32[$v$0$i$lcssa + 16 >> 2] | 0;
     do if ($202 | 0) if ($202 >>> 0 < $198 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 16 >> 2] = $202;
      HEAP32[$202 + 24 >> 2] = $R$3$i;
      break;
     } while (0);
     $208 = HEAP32[$v$0$i$lcssa + 20 >> 2] | 0;
     if ($208 | 0) if ($208 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $R$3$i;
      break;
     }
    } while (0);
    if ($rsize$0$i$lcssa >>> 0 < 16) {
     $215 = $rsize$0$i$lcssa + $4 | 0;
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $215 | 3;
     $219 = $v$0$i$lcssa + $215 + 4 | 0;
     HEAP32[$219 >> 2] = HEAP32[$219 >> 2] | 1;
    } else {
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $4 | 3;
     HEAP32[$152 + 4 >> 2] = $rsize$0$i$lcssa | 1;
     HEAP32[$152 + $rsize$0$i$lcssa >> 2] = $rsize$0$i$lcssa;
     $227 = HEAP32[4182] | 0;
     if ($227 | 0) {
      $229 = HEAP32[4185] | 0;
      $230 = $227 >>> 3;
      $232 = 16760 + ($230 << 1 << 2) | 0;
      $233 = HEAP32[4180] | 0;
      $234 = 1 << $230;
      if (!($233 & $234)) {
       HEAP32[4180] = $233 | $234;
       $$pre$phi$iZ2D = $232 + 8 | 0;
       $F1$0$i = $232;
      } else {
       $238 = $232 + 8 | 0;
       $239 = HEAP32[$238 >> 2] | 0;
       if ($239 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $238;
        $F1$0$i = $239;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $229;
      HEAP32[$F1$0$i + 12 >> 2] = $229;
      HEAP32[$229 + 8 >> 2] = $F1$0$i;
      HEAP32[$229 + 12 >> 2] = $232;
     }
     HEAP32[4182] = $rsize$0$i$lcssa;
     HEAP32[4185] = $152;
    }
    $$0 = $v$0$i$lcssa + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else $nb$0 = $4;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $247 = $bytes + 11 | 0;
  $248 = $247 & -8;
  $249 = HEAP32[4181] | 0;
  if (!$249) $nb$0 = $248; else {
   $251 = 0 - $248 | 0;
   $252 = $247 >>> 8;
   if (!$252) $idx$0$i = 0; else if ($248 >>> 0 > 16777215) $idx$0$i = 31; else {
    $257 = ($252 + 1048320 | 0) >>> 16 & 8;
    $258 = $252 << $257;
    $261 = ($258 + 520192 | 0) >>> 16 & 4;
    $263 = $258 << $261;
    $266 = ($263 + 245760 | 0) >>> 16 & 2;
    $271 = 14 - ($261 | $257 | $266) + ($263 << $266 >>> 15) | 0;
    $idx$0$i = $248 >>> ($271 + 7 | 0) & 1 | $271 << 1;
   }
   $278 = HEAP32[17024 + ($idx$0$i << 2) >> 2] | 0;
   L123 : do if (!$278) {
    $rsize$3$i = $251;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 86;
   } else {
    $rsize$0$i5 = $251;
    $rst$0$i = 0;
    $sizebits$0$i = $248 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i4 = $278;
    $v$0$i6 = 0;
    while (1) {
     $287 = HEAP32[$t$0$i4 + 4 >> 2] & -8;
     $288 = $287 - $248 | 0;
     if ($288 >>> 0 < $rsize$0$i5 >>> 0) if (($287 | 0) == ($248 | 0)) {
      $rsize$412$i = $288;
      $t$411$i = $t$0$i4;
      $v$413$i = $t$0$i4;
      label = 90;
      break L123;
     } else {
      $rsize$1$i = $288;
      $v$1$i = $t$0$i4;
     } else {
      $rsize$1$i = $rsize$0$i5;
      $v$1$i = $v$0$i6;
     }
     $292 = HEAP32[$t$0$i4 + 20 >> 2] | 0;
     $t$0$i4 = HEAP32[$t$0$i4 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($292 | 0) == 0 | ($292 | 0) == ($t$0$i4 | 0) ? $rst$0$i : $292;
     $298 = ($t$0$i4 | 0) == 0;
     if ($298) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 86;
      break;
     } else {
      $rsize$0$i5 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << ($298 & 1 ^ 1);
      $v$0$i6 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 86) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $303 = 2 << $idx$0$i;
     $306 = $249 & ($303 | 0 - $303);
     if (!$306) {
      $nb$0 = $248;
      break;
     }
     $310 = ($306 & 0 - $306) + -1 | 0;
     $312 = $310 >>> 12 & 16;
     $313 = $310 >>> $312;
     $315 = $313 >>> 5 & 8;
     $317 = $313 >>> $315;
     $319 = $317 >>> 2 & 4;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 2;
     $325 = $321 >>> $323;
     $327 = $325 >>> 1 & 1;
     $t$4$ph$i = HEAP32[17024 + (($315 | $312 | $319 | $323 | $327) + ($325 >>> $327) << 2) >> 2] | 0;
    } else $t$4$ph$i = $t$2$i;
    if (!$t$4$ph$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$3$i;
    } else {
     $rsize$412$i = $rsize$3$i;
     $t$411$i = $t$4$ph$i;
     $v$413$i = $v$3$i;
     label = 90;
    }
   }
   if ((label | 0) == 90) while (1) {
    label = 0;
    $337 = (HEAP32[$t$411$i + 4 >> 2] & -8) - $248 | 0;
    $338 = $337 >>> 0 < $rsize$412$i >>> 0;
    $$rsize$4$i = $338 ? $337 : $rsize$412$i;
    $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
    $340 = HEAP32[$t$411$i + 16 >> 2] | 0;
    if ($340 | 0) {
     $rsize$412$i = $$rsize$4$i;
     $t$411$i = $340;
     $v$413$i = $t$4$v$4$i;
     label = 90;
     continue;
    }
    $t$411$i = HEAP32[$t$411$i + 20 >> 2] | 0;
    if (!$t$411$i) {
     $rsize$4$lcssa$i = $$rsize$4$i;
     $v$4$lcssa$i = $t$4$v$4$i;
     break;
    } else {
     $rsize$412$i = $$rsize$4$i;
     $v$413$i = $t$4$v$4$i;
     label = 90;
    }
   }
   if (!$v$4$lcssa$i) $nb$0 = $248; else if ($rsize$4$lcssa$i >>> 0 < ((HEAP32[4182] | 0) - $248 | 0) >>> 0) {
    $349 = HEAP32[4184] | 0;
    if ($v$4$lcssa$i >>> 0 < $349 >>> 0) _abort();
    $351 = $v$4$lcssa$i + $248 | 0;
    if ($v$4$lcssa$i >>> 0 >= $351 >>> 0) _abort();
    $354 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
    $356 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
    do if (($356 | 0) == ($v$4$lcssa$i | 0)) {
     $367 = $v$4$lcssa$i + 20 | 0;
     $368 = HEAP32[$367 >> 2] | 0;
     if (!$368) {
      $370 = $v$4$lcssa$i + 16 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if (!$371) {
       $R$3$i11 = 0;
       break;
      } else {
       $R$1$i9 = $371;
       $RP$1$i8 = $370;
      }
     } else {
      $R$1$i9 = $368;
      $RP$1$i8 = $367;
     }
     while (1) {
      $373 = $R$1$i9 + 20 | 0;
      $374 = HEAP32[$373 >> 2] | 0;
      if ($374 | 0) {
       $R$1$i9 = $374;
       $RP$1$i8 = $373;
       continue;
      }
      $376 = $R$1$i9 + 16 | 0;
      $377 = HEAP32[$376 >> 2] | 0;
      if (!$377) {
       $R$1$i9$lcssa = $R$1$i9;
       $RP$1$i8$lcssa = $RP$1$i8;
       break;
      } else {
       $R$1$i9 = $377;
       $RP$1$i8 = $376;
      }
     }
     if ($RP$1$i8$lcssa >>> 0 < $349 >>> 0) _abort(); else {
      HEAP32[$RP$1$i8$lcssa >> 2] = 0;
      $R$3$i11 = $R$1$i9$lcssa;
      break;
     }
    } else {
     $359 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
     if ($359 >>> 0 < $349 >>> 0) _abort();
     $361 = $359 + 12 | 0;
     if ((HEAP32[$361 >> 2] | 0) != ($v$4$lcssa$i | 0)) _abort();
     $364 = $356 + 8 | 0;
     if ((HEAP32[$364 >> 2] | 0) == ($v$4$lcssa$i | 0)) {
      HEAP32[$361 >> 2] = $356;
      HEAP32[$364 >> 2] = $359;
      $R$3$i11 = $356;
      break;
     } else _abort();
    } while (0);
    do if ($354 | 0) {
     $382 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
     $383 = 17024 + ($382 << 2) | 0;
     if (($v$4$lcssa$i | 0) == (HEAP32[$383 >> 2] | 0)) {
      HEAP32[$383 >> 2] = $R$3$i11;
      if (!$R$3$i11) {
       HEAP32[4181] = HEAP32[4181] & ~(1 << $382);
       break;
      }
     } else {
      if ($354 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
      $392 = $354 + 16 | 0;
      if ((HEAP32[$392 >> 2] | 0) == ($v$4$lcssa$i | 0)) HEAP32[$392 >> 2] = $R$3$i11; else HEAP32[$354 + 20 >> 2] = $R$3$i11;
      if (!$R$3$i11) break;
     }
     $397 = HEAP32[4184] | 0;
     if ($R$3$i11 >>> 0 < $397 >>> 0) _abort();
     HEAP32[$R$3$i11 + 24 >> 2] = $354;
     $401 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
     do if ($401 | 0) if ($401 >>> 0 < $397 >>> 0) _abort(); else {
      HEAP32[$R$3$i11 + 16 >> 2] = $401;
      HEAP32[$401 + 24 >> 2] = $R$3$i11;
      break;
     } while (0);
     $407 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
     if ($407 | 0) if ($407 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i11 + 20 >> 2] = $407;
      HEAP32[$407 + 24 >> 2] = $R$3$i11;
      break;
     }
    } while (0);
    do if ($rsize$4$lcssa$i >>> 0 < 16) {
     $414 = $rsize$4$lcssa$i + $248 | 0;
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $414 | 3;
     $418 = $v$4$lcssa$i + $414 + 4 | 0;
     HEAP32[$418 >> 2] = HEAP32[$418 >> 2] | 1;
    } else {
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $248 | 3;
     HEAP32[$351 + 4 >> 2] = $rsize$4$lcssa$i | 1;
     HEAP32[$351 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
     $426 = $rsize$4$lcssa$i >>> 3;
     if ($rsize$4$lcssa$i >>> 0 < 256) {
      $429 = 16760 + ($426 << 1 << 2) | 0;
      $430 = HEAP32[4180] | 0;
      $431 = 1 << $426;
      if (!($430 & $431)) {
       HEAP32[4180] = $430 | $431;
       $$pre$phi$i14Z2D = $429 + 8 | 0;
       $F5$0$i = $429;
      } else {
       $435 = $429 + 8 | 0;
       $436 = HEAP32[$435 >> 2] | 0;
       if ($436 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
        $$pre$phi$i14Z2D = $435;
        $F5$0$i = $436;
       }
      }
      HEAP32[$$pre$phi$i14Z2D >> 2] = $351;
      HEAP32[$F5$0$i + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $F5$0$i;
      HEAP32[$351 + 12 >> 2] = $429;
      break;
     }
     $442 = $rsize$4$lcssa$i >>> 8;
     if (!$442) $I7$0$i = 0; else if ($rsize$4$lcssa$i >>> 0 > 16777215) $I7$0$i = 31; else {
      $447 = ($442 + 1048320 | 0) >>> 16 & 8;
      $448 = $442 << $447;
      $451 = ($448 + 520192 | 0) >>> 16 & 4;
      $453 = $448 << $451;
      $456 = ($453 + 245760 | 0) >>> 16 & 2;
      $461 = 14 - ($451 | $447 | $456) + ($453 << $456 >>> 15) | 0;
      $I7$0$i = $rsize$4$lcssa$i >>> ($461 + 7 | 0) & 1 | $461 << 1;
     }
     $467 = 17024 + ($I7$0$i << 2) | 0;
     HEAP32[$351 + 28 >> 2] = $I7$0$i;
     $469 = $351 + 16 | 0;
     HEAP32[$469 + 4 >> 2] = 0;
     HEAP32[$469 >> 2] = 0;
     $471 = HEAP32[4181] | 0;
     $472 = 1 << $I7$0$i;
     if (!($471 & $472)) {
      HEAP32[4181] = $471 | $472;
      HEAP32[$467 >> 2] = $351;
      HEAP32[$351 + 24 >> 2] = $467;
      HEAP32[$351 + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $351;
      break;
     }
     $K12$0$i = $rsize$4$lcssa$i << (($I7$0$i | 0) == 31 ? 0 : 25 - ($I7$0$i >>> 1) | 0);
     $T$0$i = HEAP32[$467 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
       $T$0$i$lcssa = $T$0$i;
       label = 148;
       break;
      }
      $490 = $T$0$i + 16 + ($K12$0$i >>> 31 << 2) | 0;
      $492 = HEAP32[$490 >> 2] | 0;
      if (!$492) {
       $$lcssa157 = $490;
       $T$0$i$lcssa156 = $T$0$i;
       label = 145;
       break;
      } else {
       $K12$0$i = $K12$0$i << 1;
       $T$0$i = $492;
      }
     }
     if ((label | 0) == 145) if ($$lcssa157 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa157 >> 2] = $351;
      HEAP32[$351 + 24 >> 2] = $T$0$i$lcssa156;
      HEAP32[$351 + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $351;
      break;
     } else if ((label | 0) == 148) {
      $499 = $T$0$i$lcssa + 8 | 0;
      $500 = HEAP32[$499 >> 2] | 0;
      $501 = HEAP32[4184] | 0;
      if ($500 >>> 0 >= $501 >>> 0 & $T$0$i$lcssa >>> 0 >= $501 >>> 0) {
       HEAP32[$500 + 12 >> 2] = $351;
       HEAP32[$499 >> 2] = $351;
       HEAP32[$351 + 8 >> 2] = $500;
       HEAP32[$351 + 12 >> 2] = $T$0$i$lcssa;
       HEAP32[$351 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $v$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $nb$0 = $248;
  }
 } while (0);
 $509 = HEAP32[4182] | 0;
 if ($509 >>> 0 >= $nb$0 >>> 0) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[4185] | 0;
  if ($511 >>> 0 > 15) {
   $514 = $512 + $nb$0 | 0;
   HEAP32[4185] = $514;
   HEAP32[4182] = $511;
   HEAP32[$514 + 4 >> 2] = $511 | 1;
   HEAP32[$514 + $511 >> 2] = $511;
   HEAP32[$512 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[4182] = 0;
   HEAP32[4185] = 0;
   HEAP32[$512 + 4 >> 2] = $509 | 3;
   $523 = $512 + $509 + 4 | 0;
   HEAP32[$523 >> 2] = HEAP32[$523 >> 2] | 1;
  }
  $$0 = $512 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $527 = HEAP32[4183] | 0;
 if ($527 >>> 0 > $nb$0 >>> 0) {
  $529 = $527 - $nb$0 | 0;
  HEAP32[4183] = $529;
  $530 = HEAP32[4186] | 0;
  $531 = $530 + $nb$0 | 0;
  HEAP32[4186] = $531;
  HEAP32[$531 + 4 >> 2] = $529 | 1;
  HEAP32[$530 + 4 >> 2] = $nb$0 | 3;
  $$0 = $530 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP32[4298] | 0)) {
  HEAP32[4300] = 4096;
  HEAP32[4299] = 4096;
  HEAP32[4301] = -1;
  HEAP32[4302] = -1;
  HEAP32[4303] = 0;
  HEAP32[4291] = 0;
  $541 = $magic$i$i & -16 ^ 1431655768;
  HEAP32[$magic$i$i >> 2] = $541;
  HEAP32[4298] = $541;
 }
 $542 = $nb$0 + 48 | 0;
 $543 = HEAP32[4300] | 0;
 $544 = $nb$0 + 47 | 0;
 $545 = $543 + $544 | 0;
 $546 = 0 - $543 | 0;
 $547 = $545 & $546;
 if ($547 >>> 0 <= $nb$0 >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $549 = HEAP32[4290] | 0;
 if ($549 | 0) {
  $551 = HEAP32[4288] | 0;
  $552 = $551 + $547 | 0;
  if ($552 >>> 0 <= $551 >>> 0 | $552 >>> 0 > $549 >>> 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L254 : do if (!(HEAP32[4291] & 4)) {
  $558 = HEAP32[4186] | 0;
  L256 : do if (!$558) label = 171; else {
   $sp$0$i$i = 17168;
   while (1) {
    $560 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($560 >>> 0 <= $558 >>> 0) {
     $562 = $sp$0$i$i + 4 | 0;
     if (($560 + (HEAP32[$562 >> 2] | 0) | 0) >>> 0 > $558 >>> 0) {
      $$lcssa153 = $sp$0$i$i;
      $$lcssa155 = $562;
      break;
     }
    }
    $sp$0$i$i = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$sp$0$i$i) {
     label = 171;
     break L256;
    }
   }
   $593 = $545 - (HEAP32[4183] | 0) & $546;
   if ($593 >>> 0 < 2147483647) {
    $595 = _sbrk($593 | 0) | 0;
    if (($595 | 0) == ((HEAP32[$$lcssa153 >> 2] | 0) + (HEAP32[$$lcssa155 >> 2] | 0) | 0)) {
     if (($595 | 0) != (-1 | 0)) {
      $tbase$746$i = $595;
      $tsize$745$i = $593;
      label = 191;
      break L254;
     }
    } else {
     $br$2$ph$i = $595;
     $ssize$2$ph$i = $593;
     label = 181;
    }
   }
  } while (0);
  do if ((label | 0) == 171) {
   $569 = _sbrk(0) | 0;
   if (($569 | 0) != (-1 | 0)) {
    $571 = $569;
    $572 = HEAP32[4299] | 0;
    $573 = $572 + -1 | 0;
    if (!($573 & $571)) $ssize$0$i = $547; else $ssize$0$i = $547 - $571 + ($573 + $571 & 0 - $572) | 0;
    $581 = HEAP32[4288] | 0;
    $582 = $581 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $585 = HEAP32[4290] | 0;
     if ($585 | 0) if ($582 >>> 0 <= $581 >>> 0 | $582 >>> 0 > $585 >>> 0) break;
     $589 = _sbrk($ssize$0$i | 0) | 0;
     if (($589 | 0) == ($569 | 0)) {
      $tbase$746$i = $569;
      $tsize$745$i = $ssize$0$i;
      label = 191;
      break L254;
     } else {
      $br$2$ph$i = $589;
      $ssize$2$ph$i = $ssize$0$i;
      label = 181;
     }
    }
   }
  } while (0);
  L276 : do if ((label | 0) == 181) {
   $601 = 0 - $ssize$2$ph$i | 0;
   do if ($542 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0))) {
    $605 = HEAP32[4300] | 0;
    $609 = $544 - $ssize$2$ph$i + $605 & 0 - $605;
    if ($609 >>> 0 < 2147483647) if ((_sbrk($609 | 0) | 0) == (-1 | 0)) {
     _sbrk($601 | 0) | 0;
     break L276;
    } else {
     $ssize$5$i = $609 + $ssize$2$ph$i | 0;
     break;
    } else $ssize$5$i = $ssize$2$ph$i;
   } else $ssize$5$i = $ssize$2$ph$i; while (0);
   if (($br$2$ph$i | 0) != (-1 | 0)) {
    $tbase$746$i = $br$2$ph$i;
    $tsize$745$i = $ssize$5$i;
    label = 191;
    break L254;
   }
  } while (0);
  HEAP32[4291] = HEAP32[4291] | 4;
  label = 188;
 } else label = 188; while (0);
 if ((label | 0) == 188) if ($547 >>> 0 < 2147483647) {
  $618 = _sbrk($547 | 0) | 0;
  $619 = _sbrk(0) | 0;
  if ($618 >>> 0 < $619 >>> 0 & (($618 | 0) != (-1 | 0) & ($619 | 0) != (-1 | 0))) {
   $625 = $619 - $618 | 0;
   if ($625 >>> 0 > ($nb$0 + 40 | 0) >>> 0) {
    $tbase$746$i = $618;
    $tsize$745$i = $625;
    label = 191;
   }
  }
 }
 if ((label | 0) == 191) {
  $628 = (HEAP32[4288] | 0) + $tsize$745$i | 0;
  HEAP32[4288] = $628;
  if ($628 >>> 0 > (HEAP32[4289] | 0) >>> 0) HEAP32[4289] = $628;
  $631 = HEAP32[4186] | 0;
  do if (!$631) {
   $633 = HEAP32[4184] | 0;
   if (($633 | 0) == 0 | $tbase$746$i >>> 0 < $633 >>> 0) HEAP32[4184] = $tbase$746$i;
   HEAP32[4292] = $tbase$746$i;
   HEAP32[4293] = $tsize$745$i;
   HEAP32[4295] = 0;
   HEAP32[4189] = HEAP32[4298];
   HEAP32[4188] = -1;
   $i$01$i$i = 0;
   do {
    $638 = 16760 + ($i$01$i$i << 1 << 2) | 0;
    HEAP32[$638 + 12 >> 2] = $638;
    HEAP32[$638 + 8 >> 2] = $638;
    $i$01$i$i = $i$01$i$i + 1 | 0;
   } while (($i$01$i$i | 0) != 32);
   $644 = $tbase$746$i + 8 | 0;
   $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7;
   $650 = $tbase$746$i + $649 | 0;
   $651 = $tsize$745$i + -40 - $649 | 0;
   HEAP32[4186] = $650;
   HEAP32[4183] = $651;
   HEAP32[$650 + 4 >> 2] = $651 | 1;
   HEAP32[$650 + $651 + 4 >> 2] = 40;
   HEAP32[4187] = HEAP32[4302];
  } else {
   $sp$068$i = 17168;
   do {
    $657 = HEAP32[$sp$068$i >> 2] | 0;
    $658 = $sp$068$i + 4 | 0;
    $659 = HEAP32[$658 >> 2] | 0;
    if (($tbase$746$i | 0) == ($657 + $659 | 0)) {
     $$lcssa147 = $657;
     $$lcssa149 = $658;
     $$lcssa151 = $659;
     $sp$068$i$lcssa = $sp$068$i;
     label = 201;
     break;
    }
    $sp$068$i = HEAP32[$sp$068$i + 8 >> 2] | 0;
   } while (($sp$068$i | 0) != 0);
   if ((label | 0) == 201) if (!(HEAP32[$sp$068$i$lcssa + 12 >> 2] & 8)) if ($631 >>> 0 < $tbase$746$i >>> 0 & $631 >>> 0 >= $$lcssa147 >>> 0) {
    HEAP32[$$lcssa149 >> 2] = $$lcssa151 + $tsize$745$i;
    $674 = $631 + 8 | 0;
    $679 = ($674 & 7 | 0) == 0 ? 0 : 0 - $674 & 7;
    $680 = $631 + $679 | 0;
    $682 = $tsize$745$i - $679 + (HEAP32[4183] | 0) | 0;
    HEAP32[4186] = $680;
    HEAP32[4183] = $682;
    HEAP32[$680 + 4 >> 2] = $682 | 1;
    HEAP32[$680 + $682 + 4 >> 2] = 40;
    HEAP32[4187] = HEAP32[4302];
    break;
   }
   $688 = HEAP32[4184] | 0;
   if ($tbase$746$i >>> 0 < $688 >>> 0) {
    HEAP32[4184] = $tbase$746$i;
    $753 = $tbase$746$i;
   } else $753 = $688;
   $690 = $tbase$746$i + $tsize$745$i | 0;
   $sp$167$i = 17168;
   while (1) {
    if ((HEAP32[$sp$167$i >> 2] | 0) == ($690 | 0)) {
     $$lcssa144 = $sp$167$i;
     $sp$167$i$lcssa = $sp$167$i;
     label = 209;
     break;
    }
    $sp$167$i = HEAP32[$sp$167$i + 8 >> 2] | 0;
    if (!$sp$167$i) {
     $sp$0$i$i$i = 17168;
     break;
    }
   }
   if ((label | 0) == 209) if (!(HEAP32[$sp$167$i$lcssa + 12 >> 2] & 8)) {
    HEAP32[$$lcssa144 >> 2] = $tbase$746$i;
    $700 = $sp$167$i$lcssa + 4 | 0;
    HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $tsize$745$i;
    $704 = $tbase$746$i + 8 | 0;
    $710 = $tbase$746$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0;
    $712 = $690 + 8 | 0;
    $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0;
    $722 = $710 + $nb$0 | 0;
    $723 = $718 - $710 - $nb$0 | 0;
    HEAP32[$710 + 4 >> 2] = $nb$0 | 3;
    do if (($718 | 0) == ($631 | 0)) {
     $728 = (HEAP32[4183] | 0) + $723 | 0;
     HEAP32[4183] = $728;
     HEAP32[4186] = $722;
     HEAP32[$722 + 4 >> 2] = $728 | 1;
    } else {
     if (($718 | 0) == (HEAP32[4185] | 0)) {
      $734 = (HEAP32[4182] | 0) + $723 | 0;
      HEAP32[4182] = $734;
      HEAP32[4185] = $722;
      HEAP32[$722 + 4 >> 2] = $734 | 1;
      HEAP32[$722 + $734 >> 2] = $734;
      break;
     }
     $739 = HEAP32[$718 + 4 >> 2] | 0;
     if (($739 & 3 | 0) == 1) {
      $742 = $739 & -8;
      $743 = $739 >>> 3;
      L328 : do if ($739 >>> 0 < 256) {
       $746 = HEAP32[$718 + 8 >> 2] | 0;
       $748 = HEAP32[$718 + 12 >> 2] | 0;
       $750 = 16760 + ($743 << 1 << 2) | 0;
       do if (($746 | 0) != ($750 | 0)) {
        if ($746 >>> 0 < $753 >>> 0) _abort();
        if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) break;
        _abort();
       } while (0);
       if (($748 | 0) == ($746 | 0)) {
        HEAP32[4180] = HEAP32[4180] & ~(1 << $743);
        break;
       }
       do if (($748 | 0) == ($750 | 0)) $$pre$phi10$i$iZ2D = $748 + 8 | 0; else {
        if ($748 >>> 0 < $753 >>> 0) _abort();
        $764 = $748 + 8 | 0;
        if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
         $$pre$phi10$i$iZ2D = $764;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$746 + 12 >> 2] = $748;
       HEAP32[$$pre$phi10$i$iZ2D >> 2] = $746;
      } else {
       $769 = HEAP32[$718 + 24 >> 2] | 0;
       $771 = HEAP32[$718 + 12 >> 2] | 0;
       do if (($771 | 0) == ($718 | 0)) {
        $782 = $718 + 16 | 0;
        $783 = $782 + 4 | 0;
        $784 = HEAP32[$783 >> 2] | 0;
        if (!$784) {
         $786 = HEAP32[$782 >> 2] | 0;
         if (!$786) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i = $786;
          $RP$1$i$i = $782;
         }
        } else {
         $R$1$i$i = $784;
         $RP$1$i$i = $783;
        }
        while (1) {
         $788 = $R$1$i$i + 20 | 0;
         $789 = HEAP32[$788 >> 2] | 0;
         if ($789 | 0) {
          $R$1$i$i = $789;
          $RP$1$i$i = $788;
          continue;
         }
         $791 = $R$1$i$i + 16 | 0;
         $792 = HEAP32[$791 >> 2] | 0;
         if (!$792) {
          $R$1$i$i$lcssa = $R$1$i$i;
          $RP$1$i$i$lcssa = $RP$1$i$i;
          break;
         } else {
          $R$1$i$i = $792;
          $RP$1$i$i = $791;
         }
        }
        if ($RP$1$i$i$lcssa >>> 0 < $753 >>> 0) _abort(); else {
         HEAP32[$RP$1$i$i$lcssa >> 2] = 0;
         $R$3$i$i = $R$1$i$i$lcssa;
         break;
        }
       } else {
        $774 = HEAP32[$718 + 8 >> 2] | 0;
        if ($774 >>> 0 < $753 >>> 0) _abort();
        $776 = $774 + 12 | 0;
        if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) _abort();
        $779 = $771 + 8 | 0;
        if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
         HEAP32[$776 >> 2] = $771;
         HEAP32[$779 >> 2] = $774;
         $R$3$i$i = $771;
         break;
        } else _abort();
       } while (0);
       if (!$769) break;
       $797 = HEAP32[$718 + 28 >> 2] | 0;
       $798 = 17024 + ($797 << 2) | 0;
       do if (($718 | 0) == (HEAP32[$798 >> 2] | 0)) {
        HEAP32[$798 >> 2] = $R$3$i$i;
        if ($R$3$i$i | 0) break;
        HEAP32[4181] = HEAP32[4181] & ~(1 << $797);
        break L328;
       } else {
        if ($769 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
        $807 = $769 + 16 | 0;
        if ((HEAP32[$807 >> 2] | 0) == ($718 | 0)) HEAP32[$807 >> 2] = $R$3$i$i; else HEAP32[$769 + 20 >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L328;
       } while (0);
       $812 = HEAP32[4184] | 0;
       if ($R$3$i$i >>> 0 < $812 >>> 0) _abort();
       HEAP32[$R$3$i$i + 24 >> 2] = $769;
       $815 = $718 + 16 | 0;
       $816 = HEAP32[$815 >> 2] | 0;
       do if ($816 | 0) if ($816 >>> 0 < $812 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 16 >> 2] = $816;
        HEAP32[$816 + 24 >> 2] = $R$3$i$i;
        break;
       } while (0);
       $822 = HEAP32[$815 + 4 >> 2] | 0;
       if (!$822) break;
       if ($822 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 20 >> 2] = $822;
        HEAP32[$822 + 24 >> 2] = $R$3$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $718 + $742 | 0;
      $qsize$0$i$i = $742 + $723 | 0;
     } else {
      $oldfirst$0$i$i = $718;
      $qsize$0$i$i = $723;
     }
     $830 = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2;
     HEAP32[$722 + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$722 + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $836 = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $839 = 16760 + ($836 << 1 << 2) | 0;
      $840 = HEAP32[4180] | 0;
      $841 = 1 << $836;
      do if (!($840 & $841)) {
       HEAP32[4180] = $840 | $841;
       $$pre$phi$i17$iZ2D = $839 + 8 | 0;
       $F4$0$i$i = $839;
      } else {
       $845 = $839 + 8 | 0;
       $846 = HEAP32[$845 >> 2] | 0;
       if ($846 >>> 0 >= (HEAP32[4184] | 0) >>> 0) {
        $$pre$phi$i17$iZ2D = $845;
        $F4$0$i$i = $846;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i17$iZ2D >> 2] = $722;
      HEAP32[$F4$0$i$i + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $F4$0$i$i;
      HEAP32[$722 + 12 >> 2] = $839;
      break;
     }
     $852 = $qsize$0$i$i >>> 8;
     do if (!$852) $I7$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I7$0$i$i = 31;
       break;
      }
      $857 = ($852 + 1048320 | 0) >>> 16 & 8;
      $858 = $852 << $857;
      $861 = ($858 + 520192 | 0) >>> 16 & 4;
      $863 = $858 << $861;
      $866 = ($863 + 245760 | 0) >>> 16 & 2;
      $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0;
      $I7$0$i$i = $qsize$0$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1;
     } while (0);
     $877 = 17024 + ($I7$0$i$i << 2) | 0;
     HEAP32[$722 + 28 >> 2] = $I7$0$i$i;
     $879 = $722 + 16 | 0;
     HEAP32[$879 + 4 >> 2] = 0;
     HEAP32[$879 >> 2] = 0;
     $881 = HEAP32[4181] | 0;
     $882 = 1 << $I7$0$i$i;
     if (!($881 & $882)) {
      HEAP32[4181] = $881 | $882;
      HEAP32[$877 >> 2] = $722;
      HEAP32[$722 + 24 >> 2] = $877;
      HEAP32[$722 + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $722;
      break;
     }
     $K8$0$i$i = $qsize$0$i$i << (($I7$0$i$i | 0) == 31 ? 0 : 25 - ($I7$0$i$i >>> 1) | 0);
     $T$0$i18$i = HEAP32[$877 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i18$i + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
       $T$0$i18$i$lcssa = $T$0$i18$i;
       label = 279;
       break;
      }
      $900 = $T$0$i18$i + 16 + ($K8$0$i$i >>> 31 << 2) | 0;
      $902 = HEAP32[$900 >> 2] | 0;
      if (!$902) {
       $$lcssa = $900;
       $T$0$i18$i$lcssa139 = $T$0$i18$i;
       label = 276;
       break;
      } else {
       $K8$0$i$i = $K8$0$i$i << 1;
       $T$0$i18$i = $902;
      }
     }
     if ((label | 0) == 276) if ($$lcssa >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa >> 2] = $722;
      HEAP32[$722 + 24 >> 2] = $T$0$i18$i$lcssa139;
      HEAP32[$722 + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $722;
      break;
     } else if ((label | 0) == 279) {
      $909 = $T$0$i18$i$lcssa + 8 | 0;
      $910 = HEAP32[$909 >> 2] | 0;
      $911 = HEAP32[4184] | 0;
      if ($910 >>> 0 >= $911 >>> 0 & $T$0$i18$i$lcssa >>> 0 >= $911 >>> 0) {
       HEAP32[$910 + 12 >> 2] = $722;
       HEAP32[$909 >> 2] = $722;
       HEAP32[$722 + 8 >> 2] = $910;
       HEAP32[$722 + 12 >> 2] = $T$0$i18$i$lcssa;
       HEAP32[$722 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $710 + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $sp$0$i$i$i = 17168;
   while (1) {
    $918 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($918 >>> 0 <= $631 >>> 0) {
     $922 = $918 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($922 >>> 0 > $631 >>> 0) {
      $$lcssa142 = $922;
      break;
     }
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $926 = $$lcssa142 + -47 | 0;
   $928 = $926 + 8 | 0;
   $934 = $926 + (($928 & 7 | 0) == 0 ? 0 : 0 - $928 & 7) | 0;
   $935 = $631 + 16 | 0;
   $937 = $934 >>> 0 < $935 >>> 0 ? $631 : $934;
   $938 = $937 + 8 | 0;
   $942 = $tbase$746$i + 8 | 0;
   $947 = ($942 & 7 | 0) == 0 ? 0 : 0 - $942 & 7;
   $948 = $tbase$746$i + $947 | 0;
   $949 = $tsize$745$i + -40 - $947 | 0;
   HEAP32[4186] = $948;
   HEAP32[4183] = $949;
   HEAP32[$948 + 4 >> 2] = $949 | 1;
   HEAP32[$948 + $949 + 4 >> 2] = 40;
   HEAP32[4187] = HEAP32[4302];
   $955 = $937 + 4 | 0;
   HEAP32[$955 >> 2] = 27;
   HEAP32[$938 >> 2] = HEAP32[4292];
   HEAP32[$938 + 4 >> 2] = HEAP32[4293];
   HEAP32[$938 + 8 >> 2] = HEAP32[4294];
   HEAP32[$938 + 12 >> 2] = HEAP32[4295];
   HEAP32[4292] = $tbase$746$i;
   HEAP32[4293] = $tsize$745$i;
   HEAP32[4295] = 0;
   HEAP32[4294] = $938;
   $p$0$i$i = $937 + 24 | 0;
   do {
    $p$0$i$i = $p$0$i$i + 4 | 0;
    HEAP32[$p$0$i$i >> 2] = 7;
   } while (($p$0$i$i + 4 | 0) >>> 0 < $$lcssa142 >>> 0);
   if (($937 | 0) != ($631 | 0)) {
    $962 = $937 - $631 | 0;
    HEAP32[$955 >> 2] = HEAP32[$955 >> 2] & -2;
    HEAP32[$631 + 4 >> 2] = $962 | 1;
    HEAP32[$937 >> 2] = $962;
    $967 = $962 >>> 3;
    if ($962 >>> 0 < 256) {
     $970 = 16760 + ($967 << 1 << 2) | 0;
     $971 = HEAP32[4180] | 0;
     $972 = 1 << $967;
     if (!($971 & $972)) {
      HEAP32[4180] = $971 | $972;
      $$pre$phi$i$iZ2D = $970 + 8 | 0;
      $F$0$i$i = $970;
     } else {
      $976 = $970 + 8 | 0;
      $977 = HEAP32[$976 >> 2] | 0;
      if ($977 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $976;
       $F$0$i$i = $977;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $631;
     HEAP32[$F$0$i$i + 12 >> 2] = $631;
     HEAP32[$631 + 8 >> 2] = $F$0$i$i;
     HEAP32[$631 + 12 >> 2] = $970;
     break;
    }
    $983 = $962 >>> 8;
    if (!$983) $I1$0$i$i = 0; else if ($962 >>> 0 > 16777215) $I1$0$i$i = 31; else {
     $988 = ($983 + 1048320 | 0) >>> 16 & 8;
     $989 = $983 << $988;
     $992 = ($989 + 520192 | 0) >>> 16 & 4;
     $994 = $989 << $992;
     $997 = ($994 + 245760 | 0) >>> 16 & 2;
     $1002 = 14 - ($992 | $988 | $997) + ($994 << $997 >>> 15) | 0;
     $I1$0$i$i = $962 >>> ($1002 + 7 | 0) & 1 | $1002 << 1;
    }
    $1008 = 17024 + ($I1$0$i$i << 2) | 0;
    HEAP32[$631 + 28 >> 2] = $I1$0$i$i;
    HEAP32[$631 + 20 >> 2] = 0;
    HEAP32[$935 >> 2] = 0;
    $1011 = HEAP32[4181] | 0;
    $1012 = 1 << $I1$0$i$i;
    if (!($1011 & $1012)) {
     HEAP32[4181] = $1011 | $1012;
     HEAP32[$1008 >> 2] = $631;
     HEAP32[$631 + 24 >> 2] = $1008;
     HEAP32[$631 + 12 >> 2] = $631;
     HEAP32[$631 + 8 >> 2] = $631;
     break;
    }
    $K2$0$i$i = $962 << (($I1$0$i$i | 0) == 31 ? 0 : 25 - ($I1$0$i$i >>> 1) | 0);
    $T$0$i$i = HEAP32[$1008 >> 2] | 0;
    while (1) {
     if ((HEAP32[$T$0$i$i + 4 >> 2] & -8 | 0) == ($962 | 0)) {
      $T$0$i$i$lcssa = $T$0$i$i;
      label = 305;
      break;
     }
     $1030 = $T$0$i$i + 16 + ($K2$0$i$i >>> 31 << 2) | 0;
     $1032 = HEAP32[$1030 >> 2] | 0;
     if (!$1032) {
      $$lcssa141 = $1030;
      $T$0$i$i$lcssa140 = $T$0$i$i;
      label = 302;
      break;
     } else {
      $K2$0$i$i = $K2$0$i$i << 1;
      $T$0$i$i = $1032;
     }
    }
    if ((label | 0) == 302) if ($$lcssa141 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
     HEAP32[$$lcssa141 >> 2] = $631;
     HEAP32[$631 + 24 >> 2] = $T$0$i$i$lcssa140;
     HEAP32[$631 + 12 >> 2] = $631;
     HEAP32[$631 + 8 >> 2] = $631;
     break;
    } else if ((label | 0) == 305) {
     $1039 = $T$0$i$i$lcssa + 8 | 0;
     $1040 = HEAP32[$1039 >> 2] | 0;
     $1041 = HEAP32[4184] | 0;
     if ($1040 >>> 0 >= $1041 >>> 0 & $T$0$i$i$lcssa >>> 0 >= $1041 >>> 0) {
      HEAP32[$1040 + 12 >> 2] = $631;
      HEAP32[$1039 >> 2] = $631;
      HEAP32[$631 + 8 >> 2] = $1040;
      HEAP32[$631 + 12 >> 2] = $T$0$i$i$lcssa;
      HEAP32[$631 + 24 >> 2] = 0;
      break;
     } else _abort();
    }
   }
  } while (0);
  $1049 = HEAP32[4183] | 0;
  if ($1049 >>> 0 > $nb$0 >>> 0) {
   $1051 = $1049 - $nb$0 | 0;
   HEAP32[4183] = $1051;
   $1052 = HEAP32[4186] | 0;
   $1053 = $1052 + $nb$0 | 0;
   HEAP32[4186] = $1053;
   HEAP32[$1053 + 4 >> 2] = $1051 | 1;
   HEAP32[$1052 + 4 >> 2] = $nb$0 | 3;
   $$0 = $1052 + 8 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $1059 = ___errno_location() | 0;
 HEAP32[$1059 >> 2] = 12;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0, $$33$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0, $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre$phi190$iZ2D = 0, $$pre171 = 0, $$pre188$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $169 = 0, $176 = 0, $177 = 0, $188 = 0, $2 = 0, $20 = 0, $200 = 0, $207 = 0, $209 = 0, $212 = 0, $213 = 0, $218 = 0, $22 = 0, $224 = 0, $225 = 0, $231 = 0, $24 = 0, $244 = 0, $246 = 0, $249 = 0, $25 = 0, $254 = 0, $257 = 0, $258 = 0, $267 = 0, $270 = 0, $272 = 0, $275 = 0, $277 = 0, $278 = 0, $279 = 0, $285 = 0, $287 = 0, $288 = 0, $29 = 0, $292 = 0, $3 = 0, $30 = 0, $300 = 0, $306 = 0, $315 = 0, $318 = 0, $321 = 0, $322 = 0, $334 = 0, $336 = 0, $341 = 0, $345 = 0, $348 = 0, $35 = 0, $358 = 0.0, $365 = 0, $369 = 0, $376 = 0, $378 = 0, $380 = 0, $381 = 0, $385 = 0, $391 = 0.0, $392 = 0, $395 = 0, $397 = 0, $4 = 0, $40 = 0, $400 = 0, $402 = 0, $406 = 0.0, $41 = 0, $416 = 0, $419 = 0, $422 = 0, $431 = 0, $433 = 0, $434 = 0, $440 = 0, $45 = 0, $452 = 0, $457 = 0, $462 = 0, $466 = 0, $47 = 0, $476 = 0, $477 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $487 = 0, $489 = 0, $492 = 0, $494 = 0, $495 = 0, $496 = 0, $498 = 0, $5 = 0, $502 = 0, $504 = 0, $508 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $518 = 0, $52 = 0, $524 = 0, $525 = 0, $526 = 0, $530 = 0, $538 = 0, $552 = 0, $553 = 0, $556 = 0, $561 = 0, $562 = 0, $564 = 0, $57 = 0, $572 = 0, $575 = 0, $578 = 0, $579 = 0, $580 = 0, $583 = 0, $587 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $602 = 0, $604 = 0, $609 = 0, $61 = 0, $610 = 0, $613 = 0, $615 = 0, $617 = 0, $619 = 0, $62 = 0, $630 = 0, $633 = 0, $638 = 0, $647 = 0, $648 = 0, $652 = 0, $655 = 0, $657 = 0, $659 = 0, $66 = 0, $663 = 0, $666 = 0, $670 = 0, $68 = 0, $680 = 0, $685 = 0, $692 = 0, $697 = 0, $7 = 0, $705 = 0, $715 = 0, $719 = 0, $727 = 0, $734 = 0, $736 = 0, $740 = 0, $742 = 0, $751 = 0, $757 = 0, $772 = 0, $774 = 0, $787 = 0, $798 = 0, $8 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0, $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0, $i$3101$i = 0, $i$389 = 0, $isdigittmp = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notrhs$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0, $s$7 = 0, $s$7$lcssa298 = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0, $t$0 = 0, $t$1 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $big$i = sp + 24 | 0;
 $e2$i = sp + 16 | 0;
 $buf$i = sp + 588 | 0;
 $ebuf0$i = sp + 576 | 0;
 $arg = sp;
 $buf = sp + 536 | 0;
 $wc = sp + 8 | 0;
 $mb = sp + 528 | 0;
 $0 = ($f | 0) != 0;
 $1 = $buf + 40 | 0;
 $2 = $1;
 $3 = $buf + 39 | 0;
 $4 = $wc + 4 | 0;
 $5 = $buf$i;
 $6 = 0 - $5 | 0;
 $7 = $ebuf0$i + 12 | 0;
 $8 = $ebuf0$i + 11 | 0;
 $9 = $7;
 $10 = $9 - $5 | 0;
 $11 = -2 - $5 | 0;
 $12 = $9 + 2 | 0;
 $13 = $big$i + 288 | 0;
 $14 = $buf$i + 9 | 0;
 $15 = $14;
 $16 = $buf$i + 8 | 0;
 $cnt$0 = 0;
 $l$0 = 0;
 $l10n$0 = 0;
 $s$0 = $fmt;
 L1 : while (1) {
  do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
   $20 = ___errno_location() | 0;
   HEAP32[$20 >> 2] = 75;
   $cnt$1 = -1;
   break;
  } else {
   $cnt$1 = $l$0 + $cnt$0 | 0;
   break;
  } else $cnt$1 = $cnt$0; while (0);
  $22 = HEAP8[$s$0 >> 0] | 0;
  if (!($22 << 24 >> 24)) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;
   $s$1 = $s$0;
  }
  L9 : while (1) {
   switch ($24 << 24 >> 24) {
   case 37:
    {
     $s$292 = $s$1;
     $z$093 = $s$1;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $s$2$lcssa = $s$1;
     $z$0$lcssa = $s$1;
     break L9;
     break;
    }
   default:
    {}
   }
   $25 = $s$1 + 1 | 0;
   $24 = HEAP8[$25 >> 0] | 0;
   $s$1 = $25;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$s$292 + 1 >> 0] | 0) != 37) {
    $s$2$lcssa = $s$292;
    $z$0$lcssa = $z$093;
    break L12;
   }
   $29 = $z$093 + 1 | 0;
   $30 = $s$292 + 2 | 0;
   if ((HEAP8[$30 >> 0] | 0) == 37) {
    $s$292 = $30;
    $z$093 = $29;
    label = 9;
   } else {
    $s$2$lcssa = $30;
    $z$0$lcssa = $29;
    break;
   }
  } while (0);
  $35 = $z$0$lcssa - $s$0 | 0;
  if ($0) if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s$0, $35, $f) | 0;
  if (($z$0$lcssa | 0) != ($s$0 | 0)) {
   $cnt$0 = $cnt$1;
   $l$0 = $35;
   $s$0 = $s$2$lcssa;
   continue;
  }
  $40 = $s$2$lcssa + 1 | 0;
  $41 = HEAP8[$40 >> 0] | 0;
  $isdigittmp = ($41 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $45 = (HEAP8[$s$2$lcssa + 2 >> 0] | 0) == 36;
   $$43 = $45 ? $s$2$lcssa + 3 | 0 : $40;
   $48 = HEAP8[$$43 >> 0] | 0;
   $argpos$0 = $45 ? $isdigittmp : -1;
   $l10n$1 = $45 ? 1 : $l10n$0;
   $storemerge = $$43;
  } else {
   $48 = $41;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  L25 : do if (($47 & -32 | 0) == 32) {
   $52 = $47;
   $57 = $48;
   $fl$0100 = 0;
   $storemerge899 = $storemerge;
   while (1) {
    if (!(1 << $52 + -32 & 75913)) {
     $66 = $57;
     $fl$053 = $fl$0100;
     $storemerge851 = $storemerge899;
     break L25;
    }
    $60 = 1 << ($57 << 24 >> 24) + -32 | $fl$0100;
    $61 = $storemerge899 + 1 | 0;
    $62 = HEAP8[$61 >> 0] | 0;
    $52 = $62 << 24 >> 24;
    if (($52 & -32 | 0) != 32) {
     $66 = $62;
     $fl$053 = $60;
     $storemerge851 = $61;
     break;
    } else {
     $57 = $62;
     $fl$0100 = $60;
     $storemerge899 = $61;
    }
   }
  } else {
   $66 = $48;
   $fl$053 = 0;
   $storemerge851 = $storemerge;
  } while (0);
  do if ($66 << 24 >> 24 == 42) {
   $68 = $storemerge851 + 1 | 0;
   $isdigittmp11 = (HEAP8[$68 >> 0] | 0) + -48 | 0;
   if ($isdigittmp11 >>> 0 < 10) if ((HEAP8[$storemerge851 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge13 = $storemerge851 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$68 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 24; else label = 24;
   if ((label | 0) == 24) {
    label = 0;
    if ($l10n$1 | 0) {
     $$0 = -1;
     break L1;
    }
    if (!$0) {
     $fl$1 = $fl$053;
     $l10n$3 = 0;
     $s$4 = $68;
     $w$1 = 0;
     break;
    }
    $92 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $93 = HEAP32[$92 >> 2] | 0;
    HEAP32[$ap >> 2] = $92 + 4;
    $l10n$2 = 0;
    $storemerge13 = $68;
    $w$0 = $93;
   }
   if (($w$0 | 0) < 0) {
    $fl$1 = $fl$053 | 8192;
    $l10n$3 = $l10n$2;
    $s$4 = $storemerge13;
    $w$1 = 0 - $w$0 | 0;
   } else {
    $fl$1 = $fl$053;
    $l10n$3 = $l10n$2;
    $s$4 = $storemerge13;
    $w$1 = $w$0;
   }
  } else {
   $isdigittmp1$i = ($66 << 24 >> 24) + -48 | 0;
   if ($isdigittmp1$i >>> 0 < 10) {
    $101 = $storemerge851;
    $i$03$i = 0;
    $isdigittmp4$i = $isdigittmp1$i;
    while (1) {
     $99 = ($i$03$i * 10 | 0) + $isdigittmp4$i | 0;
     $100 = $101 + 1 | 0;
     $isdigittmp4$i = (HEAP8[$100 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i >>> 0 >= 10) {
      $$lcssa = $99;
      $$lcssa295 = $100;
      break;
     } else {
      $101 = $100;
      $i$03$i = $99;
     }
    }
    if (($$lcssa | 0) < 0) {
     $$0 = -1;
     break L1;
    } else {
     $fl$1 = $fl$053;
     $l10n$3 = $l10n$1;
     $s$4 = $$lcssa295;
     $w$1 = $$lcssa;
    }
   } else {
    $fl$1 = $fl$053;
    $l10n$3 = $l10n$1;
    $s$4 = $storemerge851;
    $w$1 = 0;
   }
  } while (0);
  L46 : do if ((HEAP8[$s$4 >> 0] | 0) == 46) {
   $107 = $s$4 + 1 | 0;
   $108 = HEAP8[$107 >> 0] | 0;
   if ($108 << 24 >> 24 != 42) {
    $isdigittmp1$i22 = ($108 << 24 >> 24) + -48 | 0;
    if ($isdigittmp1$i22 >>> 0 < 10) {
     $140 = $107;
     $i$03$i25 = 0;
     $isdigittmp4$i24 = $isdigittmp1$i22;
    } else {
     $p$0 = 0;
     $s$6 = $107;
     break;
    }
    while (1) {
     $138 = ($i$03$i25 * 10 | 0) + $isdigittmp4$i24 | 0;
     $139 = $140 + 1 | 0;
     $isdigittmp4$i24 = (HEAP8[$139 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i24 >>> 0 >= 10) {
      $p$0 = $138;
      $s$6 = $139;
      break L46;
     } else {
      $140 = $139;
      $i$03$i25 = $138;
     }
    }
   }
   $110 = $s$4 + 2 | 0;
   $isdigittmp9 = (HEAP8[$110 >> 0] | 0) + -48 | 0;
   if ($isdigittmp9 >>> 0 < 10) if ((HEAP8[$s$4 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10;
    $p$0 = HEAP32[$nl_arg + ((HEAP8[$110 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $s$6 = $s$4 + 4 | 0;
    break;
   }
   if ($l10n$3 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($0) {
    $134 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $135 = HEAP32[$134 >> 2] | 0;
    HEAP32[$ap >> 2] = $134 + 4;
    $p$0 = $135;
    $s$6 = $110;
   } else {
    $p$0 = 0;
    $s$6 = $110;
   }
  } else {
   $p$0 = -1;
   $s$6 = $s$4;
  } while (0);
  $s$7 = $s$6;
  $st$0 = 0;
  while (1) {
   $145 = (HEAP8[$s$7 >> 0] | 0) + -65 | 0;
   if ($145 >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $147 = $s$7 + 1 | 0;
   $149 = HEAP8[11393 + ($st$0 * 58 | 0) + $145 >> 0] | 0;
   $150 = $149 & 255;
   if (($150 + -1 | 0) >>> 0 < 8) {
    $s$7 = $147;
    $st$0 = $150;
   } else {
    $$lcssa300 = $147;
    $$lcssa301 = $149;
    $$lcssa302 = $150;
    $s$7$lcssa298 = $s$7;
    $st$0$lcssa299 = $st$0;
    break;
   }
  }
  if (!($$lcssa301 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $155 = ($argpos$0 | 0) > -1;
  do if ($$lcssa301 << 24 >> 24 == 19) if ($155) {
   $$0 = -1;
   break L1;
  } else label = 52; else {
   if ($155) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $$lcssa302;
    $158 = $nl_arg + ($argpos$0 << 3) | 0;
    $163 = HEAP32[$158 + 4 >> 2] | 0;
    $164 = $arg;
    HEAP32[$164 >> 2] = HEAP32[$158 >> 2];
    HEAP32[$164 + 4 >> 2] = $163;
    label = 52;
    break;
   }
   if (!$0) {
    $$0 = 0;
    break L1;
   }
   _pop_arg_526($arg, $$lcssa302, $ap);
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if (!$0) {
    $cnt$0 = $cnt$1;
    $l$0 = $35;
    $l10n$0 = $l10n$3;
    $s$0 = $$lcssa300;
    continue;
   }
  }
  $169 = HEAP8[$s$7$lcssa298 >> 0] | 0;
  $t$0 = ($st$0$lcssa299 | 0) != 0 & ($169 & 15 | 0) == 3 ? $169 & -33 : $169;
  $176 = $fl$1 & -65537;
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $176;
  L75 : do switch ($t$0 | 0) {
  case 110:
   {
    switch ($st$0$lcssa299 | 0) {
    case 0:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 2:
     {
      $188 = HEAP32[$arg >> 2] | 0;
      HEAP32[$188 >> 2] = $cnt$1;
      HEAP32[$188 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 7:
     {
      $200 = HEAP32[$arg >> 2] | 0;
      HEAP32[$200 >> 2] = $cnt$1;
      HEAP32[$200 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    default:
     {
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
     }
    }
    break;
   }
  case 112:
   {
    $fl$3 = $fl$1$ | 8;
    $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
    $t$1 = 120;
    label = 64;
    break;
   }
  case 88:
  case 120:
   {
    $fl$3 = $fl$1$;
    $p$1 = $p$0;
    $t$1 = $t$0;
    label = 64;
    break;
   }
  case 111:
   {
    $244 = $arg;
    $246 = HEAP32[$244 >> 2] | 0;
    $249 = HEAP32[$244 + 4 >> 2] | 0;
    if (($246 | 0) == 0 & ($249 | 0) == 0) $$0$lcssa$i = $1; else {
     $$03$i33 = $1;
     $254 = $246;
     $258 = $249;
     while (1) {
      $257 = $$03$i33 + -1 | 0;
      HEAP8[$257 >> 0] = $254 & 7 | 48;
      $254 = _bitshift64Lshr($254 | 0, $258 | 0, 3) | 0;
      $258 = tempRet0;
      if (($254 | 0) == 0 & ($258 | 0) == 0) {
       $$0$lcssa$i = $257;
       break;
      } else $$03$i33 = $257;
     }
    }
    if (!($fl$1$ & 8)) {
     $a$0 = $$0$lcssa$i;
     $fl$4 = $fl$1$;
     $p$2 = $p$0;
     $pl$1 = 0;
     $prefix$1 = 11873;
     label = 77;
    } else {
     $267 = $2 - $$0$lcssa$i | 0;
     $a$0 = $$0$lcssa$i;
     $fl$4 = $fl$1$;
     $p$2 = ($p$0 | 0) > ($267 | 0) ? $p$0 : $267 + 1 | 0;
     $pl$1 = 0;
     $prefix$1 = 11873;
     label = 77;
    }
    break;
   }
  case 105:
  case 100:
   {
    $270 = $arg;
    $272 = HEAP32[$270 >> 2] | 0;
    $275 = HEAP32[$270 + 4 >> 2] | 0;
    if (($275 | 0) < 0) {
     $277 = _i64Subtract(0, 0, $272 | 0, $275 | 0) | 0;
     $278 = tempRet0;
     $279 = $arg;
     HEAP32[$279 >> 2] = $277;
     HEAP32[$279 + 4 >> 2] = $278;
     $287 = $277;
     $288 = $278;
     $pl$0 = 1;
     $prefix$0 = 11873;
     label = 76;
     break L75;
    }
    if (!($fl$1$ & 2048)) {
     $285 = $fl$1$ & 1;
     $287 = $272;
     $288 = $275;
     $pl$0 = $285;
     $prefix$0 = ($285 | 0) == 0 ? 11873 : 11875;
     label = 76;
    } else {
     $287 = $272;
     $288 = $275;
     $pl$0 = 1;
     $prefix$0 = 11874;
     label = 76;
    }
    break;
   }
  case 117:
   {
    $177 = $arg;
    $287 = HEAP32[$177 >> 2] | 0;
    $288 = HEAP32[$177 + 4 >> 2] | 0;
    $pl$0 = 0;
    $prefix$0 = 11873;
    label = 76;
    break;
   }
  case 99:
   {
    HEAP8[$3 >> 0] = HEAP32[$arg >> 2];
    $a$2 = $3;
    $fl$6 = $176;
    $p$5 = 1;
    $pl$2 = 0;
    $prefix$2 = 11873;
    $z$2 = $1;
    break;
   }
  case 109:
   {
    $315 = ___errno_location() | 0;
    $a$1 = _strerror(HEAP32[$315 >> 2] | 0) | 0;
    label = 82;
    break;
   }
  case 115:
   {
    $318 = HEAP32[$arg >> 2] | 0;
    $a$1 = $318 | 0 ? $318 : 13775;
    label = 82;
    break;
   }
  case 67:
   {
    HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
    HEAP32[$4 >> 2] = 0;
    HEAP32[$arg >> 2] = $wc;
    $798 = $wc;
    $p$4176 = -1;
    label = 86;
    break;
   }
  case 83:
   {
    $$pre171 = HEAP32[$arg >> 2] | 0;
    if (!$p$0) {
     _pad($f, 32, $w$1, 0, $fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;
     $p$4176 = $p$0;
     label = 86;
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    $358 = +HEAPF64[$arg >> 3];
    HEAP32[$e2$i >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = $358;
    if ((HEAP32[tempDoublePtr + 4 >> 2] | 0) < 0) {
     $$07$i = -$358;
     $pl$0$i = 1;
     $prefix$0$i = 13782;
    } else if (!($fl$1$ & 2048)) {
     $365 = $fl$1$ & 1;
     $$07$i = $358;
     $pl$0$i = $365;
     $prefix$0$i = ($365 | 0) == 0 ? 13783 : 13788;
    } else {
     $$07$i = $358;
     $pl$0$i = 1;
     $prefix$0$i = 13785;
    }
    HEAPF64[tempDoublePtr >> 3] = $$07$i;
    $369 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if ($369 >>> 0 < 2146435072 | ($369 | 0) == 2146435072 & 0 < 0) {
     $391 = +_frexpl($$07$i, $e2$i) * 2.0;
     $392 = $391 != 0.0;
     if ($392) HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1;
     $395 = $t$0 | 32;
     if (($395 | 0) == 97) {
      $397 = $t$0 & 32;
      $prefix$0$$i = ($397 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0;
      $400 = $pl$0$i | 2;
      $402 = 12 - $p$0 | 0;
      do if ($p$0 >>> 0 > 11 | ($402 | 0) == 0) $$1$i = $391; else {
       $re$171$i = $402;
       $round$070$i = 8.0;
       while (1) {
        $re$171$i = $re$171$i + -1 | 0;
        $406 = $round$070$i * 16.0;
        if (!$re$171$i) {
         $$lcssa319 = $406;
         break;
        } else $round$070$i = $406;
       }
       if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
        $$1$i = -($$lcssa319 + (-$391 - $$lcssa319));
        break;
       } else {
        $$1$i = $391 + $$lcssa319 - $$lcssa319;
        break;
       }
      } while (0);
      $416 = HEAP32[$e2$i >> 2] | 0;
      $419 = ($416 | 0) < 0 ? 0 - $416 | 0 : $416;
      $422 = _fmt_u($419, (($419 | 0) < 0) << 31 >> 31, $7) | 0;
      if (($422 | 0) == ($7 | 0)) {
       HEAP8[$8 >> 0] = 48;
       $estr$0$i = $8;
      } else $estr$0$i = $422;
      HEAP8[$estr$0$i + -1 >> 0] = ($416 >> 31 & 2) + 43;
      $431 = $estr$0$i + -2 | 0;
      HEAP8[$431 >> 0] = $t$0 + 15;
      $notrhs$i = ($p$0 | 0) < 1;
      $433 = ($fl$1$ & 8 | 0) == 0;
      $$2$i = $$1$i;
      $s$0$i = $buf$i;
      while (1) {
       $434 = ~~$$2$i;
       $440 = $s$0$i + 1 | 0;
       HEAP8[$s$0$i >> 0] = HEAPU8[11857 + $434 >> 0] | $397;
       $$2$i = ($$2$i - +($434 | 0)) * 16.0;
       do if (($440 - $5 | 0) == 1) {
        if ($433 & ($notrhs$i & $$2$i == 0.0)) {
         $s$1$i = $440;
         break;
        }
        HEAP8[$440 >> 0] = 46;
        $s$1$i = $s$0$i + 2 | 0;
       } else $s$1$i = $440; while (0);
       if (!($$2$i != 0.0)) {
        $s$1$i$lcssa = $s$1$i;
        break;
       } else $s$0$i = $s$1$i;
      }
      $$pre188$i = $s$1$i$lcssa;
      $452 = $431;
      $l$0$i = ($p$0 | 0) != 0 & ($11 + $$pre188$i | 0) < ($p$0 | 0) ? $12 + $p$0 - $452 | 0 : $10 - $452 + $$pre188$i | 0;
      $457 = $l$0$i + $400 | 0;
      _pad($f, 32, $w$1, $457, $fl$1$);
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$0$$i, $400, $f) | 0;
      _pad($f, 48, $w$1, $457, $fl$1$ ^ 65536);
      $462 = $$pre188$i - $5 | 0;
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($buf$i, $462, $f) | 0;
      $466 = $9 - $452 | 0;
      _pad($f, 48, $l$0$i - ($462 + $466) | 0, 0, 0);
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($431, $466, $f) | 0;
      _pad($f, 32, $w$1, $457, $fl$1$ ^ 8192);
      $$0$i = ($457 | 0) < ($w$1 | 0) ? $w$1 : $457;
      break;
     }
     $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0;
     if ($392) {
      $476 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0;
      HEAP32[$e2$i >> 2] = $476;
      $$3$i = $391 * 268435456.0;
      $477 = $476;
     } else {
      $$3$i = $391;
      $477 = HEAP32[$e2$i >> 2] | 0;
     }
     $$33$i = ($477 | 0) < 0 ? $big$i : $13;
     $479 = $$33$i;
     $$4$i = $$3$i;
     $z$0$i = $$33$i;
     while (1) {
      $480 = ~~$$4$i >>> 0;
      HEAP32[$z$0$i >> 2] = $480;
      $481 = $z$0$i + 4 | 0;
      $$4$i = ($$4$i - +($480 >>> 0)) * 1.0e9;
      if (!($$4$i != 0.0)) {
       $$lcssa303 = $481;
       break;
      } else $z$0$i = $481;
     }
     $$pr$i = HEAP32[$e2$i >> 2] | 0;
     if (($$pr$i | 0) > 0) {
      $487 = $$pr$i;
      $a$1149$i = $$33$i;
      $z$1148$i = $$lcssa303;
      while (1) {
       $489 = ($487 | 0) > 29 ? 29 : $487;
       $d$0141$i = $z$1148$i + -4 | 0;
       do if ($d$0141$i >>> 0 < $a$1149$i >>> 0) $a$2$ph$i = $a$1149$i; else {
        $carry$0142$i = 0;
        $d$0143$i = $d$0141$i;
        while (1) {
         $492 = _bitshift64Shl(HEAP32[$d$0143$i >> 2] | 0, 0, $489 | 0) | 0;
         $494 = _i64Add($492 | 0, tempRet0 | 0, $carry$0142$i | 0, 0) | 0;
         $495 = tempRet0;
         $496 = ___uremdi3($494 | 0, $495 | 0, 1e9, 0) | 0;
         HEAP32[$d$0143$i >> 2] = $496;
         $498 = ___udivdi3($494 | 0, $495 | 0, 1e9, 0) | 0;
         $d$0143$i = $d$0143$i + -4 | 0;
         if ($d$0143$i >>> 0 < $a$1149$i >>> 0) {
          $$lcssa304 = $498;
          break;
         } else $carry$0142$i = $498;
        }
        if (!$$lcssa304) {
         $a$2$ph$i = $a$1149$i;
         break;
        }
        $502 = $a$1149$i + -4 | 0;
        HEAP32[$502 >> 2] = $$lcssa304;
        $a$2$ph$i = $502;
       } while (0);
       $z$2$i = $z$1148$i;
       while (1) {
        if ($z$2$i >>> 0 <= $a$2$ph$i >>> 0) {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
        $504 = $z$2$i + -4 | 0;
        if (!(HEAP32[$504 >> 2] | 0)) $z$2$i = $504; else {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
       }
       $508 = (HEAP32[$e2$i >> 2] | 0) - $489 | 0;
       HEAP32[$e2$i >> 2] = $508;
       if (($508 | 0) > 0) {
        $487 = $508;
        $a$1149$i = $a$2$ph$i;
        $z$1148$i = $z$2$i$lcssa;
       } else {
        $$pr50$i = $508;
        $a$1$lcssa$i = $a$2$ph$i;
        $z$1$lcssa$i = $z$2$i$lcssa;
        break;
       }
      }
     } else {
      $$pr50$i = $$pr$i;
      $a$1$lcssa$i = $$33$i;
      $z$1$lcssa$i = $$lcssa303;
     }
     if (($$pr50$i | 0) < 0) {
      $513 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0;
      $514 = ($395 | 0) == 102;
      $516 = $$pr50$i;
      $a$3136$i = $a$1$lcssa$i;
      $z$3135$i = $z$1$lcssa$i;
      while (1) {
       $515 = 0 - $516 | 0;
       $518 = ($515 | 0) > 9 ? 9 : $515;
       do if ($a$3136$i >>> 0 < $z$3135$i >>> 0) {
        $524 = (1 << $518) + -1 | 0;
        $525 = 1e9 >>> $518;
        $carry3$0130$i = 0;
        $d$1129$i = $a$3136$i;
        while (1) {
         $526 = HEAP32[$d$1129$i >> 2] | 0;
         HEAP32[$d$1129$i >> 2] = ($526 >>> $518) + $carry3$0130$i;
         $530 = Math_imul($526 & $524, $525) | 0;
         $d$1129$i = $d$1129$i + 4 | 0;
         if ($d$1129$i >>> 0 >= $z$3135$i >>> 0) {
          $$lcssa306 = $530;
          break;
         } else $carry3$0130$i = $530;
        }
        $$a$3$i = (HEAP32[$a$3136$i >> 2] | 0) == 0 ? $a$3136$i + 4 | 0 : $a$3136$i;
        if (!$$lcssa306) {
         $$a$3192$i = $$a$3$i;
         $z$4$i = $z$3135$i;
         break;
        }
        HEAP32[$z$3135$i >> 2] = $$lcssa306;
        $$a$3192$i = $$a$3$i;
        $z$4$i = $z$3135$i + 4 | 0;
       } else {
        $$a$3192$i = (HEAP32[$a$3136$i >> 2] | 0) == 0 ? $a$3136$i + 4 | 0 : $a$3136$i;
        $z$4$i = $z$3135$i;
       } while (0);
       $538 = $514 ? $$33$i : $$a$3192$i;
       $$z$4$i = ($z$4$i - $538 >> 2 | 0) > ($513 | 0) ? $538 + ($513 << 2) | 0 : $z$4$i;
       $516 = (HEAP32[$e2$i >> 2] | 0) + $518 | 0;
       HEAP32[$e2$i >> 2] = $516;
       if (($516 | 0) >= 0) {
        $a$3$lcssa$i = $$a$3192$i;
        $z$3$lcssa$i = $$z$4$i;
        break;
       } else {
        $a$3136$i = $$a$3192$i;
        $z$3135$i = $$z$4$i;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;
      $z$3$lcssa$i = $z$1$lcssa$i;
     }
     do if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
      $552 = ($479 - $a$3$lcssa$i >> 2) * 9 | 0;
      $553 = HEAP32[$a$3$lcssa$i >> 2] | 0;
      if ($553 >>> 0 < 10) {
       $e$1$i = $552;
       break;
      } else {
       $e$0125$i = $552;
       $i$0124$i = 10;
      }
      while (1) {
       $i$0124$i = $i$0124$i * 10 | 0;
       $556 = $e$0125$i + 1 | 0;
       if ($553 >>> 0 < $i$0124$i >>> 0) {
        $e$1$i = $556;
        break;
       } else $e$0125$i = $556;
      }
     } else $e$1$i = 0; while (0);
     $561 = ($395 | 0) == 103;
     $562 = ($$p$i | 0) != 0;
     $564 = $$p$i - (($395 | 0) != 102 ? $e$1$i : 0) + (($562 & $561) << 31 >> 31) | 0;
     if (($564 | 0) < ((($z$3$lcssa$i - $479 >> 2) * 9 | 0) + -9 | 0)) {
      $572 = $564 + 9216 | 0;
      $575 = $$33$i + 4 + ((($572 | 0) / 9 | 0) + -1024 << 2) | 0;
      $j$0117$i = (($572 | 0) % 9 | 0) + 1 | 0;
      if (($j$0117$i | 0) < 9) {
       $i$1118$i = 10;
       $j$0119$i = $j$0117$i;
       while (1) {
        $578 = $i$1118$i * 10 | 0;
        $j$0119$i = $j$0119$i + 1 | 0;
        if (($j$0119$i | 0) == 9) {
         $i$1$lcssa$i = $578;
         break;
        } else $i$1118$i = $578;
       }
      } else $i$1$lcssa$i = 10;
      $579 = HEAP32[$575 >> 2] | 0;
      $580 = ($579 >>> 0) % ($i$1$lcssa$i >>> 0) | 0;
      $583 = ($575 + 4 | 0) == ($z$3$lcssa$i | 0);
      do if ($583 & ($580 | 0) == 0) {
       $a$8$i = $a$3$lcssa$i;
       $d$4$i = $575;
       $e$4$i = $e$1$i;
      } else {
       $$20$i = ((($579 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       $587 = ($i$1$lcssa$i | 0) / 2 | 0;
       if ($580 >>> 0 < $587 >>> 0) $small$0$i = .5; else $small$0$i = $583 & ($580 | 0) == ($587 | 0) ? 1.0 : 1.5;
       do if (!$pl$0$i) {
        $round6$1$i = $$20$i;
        $small$1$i = $small$0$i;
       } else {
        if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
         $round6$1$i = $$20$i;
         $small$1$i = $small$0$i;
         break;
        }
        $round6$1$i = -$$20$i;
        $small$1$i = -$small$0$i;
       } while (0);
       $595 = $579 - $580 | 0;
       HEAP32[$575 >> 2] = $595;
       if (!($round6$1$i + $small$1$i != $round6$1$i)) {
        $a$8$i = $a$3$lcssa$i;
        $d$4$i = $575;
        $e$4$i = $e$1$i;
        break;
       }
       $598 = $595 + $i$1$lcssa$i | 0;
       HEAP32[$575 >> 2] = $598;
       if ($598 >>> 0 > 999999999) {
        $a$5111$i = $a$3$lcssa$i;
        $d$2110$i = $575;
        while (1) {
         $600 = $d$2110$i + -4 | 0;
         HEAP32[$d$2110$i >> 2] = 0;
         if ($600 >>> 0 < $a$5111$i >>> 0) {
          $602 = $a$5111$i + -4 | 0;
          HEAP32[$602 >> 2] = 0;
          $a$6$i = $602;
         } else $a$6$i = $a$5111$i;
         $604 = (HEAP32[$600 >> 2] | 0) + 1 | 0;
         HEAP32[$600 >> 2] = $604;
         if ($604 >>> 0 > 999999999) {
          $a$5111$i = $a$6$i;
          $d$2110$i = $600;
         } else {
          $a$5$lcssa$i = $a$6$i;
          $d$2$lcssa$i = $600;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;
        $d$2$lcssa$i = $575;
       }
       $609 = ($479 - $a$5$lcssa$i >> 2) * 9 | 0;
       $610 = HEAP32[$a$5$lcssa$i >> 2] | 0;
       if ($610 >>> 0 < 10) {
        $a$8$i = $a$5$lcssa$i;
        $d$4$i = $d$2$lcssa$i;
        $e$4$i = $609;
        break;
       } else {
        $e$2106$i = $609;
        $i$2105$i = 10;
       }
       while (1) {
        $i$2105$i = $i$2105$i * 10 | 0;
        $613 = $e$2106$i + 1 | 0;
        if ($610 >>> 0 < $i$2105$i >>> 0) {
         $a$8$i = $a$5$lcssa$i;
         $d$4$i = $d$2$lcssa$i;
         $e$4$i = $613;
         break;
        } else $e$2106$i = $613;
       }
      } while (0);
      $615 = $d$4$i + 4 | 0;
      $a$9$ph$i = $a$8$i;
      $e$5$ph$i = $e$4$i;
      $z$7$ph$i = $z$3$lcssa$i >>> 0 > $615 >>> 0 ? $615 : $z$3$lcssa$i;
     } else {
      $a$9$ph$i = $a$3$lcssa$i;
      $e$5$ph$i = $e$1$i;
      $z$7$ph$i = $z$3$lcssa$i;
     }
     $617 = 0 - $e$5$ph$i | 0;
     $z$7$i = $z$7$ph$i;
     while (1) {
      if ($z$7$i >>> 0 <= $a$9$ph$i >>> 0) {
       $$lcssa162$i = 0;
       $z$7$i$lcssa = $z$7$i;
       break;
      }
      $619 = $z$7$i + -4 | 0;
      if (!(HEAP32[$619 >> 2] | 0)) $z$7$i = $619; else {
       $$lcssa162$i = 1;
       $z$7$i$lcssa = $z$7$i;
       break;
      }
     }
     do if ($561) {
      $$p$$i = ($562 & 1 ^ 1) + $$p$i | 0;
      if (($$p$$i | 0) > ($e$5$ph$i | 0) & ($e$5$ph$i | 0) > -5) {
       $$013$i = $t$0 + -1 | 0;
       $$210$i = $$p$$i + -1 - $e$5$ph$i | 0;
      } else {
       $$013$i = $t$0 + -2 | 0;
       $$210$i = $$p$$i + -1 | 0;
      }
      $630 = $fl$1$ & 8;
      if ($630 | 0) {
       $$114$i = $$013$i;
       $$311$i = $$210$i;
       $$pre$phi190$iZ2D = $630;
       break;
      }
      do if ($$lcssa162$i) {
       $633 = HEAP32[$z$7$i$lcssa + -4 >> 2] | 0;
       if (!$633) {
        $j$2$i = 9;
        break;
       }
       if (!(($633 >>> 0) % 10 | 0)) {
        $i$3101$i = 10;
        $j$1102$i = 0;
       } else {
        $j$2$i = 0;
        break;
       }
       while (1) {
        $i$3101$i = $i$3101$i * 10 | 0;
        $638 = $j$1102$i + 1 | 0;
        if (($633 >>> 0) % ($i$3101$i >>> 0) | 0 | 0) {
         $j$2$i = $638;
         break;
        } else $j$1102$i = $638;
       }
      } else $j$2$i = 9; while (0);
      $647 = (($z$7$i$lcssa - $479 >> 2) * 9 | 0) + -9 | 0;
      if (($$013$i | 32 | 0) == 102) {
       $648 = $647 - $j$2$i | 0;
       $$23$i = ($648 | 0) < 0 ? 0 : $648;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$23$i | 0) ? $$210$i : $$23$i;
       $$pre$phi190$iZ2D = 0;
       break;
      } else {
       $652 = $647 + $e$5$ph$i - $j$2$i | 0;
       $$25$i = ($652 | 0) < 0 ? 0 : $652;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$25$i | 0) ? $$210$i : $$25$i;
       $$pre$phi190$iZ2D = 0;
       break;
      }
     } else {
      $$114$i = $t$0;
      $$311$i = $$p$i;
      $$pre$phi190$iZ2D = $fl$1$ & 8;
     } while (0);
     $655 = $$311$i | $$pre$phi190$iZ2D;
     $657 = ($655 | 0) != 0 & 1;
     $659 = ($$114$i | 32 | 0) == 102;
     if ($659) {
      $$pn$i = ($e$5$ph$i | 0) > 0 ? $e$5$ph$i : 0;
      $estr$2$i = 0;
     } else {
      $663 = ($e$5$ph$i | 0) < 0 ? $617 : $e$5$ph$i;
      $666 = _fmt_u($663, (($663 | 0) < 0) << 31 >> 31, $7) | 0;
      if (($9 - $666 | 0) < 2) {
       $estr$195$i = $666;
       while (1) {
        $670 = $estr$195$i + -1 | 0;
        HEAP8[$670 >> 0] = 48;
        if (($9 - $670 | 0) < 2) $estr$195$i = $670; else {
         $estr$1$lcssa$i = $670;
         break;
        }
       }
      } else $estr$1$lcssa$i = $666;
      HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$5$ph$i >> 31 & 2) + 43;
      $680 = $estr$1$lcssa$i + -2 | 0;
      HEAP8[$680 >> 0] = $$114$i;
      $$pn$i = $9 - $680 | 0;
      $estr$2$i = $680;
     }
     $685 = $pl$0$i + 1 + $$311$i + $657 + $$pn$i | 0;
     _pad($f, 32, $w$1, $685, $fl$1$);
     if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
     _pad($f, 48, $w$1, $685, $fl$1$ ^ 65536);
     do if ($659) {
      $r$0$a$9$i = $a$9$ph$i >>> 0 > $$33$i >>> 0 ? $$33$i : $a$9$ph$i;
      $d$584$i = $r$0$a$9$i;
      while (1) {
       $692 = _fmt_u(HEAP32[$d$584$i >> 2] | 0, 0, $14) | 0;
       do if (($d$584$i | 0) == ($r$0$a$9$i | 0)) {
        if (($692 | 0) != ($14 | 0)) {
         $s7$1$i = $692;
         break;
        }
        HEAP8[$16 >> 0] = 48;
        $s7$1$i = $16;
       } else {
        if ($692 >>> 0 <= $buf$i >>> 0) {
         $s7$1$i = $692;
         break;
        }
        _memset($buf$i | 0, 48, $692 - $5 | 0) | 0;
        $s7$081$i = $692;
        while (1) {
         $697 = $s7$081$i + -1 | 0;
         if ($697 >>> 0 > $buf$i >>> 0) $s7$081$i = $697; else {
          $s7$1$i = $697;
          break;
         }
        }
       } while (0);
       if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s7$1$i, $15 - $s7$1$i | 0, $f) | 0;
       $705 = $d$584$i + 4 | 0;
       if ($705 >>> 0 > $$33$i >>> 0) {
        $$lcssa316 = $705;
        break;
       } else $d$584$i = $705;
      }
      do if ($655 | 0) {
       if (HEAP32[$f >> 2] & 32 | 0) break;
       ___fwritex(15702, 1, $f) | 0;
      } while (0);
      if (($$311$i | 0) > 0 & $$lcssa316 >>> 0 < $z$7$i$lcssa >>> 0) {
       $$41278$i = $$311$i;
       $d$677$i = $$lcssa316;
       while (1) {
        $715 = _fmt_u(HEAP32[$d$677$i >> 2] | 0, 0, $14) | 0;
        if ($715 >>> 0 > $buf$i >>> 0) {
         _memset($buf$i | 0, 48, $715 - $5 | 0) | 0;
         $s8$072$i = $715;
         while (1) {
          $719 = $s8$072$i + -1 | 0;
          if ($719 >>> 0 > $buf$i >>> 0) $s8$072$i = $719; else {
           $s8$0$lcssa$i = $719;
           break;
          }
         }
        } else $s8$0$lcssa$i = $715;
        if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s8$0$lcssa$i, ($$41278$i | 0) > 9 ? 9 : $$41278$i, $f) | 0;
        $d$677$i = $d$677$i + 4 | 0;
        $727 = $$41278$i + -9 | 0;
        if (!(($$41278$i | 0) > 9 & $d$677$i >>> 0 < $z$7$i$lcssa >>> 0)) {
         $$412$lcssa$i = $727;
         break;
        } else $$41278$i = $727;
       }
      } else $$412$lcssa$i = $$311$i;
      _pad($f, 48, $$412$lcssa$i + 9 | 0, 9, 0);
     } else {
      $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $a$9$ph$i + 4 | 0;
      if (($$311$i | 0) > -1) {
       $734 = ($$pre$phi190$iZ2D | 0) == 0;
       $$589$i = $$311$i;
       $d$788$i = $a$9$ph$i;
       while (1) {
        $736 = _fmt_u(HEAP32[$d$788$i >> 2] | 0, 0, $14) | 0;
        if (($736 | 0) == ($14 | 0)) {
         HEAP8[$16 >> 0] = 48;
         $s9$0$i = $16;
        } else $s9$0$i = $736;
        do if (($d$788$i | 0) == ($a$9$ph$i | 0)) {
         $742 = $s9$0$i + 1 | 0;
         if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s9$0$i, 1, $f) | 0;
         if ($734 & ($$589$i | 0) < 1) {
          $s9$2$i = $742;
          break;
         }
         if (HEAP32[$f >> 2] & 32 | 0) {
          $s9$2$i = $742;
          break;
         }
         ___fwritex(15702, 1, $f) | 0;
         $s9$2$i = $742;
        } else {
         if ($s9$0$i >>> 0 <= $buf$i >>> 0) {
          $s9$2$i = $s9$0$i;
          break;
         }
         _memset($buf$i | 0, 48, $s9$0$i + $6 | 0) | 0;
         $s9$185$i = $s9$0$i;
         while (1) {
          $740 = $s9$185$i + -1 | 0;
          if ($740 >>> 0 > $buf$i >>> 0) $s9$185$i = $740; else {
           $s9$2$i = $740;
           break;
          }
         }
        } while (0);
        $751 = $15 - $s9$2$i | 0;
        if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s9$2$i, ($$589$i | 0) > ($751 | 0) ? $751 : $$589$i, $f) | 0;
        $757 = $$589$i - $751 | 0;
        $d$788$i = $d$788$i + 4 | 0;
        if (!($d$788$i >>> 0 < $z$7$$i >>> 0 & ($757 | 0) > -1)) {
         $$5$lcssa$i = $757;
         break;
        } else $$589$i = $757;
       }
      } else $$5$lcssa$i = $$311$i;
      _pad($f, 48, $$5$lcssa$i + 18 | 0, 18, 0);
      if (HEAP32[$f >> 2] & 32 | 0) break;
      ___fwritex($estr$2$i, $9 - $estr$2$i | 0, $f) | 0;
     } while (0);
     _pad($f, 32, $w$1, $685, $fl$1$ ^ 8192);
     $$0$i = ($685 | 0) < ($w$1 | 0) ? $w$1 : $685;
    } else {
     $376 = ($t$0 & 32 | 0) != 0;
     $378 = $$07$i != $$07$i | 0.0 != 0.0;
     $pl$1$i = $378 ? 0 : $pl$0$i;
     $380 = $pl$1$i + 3 | 0;
     _pad($f, 32, $w$1, $380, $176);
     $381 = HEAP32[$f >> 2] | 0;
     if (!($381 & 32)) {
      ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
      $385 = HEAP32[$f >> 2] | 0;
     } else $385 = $381;
     if (!($385 & 32)) ___fwritex($378 ? ($376 ? 13826 : 13809) : $376 ? 13801 : 13805, 3, $f) | 0;
     _pad($f, 32, $w$1, $380, $fl$1$ ^ 8192);
     $$0$i = ($380 | 0) < ($w$1 | 0) ? $w$1 : $380;
    } while (0);
    $cnt$0 = $cnt$1;
    $l$0 = $$0$i;
    $l10n$0 = $l10n$3;
    $s$0 = $$lcssa300;
    continue L1;
    break;
   }
  default:
   {
    $a$2 = $s$0;
    $fl$6 = $fl$1$;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 11873;
    $z$2 = $1;
   }
  } while (0);
  L311 : do if ((label | 0) == 64) {
   label = 0;
   $207 = $arg;
   $209 = HEAP32[$207 >> 2] | 0;
   $212 = HEAP32[$207 + 4 >> 2] | 0;
   $213 = $t$1 & 32;
   if (($209 | 0) == 0 & ($212 | 0) == 0) {
    $a$0 = $1;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = 0;
    $prefix$1 = 11873;
    label = 77;
   } else {
    $$012$i = $1;
    $218 = $209;
    $225 = $212;
    while (1) {
     $224 = $$012$i + -1 | 0;
     HEAP8[$224 >> 0] = HEAPU8[11857 + ($218 & 15) >> 0] | $213;
     $218 = _bitshift64Lshr($218 | 0, $225 | 0, 4) | 0;
     $225 = tempRet0;
     if (($218 | 0) == 0 & ($225 | 0) == 0) {
      $$lcssa321 = $224;
      break;
     } else $$012$i = $224;
    }
    $231 = $arg;
    if (($fl$3 & 8 | 0) == 0 | (HEAP32[$231 >> 2] | 0) == 0 & (HEAP32[$231 + 4 >> 2] | 0) == 0) {
     $a$0 = $$lcssa321;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 11873;
     label = 77;
    } else {
     $a$0 = $$lcssa321;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 2;
     $prefix$1 = 11873 + ($t$1 >> 4) | 0;
     label = 77;
    }
   }
  } else if ((label | 0) == 76) {
   label = 0;
   $a$0 = _fmt_u($287, $288, $1) | 0;
   $fl$4 = $fl$1$;
   $p$2 = $p$0;
   $pl$1 = $pl$0;
   $prefix$1 = $prefix$0;
   label = 77;
  } else if ((label | 0) == 82) {
   label = 0;
   $321 = _memchr($a$1, 0, $p$0) | 0;
   $322 = ($321 | 0) == 0;
   $a$2 = $a$1;
   $fl$6 = $176;
   $p$5 = $322 ? $p$0 : $321 - $a$1 | 0;
   $pl$2 = 0;
   $prefix$2 = 11873;
   $z$2 = $322 ? $a$1 + $p$0 | 0 : $321;
  } else if ((label | 0) == 86) {
   label = 0;
   $i$0105 = 0;
   $l$1104 = 0;
   $ws$0106 = $798;
   while (1) {
    $334 = HEAP32[$ws$0106 >> 2] | 0;
    if (!$334) {
     $i$0$lcssa = $i$0105;
     $l$2 = $l$1104;
     break;
    }
    $336 = _wctomb($mb, $334) | 0;
    if (($336 | 0) < 0 | $336 >>> 0 > ($p$4176 - $i$0105 | 0) >>> 0) {
     $i$0$lcssa = $i$0105;
     $l$2 = $336;
     break;
    }
    $341 = $336 + $i$0105 | 0;
    if ($p$4176 >>> 0 > $341 >>> 0) {
     $i$0105 = $341;
     $l$1104 = $336;
     $ws$0106 = $ws$0106 + 4 | 0;
    } else {
     $i$0$lcssa = $341;
     $l$2 = $336;
     break;
    }
   }
   if (($l$2 | 0) < 0) {
    $$0 = -1;
    break L1;
   }
   _pad($f, 32, $w$1, $i$0$lcssa, $fl$1$);
   if (!$i$0$lcssa) {
    $i$0$lcssa178 = 0;
    label = 97;
   } else {
    $i$1116 = 0;
    $ws$1117 = $798;
    while (1) {
     $345 = HEAP32[$ws$1117 >> 2] | 0;
     if (!$345) {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break L311;
     }
     $348 = _wctomb($mb, $345) | 0;
     $i$1116 = $348 + $i$1116 | 0;
     if (($i$1116 | 0) > ($i$0$lcssa | 0)) {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break L311;
     }
     if (!(HEAP32[$f >> 2] & 32)) ___fwritex($mb, $348, $f) | 0;
     if ($i$1116 >>> 0 >= $i$0$lcssa >>> 0) {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break;
     } else $ws$1117 = $ws$1117 + 4 | 0;
    }
   }
  } while (0);
  if ((label | 0) == 97) {
   label = 0;
   _pad($f, 32, $w$1, $i$0$lcssa178, $fl$1$ ^ 8192);
   $cnt$0 = $cnt$1;
   $l$0 = ($w$1 | 0) > ($i$0$lcssa178 | 0) ? $w$1 : $i$0$lcssa178;
   $l10n$0 = $l10n$3;
   $s$0 = $$lcssa300;
   continue;
  }
  if ((label | 0) == 77) {
   label = 0;
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $292 = $arg;
   $300 = (HEAP32[$292 >> 2] | 0) != 0 | (HEAP32[$292 + 4 >> 2] | 0) != 0;
   if (($p$2 | 0) != 0 | $300) {
    $306 = ($300 & 1 ^ 1) + ($2 - $a$0) | 0;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = ($p$2 | 0) > ($306 | 0) ? $p$2 : $306;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   } else {
    $a$2 = $1;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   }
  }
  $772 = $z$2 - $a$2 | 0;
  $$p$5 = ($p$5 | 0) < ($772 | 0) ? $772 : $p$5;
  $774 = $pl$2 + $$p$5 | 0;
  $w$2 = ($w$1 | 0) < ($774 | 0) ? $774 : $w$1;
  _pad($f, 32, $w$2, $774, $fl$6);
  if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$2, $pl$2, $f) | 0;
  _pad($f, 48, $w$2, $774, $fl$6 ^ 65536);
  _pad($f, 48, $$p$5, $772, 0);
  if (!(HEAP32[$f >> 2] & 32)) ___fwritex($a$2, $772, $f) | 0;
  _pad($f, 32, $w$2, $774, $fl$6 ^ 8192);
  $cnt$0 = $cnt$1;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
  $s$0 = $$lcssa300;
 }
 L345 : do if ((label | 0) == 244) if (!$f) if (!$l10n$0$lcssa) $$0 = 0; else {
  $i$291 = 1;
  while (1) {
   $787 = HEAP32[$nl_type + ($i$291 << 2) >> 2] | 0;
   if (!$787) {
    $i$291$lcssa = $i$291;
    break;
   }
   _pop_arg_526($nl_arg + ($i$291 << 3) | 0, $787, $ap);
   $i$291 = $i$291 + 1 | 0;
   if (($i$291 | 0) >= 10) {
    $$0 = 1;
    break L345;
   }
  }
  if (($i$291$lcssa | 0) < 10) {
   $i$389 = $i$291$lcssa;
   while (1) {
    if (HEAP32[$nl_type + ($i$389 << 2) >> 2] | 0) {
     $$0 = -1;
     break L345;
    }
    $i$389 = $i$389 + 1 | 0;
    if (($i$389 | 0) >= 10) {
     $$0 = 1;
     break;
    }
   }
  } else $$0 = 1;
 } else $$0 = $cnt$1$lcssa; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i57 = 0, $$0$i$i$i$i79 = 0, $$0$i$i$i37 = 0, $$0$i$i$i41 = 0, $$0$i$i$i53 = 0, $$0$i$i$i75 = 0, $$01$i$i$i = 0, $$01$i$i$i52 = 0, $$01$i$i$i74 = 0, $$24$ph$i = 0, $$24$ph$i60 = 0, $$24$ph$i82 = 0, $$3 = 0, $$3$i = 0, $$3$i63 = 0, $$3$i85 = 0, $$lcssa = 0, $$lcssa153 = 0, $$lcssa156 = 0, $$lcssa159 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $132 = 0, $136 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $15 = 0, $157 = 0, $159 = 0, $16 = 0, $164 = 0, $166 = 0, $167 = 0, $169 = 0, $17 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $184 = 0, $187 = 0, $188 = 0, $19 = 0, $192 = 0, $196 = 0, $198 = 0, $2 = 0, $20 = 0, $203 = 0, $206 = 0, $21 = 0, $217 = 0, $219 = 0, $22 = 0, $223 = 0, $225 = 0, $226 = 0, $228 = 0, $23 = 0, $230 = 0, $235 = 0, $237 = 0, $238 = 0, $24 = 0, $241 = 0, $243 = 0, $246 = 0, $247 = 0, $25 = 0, $251 = 0, $255 = 0, $257 = 0, $262 = 0, $265 = 0, $276 = 0, $278 = 0, $282 = 0, $284 = 0, $285 = 0, $287 = 0, $289 = 0, $294 = 0, $296 = 0, $297 = 0, $3 = 0, $300 = 0, $302 = 0, $305 = 0, $306 = 0, $31 = 0, $313 = 0, $314 = 0, $320 = 0, $326 = 0, $333 = 0, $335 = 0, $336 = 0, $339 = 0, $34 = 0, $344 = 0, $35 = 0, $351 = 0, $352 = 0, $360 = 0, $362 = 0, $372 = 0, $4 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $53 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $73 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $86 = 0, $89 = 0, $9 = 0, $90 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i87 = 0, $__i$0$i$i$i91 = 0, $__p$0$i$i = 0, $__p$0$ph$i$i = 0, $e$0$i = 0, $e$0$i$lcssa = 0, $e$0$i44 = 0, $e$0$i44$lcssa = 0, $e$0$i66 = 0, $e$0$i66$lcssa = 0, $n$0 = 0, $n$0$lcssa151 = 0, $num$i65 = 0, $t$0$i = 0, $t$0$i45 = 0, $t$0$i67 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer4 = sp + 72 | 0;
 $vararg_buffer1 = sp + 48 | 0;
 $vararg_buffer = sp + 24 | 0;
 $0 = sp;
 $num$i65 = sp + 432 | 0;
 $1 = sp + 408 | 0;
 $2 = sp + 384 | 0;
 $3 = sp + 396 | 0;
 $4 = sp + 360 | 0;
 $5 = sp + 336 | 0;
 $6 = sp + 320 | 0;
 $7 = sp + 308 | 0;
 $8 = sp + 296 | 0;
 $9 = sp + 284 | 0;
 $10 = sp + 272 | 0;
 $11 = sp + 260 | 0;
 $12 = sp + 248 | 0;
 $13 = sp + 236 | 0;
 $14 = sp + 224 | 0;
 $15 = sp + 212 | 0;
 $16 = sp + 200 | 0;
 $17 = sp + 188 | 0;
 $18 = sp + 176 | 0;
 $19 = sp + 152 | 0;
 $20 = sp + 140 | 0;
 $21 = sp + 128 | 0;
 $22 = sp + 116 | 0;
 $23 = sp + 104 | 0;
 $24 = sp + 92 | 0;
 $25 = $last;
 L1 : do if (($25 - $first | 0) > 3) if ((HEAP8[$first >> 0] | 0) == 76) {
  $31 = $first + 1 | 0;
  do switch (HEAP8[$31 >> 0] | 0) {
  case 84:
   {
    $$3 = $first;
    break L1;
    break;
   }
  case 119:
   {
    $34 = $first + 2 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 14343, 7);
    $35 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($34, $last, $3, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$3 = ($35 | 0) == ($34 | 0) ? $first : $35;
    break L1;
    break;
   }
  case 98:
   {
    if ((HEAP8[$first + 3 >> 0] | 0) != 69) {
     $$3 = $first;
     break L1;
    }
    switch (HEAP8[$first + 2 >> 0] | 0) {
    case 48:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($4, 14665);
      $43 = $db + 4 | 0;
      $44 = HEAP32[$43 >> 2] | 0;
      $46 = HEAP32[$db + 8 >> 2] | 0;
      $48 = $46;
      if ($44 >>> 0 < $46 >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($44, $4);
       HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + 24;
      } else {
       $53 = HEAP32[$db >> 2] | 0;
       $55 = ($44 - $53 | 0) / 24 | 0;
       $56 = $55 + 1 | 0;
       if ($56 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       $59 = ($48 - $53 | 0) / 24 | 0;
       if ($59 >>> 0 < 89478485) {
        $61 = $59 << 1;
        $$0$i$i$i = $61 >>> 0 < $56 >>> 0 ? $56 : $61;
       } else $$0$i$i$i = 178956970;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0, $$0$i$i$i, $55, $db + 12 | 0);
       $64 = $0 + 8 | 0;
       $65 = HEAP32[$64 >> 2] | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($65, $4);
       HEAP32[$64 >> 2] = $65 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $0);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $$3 = $first + 4 | 0;
      break L1;
      break;
     }
    case 49:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($5, 14671);
      $68 = $db + 4 | 0;
      $69 = HEAP32[$68 >> 2] | 0;
      $71 = HEAP32[$db + 8 >> 2] | 0;
      $73 = $71;
      if ($69 >>> 0 < $71 >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($69, $5);
       HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 24;
      } else {
       $78 = HEAP32[$db >> 2] | 0;
       $80 = ($69 - $78 | 0) / 24 | 0;
       $81 = $80 + 1 | 0;
       if ($81 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       $84 = ($73 - $78 | 0) / 24 | 0;
       if ($84 >>> 0 < 89478485) {
        $86 = $84 << 1;
        $$0$i$i$i37 = $86 >>> 0 < $81 >>> 0 ? $81 : $86;
       } else $$0$i$i$i37 = 178956970;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0, $$0$i$i$i37, $80, $db + 12 | 0);
       $89 = $0 + 8 | 0;
       $90 = HEAP32[$89 >> 2] | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($90, $5);
       HEAP32[$89 >> 2] = $90 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $0);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      $$3 = $first + 4 | 0;
      break L1;
      break;
     }
    default:
     {
      $$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    $93 = $first + 2 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAP32[$6 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6, 14356, 4);
    $94 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($93, $last, $6, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    $$3 = ($94 | 0) == ($93 | 0) ? $first : $94;
    break L1;
    break;
   }
  case 97:
   {
    $96 = $first + 2 | 0;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAP32[$7 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($7, 14361, 11);
    $97 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($96, $last, $7, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    $$3 = ($97 | 0) == ($96 | 0) ? $first : $97;
    break L1;
    break;
   }
  case 104:
   {
    $99 = $first + 2 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    HEAP32[$8 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($8, 14373, 13);
    $100 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($99, $last, $8, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    $$3 = ($100 | 0) == ($99 | 0) ? $first : $100;
    break L1;
    break;
   }
  case 115:
   {
    $102 = $first + 2 | 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$9 + 4 >> 2] = 0;
    HEAP32[$9 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($9, 14387, 5);
    $103 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($102, $last, $9, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
    $$3 = ($103 | 0) == ($102 | 0) ? $first : $103;
    break L1;
    break;
   }
  case 116:
   {
    $105 = $first + 2 | 0;
    HEAP32[$10 >> 2] = 0;
    HEAP32[$10 + 4 >> 2] = 0;
    HEAP32[$10 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($10, 14393, 14);
    $106 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($105, $last, $10, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
    $$3 = ($106 | 0) == ($105 | 0) ? $first : $106;
    break L1;
    break;
   }
  case 105:
   {
    $108 = $first + 2 | 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[$11 + 4 >> 2] = 0;
    HEAP32[$11 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($11, 18261, 0);
    $109 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($108, $last, $11, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
    $$3 = ($109 | 0) == ($108 | 0) ? $first : $109;
    break L1;
    break;
   }
  case 106:
   {
    $111 = $first + 2 | 0;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$12 + 4 >> 2] = 0;
    HEAP32[$12 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($12, 14676, 1);
    $112 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($111, $last, $12, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
    $$3 = ($112 | 0) == ($111 | 0) ? $first : $112;
    break L1;
    break;
   }
  case 108:
   {
    $114 = $first + 2 | 0;
    HEAP32[$13 >> 2] = 0;
    HEAP32[$13 + 4 >> 2] = 0;
    HEAP32[$13 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($13, 14678, 1);
    $115 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($114, $last, $13, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
    $$3 = ($115 | 0) == ($114 | 0) ? $first : $115;
    break L1;
    break;
   }
  case 109:
   {
    $117 = $first + 2 | 0;
    HEAP32[$14 >> 2] = 0;
    HEAP32[$14 + 4 >> 2] = 0;
    HEAP32[$14 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($14, 14680, 2);
    $118 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($117, $last, $14, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
    $$3 = ($118 | 0) == ($117 | 0) ? $first : $118;
    break L1;
    break;
   }
  case 120:
   {
    $120 = $first + 2 | 0;
    HEAP32[$15 >> 2] = 0;
    HEAP32[$15 + 4 >> 2] = 0;
    HEAP32[$15 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($15, 14683, 2);
    $121 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($120, $last, $15, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
    $$3 = ($121 | 0) == ($120 | 0) ? $first : $121;
    break L1;
    break;
   }
  case 121:
   {
    $123 = $first + 2 | 0;
    HEAP32[$16 >> 2] = 0;
    HEAP32[$16 + 4 >> 2] = 0;
    HEAP32[$16 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($16, 14686, 3);
    $124 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($123, $last, $16, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
    $$3 = ($124 | 0) == ($123 | 0) ? $first : $124;
    break L1;
    break;
   }
  case 110:
   {
    $126 = $first + 2 | 0;
    HEAP32[$17 >> 2] = 0;
    HEAP32[$17 + 4 >> 2] = 0;
    HEAP32[$17 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($17, 14473, 8);
    $127 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($126, $last, $17, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
    $$3 = ($127 | 0) == ($126 | 0) ? $first : $127;
    break L1;
    break;
   }
  case 111:
   {
    $129 = $first + 2 | 0;
    HEAP32[$18 >> 2] = 0;
    HEAP32[$18 + 4 >> 2] = 0;
    HEAP32[$18 + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($18, 14482, 17);
    $130 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($129, $last, $18, $db) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
    $$3 = ($130 | 0) == ($129 | 0) ? $first : $130;
    break L1;
    break;
   }
  case 102:
   {
    $132 = $first + 2 | 0;
    L79 : do if (($25 - $132 | 0) >>> 0 > 8) {
     $136 = $first + 10 | 0;
     $e$0$i = $0;
     $t$0$i = $132;
     while (1) {
      $138 = HEAP8[$t$0$i >> 0] | 0;
      if (($t$0$i | 0) == ($136 | 0)) {
       $$lcssa153 = $138;
       $e$0$i$lcssa = $e$0$i;
       label = 41;
       break;
      }
      if (!(_isxdigit($138 << 24 >> 24) | 0)) break;
      $143 = HEAP8[$t$0$i >> 0] | 0;
      $146 = HEAP8[$t$0$i + 1 >> 0] | 0;
      HEAP8[$e$0$i >> 0] = ((($146 << 24 >> 24) + -48 | 0) >>> 0 < 10 ? 208 : 169) + ($146 & 255) + ((($143 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $143 << 4);
      $e$0$i = $e$0$i + 1 | 0;
      $t$0$i = $t$0$i + 2 | 0;
     }
     do if ((label | 0) == 41) {
      if ($$lcssa153 << 24 >> 24 == 69) {
       L89 : do if (($0 | 0) != ($e$0$i$lcssa | 0)) {
        $$0$i$i$i41 = $e$0$i$lcssa;
        $$01$i$i$i = $0;
        while (1) {
         $157 = $$0$i$i$i41 + -1 | 0;
         if ($$01$i$i$i >>> 0 >= $157 >>> 0) break L89;
         $159 = HEAP8[$$01$i$i$i >> 0] | 0;
         HEAP8[$$01$i$i$i >> 0] = HEAP8[$157 >> 0] | 0;
         HEAP8[$157 >> 0] = $159;
         $$0$i$i$i41 = $157;
         $$01$i$i$i = $$01$i$i$i + 1 | 0;
        }
       } while (0);
       dest = $num$i65;
       stop = dest + 24 | 0;
       do {
        HEAP8[dest >> 0] = 0;
        dest = dest + 1 | 0;
       } while ((dest | 0) < (stop | 0));
       HEAPF64[$vararg_buffer >> 3] = +HEAPF32[$0 >> 2];
       $164 = _snprintf($num$i65, 24, 14690, $vararg_buffer) | 0;
       if ($164 >>> 0 > 23) break;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$2 + 8 >> 2] = 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2, $num$i65, $164);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
       $166 = $db + 4 | 0;
       $167 = HEAP32[$166 >> 2] | 0;
       $169 = HEAP32[$db + 8 >> 2] | 0;
       $171 = $169;
       if ($167 >>> 0 < $169 >>> 0) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($167, $1);
        HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + 24;
       } else {
        $176 = HEAP32[$db >> 2] | 0;
        $178 = ($167 - $176 | 0) / 24 | 0;
        $179 = $178 + 1 | 0;
        if ($179 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        $182 = ($171 - $176 | 0) / 24 | 0;
        if ($182 >>> 0 < 89478485) {
         $184 = $182 << 1;
         $$0$i$i$i$i = $184 >>> 0 < $179 >>> 0 ? $179 : $184;
        } else $$0$i$i$i$i = 178956970;
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($vararg_buffer, $$0$i$i$i$i, $178, $db + 12 | 0);
        $187 = $vararg_buffer + 8 | 0;
        $188 = HEAP32[$187 >> 2] | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($188, $1);
        HEAP32[$187 >> 2] = $188 + 24;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $vararg_buffer);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($vararg_buffer);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       $$24$ph$i = $first + 11 | 0;
      } else $$24$ph$i = $132;
      $$3$i = $$24$ph$i;
      break L79;
     } while (0);
     $$3$i = $132;
    } else $$3$i = $132; while (0);
    $$3 = ($$3$i | 0) == ($132 | 0) ? $first : $$3$i;
    break L1;
    break;
   }
  case 100:
   {
    $192 = $first + 2 | 0;
    L111 : do if (($25 - $192 | 0) >>> 0 > 16) {
     $196 = $first + 18 | 0;
     $e$0$i44 = $0;
     $t$0$i45 = $192;
     while (1) {
      $198 = HEAP8[$t$0$i45 >> 0] | 0;
      if (($t$0$i45 | 0) == ($196 | 0)) {
       $$lcssa156 = $198;
       $e$0$i44$lcssa = $e$0$i44;
       label = 63;
       break;
      }
      if (!(_isxdigit($198 << 24 >> 24) | 0)) break;
      $203 = HEAP8[$t$0$i45 >> 0] | 0;
      $206 = HEAP8[$t$0$i45 + 1 >> 0] | 0;
      HEAP8[$e$0$i44 >> 0] = ((($206 << 24 >> 24) + -48 | 0) >>> 0 < 10 ? 208 : 169) + ($206 & 255) + ((($203 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $203 << 4);
      $e$0$i44 = $e$0$i44 + 1 | 0;
      $t$0$i45 = $t$0$i45 + 2 | 0;
     }
     do if ((label | 0) == 63) {
      if ($$lcssa156 << 24 >> 24 == 69) {
       L121 : do if (($0 | 0) != ($e$0$i44$lcssa | 0)) {
        $$0$i$i$i53 = $e$0$i44$lcssa;
        $$01$i$i$i52 = $0;
        while (1) {
         $217 = $$0$i$i$i53 + -1 | 0;
         if ($$01$i$i$i52 >>> 0 >= $217 >>> 0) break L121;
         $219 = HEAP8[$$01$i$i$i52 >> 0] | 0;
         HEAP8[$$01$i$i$i52 >> 0] = HEAP8[$217 >> 0] | 0;
         HEAP8[$217 >> 0] = $219;
         $$0$i$i$i53 = $217;
         $$01$i$i$i52 = $$01$i$i$i52 + 1 | 0;
        }
       } while (0);
       dest = $num$i65;
       stop = dest + 32 | 0;
       do {
        HEAP8[dest >> 0] = 0;
        dest = dest + 1 | 0;
       } while ((dest | 0) < (stop | 0));
       HEAPF64[$vararg_buffer1 >> 3] = +HEAPF64[$0 >> 3];
       $223 = _snprintf($num$i65, 32, 14694, $vararg_buffer1) | 0;
       if ($223 >>> 0 > 31) break;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$2 + 8 >> 2] = 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2, $num$i65, $223);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
       $225 = $db + 4 | 0;
       $226 = HEAP32[$225 >> 2] | 0;
       $228 = HEAP32[$db + 8 >> 2] | 0;
       $230 = $228;
       if ($226 >>> 0 < $228 >>> 0) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($226, $1);
        HEAP32[$225 >> 2] = (HEAP32[$225 >> 2] | 0) + 24;
       } else {
        $235 = HEAP32[$db >> 2] | 0;
        $237 = ($226 - $235 | 0) / 24 | 0;
        $238 = $237 + 1 | 0;
        if ($238 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        $241 = ($230 - $235 | 0) / 24 | 0;
        if ($241 >>> 0 < 89478485) {
         $243 = $241 << 1;
         $$0$i$i$i$i57 = $243 >>> 0 < $238 >>> 0 ? $238 : $243;
        } else $$0$i$i$i$i57 = 178956970;
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($vararg_buffer1, $$0$i$i$i$i57, $237, $db + 12 | 0);
        $246 = $vararg_buffer1 + 8 | 0;
        $247 = HEAP32[$246 >> 2] | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($247, $1);
        HEAP32[$246 >> 2] = $247 + 24;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $vararg_buffer1);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($vararg_buffer1);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       $$24$ph$i60 = $first + 19 | 0;
      } else $$24$ph$i60 = $192;
      $$3$i63 = $$24$ph$i60;
      break L111;
     } while (0);
     $$3$i63 = $192;
    } else $$3$i63 = $192; while (0);
    $$3 = ($$3$i63 | 0) == ($192 | 0) ? $first : $$3$i63;
    break L1;
    break;
   }
  case 101:
   {
    $251 = $first + 2 | 0;
    L143 : do if (($25 - $251 | 0) >>> 0 > 20) {
     $255 = $first + 22 | 0;
     $e$0$i66 = $0;
     $t$0$i67 = $251;
     while (1) {
      $257 = HEAP8[$t$0$i67 >> 0] | 0;
      if (($t$0$i67 | 0) == ($255 | 0)) {
       $$lcssa159 = $257;
       $e$0$i66$lcssa = $e$0$i66;
       label = 85;
       break;
      }
      if (!(_isxdigit($257 << 24 >> 24) | 0)) break;
      $262 = HEAP8[$t$0$i67 >> 0] | 0;
      $265 = HEAP8[$t$0$i67 + 1 >> 0] | 0;
      HEAP8[$e$0$i66 >> 0] = ((($265 << 24 >> 24) + -48 | 0) >>> 0 < 10 ? 208 : 169) + ($265 & 255) + ((($262 + -48 | 0) >>> 0 < 10 ? 0 : 9) + $262 << 4);
      $e$0$i66 = $e$0$i66 + 1 | 0;
      $t$0$i67 = $t$0$i67 + 2 | 0;
     }
     do if ((label | 0) == 85) {
      if ($$lcssa159 << 24 >> 24 == 69) {
       L153 : do if (($0 | 0) != ($e$0$i66$lcssa | 0)) {
        $$0$i$i$i75 = $e$0$i66$lcssa;
        $$01$i$i$i74 = $0;
        while (1) {
         $276 = $$0$i$i$i75 + -1 | 0;
         if ($$01$i$i$i74 >>> 0 >= $276 >>> 0) break L153;
         $278 = HEAP8[$$01$i$i$i74 >> 0] | 0;
         HEAP8[$$01$i$i$i74 >> 0] = HEAP8[$276 >> 0] | 0;
         HEAP8[$276 >> 0] = $278;
         $$0$i$i$i75 = $276;
         $$01$i$i$i74 = $$01$i$i$i74 + 1 | 0;
        }
       } while (0);
       dest = $num$i65;
       stop = dest + 40 | 0;
       do {
        HEAP8[dest >> 0] = 0;
        dest = dest + 1 | 0;
       } while ((dest | 0) < (stop | 0));
       HEAPF64[$vararg_buffer4 >> 3] = +HEAPF64[$0 >> 3];
       $282 = _snprintf($num$i65, 40, 14697, $vararg_buffer4) | 0;
       if ($282 >>> 0 > 39) break;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$2 + 8 >> 2] = 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2, $num$i65, $282);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
       $284 = $db + 4 | 0;
       $285 = HEAP32[$284 >> 2] | 0;
       $287 = HEAP32[$db + 8 >> 2] | 0;
       $289 = $287;
       if ($285 >>> 0 < $287 >>> 0) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($285, $1);
        HEAP32[$284 >> 2] = (HEAP32[$284 >> 2] | 0) + 24;
       } else {
        $294 = HEAP32[$db >> 2] | 0;
        $296 = ($285 - $294 | 0) / 24 | 0;
        $297 = $296 + 1 | 0;
        if ($297 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        $300 = ($289 - $294 | 0) / 24 | 0;
        if ($300 >>> 0 < 89478485) {
         $302 = $300 << 1;
         $$0$i$i$i$i79 = $302 >>> 0 < $297 >>> 0 ? $297 : $302;
        } else $$0$i$i$i$i79 = 178956970;
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($vararg_buffer4, $$0$i$i$i$i79, $296, $db + 12 | 0);
        $305 = $vararg_buffer4 + 8 | 0;
        $306 = HEAP32[$305 >> 2] | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($306, $1);
        HEAP32[$305 >> 2] = $306 + 24;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $vararg_buffer4);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($vararg_buffer4);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       $$24$ph$i82 = $first + 23 | 0;
      } else $$24$ph$i82 = $251;
      $$3$i85 = $$24$ph$i82;
      break L143;
     } while (0);
     $$3$i85 = $251;
    } else $$3$i85 = $251; while (0);
    $$3 = ($$3$i85 | 0) == ($251 | 0) ? $first : $$3$i85;
    break L1;
    break;
   }
  case 95:
   {
    if ((HEAP8[$first + 2 >> 0] | 0) != 90) {
     $$3 = $first;
     break L1;
    }
    $313 = $first + 3 | 0;
    $314 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($313, $last, $db) | 0;
    if (($314 | 0) == ($313 | 0) | ($314 | 0) == ($last | 0)) {
     $$3 = $first;
     break L1;
    }
    $$3 = (HEAP8[$314 >> 0] | 0) == 69 ? $314 + 1 | 0 : $first;
    break L1;
    break;
   }
  default:
   {
    $320 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($31, $last, $db) | 0;
    if (($320 | 0) == ($31 | 0) | ($320 | 0) == ($last | 0)) {
     $$3 = $first;
     break L1;
    }
    if ((HEAP8[$320 >> 0] | 0) == 69) {
     $$3 = $320 + 1 | 0;
     break L1;
    } else $n$0 = $320;
    while (1) {
     if (($n$0 | 0) == ($last | 0)) {
      $$3 = $first;
      break L1;
     }
     $326 = HEAP8[$n$0 >> 0] | 0;
     if ((($326 << 24 >> 24) + -48 | 0) >>> 0 >= 10) {
      $$lcssa = $326;
      $n$0$lcssa151 = $n$0;
      break;
     }
     $n$0 = $n$0 + 1 | 0;
    }
    if (!(($n$0$lcssa151 | 0) != ($320 | 0) & $$lcssa << 24 >> 24 == 69)) {
     $$3 = $first;
     break L1;
    }
    $333 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($333 | 0)) {
     $$3 = $first;
     break L1;
    }
    $335 = $333 + -24 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($23, $335);
    $336 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($23, 0, 14661) | 0;
    HEAP32[$22 >> 2] = HEAP32[$336 >> 2];
    HEAP32[$22 + 4 >> 2] = HEAP32[$336 + 4 >> 2];
    HEAP32[$22 + 8 >> 2] = HEAP32[$336 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$336 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $339 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($22, 14663) | 0;
    HEAP32[$21 >> 2] = HEAP32[$339 >> 2];
    HEAP32[$21 + 4 >> 2] = HEAP32[$339 + 4 >> 2];
    HEAP32[$21 + 8 >> 2] = HEAP32[$339 + 8 >> 2];
    $__i$0$i$i$i87 = 0;
    while (1) {
     if (($__i$0$i$i$i87 | 0) == 3) break;
     HEAP32[$339 + ($__i$0$i$i$i87 << 2) >> 2] = 0;
     $__i$0$i$i$i87 = $__i$0$i$i$i87 + 1 | 0;
    }
    HEAP32[$24 >> 2] = 0;
    HEAP32[$24 + 4 >> 2] = 0;
    HEAP32[$24 + 8 >> 2] = 0;
    $344 = $n$0$lcssa151 - $320 | 0;
    if ($344 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($24);
    if ($344 >>> 0 < 11) {
     HEAP8[$24 >> 0] = $344 << 1;
     $__p$0$ph$i$i = $24 + 1 | 0;
    } else {
     $351 = $344 + 16 & -16;
     $352 = _malloc($351) | 0;
     HEAP32[$24 + 8 >> 2] = $352;
     HEAP32[$24 >> 2] = $351 | 1;
     HEAP32[$24 + 4 >> 2] = $344;
     $__p$0$ph$i$i = $352;
    }
    $$0$i$i = $320;
    $__p$0$i$i = $__p$0$ph$i$i;
    while (1) {
     if (($$0$i$i | 0) == ($n$0$lcssa151 | 0)) break;
     HEAP8[$__p$0$i$i >> 0] = HEAP8[$$0$i$i >> 0] | 0;
     $$0$i$i = $$0$i$i + 1 | 0;
     $__p$0$i$i = $__p$0$i$i + 1 | 0;
    }
    HEAP8[$__p$0$ph$i$i + $344 >> 0] = 0;
    $360 = HEAP8[$24 >> 0] | 0;
    $362 = ($360 & 1) == 0;
    $372 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($21, $362 ? $24 + 1 | 0 : HEAP32[$24 + 8 >> 2] | 0, $362 ? ($360 & 255) >>> 1 : HEAP32[$24 + 4 >> 2] | 0) | 0;
    HEAP32[$20 >> 2] = HEAP32[$372 >> 2];
    HEAP32[$20 + 4 >> 2] = HEAP32[$372 + 4 >> 2];
    HEAP32[$20 + 8 >> 2] = HEAP32[$372 + 8 >> 2];
    $__i$0$i$i$i91 = 0;
    while (1) {
     if (($__i$0$i$i$i91 | 0) == 3) break;
     HEAP32[$372 + ($__i$0$i$i$i91 << 2) >> 2] = 0;
     $__i$0$i$i$i91 = $__i$0$i$i$i91 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($19, $20);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($335, $19);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
    $$3 = $n$0$lcssa151 + 1 | 0;
    break L1;
   }
  } while (0);
 } else $$3 = $first; else $$3 = $first; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$11 = 0, $$15 = 0, $$418 = 0, $$59$ph = 0, $$8$i = 0, $$in = 0, $$in138 = 0, $$lcssa = 0, $$lcssa162 = 0, $$lcssa163 = 0, $$lcssa165 = 0, $$lcssa168 = 0, $$ph126 = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $110 = 0, $117 = 0, $119 = 0, $122 = 0, $126 = 0, $129 = 0, $13 = 0, $133 = 0, $135 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $144 = 0, $152 = 0, $157 = 0, $159 = 0, $163 = 0, $168 = 0, $172 = 0, $173 = 0, $177 = 0, $18 = 0, $180 = 0, $181 = 0, $185 = 0, $188 = 0, $190 = 0, $192 = 0, $196 = 0, $2 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $206 = 0, $21 = 0, $211 = 0, $22 = 0, $224 = 0, $225 = 0, $238 = 0, $250 = 0, $253 = 0, $255 = 0, $26 = 0, $260 = 0, $261 = 0, $264 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $274 = 0, $278 = 0, $281 = 0, $284 = 0, $29 = 0, $298 = 0, $3 = 0, $30 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $315 = 0, $326 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $345 = 0, $351 = 0, $361 = 0, $363 = 0, $37 = 0, $372 = 0, $375 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $384 = 0, $387 = 0, $391 = 0, $393 = 0, $394 = 0, $399 = 0, $4 = 0, $403 = 0, $405 = 0, $42 = 0, $425 = 0, $427 = 0, $437 = 0, $45 = 0, $46 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $62 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $93 = 0, $98 = 0, $__i$0$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i$i = 0, $__i$0$i$i$i$i51 = 0, $__i$0$i$i$i23$i = 0, $__i$0$i$i$i26$i = 0, $__i$0$i$i43 = 0, $__i$0$i$i48 = 0, $first_arg$0$off0$ph = 0, $first_arg$3$off0$ph = 0, $k$0 = 0, $k2$0 = 0, $left$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i = 0, $t$0 = 0, $t$1 = 0, $t$1$lcssa159 = 0, $t$1$ph = 0, $t$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $left$i = sp + 60 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 L1 : do if (($first | 0) == ($last | 0)) $$11 = $first; else {
  $6 = $db + 56 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $8 = $7 + 1 | 0;
  HEAP32[$6 >> 2] = $8;
  $9 = $db + 61 | 0;
  $10 = HEAP8[$9 >> 0] | 0;
  if ($8 >>> 0 > 1) HEAP8[$9 >> 0] = 1;
  $13 = HEAP8[$first >> 0] | 0;
  L6 : do switch ($13 | 0) {
  case 84:
  case 71:
   {
    L126 : do if (($last - $first | 0) > 2) {
     switch ($13 | 0) {
     case 84:
      break;
     case 71:
      {
       switch (HEAP8[$first + 1 >> 0] | 0) {
       case 86:
        {
         $172 = $first + 2 | 0;
         $173 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($172, $last, $db) | 0;
         if (($173 | 0) == ($172 | 0)) {
          $$8$i = $first;
          break L126;
         }
         $177 = HEAP32[$db + 4 >> 2] | 0;
         if ((HEAP32[$db >> 2] | 0) == ($177 | 0)) {
          $$8$i = $first;
          break L126;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($177 + -24 | 0, 0, 16145) | 0;
         $$8$i = $173;
         break L126;
         break;
        }
       case 82:
        {
         $180 = $first + 2 | 0;
         $181 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($180, $last, $db) | 0;
         if (($181 | 0) == ($180 | 0)) {
          $$8$i = $first;
          break L126;
         }
         $185 = HEAP32[$db + 4 >> 2] | 0;
         if ((HEAP32[$db >> 2] | 0) == ($185 | 0)) {
          $$8$i = $first;
          break L126;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($185 + -24 | 0, 0, 16165) | 0;
         $$8$i = $181;
         break L126;
         break;
        }
       default:
        {
         $$8$i = $first;
         break L126;
        }
       }
       break;
      }
     default:
      {
       $$8$i = $first;
       break L126;
      }
     }
     $18 = $first + 1 | 0;
     switch (HEAP8[$18 >> 0] | 0) {
     case 86:
      {
       $21 = $first + 2 | 0;
       $22 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($21, $last, $db) | 0;
       if (($22 | 0) == ($21 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $26 = HEAP32[$db + 4 >> 2] | 0;
       if ((HEAP32[$db >> 2] | 0) == ($26 | 0)) {
        $$8$i = $first;
        break L126;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($26 + -24 | 0, 0, 15994) | 0;
       $$8$i = $22;
       break L126;
       break;
      }
     case 84:
      {
       $29 = $first + 2 | 0;
       $30 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($29, $last, $db) | 0;
       if (($30 | 0) == ($29 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $34 = HEAP32[$db + 4 >> 2] | 0;
       if ((HEAP32[$db >> 2] | 0) == ($34 | 0)) {
        $$8$i = $first;
        break L126;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($34 + -24 | 0, 0, 16006) | 0;
       $$8$i = $30;
       break L126;
       break;
      }
     case 73:
      {
       $37 = $first + 2 | 0;
       $38 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($37, $last, $db) | 0;
       if (($38 | 0) == ($37 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $42 = HEAP32[$db + 4 >> 2] | 0;
       if ((HEAP32[$db >> 2] | 0) == ($42 | 0)) {
        $$8$i = $first;
        break L126;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($42 + -24 | 0, 0, 16015) | 0;
       $$8$i = $38;
       break L126;
       break;
      }
     case 83:
      {
       $45 = $first + 2 | 0;
       $46 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($45, $last, $db) | 0;
       if (($46 | 0) == ($45 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $50 = HEAP32[$db + 4 >> 2] | 0;
       if ((HEAP32[$db >> 2] | 0) == ($50 | 0)) {
        $$8$i = $first;
        break L126;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($50 + -24 | 0, 0, 16029) | 0;
       $$8$i = $46;
       break L126;
       break;
      }
     case 99:
      {
       $53 = $first + 2 | 0;
       $54 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($53, $last) | 0;
       if (($54 | 0) == ($53 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $56 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($54, $last) | 0;
       if (($56 | 0) == ($54 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $58 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($56, $last, $db) | 0;
       if (($58 | 0) == ($56 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $62 = HEAP32[$db + 4 >> 2] | 0;
       if ((HEAP32[$db >> 2] | 0) == ($62 | 0)) {
        $$8$i = $first;
        break L126;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($62 + -24 | 0, 0, 16048) | 0;
       $$8$i = $58;
       break L126;
       break;
      }
     case 67:
      {
       $65 = $first + 2 | 0;
       $66 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($65, $last, $db) | 0;
       if (($66 | 0) == ($65 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $68 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($66, $last) | 0;
       if (($68 | 0) == ($66 | 0) | ($68 | 0) == ($last | 0)) {
        $$8$i = $first;
        break L126;
       }
       if ((HEAP8[$68 >> 0] | 0) != 95) {
        $$8$i = $first;
        break L126;
       }
       $73 = $68 + 1 | 0;
       $74 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($73, $last, $db) | 0;
       if (($74 | 0) == ($73 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $76 = $db + 4 | 0;
       $77 = HEAP32[$76 >> 2] | 0;
       if ((($77 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
        $$8$i = $first;
        break L126;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($left$i, $77 + -24 | 0);
       $84 = HEAP32[$76 >> 2] | 0;
       $85 = $84 + -24 | 0;
       $86 = $84;
       while (1) {
        if (($86 | 0) == ($85 | 0)) break;
        $88 = $86 + -24 | 0;
        HEAP32[$76 >> 2] = $88;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($88);
        $86 = HEAP32[$76 >> 2] | 0;
       }
       $89 = $84 + -48 | 0;
       $90 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($left$i, 0, 16075) | 0;
       HEAP32[$2 >> 2] = HEAP32[$90 >> 2];
       HEAP32[$2 + 4 >> 2] = HEAP32[$90 + 4 >> 2];
       HEAP32[$2 + 8 >> 2] = HEAP32[$90 + 8 >> 2];
       $__i$0$i$i$i26$i = 0;
       while (1) {
        if (($__i$0$i$i$i26$i | 0) == 3) break;
        HEAP32[$90 + ($__i$0$i$i$i26$i << 2) >> 2] = 0;
        $__i$0$i$i$i26$i = $__i$0$i$i$i26$i + 1 | 0;
       }
       $93 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2, 16100) | 0;
       HEAP32[$1 >> 2] = HEAP32[$93 >> 2];
       HEAP32[$1 + 4 >> 2] = HEAP32[$93 + 4 >> 2];
       HEAP32[$1 + 8 >> 2] = HEAP32[$93 + 8 >> 2];
       $__i$0$i$i$i23$i = 0;
       while (1) {
        if (($__i$0$i$i$i23$i | 0) == 3) break;
        HEAP32[$93 + ($__i$0$i$i$i23$i << 2) >> 2] = 0;
        $__i$0$i$i$i23$i = $__i$0$i$i$i23$i + 1 | 0;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, (HEAP32[$76 >> 2] | 0) + -24 | 0);
       $98 = HEAP8[$3 >> 0] | 0;
       $100 = ($98 & 1) == 0;
       $110 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1, $100 ? $3 + 1 | 0 : HEAP32[$3 + 8 >> 2] | 0, $100 ? ($98 & 255) >>> 1 : HEAP32[$3 + 4 >> 2] | 0) | 0;
       HEAP32[$0 >> 2] = HEAP32[$110 >> 2];
       HEAP32[$0 + 4 >> 2] = HEAP32[$110 + 4 >> 2];
       HEAP32[$0 + 8 >> 2] = HEAP32[$110 + 8 >> 2];
       $__i$0$i$i$i$i51 = 0;
       while (1) {
        if (($__i$0$i$i$i$i51 | 0) == 3) break;
        HEAP32[$110 + ($__i$0$i$i$i$i51 << 2) >> 2] = 0;
        $__i$0$i$i$i$i51 = $__i$0$i$i$i$i51 + 1 | 0;
       }
       do if (!(HEAP8[$89 >> 0] & 1)) {
        HEAP8[$89 + 1 >> 0] = 0;
        HEAP8[$89 >> 0] = 0;
       } else {
        $117 = $84 + -40 | 0;
        HEAP8[HEAP32[$117 >> 2] >> 0] = 0;
        $119 = $84 + -44 | 0;
        HEAP32[$119 >> 2] = 0;
        $$pre$i$i$i$i = HEAP8[$89 >> 0] | 0;
        if (!($$pre$i$i$i$i & 1)) {
         $126 = $$pre$i$i$i$i;
         $135 = 10;
        } else {
         $122 = HEAP32[$89 >> 2] | 0;
         $126 = $122 & 255;
         $135 = ($122 & -2) + -1 | 0;
        }
        if (!($126 & 1)) {
         $129 = ($126 & 255) >>> 1;
         if (($126 & 255) < 22) {
          $133 = 10;
          $152 = $129;
          $437 = 1;
         } else {
          $133 = ($129 + 16 & 240) + -1 | 0;
          $152 = $129;
          $437 = 1;
         }
        } else {
         $133 = 10;
         $152 = 0;
         $437 = 0;
        }
        if (($133 | 0) != ($135 | 0)) {
         if (($133 | 0) == 10) {
          $143 = $89 + 1 | 0;
          $144 = HEAP32[$117 >> 2] | 0;
          if ($437) {
           _memcpy($143 | 0, $144 | 0, (($126 & 255) >>> 1) + 1 | 0) | 0;
           _free($144);
          } else {
           HEAP8[$143 >> 0] = HEAP8[$144 >> 0] | 0;
           _free($144);
          }
          HEAP8[$89 >> 0] = $152 << 1;
          break;
         }
         $138 = $133 + 1 | 0;
         $139 = _malloc($138) | 0;
         if (!($133 >>> 0 <= $135 >>> 0 & ($139 | 0) == 0)) {
          if ($437) _memcpy($139 | 0, $89 + 1 | 0, (($126 & 255) >>> 1) + 1 | 0) | 0; else {
           $141 = HEAP32[$117 >> 2] | 0;
           HEAP8[$139 >> 0] = HEAP8[$141 >> 0] | 0;
           _free($141);
          }
          HEAP32[$89 >> 2] = $138 | 1;
          HEAP32[$119 >> 2] = $152;
          HEAP32[$117 >> 2] = $139;
         }
        }
       } while (0);
       HEAP32[$89 >> 2] = HEAP32[$0 >> 2];
       HEAP32[$89 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
       HEAP32[$89 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
       $__i$0$i$i$i$i$i = 0;
       while (1) {
        if (($__i$0$i$i$i$i$i | 0) == 3) break;
        HEAP32[$0 + ($__i$0$i$i$i$i$i << 2) >> 2] = 0;
        $__i$0$i$i$i$i$i = $__i$0$i$i$i$i$i + 1 | 0;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($left$i);
       $$8$i = $74;
       break L126;
       break;
      }
     default:
      {
       $157 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($18, $last) | 0;
       if (($157 | 0) == ($18 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $159 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($157, $last, $db) | 0;
       if (($159 | 0) == ($157 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $163 = HEAP32[$db + 4 >> 2] | 0;
       if ((HEAP32[$db >> 2] | 0) == ($163 | 0)) {
        $$8$i = $first;
        break L126;
       }
       $168 = $163 + -24 | 0;
       if ((HEAP8[$first + 2 >> 0] | 0) == 118) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($168, 0, 16105) | 0;
        $$8$i = $159;
        break L126;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($168, 0, 16123) | 0;
        $$8$i = $159;
        break L126;
       }
      }
     }
    } else $$8$i = $first; while (0);
    $$59$ph = $$8$i;
    break;
   }
  default:
   {
    $188 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    $190 = HEAP32[$db + 48 >> 2] | 0;
    $192 = HEAP32[$db + 52 >> 2] | 0;
    if (($188 | 0) == ($first | 0)) $$59$ph = $first; else if (($188 | 0) == ($last | 0)) $$59$ph = $last; else {
     switch (HEAP8[$188 >> 0] | 0) {
     case 46:
     case 69:
      {
       $$59$ph = $188;
       break L6;
       break;
      }
     default:
      {}
     }
     $196 = HEAP8[$9 >> 0] | 0;
     HEAP8[$9 >> 0] = 0;
     HEAP32[$left$i >> 2] = 0;
     HEAP32[$left$i + 4 >> 2] = 0;
     HEAP32[$left$i + 8 >> 2] = 0;
     $__i$0$i$i48 = 0;
     while (1) {
      if (($__i$0$i$i48 | 0) == 3) break;
      HEAP32[$left$i + ($__i$0$i$i48 << 2) >> 2] = 0;
      $__i$0$i$i48 = $__i$0$i$i48 + 1 | 0;
     }
     $200 = $db + 4 | 0;
     $201 = HEAP32[$200 >> 2] | 0;
     L15 : do if ((HEAP32[$db >> 2] | 0) == ($201 | 0)) {
      $$15 = $first;
      $$418 = 0;
     } else {
      $203 = $201 + -24 | 0;
      $204 = HEAP8[$203 >> 0] | 0;
      $206 = ($204 & 1) == 0;
      if ($206) $211 = ($204 & 255) >>> 1; else $211 = HEAP32[$201 + -20 >> 2] | 0;
      if (!$211) {
       $$15 = $first;
       $$418 = 0;
      } else {
       if (!(HEAP8[$db + 60 >> 0] | 0)) {
        if ($206) {
         $224 = $203 + 1 | 0;
         $225 = ($204 & 255) >>> 1;
        } else {
         $224 = HEAP32[$201 + -16 >> 2] | 0;
         $225 = HEAP32[$201 + -20 >> 2] | 0;
        }
        if ((HEAP8[$224 + $225 + -1 >> 0] | 0) == 62) {
         if ($206) {
          $$in = ($204 & 255) >>> 1;
          $238 = $203 + 1 | 0;
         } else {
          $$in = HEAP32[$201 + -20 >> 2] | 0;
          $238 = HEAP32[$201 + -16 >> 2] | 0;
         }
         if ((HEAP8[$238 + ($$in + -2) >> 0] | 0) == 45) {
          $326 = $201;
          $t$0 = $188;
         } else {
          if ($206) {
           $$in138 = ($204 & 255) >>> 1;
           $250 = $203 + 1 | 0;
          } else {
           $$in138 = HEAP32[$201 + -20 >> 2] | 0;
           $250 = HEAP32[$201 + -16 >> 2] | 0;
          }
          if ((HEAP8[$250 + ($$in138 + -2) >> 0] | 0) == 62) {
           $326 = $201;
           $t$0 = $188;
          } else {
           $253 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($188, $last, $db) | 0;
           if (($253 | 0) == ($188 | 0)) {
            $$15 = $first;
            $$418 = 0;
            break;
           }
           $255 = HEAP32[$200 >> 2] | 0;
           $260 = $255;
           if ((($255 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
            $$15 = $first;
            $$418 = 0;
            break;
           }
           $261 = $260 + -24 | 0;
           HEAP32[$0 >> 2] = HEAP32[$261 >> 2];
           HEAP32[$0 + 4 >> 2] = HEAP32[$261 + 4 >> 2];
           HEAP32[$0 + 8 >> 2] = HEAP32[$261 + 8 >> 2];
           $__i$0$i$i43 = 0;
           while (1) {
            if (($__i$0$i$i43 | 0) == 3) break;
            HEAP32[$261 + ($__i$0$i$i43 << 2) >> 2] = 0;
            $__i$0$i$i43 = $__i$0$i$i43 + 1 | 0;
           }
           $264 = $260 + -12 | 0;
           L45 : do if (!(HEAP8[$left$i >> 0] & 1)) {
            HEAP8[$left$i + 1 >> 0] = 0;
            HEAP8[$left$i >> 0] = 0;
           } else {
            $269 = $left$i + 8 | 0;
            $270 = HEAP32[$269 >> 2] | 0;
            HEAP8[$270 >> 0] = 0;
            $271 = $left$i + 4 | 0;
            HEAP32[$271 >> 2] = 0;
            $272 = HEAP32[$left$i >> 2] | 0;
            $phitmp$i$i$i$i$i$i = ($272 & -2) + -1 | 0;
            $274 = $272 & 255;
            do if (!($274 & 1)) {
             $278 = $272 >>> 1 & 127;
             if (($274 & 255) < 22) {
              _memcpy($left$i + 1 | 0, $270 | 0, ($272 >>> 1 & 127) + 1 | 0) | 0;
              _free($270);
              $$ph126 = $278;
              break;
             }
             $281 = $278 + 16 & 240;
             $phitmp$i2$i$i$i$i$i = $281 + -1 | 0;
             if (($phitmp$i2$i$i$i$i$i | 0) == ($phitmp$i$i$i$i$i$i | 0)) break L45;
             $284 = _malloc($281) | 0;
             if ($phitmp$i2$i$i$i$i$i >>> 0 <= $phitmp$i$i$i$i$i$i >>> 0 & ($284 | 0) == 0) break L45;
             _memcpy($284 | 0, $left$i + 1 | 0, ($272 >>> 1 & 127) + 1 | 0) | 0;
             HEAP32[$left$i >> 2] = $281 | 1;
             HEAP32[$271 >> 2] = $278;
             HEAP32[$269 >> 2] = $284;
             break L45;
            } else {
             HEAP8[$left$i + 1 >> 0] = 0;
             _free($270);
             $$ph126 = 0;
            } while (0);
            HEAP8[$left$i >> 0] = $$ph126 << 1;
           } while (0);
           HEAP32[$left$i >> 2] = HEAP32[$264 >> 2];
           HEAP32[$left$i + 4 >> 2] = HEAP32[$264 + 4 >> 2];
           HEAP32[$left$i + 8 >> 2] = HEAP32[$264 + 8 >> 2];
           $__i$0$i$i$i$i = 0;
           while (1) {
            if (($__i$0$i$i$i$i | 0) == 3) break;
            HEAP32[$264 + ($__i$0$i$i$i$i << 2) >> 2] = 0;
            $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
           }
           $298 = HEAP8[$left$i >> 0] | 0;
           if (!((($298 & 1) == 0 ? ($298 & 255) >>> 1 : HEAP32[$left$i + 4 >> 2] | 0) | 0)) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($0, 32);
           $307 = HEAP32[$200 >> 2] | 0;
           $308 = $307 + -24 | 0;
           $309 = $307;
           while (1) {
            if (($309 | 0) == ($308 | 0)) break;
            $311 = $309 + -24 | 0;
            HEAP32[$200 >> 2] = $311;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($311);
            $309 = HEAP32[$200 >> 2] | 0;
           }
           $313 = HEAP8[$0 >> 0] | 0;
           $315 = ($313 & 1) == 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($307 + -48 | 0, 0, $315 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $315 ? ($313 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
           $326 = HEAP32[$200 >> 2] | 0;
           $t$0 = $253;
          }
         }
        } else {
         $326 = $201;
         $t$0 = $188;
        }
       } else {
        $326 = $201;
        $t$0 = $188;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($326 + -24 | 0, 40);
       if (($t$0 | 0) == ($last | 0)) label = 128; else if ((HEAP8[$t$0 >> 0] | 0) == 118) {
        $403 = HEAP32[$db >> 2] | 0;
        $405 = HEAP32[$200 >> 2] | 0;
        $t$3 = $t$0 + 1 | 0;
       } else label = 128;
       do if ((label | 0) == 128) {
        $330 = $0 + 4 | 0;
        $331 = $4 + 8 | 0;
        $332 = $4 + 1 | 0;
        $333 = $4 + 4 | 0;
        $334 = $0 + 8 | 0;
        $335 = $0 + 1 | 0;
        $first_arg$0$off0$ph = 1;
        $t$1$ph = $t$0;
        L75 : while (1) {
         $338 = HEAP32[$db >> 2] | 0;
         $339 = HEAP32[$200 >> 2] | 0;
         $t$1 = $t$1$ph;
         while (1) {
          $340 = ($339 - $338 | 0) / 24 | 0;
          $341 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$1, $last, $db) | 0;
          $339 = HEAP32[$200 >> 2] | 0;
          $338 = HEAP32[$db >> 2] | 0;
          $345 = ($339 - $338 | 0) / 24 | 0;
          if (($341 | 0) == ($t$1 | 0)) {
           $$lcssa = $339;
           $$lcssa165 = $338;
           $t$1$lcssa159 = $t$1;
           label = 151;
           break L75;
          }
          if ($345 >>> 0 > $340 >>> 0) {
           $$lcssa162 = $340;
           $$lcssa163 = $341;
           $$lcssa168 = $345;
           break;
          } else $t$1 = $341;
         }
         HEAP32[$0 >> 2] = 0;
         HEAP32[$0 + 4 >> 2] = 0;
         HEAP32[$0 + 8 >> 2] = 0;
         $__i$0$i$i = 0;
         while (1) {
          if (($__i$0$i$i | 0) == 3) {
           $k$0 = $$lcssa162;
           break;
          }
          HEAP32[$0 + ($__i$0$i$i << 2) >> 2] = 0;
          $__i$0$i$i = $__i$0$i$i + 1 | 0;
         }
         while (1) {
          if ($k$0 >>> 0 >= $$lcssa168 >>> 0) {
           $k2$0 = $$lcssa162;
           break;
          }
          $351 = HEAP8[$0 >> 0] | 0;
          if ((($351 & 1) == 0 ? ($351 & 255) >>> 1 : HEAP32[$330 >> 2] | 0) | 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($0, 15295) | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, (HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0);
          $361 = HEAP8[$4 >> 0] | 0;
          $363 = ($361 & 1) == 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0, $363 ? $332 : HEAP32[$331 >> 2] | 0, $363 ? ($361 & 255) >>> 1 : HEAP32[$333 >> 2] | 0) | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
          $k$0 = $k$0 + 1 | 0;
         }
         while (1) {
          if ($k2$0 >>> 0 >= $$lcssa168 >>> 0) break;
          $380 = HEAP32[$200 >> 2] | 0;
          $381 = $380 + -24 | 0;
          $382 = $380;
          while (1) {
           if (($382 | 0) == ($381 | 0)) break;
           $384 = $382 + -24 | 0;
           HEAP32[$200 >> 2] = $384;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($384);
           $382 = HEAP32[$200 >> 2] | 0;
          }
          $k2$0 = $k2$0 + 1 | 0;
         }
         $372 = HEAP8[$0 >> 0] | 0;
         $375 = HEAP32[$330 >> 2] | 0;
         if (!((($372 & 1) == 0 ? ($372 & 255) >>> 1 : $375) | 0)) $first_arg$3$off0$ph = $first_arg$0$off0$ph; else {
          $387 = HEAP32[$200 >> 2] | 0;
          if ((HEAP32[$db >> 2] | 0) == ($387 | 0)) {
           label = 163;
           break;
          }
          if ($first_arg$0$off0$ph) {
           $391 = $387;
           $393 = $372;
           $399 = $375;
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($387 + -24 | 0, 15295) | 0;
           $391 = HEAP32[$200 >> 2] | 0;
           $393 = HEAP8[$0 >> 0] | 0;
           $399 = HEAP32[$330 >> 2] | 0;
          }
          $394 = ($393 & 1) == 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($391 + -24 | 0, $394 ? $335 : HEAP32[$334 >> 2] | 0, $394 ? ($393 & 255) >>> 1 : $399) | 0;
          $first_arg$3$off0$ph = 0;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         $first_arg$0$off0$ph = $first_arg$3$off0$ph;
         $t$1$ph = $$lcssa163;
        }
        if ((label | 0) == 151) {
         $403 = $$lcssa165;
         $405 = $$lcssa;
         $t$3 = $t$1$lcssa159;
         break;
        } else if ((label | 0) == 163) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         $$15 = $first;
         $$418 = 0;
         break L15;
        }
       } while (0);
       if (($403 | 0) == ($405 | 0)) {
        $$15 = $first;
        $$418 = 0;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($405 + -24 | 0, 41);
        if ($190 & 1 | 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$200 >> 2] | 0) + -24 | 0, 14311) | 0;
        if ($190 & 2 | 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$200 >> 2] | 0) + -24 | 0, 14318) | 0;
        if ($190 & 4 | 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$200 >> 2] | 0) + -24 | 0, 14328) | 0;
        switch ($192 | 0) {
        case 1:
         {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$200 >> 2] | 0) + -24 | 0, 15902) | 0;
          break;
         }
        case 2:
         {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$200 >> 2] | 0) + -24 | 0, 15905) | 0;
          break;
         }
        default:
         {}
        }
        $425 = HEAP8[$left$i >> 0] | 0;
        $427 = ($425 & 1) == 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$200 >> 2] | 0) + -24 | 0, $427 ? $left$i + 1 | 0 : HEAP32[$left$i + 8 >> 2] | 0, $427 ? ($425 & 255) >>> 1 : HEAP32[$left$i + 4 >> 2] | 0) | 0;
        $$15 = $t$3;
        $$418 = 1;
       }
      }
     } while (0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($left$i);
     HEAP8[$9 >> 0] = $196;
     if ($$418) $$59$ph = $$15; else {
      HEAP8[$9 >> 0] = $10;
      HEAP32[$6 >> 2] = $7;
      $$11 = $first;
      break L1;
     }
    }
   }
  } while (0);
  HEAP8[$9 >> 0] = $10;
  HEAP32[$6 >> 2] = $7;
  $$11 = $$59$ph;
 } while (0);
 STACKTOP = sp;
 return $$11 | 0;
}

function _vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa386 = 0, $$lcssa40 = 0, $$pre$phi184Z2D = 0, $$size$0 = 0, $0 = 0, $10 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $136 = 0, $14 = 0, $142 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $156 = 0, $160 = 0, $164 = 0, $166 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $180 = 0, $185 = 0, $189 = 0, $194 = 0, $195 = 0, $196 = 0, $198 = 0, $20 = 0, $200 = 0, $201 = 0, $209 = 0, $219 = 0, $221 = 0, $225 = 0, $227 = 0, $235 = 0, $243 = 0, $244 = 0, $247 = 0, $249 = 0, $25 = 0, $255 = 0, $262 = 0, $264 = 0, $270 = 0, $277 = 0, $282 = 0, $283 = 0, $290 = 0, $303 = 0, $307 = 0.0, $32 = 0, $326 = 0, $38 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $61 = 0, $7 = 0, $8 = 0, $81 = 0, $82 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0402 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $base$0 = 0, $c$0102 = 0, $dest$0 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph22 = 0, $i$0$ph22$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigittmp = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0107 = 0, $matches$0107$lcssa = 0, $matches$0107371 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $p$0110 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$398 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0111 = 0, $pos$1 = 0, $pos$2 = 0, $s$0105 = 0, $s$0105$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $size$0 = 0, $st = 0, $wc = 0, $wcs$0106 = 0, $wcs$0106$lcssa = 0, $wcs$1 = 0, $wcs$10 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$099 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap2$i = sp + 16 | 0;
 $st = sp + 8 | 0;
 $scanset = sp + 33 | 0;
 $wc = sp;
 $0 = sp + 32 | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $326 = ___lockfile($f) | 0; else $326 = 0;
 $5 = HEAP8[$fmt >> 0] | 0;
 L4 : do if (!($5 << 24 >> 24)) $matches$3 = 0; else {
  $7 = $f + 4 | 0;
  $8 = $f + 100 | 0;
  $9 = $f + 108 | 0;
  $10 = $f + 8 | 0;
  $11 = $scanset + 10 | 0;
  $12 = $scanset + 33 | 0;
  $13 = $st + 4 | 0;
  $14 = $scanset + 46 | 0;
  $15 = $scanset + 94 | 0;
  $17 = $5;
  $matches$0107 = 0;
  $p$0110 = $fmt;
  $pos$0111 = 0;
  $s$0105 = 0;
  $wcs$0106 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace($17 & 255) | 0)) {
    $47 = (HEAP8[$p$0110 >> 0] | 0) == 37;
    L10 : do if ($47) {
     $48 = $p$0110 + 1 | 0;
     $49 = HEAP8[$48 >> 0] | 0;
     L12 : do switch ($49 << 24 >> 24) {
     case 37:
      {
       break L10;
       break;
      }
     case 42:
      {
       $dest$0 = 0;
       $p$2 = $p$0110 + 2 | 0;
       break;
      }
     default:
      {
       $isdigittmp = ($49 & 255) + -48 | 0;
       if ($isdigittmp >>> 0 < 10) if ((HEAP8[$p$0110 + 2 >> 0] | 0) == 36) {
        HEAP32[$ap2$i >> 2] = HEAP32[$ap >> 2];
        $i$0$i = $isdigittmp;
        while (1) {
         $81 = (HEAP32[$ap2$i >> 2] | 0) + (4 - 1) & ~(4 - 1);
         $82 = HEAP32[$81 >> 2] | 0;
         HEAP32[$ap2$i >> 2] = $81 + 4;
         if ($i$0$i >>> 0 > 1) $i$0$i = $i$0$i + -1 | 0; else {
          $$lcssa = $82;
          break;
         }
        }
        $dest$0 = $$lcssa;
        $p$2 = $p$0110 + 3 | 0;
        break L12;
       }
       $90 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
       $91 = HEAP32[$90 >> 2] | 0;
       HEAP32[$ap >> 2] = $90 + 4;
       $dest$0 = $91;
       $p$2 = $48;
      }
     } while (0);
     $92 = HEAP8[$p$2 >> 0] | 0;
     $93 = $92 & 255;
     if (($93 + -48 | 0) >>> 0 < 10) {
      $97 = $93;
      $p$398 = $p$2;
      $width$099 = 0;
      while (1) {
       $96 = ($width$099 * 10 | 0) + -48 + $97 | 0;
       $98 = $p$398 + 1 | 0;
       $99 = HEAP8[$98 >> 0] | 0;
       $97 = $99 & 255;
       if (($97 + -48 | 0) >>> 0 >= 10) {
        $$lcssa40 = $99;
        $p$3$lcssa = $98;
        $width$0$lcssa = $96;
        break;
       } else {
        $p$398 = $98;
        $width$099 = $96;
       }
      }
     } else {
      $$lcssa40 = $92;
      $p$3$lcssa = $p$2;
      $width$0$lcssa = 0;
     }
     if ($$lcssa40 << 24 >> 24 == 109) {
      $104 = $p$3$lcssa + 1 | 0;
      $107 = HEAP8[$104 >> 0] | 0;
      $alloc$0 = ($dest$0 | 0) != 0 & 1;
      $p$4 = $104;
      $s$1 = 0;
      $wcs$1 = 0;
     } else {
      $107 = $$lcssa40;
      $alloc$0 = 0;
      $p$4 = $p$3$lcssa;
      $s$1 = $s$0105;
      $wcs$1 = $wcs$0106;
     }
     $105 = $p$4 + 1 | 0;
     switch ($107 & 255 | 0) {
     case 104:
      {
       $109 = (HEAP8[$105 >> 0] | 0) == 104;
       $p$5 = $109 ? $p$4 + 2 | 0 : $105;
       $size$0 = $109 ? -2 : -1;
       break;
      }
     case 108:
      {
       $112 = (HEAP8[$105 >> 0] | 0) == 108;
       $p$5 = $112 ? $p$4 + 2 | 0 : $105;
       $size$0 = $112 ? 3 : 1;
       break;
      }
     case 106:
      {
       $p$5 = $105;
       $size$0 = 3;
       break;
      }
     case 116:
     case 122:
      {
       $p$5 = $105;
       $size$0 = 1;
       break;
      }
     case 76:
      {
       $p$5 = $105;
       $size$0 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       $p$5 = $p$4;
       $size$0 = 0;
       break;
      }
     default:
      {
       $alloc$0402 = $alloc$0;
       $matches$0107371 = $matches$0107;
       $s$7 = $s$1;
       $wcs$8 = $wcs$1;
       label = 154;
       break L6;
      }
     }
     $115 = HEAPU8[$p$5 >> 0] | 0;
     $117 = ($115 & 47 | 0) == 3;
     $$ = $117 ? $115 | 32 : $115;
     $$size$0 = $117 ? 1 : $size$0;
     switch ($$ | 0) {
     case 99:
      {
       $pos$1 = $pos$0111;
       $width$1 = ($width$0$lcssa | 0) < 1 ? 1 : $width$0$lcssa;
       break;
      }
     case 91:
      {
       $pos$1 = $pos$0111;
       $width$1 = $width$0$lcssa;
       break;
      }
     case 110:
      {
       if (!$dest$0) {
        $matches$1 = $matches$0107;
        $p$11 = $p$5;
        $pos$2 = $pos$0111;
        $s$6 = $s$1;
        $wcs$7 = $wcs$1;
        break L8;
       }
       switch ($$size$0 | 0) {
       case -2:
        {
         HEAP8[$dest$0 >> 0] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case -1:
        {
         HEAP16[$dest$0 >> 1] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case 0:
        {
         HEAP32[$dest$0 >> 2] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case 1:
        {
         HEAP32[$dest$0 >> 2] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case 3:
        {
         $125 = $dest$0;
         HEAP32[$125 >> 2] = $pos$0111;
         HEAP32[$125 + 4 >> 2] = (($pos$0111 | 0) < 0) << 31 >> 31;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       default:
        {
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
        }
       }
       break;
      }
     default:
      {
       ___shlim($f, 0);
       do {
        $129 = HEAP32[$7 >> 2] | 0;
        if ($129 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
         HEAP32[$7 >> 2] = $129 + 1;
         $136 = HEAPU8[$129 >> 0] | 0;
        } else $136 = ___shgetc($f) | 0;
       } while ((_isspace($136) | 0) != 0);
       if (!(HEAP32[$8 >> 2] | 0)) $148 = HEAP32[$7 >> 2] | 0; else {
        $142 = (HEAP32[$7 >> 2] | 0) + -1 | 0;
        HEAP32[$7 >> 2] = $142;
        $148 = $142;
       }
       $pos$1 = (HEAP32[$9 >> 2] | 0) + $pos$0111 + $148 - (HEAP32[$10 >> 2] | 0) | 0;
       $width$1 = $width$0$lcssa;
      }
     }
     ___shlim($f, $width$1);
     $150 = HEAP32[$7 >> 2] | 0;
     $151 = HEAP32[$8 >> 2] | 0;
     if ($150 >>> 0 < $151 >>> 0) {
      HEAP32[$7 >> 2] = $150 + 1;
      $156 = $151;
     } else {
      if ((___shgetc($f) | 0) < 0) {
       $alloc$0402 = $alloc$0;
       $matches$0107371 = $matches$0107;
       $s$7 = $s$1;
       $wcs$8 = $wcs$1;
       label = 154;
       break L6;
      }
      $156 = HEAP32[$8 >> 2] | 0;
     }
     if ($156 | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
     L68 : do switch ($$ | 0) {
     case 91:
     case 99:
     case 115:
      {
       $160 = ($$ | 0) == 99;
       L70 : do if (($$ | 16 | 0) == 115) {
        _memset($scanset | 0, -1, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        if (($$ | 0) == 115) {
         HEAP8[$12 >> 0] = 0;
         HEAP8[$11 >> 0] = 0;
         HEAP8[$11 + 1 >> 0] = 0;
         HEAP8[$11 + 2 >> 0] = 0;
         HEAP8[$11 + 3 >> 0] = 0;
         HEAP8[$11 + 4 >> 0] = 0;
         $p$9 = $p$5;
        } else $p$9 = $p$5;
       } else {
        $164 = $p$5 + 1 | 0;
        $166 = (HEAP8[$164 >> 0] | 0) == 94;
        $invert$0 = $166 & 1;
        $p$6 = $166 ? $p$5 + 2 | 0 : $164;
        _memset($scanset | 0, $166 & 1 | 0, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        switch (HEAP8[$p$6 >> 0] | 0) {
        case 45:
         {
          $172 = ($invert$0 ^ 1) & 255;
          HEAP8[$14 >> 0] = $172;
          $$pre$phi184Z2D = $172;
          $p$7$ph = $p$6 + 1 | 0;
          break;
         }
        case 93:
         {
          $175 = ($invert$0 ^ 1) & 255;
          HEAP8[$15 >> 0] = $175;
          $$pre$phi184Z2D = $175;
          $p$7$ph = $p$6 + 1 | 0;
          break;
         }
        default:
         {
          $$pre$phi184Z2D = ($invert$0 ^ 1) & 255;
          $p$7$ph = $p$6;
         }
        }
        $p$7 = $p$7$ph;
        while (1) {
         $176 = HEAP8[$p$7 >> 0] | 0;
         L81 : do switch ($176 << 24 >> 24) {
         case 0:
          {
           $alloc$0402 = $alloc$0;
           $matches$0107371 = $matches$0107;
           $s$7 = $s$1;
           $wcs$8 = $wcs$1;
           label = 154;
           break L6;
           break;
          }
         case 93:
          {
           $p$9 = $p$7;
           break L70;
           break;
          }
         case 45:
          {
           $177 = $p$7 + 1 | 0;
           $178 = HEAP8[$177 >> 0] | 0;
           switch ($178 << 24 >> 24) {
           case 93:
           case 0:
            {
             $189 = 45;
             $p$8 = $p$7;
             break L81;
             break;
            }
           default:
            {}
           }
           $180 = HEAP8[$p$7 + -1 >> 0] | 0;
           if (($180 & 255) < ($178 & 255)) {
            $c$0102 = $180 & 255;
            do {
             $c$0102 = $c$0102 + 1 | 0;
             HEAP8[$scanset + $c$0102 >> 0] = $$pre$phi184Z2D;
             $185 = HEAP8[$177 >> 0] | 0;
            } while (($c$0102 | 0) < ($185 & 255 | 0));
            $189 = $185;
            $p$8 = $177;
           } else {
            $189 = $178;
            $p$8 = $177;
           }
           break;
          }
         default:
          {
           $189 = $176;
           $p$8 = $p$7;
          }
         } while (0);
         HEAP8[$scanset + (($189 & 255) + 1) >> 0] = $$pre$phi184Z2D;
         $p$7 = $p$8 + 1 | 0;
        }
       } while (0);
       $194 = $160 ? $width$1 + 1 | 0 : 31;
       $195 = ($$size$0 | 0) == 1;
       $196 = ($alloc$0 | 0) != 0;
       L89 : do if ($195) {
        if ($196) {
         $198 = _malloc($194 << 2) | 0;
         if (!$198) {
          $alloc$0402 = $alloc$0;
          $matches$0107371 = $matches$0107;
          $s$7 = 0;
          $wcs$8 = $198;
          label = 154;
          break L6;
         } else $wcs$2 = $198;
        } else $wcs$2 = $dest$0;
        HEAP32[$st >> 2] = 0;
        HEAP32[$13 >> 2] = 0;
        $i$0$ph = 0;
        $k$0$ph = $194;
        $wcs$3$ph = $wcs$2;
        L95 : while (1) {
         $200 = ($wcs$3$ph | 0) == 0;
         $i$0$ph22 = $i$0$ph;
         while (1) {
          L99 : while (1) {
           $201 = HEAP32[$7 >> 2] | 0;
           if ($201 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
            HEAP32[$7 >> 2] = $201 + 1;
            $209 = HEAPU8[$201 >> 0] | 0;
           } else $209 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($209 + 1) >> 0] | 0)) {
            $i$0$ph22$lcssa = $i$0$ph22;
            $wcs$3$ph$lcssa = $wcs$3$ph;
            break L95;
           }
           HEAP8[$0 >> 0] = $209;
           switch (_mbrtowc($wc, $0, 1, $st) | 0) {
           case -1:
            {
             $alloc$0402 = $alloc$0;
             $matches$0107371 = $matches$0107;
             $s$7 = 0;
             $wcs$8 = $wcs$3$ph;
             label = 154;
             break L6;
             break;
            }
           case -2:
            break;
           default:
            break L99;
           }
          }
          if ($200) $i$1 = $i$0$ph22; else {
           HEAP32[$wcs$3$ph + ($i$0$ph22 << 2) >> 2] = HEAP32[$wc >> 2];
           $i$1 = $i$0$ph22 + 1 | 0;
          }
          if ($196 & ($i$1 | 0) == ($k$0$ph | 0)) break; else $i$0$ph22 = $i$1;
         }
         $219 = $k$0$ph << 1 | 1;
         $221 = _realloc($wcs$3$ph, $219 << 2) | 0;
         if (!$221) {
          $alloc$0402 = $alloc$0;
          $matches$0107371 = $matches$0107;
          $s$7 = 0;
          $wcs$8 = $wcs$3$ph;
          label = 154;
          break L6;
         } else {
          $i$0$ph$phi = $k$0$ph;
          $k$0$ph = $219;
          $wcs$3$ph = $221;
          $i$0$ph = $i$0$ph$phi;
         }
        }
        if (!(_mbsinit($st) | 0)) {
         $alloc$0402 = $alloc$0;
         $matches$0107371 = $matches$0107;
         $s$7 = 0;
         $wcs$8 = $wcs$3$ph$lcssa;
         label = 154;
         break L6;
        } else {
         $i$4 = $i$0$ph22$lcssa;
         $s$4 = 0;
         $wcs$5 = $wcs$3$ph$lcssa;
        }
       } else {
        if ($196) {
         $225 = _malloc($194) | 0;
         if (!$225) {
          $alloc$0402 = $alloc$0;
          $matches$0107371 = $matches$0107;
          $s$7 = 0;
          $wcs$8 = 0;
          label = 154;
          break L6;
         } else {
          $i$2$ph = 0;
          $k$1$ph = $194;
          $s$2$ph = $225;
         }
         while (1) {
          $i$2 = $i$2$ph;
          do {
           $227 = HEAP32[$7 >> 2] | 0;
           if ($227 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
            HEAP32[$7 >> 2] = $227 + 1;
            $235 = HEAPU8[$227 >> 0] | 0;
           } else $235 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($235 + 1) >> 0] | 0)) {
            $i$4 = $i$2;
            $s$4 = $s$2$ph;
            $wcs$5 = 0;
            break L89;
           }
           HEAP8[$s$2$ph + $i$2 >> 0] = $235;
           $i$2 = $i$2 + 1 | 0;
          } while (($i$2 | 0) != ($k$1$ph | 0));
          $243 = $k$1$ph << 1 | 1;
          $244 = _realloc($s$2$ph, $243) | 0;
          if (!$244) {
           $alloc$0402 = $alloc$0;
           $matches$0107371 = $matches$0107;
           $s$7 = $s$2$ph;
           $wcs$8 = 0;
           label = 154;
           break L6;
          } else {
           $i$2$ph$phi = $k$1$ph;
           $k$1$ph = $243;
           $s$2$ph = $244;
           $i$2$ph = $i$2$ph$phi;
          }
         }
        }
        if (!$dest$0) {
         $264 = $156;
         while (1) {
          $262 = HEAP32[$7 >> 2] | 0;
          if ($262 >>> 0 < $264 >>> 0) {
           HEAP32[$7 >> 2] = $262 + 1;
           $270 = HEAPU8[$262 >> 0] | 0;
          } else $270 = ___shgetc($f) | 0;
          if (!(HEAP8[$scanset + ($270 + 1) >> 0] | 0)) {
           $i$4 = 0;
           $s$4 = 0;
           $wcs$5 = 0;
           break L89;
          }
          $264 = HEAP32[$8 >> 2] | 0;
         }
        } else {
         $249 = $156;
         $i$3 = 0;
         while (1) {
          $247 = HEAP32[$7 >> 2] | 0;
          if ($247 >>> 0 < $249 >>> 0) {
           HEAP32[$7 >> 2] = $247 + 1;
           $255 = HEAPU8[$247 >> 0] | 0;
          } else $255 = ___shgetc($f) | 0;
          if (!(HEAP8[$scanset + ($255 + 1) >> 0] | 0)) {
           $i$4 = $i$3;
           $s$4 = $dest$0;
           $wcs$5 = 0;
           break L89;
          }
          HEAP8[$dest$0 + $i$3 >> 0] = $255;
          $249 = HEAP32[$8 >> 2] | 0;
          $i$3 = $i$3 + 1 | 0;
         }
        }
       } while (0);
       if (!(HEAP32[$8 >> 2] | 0)) $282 = HEAP32[$7 >> 2] | 0; else {
        $277 = (HEAP32[$7 >> 2] | 0) + -1 | 0;
        HEAP32[$7 >> 2] = $277;
        $282 = $277;
       }
       $283 = $282 - (HEAP32[$10 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) | 0;
       if (!$283) {
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0107;
        $s$9 = $s$4;
        $wcs$10 = $wcs$5;
        break L6;
       }
       if (!(($283 | 0) == ($width$1 | 0) | $160 ^ 1)) {
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0107;
        $s$9 = $s$4;
        $wcs$10 = $wcs$5;
        break L6;
       }
       do if ($196) if ($195) {
        HEAP32[$dest$0 >> 2] = $wcs$5;
        break;
       } else {
        HEAP32[$dest$0 >> 2] = $s$4;
        break;
       } while (0);
       if ($160) {
        $p$10 = $p$9;
        $s$5 = $s$4;
        $wcs$6 = $wcs$5;
       } else {
        if ($wcs$5 | 0) HEAP32[$wcs$5 + ($i$4 << 2) >> 2] = 0;
        if (!$s$4) {
         $p$10 = $p$9;
         $s$5 = 0;
         $wcs$6 = $wcs$5;
         break L68;
        }
        HEAP8[$s$4 + $i$4 >> 0] = 0;
        $p$10 = $p$9;
        $s$5 = $s$4;
        $wcs$6 = $wcs$5;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       $base$0 = 16;
       label = 136;
       break;
      }
     case 111:
      {
       $base$0 = 8;
       label = 136;
       break;
      }
     case 117:
     case 100:
      {
       $base$0 = 10;
       label = 136;
       break;
      }
     case 105:
      {
       $base$0 = 0;
       label = 136;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       $307 = +___floatscan($f, $$size$0, 0);
       if ((HEAP32[$9 >> 2] | 0) == ((HEAP32[$10 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0)) {
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0107;
        $s$9 = $s$1;
        $wcs$10 = $wcs$1;
        break L6;
       }
       if (!$dest$0) {
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
       } else switch ($$size$0 | 0) {
       case 0:
        {
         HEAPF32[$dest$0 >> 2] = $307;
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
         break;
        }
       case 1:
        {
         HEAPF64[$dest$0 >> 3] = $307;
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
         break;
        }
       case 2:
        {
         HEAPF64[$dest$0 >> 3] = $307;
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
         break;
        }
       default:
        {
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
        }
       }
       break;
      }
     default:
      {
       $p$10 = $p$5;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
      }
     } while (0);
     L169 : do if ((label | 0) == 136) {
      label = 0;
      $290 = ___intscan($f, $base$0, 0, -1, -1) | 0;
      if ((HEAP32[$9 >> 2] | 0) == ((HEAP32[$10 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0)) {
       $alloc$2 = $alloc$0;
       $matches$2 = $matches$0107;
       $s$9 = $s$1;
       $wcs$10 = $wcs$1;
       break L6;
      }
      if (($dest$0 | 0) != 0 & ($$ | 0) == 112) {
       HEAP32[$dest$0 >> 2] = $290;
       $p$10 = $p$5;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
       break;
      }
      if (!$dest$0) {
       $p$10 = $p$5;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
      } else switch ($$size$0 | 0) {
      case -2:
       {
        HEAP8[$dest$0 >> 0] = $290;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case -1:
       {
        HEAP16[$dest$0 >> 1] = $290;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case 0:
       {
        HEAP32[$dest$0 >> 2] = $290;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case 1:
       {
        HEAP32[$dest$0 >> 2] = $290;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case 3:
       {
        $303 = $dest$0;
        HEAP32[$303 >> 2] = $290;
        HEAP32[$303 + 4 >> 2] = tempRet0;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      default:
       {
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
       }
      }
     } while (0);
     $matches$1 = (($dest$0 | 0) != 0 & 1) + $matches$0107 | 0;
     $p$11 = $p$10;
     $pos$2 = (HEAP32[$9 >> 2] | 0) + $pos$1 + (HEAP32[$7 >> 2] | 0) - (HEAP32[$10 >> 2] | 0) | 0;
     $s$6 = $s$5;
     $wcs$7 = $wcs$6;
     break L8;
    } while (0);
    $51 = $p$0110 + ($47 & 1) | 0;
    ___shlim($f, 0);
    $52 = HEAP32[$7 >> 2] | 0;
    if ($52 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
     HEAP32[$7 >> 2] = $52 + 1;
     $61 = HEAPU8[$52 >> 0] | 0;
    } else $61 = ___shgetc($f) | 0;
    if (($61 | 0) != (HEAPU8[$51 >> 0] | 0)) {
     $$lcssa386 = $61;
     $matches$0107$lcssa = $matches$0107;
     $s$0105$lcssa = $s$0105;
     $wcs$0106$lcssa = $wcs$0106;
     label = 22;
     break L6;
    }
    $matches$1 = $matches$0107;
    $p$11 = $51;
    $pos$2 = $pos$0111 + 1 | 0;
    $s$6 = $s$0105;
    $wcs$7 = $wcs$0106;
   } else {
    $p$1 = $p$0110;
    while (1) {
     $20 = $p$1 + 1 | 0;
     if (!(_isspace(HEAPU8[$20 >> 0] | 0) | 0)) {
      $p$1$lcssa = $p$1;
      break;
     } else $p$1 = $20;
    }
    ___shlim($f, 0);
    do {
     $25 = HEAP32[$7 >> 2] | 0;
     if ($25 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $25 + 1;
      $32 = HEAPU8[$25 >> 0] | 0;
     } else $32 = ___shgetc($f) | 0;
    } while ((_isspace($32) | 0) != 0);
    if (!(HEAP32[$8 >> 2] | 0)) $44 = HEAP32[$7 >> 2] | 0; else {
     $38 = (HEAP32[$7 >> 2] | 0) + -1 | 0;
     HEAP32[$7 >> 2] = $38;
     $44 = $38;
    }
    $matches$1 = $matches$0107;
    $p$11 = $p$1$lcssa;
    $pos$2 = (HEAP32[$9 >> 2] | 0) + $pos$0111 + $44 - (HEAP32[$10 >> 2] | 0) | 0;
    $s$6 = $s$0105;
    $wcs$7 = $wcs$0106;
   } while (0);
   $p$0110 = $p$11 + 1 | 0;
   $17 = HEAP8[$p$0110 >> 0] | 0;
   if (!($17 << 24 >> 24)) {
    $matches$3 = $matches$1;
    break L4;
   } else {
    $matches$0107 = $matches$1;
    $pos$0111 = $pos$2;
    $s$0105 = $s$6;
    $wcs$0106 = $wcs$7;
   }
  }
  if ((label | 0) == 22) {
   if (HEAP32[$8 >> 2] | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
   if (($matches$0107$lcssa | 0) != 0 | ($$lcssa386 | 0) > -1) {
    $matches$3 = $matches$0107$lcssa;
    break;
   } else {
    $alloc$1 = 0;
    $s$8 = $s$0105$lcssa;
    $wcs$9 = $wcs$0106$lcssa;
    label = 155;
   }
  } else if ((label | 0) == 154) if (!$matches$0107371) {
   $alloc$1 = $alloc$0402;
   $s$8 = $s$7;
   $wcs$9 = $wcs$8;
   label = 155;
  } else {
   $alloc$2 = $alloc$0402;
   $matches$2 = $matches$0107371;
   $s$9 = $s$7;
   $wcs$10 = $wcs$8;
  }
  if ((label | 0) == 155) {
   $alloc$2 = $alloc$1;
   $matches$2 = -1;
   $s$9 = $s$8;
   $wcs$10 = $wcs$9;
  }
  if (!$alloc$2) $matches$3 = $matches$2; else {
   _free($s$9);
   _free($wcs$10);
   $matches$3 = $matches$2;
  }
 } while (0);
 if ($326 | 0) ___unlockfile($f);
 STACKTOP = sp;
 return $matches$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i6 = 0, $$0$i$i$i25$i = 0, $$0$i$i$i7$i = 0, $$03$i = 0, $$1 = 0, $$7$i = 0, $$in = 0, $$ph32 = 0, $$pn$in = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $101 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $115 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $134 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $141 = 0, $146 = 0, $148 = 0, $149 = 0, $152 = 0, $154 = 0, $157 = 0, $158 = 0, $160 = 0, $166 = 0, $168 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $188 = 0, $189 = 0, $191 = 0, $193 = 0, $198 = 0, $2 = 0, $20 = 0, $200 = 0, $209 = 0, $210 = 0, $212 = 0, $216 = 0, $219 = 0, $22 = 0, $222 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $24 = 0, $240 = 0, $244 = 0, $256 = 0, $257 = 0, $258 = 0, $260 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $267 = 0, $275 = 0, $276 = 0, $277 = 0, $280 = 0, $284 = 0, $288 = 0, $29 = 0, $292 = 0, $295 = 0, $298 = 0, $299 = 0, $3 = 0, $302 = 0, $308 = 0, $309 = 0, $31 = 0, $316 = 0, $32 = 0, $332 = 0, $333 = 0, $334 = 0, $336 = 0, $339 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $49 = 0, $52 = 0, $54 = 0, $56 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $72 = 0, $73 = 0, $85 = 0, $86 = 0, $88 = 0, $90 = 0, $95 = 0, $97 = 0, $98 = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i$i = 0, $__p$0$i$i = 0, $__p$1$i$i = 0, $__v$i$i24$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $t0$0$i = 0, $t01$0$i = 0, $t01$0$i$lcssa55 = 0, $t01$2$i = 0, $t01$3$i = 0, $t1$0$i = 0, $t1$0$i$lcssa = 0, $t14$0$i = 0, $t14$0$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i24$i = sp + 88 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 L1 : do if (($first | 0) == ($last | 0)) $$1 = $first; else {
  $6 = HEAP8[$first >> 0] | 0;
  $7 = $6 << 24 >> 24;
  switch ($7 | 0) {
  case 68:
  case 67:
   {
    L6 : do if (($last - $first | 0) > 1) {
     $13 = $db + 4 | 0;
     $14 = HEAP32[$13 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($14 | 0)) $$03$i = $first; else {
      switch ($7 | 0) {
      case 67:
       {
        switch (HEAP8[$first + 1 >> 0] | 0) {
        case 53:
        case 51:
        case 50:
        case 49:
         break;
        default:
         {
          $$03$i = $first;
          break L6;
         }
        }
        __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($1, $14 + -24 | 0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
        $20 = HEAP32[$13 >> 2] | 0;
        $22 = HEAP32[$db + 8 >> 2] | 0;
        $24 = $22;
        if ($20 >>> 0 < $22 >>> 0) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($20, $0);
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 24;
        } else {
         $29 = HEAP32[$db >> 2] | 0;
         $31 = ($20 - $29 | 0) / 24 | 0;
         $32 = $31 + 1 | 0;
         if ($32 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
         $35 = ($24 - $29 | 0) / 24 | 0;
         if ($35 >>> 0 < 89478485) {
          $37 = $35 << 1;
          $$0$i$i$i$i = $37 >>> 0 < $32 >>> 0 ? $32 : $37;
         } else $$0$i$i$i$i = 178956970;
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i24$i, $$0$i$i$i$i, $31, $db + 12 | 0);
         $40 = $__v$i$i24$i + 8 | 0;
         $41 = HEAP32[$40 >> 2] | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($41, $0);
         HEAP32[$40 >> 2] = $41 + 24;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i24$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i24$i);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
        HEAP8[$db + 60 >> 0] = 1;
        $$03$i = $first + 2 | 0;
        break L6;
        break;
       }
      case 68:
       break;
      default:
       {
        $$03$i = $first;
        break L6;
       }
      }
      switch (HEAP8[$first + 1 >> 0] | 0) {
      case 53:
      case 50:
      case 49:
      case 48:
       break;
      default:
       {
        $$03$i = $first;
        break L6;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($4, $14 + -24 | 0);
      $49 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($4, 0, 14750) | 0;
      HEAP32[$3 >> 2] = HEAP32[$49 >> 2];
      HEAP32[$3 + 4 >> 2] = HEAP32[$49 + 4 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$49 + 8 >> 2];
      $__i$0$i$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i$i | 0) == 3) break;
       HEAP32[$49 + ($__i$0$i$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($2, $3);
      $52 = HEAP32[$13 >> 2] | 0;
      $54 = HEAP32[$db + 8 >> 2] | 0;
      $56 = $54;
      if ($52 >>> 0 < $54 >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($52, $2);
       HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 24;
      } else {
       $61 = HEAP32[$db >> 2] | 0;
       $63 = ($52 - $61 | 0) / 24 | 0;
       $64 = $63 + 1 | 0;
       if ($64 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       $67 = ($56 - $61 | 0) / 24 | 0;
       if ($67 >>> 0 < 89478485) {
        $69 = $67 << 1;
        $$0$i$i$i7$i = $69 >>> 0 < $64 >>> 0 ? $64 : $69;
       } else $$0$i$i$i7$i = 178956970;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i24$i, $$0$i$i$i7$i, $63, $db + 12 | 0);
       $72 = $__v$i$i24$i + 8 | 0;
       $73 = HEAP32[$72 >> 2] | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($73, $2);
       HEAP32[$72 >> 2] = $73 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i24$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i24$i);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      HEAP8[$db + 60 >> 0] = 1;
      $$03$i = $first + 2 | 0;
     }
    } else $$03$i = $first; while (0);
    $$1 = $$03$i;
    break L1;
    break;
   }
  case 85:
   {
    L40 : do if (($last - $first | 0) > 2 & $6 << 24 >> 24 == 85) {
     switch (HEAP8[$first + 1 >> 0] | 0) {
     case 116:
      {
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       HEAP32[$1 + 8 >> 2] = 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1, 15674, 8);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
       $85 = $db + 4 | 0;
       $86 = HEAP32[$85 >> 2] | 0;
       $88 = HEAP32[$db + 8 >> 2] | 0;
       $90 = $88;
       if ($86 >>> 0 < $88 >>> 0) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($86, $0);
        HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 24;
       } else {
        $95 = HEAP32[$db >> 2] | 0;
        $97 = ($86 - $95 | 0) / 24 | 0;
        $98 = $97 + 1 | 0;
        if ($98 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        $101 = ($90 - $95 | 0) / 24 | 0;
        if ($101 >>> 0 < 89478485) {
         $103 = $101 << 1;
         $$0$i$i$i$i6 = $103 >>> 0 < $98 >>> 0 ? $98 : $103;
        } else $$0$i$i$i$i6 = 178956970;
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i24$i, $$0$i$i$i$i6, $97, $db + 12 | 0);
        $106 = $__v$i$i24$i + 8 | 0;
        $107 = HEAP32[$106 >> 2] | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($107, $0);
        HEAP32[$106 >> 2] = $107 + 24;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i24$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i24$i);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
       $109 = $first + 2 | 0;
       if (($109 | 0) == ($last | 0)) {
        $111 = HEAP32[$85 >> 2] | 0;
        $112 = $111 + -24 | 0;
        $113 = $111;
        while (1) {
         if (($113 | 0) == ($112 | 0)) {
          $$7$i = $first;
          break L40;
         }
         $115 = $113 + -24 | 0;
         HEAP32[$85 >> 2] = $115;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($115);
         $113 = HEAP32[$85 >> 2] | 0;
        }
       }
       if (((HEAP8[$109 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
        $t1$0$i = $first + 3 | 0;
        while (1) {
         if (($t1$0$i | 0) == ($last | 0)) {
          $t1$0$i$lcssa = $last;
          break;
         }
         if (((HEAP8[$t1$0$i >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
          $t1$0$i$lcssa = $t1$0$i;
          break;
         }
         $t1$0$i = $t1$0$i + 1 | 0;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueERS7_E4typeESC_SC_((HEAP32[$85 >> 2] | 0) + -24 | 0, $109, $t1$0$i$lcssa);
        $t0$0$i = $t1$0$i$lcssa;
       } else $t0$0$i = $109;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$85 >> 2] | 0) + -24 | 0, 39);
       if (($t0$0$i | 0) != ($last | 0)) if ((HEAP8[$t0$0$i >> 0] | 0) == 95) {
        $$7$i = $t0$0$i + 1 | 0;
        break L40;
       }
       $130 = HEAP32[$85 >> 2] | 0;
       $131 = $130 + -24 | 0;
       $132 = $130;
       while (1) {
        if (($132 | 0) == ($131 | 0)) {
         $$7$i = $first;
         break L40;
        }
        $134 = $132 + -24 | 0;
        HEAP32[$85 >> 2] = $134;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($134);
        $132 = HEAP32[$85 >> 2] | 0;
       }
       break;
      }
     case 108:
      break;
     default:
      {
       $$7$i = $first;
       break L40;
      }
     }
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$3 + 8 >> 2] = 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 15683, 9);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($2, $3);
     $136 = $db + 4 | 0;
     $137 = HEAP32[$136 >> 2] | 0;
     $139 = HEAP32[$db + 8 >> 2] | 0;
     $141 = $139;
     if ($137 >>> 0 < $139 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($137, $2);
      HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 24;
     } else {
      $146 = HEAP32[$db >> 2] | 0;
      $148 = ($137 - $146 | 0) / 24 | 0;
      $149 = $148 + 1 | 0;
      if ($149 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $152 = ($141 - $146 | 0) / 24 | 0;
      if ($152 >>> 0 < 89478485) {
       $154 = $152 << 1;
       $$0$i$i$i25$i = $154 >>> 0 < $149 >>> 0 ? $149 : $154;
      } else $$0$i$i$i25$i = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i24$i, $$0$i$i$i25$i, $148, $db + 12 | 0);
      $157 = $__v$i$i24$i + 8 | 0;
      $158 = HEAP32[$157 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($158, $2);
      HEAP32[$157 >> 2] = $158 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i24$i);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i24$i);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $160 = $first + 2 | 0;
     do if ((HEAP8[$160 >> 0] | 0) == 118) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$136 >> 2] | 0) + -24 | 0, 41);
      $t01$2$i = $first + 3 | 0;
     } else {
      $166 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($160, $last, $db) | 0;
      if (($166 | 0) == ($160 | 0)) {
       $168 = HEAP32[$136 >> 2] | 0;
       $169 = $168 + -24 | 0;
       $170 = $168;
       while (1) {
        if (($170 | 0) == ($169 | 0)) {
         $$7$i = $first;
         break L40;
        }
        $172 = $170 + -24 | 0;
        HEAP32[$136 >> 2] = $172;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($172);
        $170 = HEAP32[$136 >> 2] | 0;
       }
      }
      $173 = HEAP32[$136 >> 2] | 0;
      if ((($173 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
       $$7$i = $first;
       break L40;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($__v$i$i24$i, $173 + -24 | 0);
      $180 = HEAP32[$136 >> 2] | 0;
      $181 = $180 + -24 | 0;
      $182 = $180;
      while (1) {
       if (($182 | 0) == ($181 | 0)) break;
       $184 = $182 + -24 | 0;
       HEAP32[$136 >> 2] = $184;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($184);
       $182 = HEAP32[$136 >> 2] | 0;
      }
      $186 = HEAP8[$__v$i$i24$i >> 0] | 0;
      $188 = ($186 & 1) == 0;
      $189 = $__v$i$i24$i + 8 | 0;
      $191 = $__v$i$i24$i + 1 | 0;
      $193 = $__v$i$i24$i + 4 | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($180 + -48 | 0, $188 ? $191 : HEAP32[$189 >> 2] | 0, $188 ? ($186 & 255) >>> 1 : HEAP32[$193 >> 2] | 0) | 0;
      $$pre$i$i$i$i = $186;
      $t01$0$i = $166;
      while (1) {
       $198 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t01$0$i, $last, $db) | 0;
       if (($198 | 0) == ($t01$0$i | 0)) {
        $t01$0$i$lcssa55 = $t01$0$i;
        label = 91;
        break;
       }
       $200 = HEAP32[$136 >> 2] | 0;
       if ((($200 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
        label = 129;
        break;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4, $200 + -24 | 0);
       L104 : do if (!($$pre$i$i$i$i & 1)) {
        HEAP8[$191 >> 0] = 0;
        HEAP8[$__v$i$i24$i >> 0] = 0;
       } else {
        $209 = HEAP32[$189 >> 2] | 0;
        HEAP8[$209 >> 0] = 0;
        HEAP32[$193 >> 2] = 0;
        $210 = HEAP32[$__v$i$i24$i >> 2] | 0;
        $phitmp$i$i$i$i$i$i$i = ($210 & -2) + -1 | 0;
        $212 = $210 & 255;
        do if (!($212 & 1)) {
         $216 = $210 >>> 1 & 127;
         if (($212 & 255) < 22) {
          _memcpy($191 | 0, $209 | 0, ($210 >>> 1 & 127) + 1 | 0) | 0;
          _free($209);
          $$ph32 = $216;
          break;
         }
         $219 = $216 + 16 & 240;
         $phitmp$i2$i$i$i$i$i$i = $219 + -1 | 0;
         if (($phitmp$i2$i$i$i$i$i$i | 0) == ($phitmp$i$i$i$i$i$i$i | 0)) break L104;
         $222 = _malloc($219) | 0;
         if ($phitmp$i2$i$i$i$i$i$i >>> 0 <= $phitmp$i$i$i$i$i$i$i >>> 0 & ($222 | 0) == 0) break L104;
         _memcpy($222 | 0, $191 | 0, ($210 >>> 1 & 127) + 1 | 0) | 0;
         HEAP32[$__v$i$i24$i >> 2] = $219 | 1;
         HEAP32[$193 >> 2] = $216;
         HEAP32[$189 >> 2] = $222;
         break L104;
        } else {
         HEAP8[$191 >> 0] = 0;
         _free($209);
         $$ph32 = 0;
        } while (0);
        HEAP8[$__v$i$i24$i >> 0] = $$ph32 << 1;
       } while (0);
       HEAP32[$__v$i$i24$i >> 2] = HEAP32[$4 >> 2];
       HEAP32[$__v$i$i24$i + 4 >> 2] = HEAP32[$4 + 4 >> 2];
       HEAP32[$__v$i$i24$i + 8 >> 2] = HEAP32[$4 + 8 >> 2];
       $__i$0$i$i$i$i$i = 0;
       while (1) {
        if (($__i$0$i$i$i$i$i | 0) == 3) break;
        HEAP32[$4 + ($__i$0$i$i$i$i$i << 2) >> 2] = 0;
        $__i$0$i$i$i$i$i = $__i$0$i$i$i$i$i + 1 | 0;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       $233 = HEAP32[$136 >> 2] | 0;
       $234 = $233 + -24 | 0;
       $235 = $233;
       while (1) {
        if (($235 | 0) == ($234 | 0)) break;
        $237 = $235 + -24 | 0;
        HEAP32[$136 >> 2] = $237;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($237);
        $235 = HEAP32[$136 >> 2] | 0;
       }
       $238 = HEAP8[$__v$i$i24$i >> 0] | 0;
       $240 = ($238 & 1) == 0;
       $244 = $240 ? ($238 & 255) >>> 1 : HEAP32[$193 >> 2] | 0;
       if (!$244) {
        $$pre$i$i$i$i = $238;
        $t01$0$i = $198;
        continue;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($233 + -48 | 0, 15295) | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$136 >> 2] | 0) + -24 | 0, $240 ? $191 : HEAP32[$189 >> 2] | 0, $244) | 0;
       $$pre$i$i$i$i = $238;
       $t01$0$i = $198;
      }
      if ((label | 0) == 91) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$136 >> 2] | 0) + -24 | 0, 14663) | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i24$i);
       $t01$2$i = $t01$0$i$lcssa55;
       break;
      } else if ((label | 0) == 129) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i24$i);
       $$7$i = $first;
       break L40;
      }
     } while (0);
     if (($t01$2$i | 0) != ($last | 0)) if ((HEAP8[$t01$2$i >> 0] | 0) == 69) {
      $261 = $t01$2$i + 1 | 0;
      if (($261 | 0) == ($last | 0)) {
       $263 = HEAP32[$136 >> 2] | 0;
       $264 = $263 + -24 | 0;
       $265 = $263;
       while (1) {
        if (($265 | 0) == ($264 | 0)) {
         $$7$i = $first;
         break L40;
        }
        $267 = $265 + -24 | 0;
        HEAP32[$136 >> 2] = $267;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($267);
        $265 = HEAP32[$136 >> 2] | 0;
       }
      }
      L139 : do if (((HEAP8[$261 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
       $t14$0$i = $t01$2$i + 2 | 0;
       while (1) {
        if (($t14$0$i | 0) == ($last | 0)) {
         $t14$0$i$lcssa = $last;
         break;
        }
        if (((HEAP8[$t14$0$i >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
         $t14$0$i$lcssa = $t14$0$i;
         break;
        }
        $t14$0$i = $t14$0$i + 1 | 0;
       }
       $275 = HEAP32[$136 >> 2] | 0;
       $276 = $275 + -24 | 0;
       $277 = HEAP8[$276 >> 0] | 0;
       $280 = $275 + -16 | 0;
       if (!($277 & 1)) {
        $$in = $280;
        $$pn$in = $276 + 1 | 0;
        $298 = ($277 & 255) >>> 1;
        $299 = 10;
        $302 = $277;
       } else {
        $284 = HEAP32[$280 >> 2] | 0;
        $288 = HEAP32[$276 >> 2] | 0;
        $$in = $284 + 7 | 0;
        $$pn$in = $284;
        $298 = HEAP32[$275 + -20 >> 2] | 0;
        $299 = ($288 & -2) + -1 | 0;
        $302 = $288 & 255;
       }
       $292 = $$in - $$pn$in | 0;
       $295 = $t14$0$i$lcssa - $261 | 0;
       if (($t14$0$i$lcssa | 0) == ($261 | 0)) $t01$3$i = $261; else {
        if (($299 - $298 | 0) >>> 0 < $295 >>> 0) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($276, $299, $298 + $295 - $299 | 0, $298, $292, $295);
         $__p$0$i$i = HEAP32[$275 + -16 >> 2] | 0;
        } else {
         if (!($302 & 1)) $309 = $276 + 1 | 0; else $309 = HEAP32[$275 + -16 >> 2] | 0;
         if (($298 | 0) == ($292 | 0)) $__p$0$i$i = $309; else {
          $308 = $309 + $292 | 0;
          _memmove($308 + $295 | 0, $308 | 0, $298 - $292 | 0) | 0;
          $__p$0$i$i = $309;
         }
        }
        $316 = $298 + $295 | 0;
        if (!(HEAP8[$276 >> 0] & 1)) HEAP8[$276 >> 0] = $316 << 1; else HEAP32[$275 + -20 >> 2] = $316;
        HEAP8[$__p$0$i$i + $316 >> 0] = 0;
        $$0$i$i = $261;
        $__p$1$i$i = $__p$0$i$i + $292 | 0;
        while (1) {
         if (($$0$i$i | 0) == ($t14$0$i$lcssa | 0)) {
          $t01$3$i = $t14$0$i$lcssa;
          break L139;
         }
         HEAP8[$__p$1$i$i >> 0] = HEAP8[$$0$i$i >> 0] | 0;
         $$0$i$i = $$0$i$i + 1 | 0;
         $__p$1$i$i = $__p$1$i$i + 1 | 0;
        }
       }
      } else $t01$3$i = $261; while (0);
      if (($t01$3$i | 0) != ($last | 0)) if ((HEAP8[$t01$3$i >> 0] | 0) == 95) {
       $$7$i = $t01$3$i + 1 | 0;
       break;
      }
      $332 = HEAP32[$136 >> 2] | 0;
      $333 = $332 + -24 | 0;
      $334 = $332;
      while (1) {
       if (($334 | 0) == ($333 | 0)) {
        $$7$i = $first;
        break L40;
       }
       $336 = $334 + -24 | 0;
       HEAP32[$136 >> 2] = $336;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($336);
       $334 = HEAP32[$136 >> 2] | 0;
      }
     }
     $256 = HEAP32[$136 >> 2] | 0;
     $257 = $256 + -24 | 0;
     $258 = $256;
     while (1) {
      if (($258 | 0) == ($257 | 0)) {
       $$7$i = $first;
       break L40;
      }
      $260 = $258 + -24 | 0;
      HEAP32[$136 >> 2] = $260;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($260);
      $258 = HEAP32[$136 >> 2] | 0;
     }
    } else $$7$i = $first; while (0);
    $$1 = $$7$i;
    break L1;
    break;
   }
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
   {
    $$1 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break L1;
    break;
   }
  default:
   {
    $339 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    STACKTOP = sp;
    return $339 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _arDetectMarker($arHandle, $dataPtr) {
 $arHandle = $arHandle | 0;
 $dataPtr = $dataPtr | 0;
 var $$ = 0, $$4 = 0, $$lcssa = 0, $$lcssa67 = 0, $$pre$phi49Z2D = 0, $$pre$phi51Z2D = 0, $$pre$phi53Z2D = 0, $$pre$phi55Z2D = 0, $$pre$phi57Z2D = 0, $$pre$phiZ2D = 0, $$pre41 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $104 = 0, $106 = 0, $108 = 0, $117 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $128 = 0, $134 = 0, $137 = 0, $14 = 0, $146 = 0, $148 = 0, $157 = 0, $159 = 0, $16 = 0, $165 = 0, $166 = 0, $189 = 0, $192 = 0, $193 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $204 = 0.0, $205 = 0.0, $21 = 0, $211 = 0.0, $216 = 0.0, $219 = 0.0, $22 = 0, $223 = 0, $224 = 0, $227 = 0.0, $23 = 0, $230 = 0, $232 = 0, $236 = 0, $239 = 0.0, $24 = 0, $245 = 0.0, $25 = 0, $26 = 0, $263 = 0, $266 = 0.0, $268 = 0, $27 = 0, $270 = 0, $28 = 0, $283 = 0, $286 = 0.0, $29 = 0, $292 = 0.0, $297 = 0, $30 = 0, $301 = 0, $31 = 0, $313 = 0, $314 = 0, $316 = 0, $32 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $33 = 0, $344 = 0, $345 = 0, $346 = 0, $348 = 0, $353 = 0.0, $354 = 0.0, $360 = 0.0, $365 = 0.0, $375 = 0, $377 = 0, $378 = 0, $4 = 0, $5 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $83 = 0, $86 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $cdir$1 = 0, $cdir$2 = 0, $cdir$2$lcssa = 0, $cid$0 = 0, $cid$0$lcssa = 0, $cid$1 = 0, $diff$0 = 0.0, $diff$0$lcssa = 0.0, $diff$1 = 0.0, $diff$1$lcssa = 0.0, $diffmin$0 = 0.0, $diffmin$1 = 0.0, $diffmin$2 = 0.0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $j$3 = 0, $j$3$lcssa = 0, $j$4 = 0, $j$5 = 0, $j$5$lcssa = 0, $j$6 = 0, $j$6$lcssa = 0, $k$0 = 0, $k$1 = 0, $marker_nums = 0, $ret2$0 = 0, $rlenmin$0 = 0.0, $rlenmin$1 = 0.0, $storemerge = 0, $storemerge9 = 0, $thresholds = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer = sp;
 $thresholds = sp + 52 | 0;
 $marker_nums = sp + 40 | 0;
 $0 = $arHandle + 44 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $arHandle + 7062388 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 L1 : do if (($2 | 0) == 4) {
  $4 = $arHandle + 7062396 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  do if (($5 | 0) > 0) HEAP32[$4 >> 2] = $5 + -1; else {
   $8 = $arHandle + 16 | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $10 = $arHandle + 7062400 | 0;
   $12 = (HEAP32[$10 >> 2] | 0) + $9 | 0;
   $$ = ($12 | 0) > 255 ? 255 : $12;
   HEAP32[$thresholds >> 2] = $$;
   $14 = $arHandle + 7062404 | 0;
   $16 = $9 - (HEAP32[$14 >> 2] | 0) | 0;
   $storemerge9 = ($16 | 0) < 0 ? 0 : $16;
   HEAP32[$thresholds + 4 >> 2] = $storemerge9;
   HEAP32[$thresholds + 8 >> 2] = $9;
   $20 = $arHandle + 36 | 0;
   $21 = $arHandle + 40 | 0;
   $22 = $arHandle + 4 | 0;
   $23 = $arHandle + 12 | 0;
   $24 = $arHandle + 20 | 0;
   $25 = $arHandle + 4834144 | 0;
   $26 = $arHandle + 15416 | 0;
   $27 = $arHandle + 15408 | 0;
   $28 = $arHandle + 7062384 | 0;
   $29 = $arHandle + 24 | 0;
   $30 = $arHandle + 32 | 0;
   $31 = $arHandle + 7062416 | 0;
   $32 = $arHandle + 48 | 0;
   $33 = $arHandle + 7062424 | 0;
   $i$0 = 0;
   while (1) {
    if (($i$0 | 0) >= 3) break;
    if ((_arLabeling($dataPtr, HEAP32[$20 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0, HEAP32[$arHandle >> 2] | 0, HEAP32[$23 >> 2] | 0, HEAP32[$thresholds + ($i$0 << 2) >> 2] | 0, HEAP32[$24 >> 2] | 0, $25, 0) | 0) < 0) {
     label = 28;
     break;
    }
    if ((_arDetectMarker2(HEAP32[$20 >> 2] | 0, HEAP32[$21 >> 2] | 0, $25, HEAP32[$24 >> 2] | 0, 1e6, 70, 1.0, $26, $27) | 0) < 0) {
     label = 28;
     break;
    }
    if ((_arGetMarkerInfo($dataPtr, HEAP32[$20 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0, $26, HEAP32[$27 >> 2] | 0, HEAP32[$28 >> 2] | 0, HEAP32[$24 >> 2] | 0, HEAP32[$29 >> 2] | 0, (HEAP32[$30 >> 2] | 0) + 184 | 0, +HEAPF64[$31 >> 3], $32, $0, HEAP32[$33 >> 2] | 0) | 0) < 0) {
     label = 28;
     break;
    }
    HEAP32[$marker_nums + ($i$0 << 2) >> 2] = HEAP32[$0 >> 2];
    $i$0 = $i$0 + 1 | 0;
   }
   if ((label | 0) == 28) {
    $$4 = -1;
    break L1;
   }
   if ((HEAP32[$arHandle >> 2] | 0) == 1) {
    $69 = HEAP32[$marker_nums + 4 >> 2] | 0;
    $71 = HEAP32[$marker_nums + 8 >> 2] | 0;
    $72 = HEAP32[$marker_nums >> 2] | 0;
    HEAP32[$vararg_buffer >> 2] = $storemerge9;
    HEAP32[$vararg_buffer + 4 >> 2] = $69;
    HEAP32[$vararg_buffer + 8 >> 2] = $9;
    HEAP32[$vararg_buffer + 12 >> 2] = $71;
    HEAP32[$vararg_buffer + 16 >> 2] = $$;
    HEAP32[$vararg_buffer + 20 >> 2] = $72;
    _arLog(3, 3194, $vararg_buffer);
    $73 = $72;
    $75 = $71;
   } else {
    $73 = HEAP32[$marker_nums >> 2] | 0;
    $75 = HEAP32[$marker_nums + 8 >> 2] | 0;
   }
   $$pre41 = HEAP32[$marker_nums + 4 >> 2] | 0;
   if (($73 | 0) > ($75 | 0) | ($$pre41 | 0) > ($75 | 0)) {
    $91 = ($73 | 0) >= ($$pre41 | 0) ? $$ : $storemerge9;
    HEAP32[$8 >> 2] = $91;
    $92 = $91 - $9 | 0;
    if (($92 | 0) > 0) {
     HEAP32[$10 >> 2] = $92;
     $storemerge = 1;
    } else {
     HEAP32[$10 >> 2] = 1;
     $storemerge = 0 - $92 | 0;
    }
    HEAP32[$14 >> 2] = $storemerge;
    if ((HEAP32[$arHandle >> 2] | 0) == 1) {
     HEAP32[$vararg_buffer6 >> 2] = $91;
     _arLog(3, 3270, $vararg_buffer6);
     HEAP32[$4 >> 2] = HEAP32[$arHandle + 7062392 >> 2];
     break;
    } else {
     HEAP32[$4 >> 2] = HEAP32[$arHandle + 7062392 >> 2];
     break;
    }
   }
   $77 = HEAP32[$10 >> 2] | 0;
   $78 = HEAP32[$14 >> 2] | 0;
   do if (($77 | 0) < ($78 | 0)) {
    $80 = $77 + 1 | 0;
    HEAP32[$10 >> 2] = $80;
    $86 = $80;
   } else if (($77 | 0) > ($78 | 0)) {
    HEAP32[$14 >> 2] = $78 + 1;
    $86 = $77;
    break;
   } else {
    $83 = $77 + 1 | 0;
    HEAP32[$10 >> 2] = $83;
    HEAP32[$14 >> 2] = $78 + 1;
    $86 = $83;
    break;
   } while (0);
   if (($86 + $9 | 0) > 254) {
    HEAP32[$10 >> 2] = 1;
    $89 = 1;
   } else $89 = $86;
   if (($9 | 0) <= ($89 | 0)) HEAP32[$14 >> 2] = 1;
   HEAP32[$4 >> 2] = HEAP32[$arHandle + 7062392 >> 2];
   label = 50;
   break L1;
  } while (0);
  $103 = HEAP32[$1 >> 2] | 0;
  label = 32;
 } else {
  $103 = $2;
  label = 32;
 } while (0);
 L43 : do if ((label | 0) == 32) {
  L45 : do switch ($103 | 0) {
  case 3:
   {
    $104 = $arHandle + 7062408 | 0;
    $106 = _arImageProcLumaHistAndBoxFilterWithBias(HEAP32[$104 >> 2] | 0, $dataPtr, 9, -7) | 0;
    if (($106 | 0) < 0) {
     $$4 = $106;
     break L43;
    }
    $108 = HEAP32[$104 >> 2] | 0;
    $117 = $arHandle + 4834144 | 0;
    $120 = _arLabeling(HEAP32[$108 >> 2] | 0, HEAP32[$108 + 8 >> 2] | 0, HEAP32[$108 + 12 >> 2] | 0, 5, HEAP32[$arHandle >> 2] | 0, HEAP32[$arHandle + 12 >> 2] | 0, 0, 0, $117, HEAP32[$108 + 4 >> 2] | 0) | 0;
    if (($120 | 0) < 0) {
     $$4 = $120;
     break L43;
    }
    $$pre$phi49Z2D = $arHandle + 36 | 0;
    $$pre$phi51Z2D = $arHandle + 40 | 0;
    $$pre$phi53Z2D = $arHandle + 20 | 0;
    $$pre$phiZ2D = $117;
    break;
   }
  case 2:
  case 1:
   {
    $122 = $arHandle + 7062396 | 0;
    $123 = HEAP32[$122 >> 2] | 0;
    if (($123 | 0) > 0) {
     HEAP32[$122 >> 2] = $123 + -1;
     label = 47;
     break L45;
    }
    $128 = HEAP32[$arHandle + 7062408 >> 2] | 0;
    if (($103 | 0) == 1) $ret2$0 = _arImageProcLumaHistAndCDFAndMedian($128, $dataPtr, $thresholds) | 0; else $ret2$0 = _arImageProcLumaHistAndOtsu($128, $dataPtr, $thresholds) | 0;
    if (($ret2$0 | 0) < 0) {
     $$4 = $ret2$0;
     break L43;
    }
    $134 = $arHandle + 16 | 0;
    if ((HEAP32[$arHandle >> 2] | 0) == 1) {
     $137 = HEAPU8[$thresholds >> 0] | 0;
     if ((HEAP32[$134 >> 2] | 0) != ($137 | 0)) {
      HEAP32[$vararg_buffer9 >> 2] = (HEAP32[$1 >> 2] | 0) == 1 ? 3322 : 3329;
      HEAP32[$vararg_buffer9 + 4 >> 2] = $137;
      _arLog(3, 3334, $vararg_buffer9);
     }
    }
    HEAP32[$134 >> 2] = HEAPU8[$thresholds >> 0];
    HEAP32[$122 >> 2] = HEAP32[$arHandle + 7062392 >> 2];
    label = 47;
    break;
   }
  default:
   label = 47;
  } while (0);
  if ((label | 0) == 47) {
   $146 = $arHandle + 36 | 0;
   $148 = $arHandle + 40 | 0;
   $157 = $arHandle + 20 | 0;
   $159 = $arHandle + 4834144 | 0;
   if ((_arLabeling($dataPtr, HEAP32[$146 >> 2] | 0, HEAP32[$148 >> 2] | 0, HEAP32[$arHandle + 4 >> 2] | 0, HEAP32[$arHandle >> 2] | 0, HEAP32[$arHandle + 12 >> 2] | 0, HEAP32[$arHandle + 16 >> 2] | 0, HEAP32[$157 >> 2] | 0, $159, 0) | 0) < 0) {
    $$4 = -1;
    break;
   } else {
    $$pre$phi49Z2D = $146;
    $$pre$phi51Z2D = $148;
    $$pre$phi53Z2D = $157;
    $$pre$phiZ2D = $159;
   }
  }
  $165 = $arHandle + 15416 | 0;
  $166 = $arHandle + 15408 | 0;
  if ((_arDetectMarker2(HEAP32[$$pre$phi49Z2D >> 2] | 0, HEAP32[$$pre$phi51Z2D >> 2] | 0, $$pre$phiZ2D, HEAP32[$$pre$phi53Z2D >> 2] | 0, 1e6, 70, 1.0, $165, $166) | 0) < 0) $$4 = -1; else if ((_arGetMarkerInfo($dataPtr, HEAP32[$$pre$phi49Z2D >> 2] | 0, HEAP32[$$pre$phi51Z2D >> 2] | 0, HEAP32[$arHandle + 4 >> 2] | 0, $165, HEAP32[$166 >> 2] | 0, HEAP32[$arHandle + 7062384 >> 2] | 0, HEAP32[$$pre$phi53Z2D >> 2] | 0, HEAP32[$arHandle + 24 >> 2] | 0, (HEAP32[$arHandle + 32 >> 2] | 0) + 184 | 0, +HEAPF64[$arHandle + 7062416 >> 3], $arHandle + 48 | 0, $0, HEAP32[$arHandle + 7062424 >> 2] | 0) | 0) < 0) $$4 = -1; else label = 50;
 } while (0);
 L68 : do if ((label | 0) == 50) {
  $189 = $arHandle + 28 | 0;
  if ((HEAP32[$189 >> 2] | 0) == 1) {
   _confidenceCutoff($arHandle);
   $$4 = 0;
   break;
  }
  $192 = $arHandle + 4818296 | 0;
  $193 = $arHandle + 24 | 0;
  $$pre42 = HEAP32[$192 >> 2] | 0;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) >= ($$pre42 | 0)) break;
   $195 = HEAP32[$0 >> 2] | 0;
   $196 = $arHandle + 4818304 + ($i$1 * 264 | 0) | 0;
   $197 = $arHandle + 4818304 + ($i$1 * 264 | 0) + 56 | 0;
   $198 = $arHandle + 4818304 + ($i$1 * 264 | 0) + 64 | 0;
   $cid$0 = -1;
   $j$0 = 0;
   $rlenmin$0 = .5;
   while (1) {
    if (($j$0 | 0) >= ($195 | 0)) {
     $cid$0$lcssa = $cid$0;
     break;
    }
    $204 = +(HEAP32[$arHandle + 48 + ($j$0 << 8) >> 2] | 0);
    $205 = +(HEAP32[$196 >> 2] | 0) / $204;
    if ($205 < .7 | $205 > 1.43) {
     $cid$1 = $cid$0;
     $rlenmin$1 = $rlenmin$0;
    } else {
     $211 = +HEAPF64[$arHandle + 48 + ($j$0 << 8) + 56 >> 3] - +HEAPF64[$197 >> 3];
     $216 = +HEAPF64[$arHandle + 48 + ($j$0 << 8) + 64 >> 3] - +HEAPF64[$198 >> 3];
     $219 = ($211 * $211 + $216 * $216) / $204;
     if ($219 < $rlenmin$0) {
      $cid$1 = $j$0;
      $rlenmin$1 = $219;
     } else {
      $cid$1 = $cid$0;
      $rlenmin$1 = $rlenmin$0;
     }
    }
    $cid$0 = $cid$1;
    $j$0 = $j$0 + 1 | 0;
    $rlenmin$0 = $rlenmin$1;
   }
   L84 : do if (($cid$0$lcssa | 0) > -1) {
    $223 = HEAP32[$193 >> 2] | 0;
    switch ($223 | 0) {
    case 2:
    case 1:
    case 0:
     break;
    case 4:
    case 3:
     {
      $263 = $arHandle + 48 + ($cid$0$lcssa << 8) + 40 | 0;
      $266 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 40 >> 3];
      if (+HEAPF64[$263 >> 3] < $266) {
       $$pre$phi55Z2D = $arHandle + 4818304 + ($i$1 * 264 | 0) + 48 | 0;
       $$pre$phi57Z2D = $arHandle + 48 + ($cid$0$lcssa << 8) + 48 | 0;
      } else {
       $268 = $arHandle + 48 + ($cid$0$lcssa << 8) + 48 | 0;
       $270 = $arHandle + 4818304 + ($i$1 * 264 | 0) + 48 | 0;
       if (+HEAPF64[$268 >> 3] < +HEAPF64[$270 >> 3]) {
        $$pre$phi55Z2D = $270;
        $$pre$phi57Z2D = $268;
       } else break L84;
      }
      HEAPF64[$263 >> 3] = $266;
      HEAP32[$arHandle + 48 + ($cid$0$lcssa << 8) + 8 >> 2] = HEAP32[$arHandle + 4818304 + ($i$1 * 264 | 0) + 8 >> 2];
      HEAPF64[$$pre$phi57Z2D >> 3] = +HEAPF64[$$pre$phi55Z2D >> 3];
      HEAP32[$arHandle + 48 + ($cid$0$lcssa << 8) + 12 >> 2] = HEAP32[$arHandle + 4818304 + ($i$1 * 264 | 0) + 12 >> 2];
      $cdir$2 = -1;
      $diffmin$2 = 1.0e8;
      $j$2 = 0;
      while (1) {
       if (($j$2 | 0) == 4) {
        $cdir$2$lcssa = $cdir$2;
        break;
       } else {
        $diff$1 = 0.0;
        $k$1 = 0;
       }
       while (1) {
        if (($k$1 | 0) == 4) {
         $diff$1$lcssa = $diff$1;
         break;
        }
        $283 = ($k$1 + $j$2 | 0) % 4 | 0;
        $286 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 168 + ($k$1 << 4) >> 3] - +HEAPF64[$arHandle + 48 + ($cid$0$lcssa << 8) + 168 + ($283 << 4) >> 3];
        $292 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 168 + ($k$1 << 4) + 8 >> 3] - +HEAPF64[$arHandle + 48 + ($cid$0$lcssa << 8) + 168 + ($283 << 4) + 8 >> 3];
        $diff$1 = $diff$1 + ($286 * $286 + $292 * $292);
        $k$1 = $k$1 + 1 | 0;
       }
       $297 = $diff$1$lcssa < $diffmin$2;
       $cdir$2 = $297 ? $j$2 : $cdir$2;
       $diffmin$2 = $297 ? $diff$1$lcssa : $diffmin$2;
       $j$2 = $j$2 + 1 | 0;
      }
      $301 = 4 - $cdir$2$lcssa | 0;
      HEAP32[$arHandle + 48 + ($cid$0$lcssa << 8) + 20 >> 2] = ($301 + (HEAP32[$arHandle + 4818304 + ($i$1 * 264 | 0) + 20 >> 2] | 0) | 0) % 4 | 0;
      HEAP32[$arHandle + 48 + ($cid$0$lcssa << 8) + 24 >> 2] = ($301 + (HEAP32[$arHandle + 4818304 + ($i$1 * 264 | 0) + 24 >> 2] | 0) | 0) % 4 | 0;
      break L84;
      break;
     }
    default:
     {
      $$4 = -1;
      break L68;
     }
    }
    $224 = $arHandle + 48 + ($cid$0$lcssa << 8) + 32 | 0;
    $227 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 32 >> 3];
    if (+HEAPF64[$224 >> 3] < $227) {
     HEAPF64[$224 >> 3] = $227;
     $230 = HEAP32[$arHandle + 4818304 + ($i$1 * 264 | 0) + 4 >> 2] | 0;
     HEAP32[$arHandle + 48 + ($cid$0$lcssa << 8) + 4 >> 2] = $230;
     $232 = $arHandle + 4818304 + ($i$1 * 264 | 0) + 16 | 0;
     $377 = -1;
     $diffmin$0 = 1.0e8;
     $j$1 = 0;
     while (1) {
      if (($j$1 | 0) == 4) {
       $$lcssa67 = $377;
       break;
      } else {
       $diff$0 = 0.0;
       $k$0 = 0;
      }
      while (1) {
       if (($k$0 | 0) == 4) {
        $diff$0$lcssa = $diff$0;
        break;
       }
       $236 = ($k$0 + $j$1 | 0) % 4 | 0;
       $239 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 168 + ($k$0 << 4) >> 3] - +HEAPF64[$arHandle + 48 + ($cid$0$lcssa << 8) + 168 + ($236 << 4) >> 3];
       $245 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 168 + ($k$0 << 4) + 8 >> 3] - +HEAPF64[$arHandle + 48 + ($cid$0$lcssa << 8) + 168 + ($236 << 4) + 8 >> 3];
       $diff$0 = $diff$0 + ($239 * $239 + $245 * $245);
       $k$0 = $k$0 + 1 | 0;
      }
      if ($diff$0$lcssa < $diffmin$0) {
       $cdir$1 = (4 - $j$1 + (HEAP32[$232 >> 2] | 0) | 0) % 4 | 0;
       $diffmin$1 = $diff$0$lcssa;
      } else {
       $cdir$1 = $377;
       $diffmin$1 = $diffmin$0;
      }
      $377 = $cdir$1;
      $diffmin$0 = $diffmin$1;
      $j$1 = $j$1 + 1 | 0;
     }
     HEAP32[$arHandle + 48 + ($cid$0$lcssa << 8) + 16 >> 2] = $$lcssa67;
     if ($223 >>> 0 < 2) {
      HEAP32[$arHandle + 48 + ($cid$0$lcssa << 8) + 8 >> 2] = $230;
      HEAPF64[$arHandle + 48 + ($cid$0$lcssa << 8) + 40 >> 3] = $227;
      HEAP32[$arHandle + 48 + ($cid$0$lcssa << 8) + 20 >> 2] = $$lcssa67;
      break;
     } else {
      HEAP32[$arHandle + 48 + ($cid$0$lcssa << 8) + 12 >> 2] = $230;
      HEAPF64[$arHandle + 48 + ($cid$0$lcssa << 8) + 48 >> 3] = $227;
      HEAP32[$arHandle + 48 + ($cid$0$lcssa << 8) + 24 >> 2] = $$lcssa67;
      break;
     }
    }
   } while (0);
   $i$1 = $i$1 + 1 | 0;
  }
  _confidenceCutoff($arHandle);
  $i$2 = 0;
  $j$3 = 0;
  while (1) {
   if (($i$2 | 0) >= (HEAP32[$192 >> 2] | 0)) {
    $j$3$lcssa = $j$3;
    break;
   }
   $313 = $arHandle + 4818304 + ($i$2 * 264 | 0) | 0;
   $314 = $arHandle + 4818304 + ($i$2 * 264 | 0) + 256 | 0;
   $316 = (HEAP32[$314 >> 2] | 0) + 1 | 0;
   HEAP32[$314 >> 2] = $316;
   if (($316 | 0) < 4) {
    if (($i$2 | 0) != ($j$3 | 0)) _memcpy($arHandle + 4818304 + ($j$3 * 264 | 0) | 0, $313 | 0, 264) | 0;
    $j$4 = $j$3 + 1 | 0;
   } else $j$4 = $j$3;
   $i$2 = $i$2 + 1 | 0;
   $j$3 = $j$4;
  }
  HEAP32[$192 >> 2] = $j$3$lcssa;
  $i$3 = 0;
  while (1) {
   $322 = HEAP32[$0 >> 2] | 0;
   if (($i$3 | 0) >= ($322 | 0)) {
    $$lcssa = $322;
    break;
   }
   $324 = $arHandle + 48 + ($i$3 << 8) | 0;
   $326 = HEAP32[$arHandle + 48 + ($i$3 << 8) + 4 >> 2] | 0;
   if (($326 | 0) >= 0) {
    $328 = HEAP32[$192 >> 2] | 0;
    $j$5 = 0;
    while (1) {
     if (($j$5 | 0) >= ($328 | 0)) {
      $j$5$lcssa = $j$5;
      break;
     }
     if ((HEAP32[$arHandle + 4818304 + ($j$5 * 264 | 0) + 4 >> 2] | 0) == ($326 | 0)) {
      $j$5$lcssa = $j$5;
      break;
     }
     $j$5 = $j$5 + 1 | 0;
    }
    if (($j$5$lcssa | 0) == ($328 | 0)) {
     if (($328 | 0) == 60) {
      $$lcssa = $322;
      break;
     }
     HEAP32[$192 >> 2] = $328 + 1;
    }
    _memcpy($arHandle + 4818304 + ($j$5$lcssa * 264 | 0) | 0, $324 | 0, 256) | 0;
    HEAP32[$arHandle + 4818304 + ($j$5$lcssa * 264 | 0) + 256 >> 2] = 1;
   }
   $i$3 = $i$3 + 1 | 0;
  }
  if ((HEAP32[$189 >> 2] | 0) == 2) $$4 = 0; else {
   $348 = $$lcssa;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= (HEAP32[$192 >> 2] | 0)) {
     $$4 = 0;
     break L68;
    }
    $344 = $arHandle + 4818304 + ($i$4 * 264 | 0) | 0;
    $345 = $arHandle + 4818304 + ($i$4 * 264 | 0) + 56 | 0;
    $346 = $arHandle + 4818304 + ($i$4 * 264 | 0) + 64 | 0;
    $j$6 = 0;
    while (1) {
     if (($j$6 | 0) >= ($348 | 0)) {
      $j$6$lcssa = $j$6;
      break;
     }
     $353 = +(HEAP32[$arHandle + 48 + ($j$6 << 8) >> 2] | 0);
     $354 = +(HEAP32[$344 >> 2] | 0) / $353;
     if (!($354 < .7 | $354 > 1.43)) {
      $360 = +HEAPF64[$arHandle + 48 + ($j$6 << 8) + 56 >> 3] - +HEAPF64[$345 >> 3];
      $365 = +HEAPF64[$arHandle + 48 + ($j$6 << 8) + 64 >> 3] - +HEAPF64[$346 >> 3];
      if (($360 * $360 + $365 * $365) / $353 < .5) {
       $j$6$lcssa = $j$6;
       break;
      }
     }
     $j$6 = $j$6 + 1 | 0;
    }
    if (($j$6$lcssa | 0) == ($348 | 0)) {
     _memcpy($arHandle + 48 + ($348 << 8) | 0, $arHandle + 4818304 + ($i$4 * 264 | 0) | 0, 256) | 0;
     $375 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
     HEAP32[$0 >> 2] = $375;
     $378 = $375;
    } else $378 = $348;
    $348 = $378;
    $i$4 = $i$4 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$4 | 0;
}

function _icpGetInitXw2Xc_from_PlanarData($matXc2U, $screenCoord, $worldCoord, $num, $initMatXw2Xc) {
 $matXc2U = $matXc2U | 0;
 $screenCoord = $screenCoord | 0;
 $worldCoord = $worldCoord | 0;
 $num = $num | 0;
 $initMatXw2Xc = $initMatXw2Xc | 0;
 var $$$10$i = 0.0, $$$16$i = 0.0, $$$18$i = 0.0, $$$8$i = 0.0, $$0 = 0, $$10$$i = 0.0, $$10$i = 0.0, $$15$i = 0.0, $$16$$i = 0.0, $$16$i = 0.0, $$17$i = 0.0, $$18$$i = 0.0, $$18$i = 0.0, $$7$i = 0.0, $$8$$i = 0.0, $$8$i = 0.0, $$9$i = 0.0, $102 = 0, $104 = 0, $106 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0.0, $118 = 0.0, $121 = 0.0, $122 = 0.0, $125 = 0.0, $129 = 0.0, $132 = 0.0, $133 = 0.0, $135 = 0.0, $140 = 0.0, $147 = 0.0, $151 = 0.0, $157 = 0.0, $163 = 0.0, $169 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $177 = 0.0, $178 = 0.0, $180 = 0.0, $192 = 0.0, $195 = 0.0, $198 = 0.0, $204 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $213 = 0.0, $221 = 0.0, $229 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $237 = 0.0, $239 = 0.0, $243 = 0.0, $244 = 0.0, $246 = 0.0, $250 = 0.0, $253 = 0.0, $260 = 0.0, $263 = 0.0, $265 = 0.0, $267 = 0.0, $269 = 0.0, $271 = 0.0, $273 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $293 = 0.0, $295 = 0.0, $299 = 0.0, $300 = 0.0, $302 = 0.0, $306 = 0.0, $309 = 0.0, $316 = 0.0, $319 = 0.0, $32 = 0, $321 = 0.0, $323 = 0.0, $325 = 0.0, $327 = 0.0, $329 = 0.0, $33 = 0, $331 = 0.0, $332 = 0, $333 = 0, $338 = 0.0, $345 = 0.0, $35 = 0, $352 = 0.0, $359 = 0.0, $37 = 0, $371 = 0.0, $374 = 0.0, $377 = 0.0, $383 = 0.0, $39 = 0, $40 = 0, $42 = 0, $55 = 0, $82 = 0, $95 = 0, $96 = 0, $cb$0$i = 0.0, $e1$0$i = 0.0, $e2$0$i = 0.0, $e3$0$i = 0.0, $e4$0$i = 0.0, $f$0$i = 0, $f$2$i = 0, $i$0 = 0, $i$1 = 0, $t$sroa$0$0 = 0.0, $t$sroa$8$0 = 0.0, $v$sroa$0$0 = 0.0, $v$sroa$0$1 = 0.0, $v$sroa$16$0 = 0.0, $v$sroa$16$1 = 0.0, $v$sroa$32$0 = 0.0, $v$sroa$32$1 = 0.0, $v$sroa$48$0 = 0.0, $v$sroa$48$1 = 0.0, $v$sroa$66$0 = 0.0, $v$sroa$66$1 = 0.0, $v$sroa$84$0 = 0.0, $v$sroa$84$1 = 0.0, $v1$sroa$0$0$i = 0.0, $v1$sroa$18$0$i = 0.0, $v1$sroa$33$0$i = 0.0, $v2$sroa$0$0$i = 0.0, $v2$sroa$18$0$i = 0.0, $v2$sroa$33$0$i = 0.0, $v3$sroa$0$0$i = 0.0, $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0$i = 0.0, $v3$sroa$0$2$i = 0.0, $v3$sroa$33$0$i = 0.0, $v3$sroa$33$0$v3$sroa$62$0$i = 0.0, $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0$i = 0.0, $v3$sroa$33$2$i = 0.0, $v3$sroa$62$0$i = 0.0, $v3$sroa$62$0$v3$sroa$33$0$i = 0.0, $v3$sroa$62$3$i = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer11 = sp + 48 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (($num | 0) < 4) $$0 = -1; else {
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) >= ($num | 0)) break;
   if (+HEAPF64[$worldCoord + ($i$0 * 24 | 0) + 16 >> 3] != 0.0) {
    $$0 = -1;
    break L1;
   } else $i$0 = $i$0 + 1 | 0;
  }
  if (+HEAPF64[$matXc2U >> 3] == 0.0) $$0 = -1; else if (+HEAPF64[$matXc2U + 32 >> 3] != 0.0) $$0 = -1; else {
   $11 = $matXc2U + 40 | 0;
   if (+HEAPF64[$11 >> 3] == 0.0) $$0 = -1; else if (+HEAPF64[$matXc2U + 64 >> 3] != 0.0) $$0 = -1; else if (+HEAPF64[$matXc2U + 72 >> 3] != 0.0) $$0 = -1; else if (+HEAPF64[$matXc2U + 80 >> 3] != 1.0) $$0 = -1; else if (+HEAPF64[$matXc2U + 24 >> 3] != 0.0) $$0 = -1; else if (+HEAPF64[$matXc2U + 56 >> 3] != 0.0) $$0 = -1; else if (+HEAPF64[$matXc2U + 88 >> 3] != 0.0) $$0 = -1; else {
    $32 = $num << 1;
    $33 = _arMatrixAlloc($32, 8) | 0;
    if (!$33) {
     _arLog(3, 4144, $vararg_buffer);
     $$0 = -1;
     break;
    }
    $35 = _arMatrixAlloc($32, 1) | 0;
    if (!$35) {
     _arMatrixFree($33) | 0;
     _arLog(3, 4170, $vararg_buffer1);
     $$0 = -1;
     break;
    }
    $i$1 = 0;
    while (1) {
     if (($i$1 | 0) == ($num | 0)) break;
     $37 = $worldCoord + ($i$1 * 24 | 0) | 0;
     $39 = $i$1 << 4;
     $40 = HEAP32[$33 >> 2] | 0;
     HEAPF64[$40 + ($39 << 3) >> 3] = +HEAPF64[$37 >> 3];
     $42 = $worldCoord + ($i$1 * 24 | 0) + 8 | 0;
     HEAPF64[$40 + (($39 | 1) << 3) >> 3] = +HEAPF64[$42 >> 3];
     HEAPF64[$40 + (($39 | 2) << 3) >> 3] = 1.0;
     HEAPF64[$40 + (($39 | 3) << 3) >> 3] = 0.0;
     HEAPF64[$40 + (($39 | 4) << 3) >> 3] = 0.0;
     HEAPF64[$40 + (($39 | 5) << 3) >> 3] = 0.0;
     $55 = $screenCoord + ($i$1 << 4) | 0;
     HEAPF64[$40 + (($39 | 6) << 3) >> 3] = -(+HEAPF64[$37 >> 3] * +HEAPF64[$55 >> 3]);
     HEAPF64[$40 + (($39 | 7) << 3) >> 3] = -(+HEAPF64[$42 >> 3] * +HEAPF64[$55 >> 3]);
     HEAPF64[$40 + (($39 | 8) << 3) >> 3] = 0.0;
     HEAPF64[$40 + (($39 | 9) << 3) >> 3] = 0.0;
     HEAPF64[$40 + (($39 | 10) << 3) >> 3] = 0.0;
     HEAPF64[$40 + (($39 | 11) << 3) >> 3] = +HEAPF64[$37 >> 3];
     HEAPF64[$40 + (($39 | 12) << 3) >> 3] = +HEAPF64[$42 >> 3];
     HEAPF64[$40 + (($39 | 13) << 3) >> 3] = 1.0;
     $82 = $screenCoord + ($i$1 << 4) + 8 | 0;
     HEAPF64[$40 + (($39 | 14) << 3) >> 3] = -(+HEAPF64[$37 >> 3] * +HEAPF64[$82 >> 3]);
     HEAPF64[$40 + (($39 | 15) << 3) >> 3] = -(+HEAPF64[$42 >> 3] * +HEAPF64[$82 >> 3]);
     $95 = $i$1 << 1;
     $96 = HEAP32[$35 >> 2] | 0;
     HEAPF64[$96 + ($95 << 3) >> 3] = +HEAPF64[$55 >> 3];
     HEAPF64[$96 + (($95 | 1) << 3) >> 3] = +HEAPF64[$82 >> 3];
     $i$1 = $i$1 + 1 | 0;
    }
    $102 = _arMatrixAllocTrans($33) | 0;
    if (!$102) {
     _arMatrixFree($33) | 0;
     _arMatrixFree($35) | 0;
     _arLog(3, 4196, $vararg_buffer3);
     $$0 = -1;
     break;
    }
    $104 = _arMatrixAllocMul($102, $33) | 0;
    if (!$104) {
     _arMatrixFree($33) | 0;
     _arMatrixFree($35) | 0;
     _arMatrixFree($102) | 0;
     _arLog(3, 4222, $vararg_buffer5);
     $$0 = -1;
     break;
    }
    $106 = _arMatrixAllocMul($102, $35) | 0;
    if (!$106) {
     _arMatrixFree($33) | 0;
     _arMatrixFree($35) | 0;
     _arMatrixFree($102) | 0;
     _arMatrixFree($104) | 0;
     _arLog(3, 4248, $vararg_buffer7);
     $$0 = -1;
     break;
    }
    if ((_arMatrixSelfInv($104) | 0) < 0) {
     _arMatrixFree($33) | 0;
     _arMatrixFree($35) | 0;
     _arMatrixFree($102) | 0;
     _arMatrixFree($104) | 0;
     _arMatrixFree($106) | 0;
     _arLog(3, 4274, $vararg_buffer9);
     $$0 = -1;
     break;
    }
    $110 = _arMatrixAllocMul($104, $106) | 0;
    if (!$110) {
     _arMatrixFree($33) | 0;
     _arMatrixFree($35) | 0;
     _arMatrixFree($102) | 0;
     _arMatrixFree($104) | 0;
     _arMatrixFree($106) | 0;
     _arLog(3, 4300, $vararg_buffer11);
     $$0 = -1;
     break;
    }
    $112 = HEAP32[$110 >> 2] | 0;
    $114 = +HEAPF64[$112 + 48 >> 3];
    $118 = +HEAPF64[$matXc2U + 48 >> 3];
    $121 = +HEAPF64[$11 >> 3];
    $122 = (+HEAPF64[$112 + 24 >> 3] - $114 * $118) / $121;
    $125 = +HEAPF64[$matXc2U + 16 >> 3];
    $129 = +HEAPF64[$matXc2U + 8 >> 3];
    $132 = +HEAPF64[$matXc2U >> 3];
    $133 = (+HEAPF64[$112 >> 3] - $114 * $125 - $122 * $129) / $132;
    $135 = +HEAPF64[$112 + 56 >> 3];
    $140 = (+HEAPF64[$112 + 32 >> 3] - $118 * $135) / $121;
    $147 = (+HEAPF64[$112 + 8 >> 3] - $125 * $135 - $129 * $140) / $132;
    $151 = (+HEAPF64[$112 + 40 >> 3] - $118) / $121;
    $157 = (+HEAPF64[$112 + 16 >> 3] - $125 - $129 * $151) / $132;
    _arMatrixFree($33) | 0;
    _arMatrixFree($35) | 0;
    _arMatrixFree($102) | 0;
    _arMatrixFree($104) | 0;
    _arMatrixFree($106) | 0;
    _arMatrixFree($110) | 0;
    $163 = +Math_sqrt(+($114 * $114 + ($122 * $122 + $133 * $133)));
    $169 = +Math_sqrt(+($135 * $135 + ($140 * $140 + $147 * $147)));
    $170 = $133 / $163;
    $171 = $122 / $163;
    $172 = $114 / $163;
    $173 = $147 / $169;
    $174 = $140 / $169;
    $175 = $135 / $169;
    $177 = ($163 + $169) * .5;
    $178 = $157 / $177;
    $180 = 1.0 / $177;
    if ($180 < 0.0) {
     $t$sroa$0$0 = -$178;
     $t$sroa$8$0 = -$180;
     $v$sroa$0$0 = -$170;
     $v$sroa$16$0 = -$171;
     $v$sroa$32$0 = -$172;
     $v$sroa$48$0 = -$173;
     $v$sroa$66$0 = -$174;
     $v$sroa$84$0 = -$175;
    } else {
     $t$sroa$0$0 = $178;
     $t$sroa$8$0 = $151 / $177;
     $v$sroa$0$0 = $170;
     $v$sroa$16$0 = $171;
     $v$sroa$32$0 = $172;
     $v$sroa$48$0 = $173;
     $v$sroa$66$0 = $174;
     $v$sroa$84$0 = $175;
    }
    $192 = $v$sroa$84$0 * $v$sroa$16$0 - $v$sroa$66$0 * $v$sroa$32$0;
    $195 = $v$sroa$48$0 * $v$sroa$32$0 - $v$sroa$84$0 * $v$sroa$0$0;
    $198 = $v$sroa$66$0 * $v$sroa$0$0 - $v$sroa$48$0 * $v$sroa$16$0;
    $204 = +Math_sqrt(+($198 * $198 + ($192 * $192 + $195 * $195)));
    do if ($204 == 0.0) {
     $v$sroa$0$1 = $v$sroa$0$0;
     $v$sroa$16$1 = $v$sroa$16$0;
     $v$sroa$32$1 = $v$sroa$32$0;
     $v$sroa$48$1 = $v$sroa$48$0;
     $v$sroa$66$1 = $v$sroa$66$0;
     $v$sroa$84$1 = $v$sroa$84$0;
    } else {
     $206 = $192 / $204;
     $207 = $195 / $204;
     $208 = $198 / $204;
     $213 = $v$sroa$84$0 * $v$sroa$32$0 + ($v$sroa$66$0 * $v$sroa$16$0 + $v$sroa$48$0 * $v$sroa$0$0);
     $cb$0$i = $213 < 0.0 ? -$213 : $213;
     $221 = (+Math_sqrt(+($cb$0$i + 1.0)) + +Math_sqrt(+(1.0 - $cb$0$i))) * .5;
     if ($v$sroa$0$0 * $207 - $v$sroa$16$0 * $206 != 0.0) {
      $f$0$i = 0;
      $v1$sroa$0$0$i = $v$sroa$0$0;
      $v1$sroa$18$0$i = $v$sroa$16$0;
      $v1$sroa$33$0$i = $v$sroa$32$0;
      $v3$sroa$0$0$i = $206;
      $v3$sroa$33$0$i = $207;
      $v3$sroa$62$0$i = $208;
     } else {
      $229 = $v$sroa$0$0 * $208 - $v$sroa$32$0 * $206 != 0.0;
      $f$0$i = $229 ? 1 : 2;
      $v1$sroa$0$0$i = $229 ? $v$sroa$0$0 : $v$sroa$32$0;
      $v1$sroa$18$0$i = $229 ? $v$sroa$32$0 : $v$sroa$16$0;
      $v1$sroa$33$0$i = $229 ? $v$sroa$16$0 : $v$sroa$0$0;
      $v3$sroa$0$0$i = $229 ? $206 : $208;
      $v3$sroa$33$0$i = $229 ? $208 : $207;
      $v3$sroa$62$0$i = $229 ? $207 : $206;
     }
     $230 = $v1$sroa$0$0$i * $v3$sroa$33$0$i;
     $231 = $v1$sroa$18$0$i * $v3$sroa$0$0$i;
     $232 = $230 - $231;
     if ($232 == 0.0) {
      $v$sroa$0$1 = $v$sroa$0$0;
      $v$sroa$16$1 = $v$sroa$16$0;
      $v$sroa$32$1 = $v$sroa$32$0;
      $v$sroa$48$1 = $v$sroa$48$0;
      $v$sroa$66$1 = $v$sroa$66$0;
      $v$sroa$84$1 = $v$sroa$84$0;
      break;
     }
     $237 = ($v1$sroa$18$0$i * $v3$sroa$62$0$i - $v1$sroa$33$0$i * $v3$sroa$33$0$i) / $232;
     $239 = $221 * $v3$sroa$33$0$i / $232;
     $243 = $231 - $230;
     $244 = ($v1$sroa$0$0$i * $v3$sroa$62$0$i - $v1$sroa$33$0$i * $v3$sroa$0$0$i) / $243;
     $246 = $221 * $v3$sroa$0$0$i / $243;
     $250 = $237 * $237 + $244 * $244 + 1.0;
     $253 = $237 * $239 + $244 * $246;
     $260 = $253 * $253 - $250 * ($239 * $239 + $246 * $246 + -1.0);
     if ($260 < 0.0) {
      $v$sroa$0$1 = $v$sroa$0$0;
      $v$sroa$16$1 = $v$sroa$16$0;
      $v$sroa$32$1 = $v$sroa$32$0;
      $v$sroa$48$1 = $v$sroa$48$0;
      $v$sroa$66$1 = $v$sroa$66$0;
      $v$sroa$84$1 = $v$sroa$84$0;
      break;
     }
     $263 = +Math_sqrt(+$260);
     $265 = ($263 - $253) / $250;
     $267 = $239 + $237 * $265;
     $269 = $246 + $244 * $265;
     $271 = (-$253 - $263) / $250;
     $273 = $239 + $237 * $271;
     $275 = $246 + $244 * $271;
     $276 = ($f$0$i | 0) == 1;
     $v3$sroa$33$0$v3$sroa$62$0$i = $276 ? $v3$sroa$33$0$i : $v3$sroa$62$0$i;
     $v3$sroa$62$0$v3$sroa$33$0$i = $276 ? $v3$sroa$62$0$i : $v3$sroa$33$0$i;
     $$7$i = $276 ? $265 : $269;
     $$8$i = $276 ? $269 : $265;
     $$9$i = $276 ? $271 : $275;
     $$10$i = $276 ? $275 : $271;
     $277 = ($f$0$i | 0) == 2;
     $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0$i = $277 ? $v3$sroa$0$0$i : $v3$sroa$33$0$v3$sroa$62$0$i;
     $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0$i = $277 ? $v3$sroa$33$0$v3$sroa$62$0$i : $v3$sroa$0$0$i;
     $$8$$i = $277 ? $$8$i : $267;
     $$$8$i = $277 ? $267 : $$8$i;
     $$10$$i = $277 ? $$10$i : $273;
     $$$10$i = $277 ? $273 : $$10$i;
     if ($v$sroa$48$0 * $v3$sroa$62$0$v3$sroa$33$0$i - $v$sroa$66$0 * $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0$i != 0.0) {
      $f$2$i = 0;
      $v2$sroa$0$0$i = $v$sroa$48$0;
      $v2$sroa$18$0$i = $v$sroa$66$0;
      $v2$sroa$33$0$i = $v$sroa$84$0;
      $v3$sroa$0$2$i = $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0$i;
      $v3$sroa$33$2$i = $v3$sroa$62$0$v3$sroa$33$0$i;
      $v3$sroa$62$3$i = $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0$i;
     } else {
      $285 = $v$sroa$48$0 * $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0$i - $v$sroa$84$0 * $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0$i != 0.0;
      $f$2$i = $285 ? 1 : 2;
      $v2$sroa$0$0$i = $285 ? $v$sroa$48$0 : $v$sroa$84$0;
      $v2$sroa$18$0$i = $285 ? $v$sroa$84$0 : $v$sroa$66$0;
      $v2$sroa$33$0$i = $285 ? $v$sroa$66$0 : $v$sroa$48$0;
      $v3$sroa$0$2$i = $285 ? $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0$i : $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0$i;
      $v3$sroa$33$2$i = $285 ? $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0$i : $v3$sroa$62$0$v3$sroa$33$0$i;
      $v3$sroa$62$3$i = $285 ? $v3$sroa$62$0$v3$sroa$33$0$i : $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0$i;
     }
     $286 = $v2$sroa$0$0$i * $v3$sroa$33$2$i;
     $287 = $v2$sroa$18$0$i * $v3$sroa$0$2$i;
     $288 = $286 - $287;
     if ($288 == 0.0) {
      $v$sroa$0$1 = $v$sroa$0$0;
      $v$sroa$16$1 = $v$sroa$16$0;
      $v$sroa$32$1 = $v$sroa$32$0;
      $v$sroa$48$1 = $v$sroa$48$0;
      $v$sroa$66$1 = $v$sroa$66$0;
      $v$sroa$84$1 = $v$sroa$84$0;
      break;
     }
     $293 = ($v2$sroa$18$0$i * $v3$sroa$62$3$i - $v2$sroa$33$0$i * $v3$sroa$33$2$i) / $288;
     $295 = $221 * $v3$sroa$33$2$i / $288;
     $299 = $287 - $286;
     $300 = ($v2$sroa$0$0$i * $v3$sroa$62$3$i - $v2$sroa$33$0$i * $v3$sroa$0$2$i) / $299;
     $302 = $221 * $v3$sroa$0$2$i / $299;
     $306 = $293 * $293 + $300 * $300 + 1.0;
     $309 = $293 * $295 + $300 * $302;
     $316 = $309 * $309 - $306 * ($295 * $295 + $302 * $302 + -1.0);
     if ($316 < 0.0) {
      $v$sroa$0$1 = $v$sroa$0$0;
      $v$sroa$16$1 = $v$sroa$16$0;
      $v$sroa$32$1 = $v$sroa$32$0;
      $v$sroa$48$1 = $v$sroa$48$0;
      $v$sroa$66$1 = $v$sroa$66$0;
      $v$sroa$84$1 = $v$sroa$84$0;
      break;
     }
     $319 = +Math_sqrt(+$316);
     $321 = ($319 - $309) / $306;
     $323 = $295 + $293 * $321;
     $325 = $302 + $300 * $321;
     $327 = (-$309 - $319) / $306;
     $329 = $295 + $293 * $327;
     $331 = $302 + $300 * $327;
     $332 = ($f$2$i | 0) == 1;
     $$15$i = $332 ? $321 : $325;
     $$16$i = $332 ? $325 : $321;
     $$17$i = $332 ? $327 : $331;
     $$18$i = $332 ? $331 : $327;
     $333 = ($f$2$i | 0) == 2;
     $$16$$i = $333 ? $$16$i : $323;
     $$$16$i = $333 ? $323 : $$16$i;
     $$18$$i = $333 ? $$18$i : $329;
     $$$18$i = $333 ? $329 : $$18$i;
     $338 = $$$8$i * $$$16$i + ($$7$i * $$15$i + $$8$$i * $$16$$i);
     $e1$0$i = $338 < 0.0 ? -$338 : $338;
     $345 = $$$8$i * $$$18$i + ($$7$i * $$17$i + $$8$$i * $$18$$i);
     $e2$0$i = $345 < 0.0 ? -$345 : $345;
     $352 = $$$10$i * $$$16$i + ($$9$i * $$15$i + $$10$$i * $$16$$i);
     $e3$0$i = $352 < 0.0 ? -$352 : $352;
     $359 = $$$10$i * $$$18$i + ($$9$i * $$17$i + $$10$$i * $$18$$i);
     $e4$0$i = $359 < 0.0 ? -$359 : $359;
     if ($e1$0$i < $e2$0$i) if ($e1$0$i < $e3$0$i) {
      if ($e1$0$i < $e4$0$i) {
       $v$sroa$0$1 = $$8$$i;
       $v$sroa$16$1 = $$7$i;
       $v$sroa$32$1 = $$$8$i;
       $v$sroa$48$1 = $$16$$i;
       $v$sroa$66$1 = $$15$i;
       $v$sroa$84$1 = $$$16$i;
       break;
      }
      $v$sroa$0$1 = $$10$$i;
      $v$sroa$16$1 = $$9$i;
      $v$sroa$32$1 = $$$10$i;
      $v$sroa$48$1 = $$18$$i;
      $v$sroa$66$1 = $$17$i;
      $v$sroa$84$1 = $$$18$i;
      break;
     } else {
      if ($e3$0$i < $e4$0$i) {
       $v$sroa$0$1 = $$10$$i;
       $v$sroa$16$1 = $$9$i;
       $v$sroa$32$1 = $$$10$i;
       $v$sroa$48$1 = $$16$$i;
       $v$sroa$66$1 = $$15$i;
       $v$sroa$84$1 = $$$16$i;
       break;
      }
      $v$sroa$0$1 = $$10$$i;
      $v$sroa$16$1 = $$9$i;
      $v$sroa$32$1 = $$$10$i;
      $v$sroa$48$1 = $$18$$i;
      $v$sroa$66$1 = $$17$i;
      $v$sroa$84$1 = $$$18$i;
      break;
     } else if ($e2$0$i < $e3$0$i) {
      if ($e2$0$i < $e4$0$i) {
       $v$sroa$0$1 = $$8$$i;
       $v$sroa$16$1 = $$7$i;
       $v$sroa$32$1 = $$$8$i;
       $v$sroa$48$1 = $$18$$i;
       $v$sroa$66$1 = $$17$i;
       $v$sroa$84$1 = $$$18$i;
       break;
      }
      $v$sroa$0$1 = $$10$$i;
      $v$sroa$16$1 = $$9$i;
      $v$sroa$32$1 = $$$10$i;
      $v$sroa$48$1 = $$18$$i;
      $v$sroa$66$1 = $$17$i;
      $v$sroa$84$1 = $$$18$i;
      break;
     } else {
      if ($e3$0$i < $e4$0$i) {
       $v$sroa$0$1 = $$10$$i;
       $v$sroa$16$1 = $$9$i;
       $v$sroa$32$1 = $$$10$i;
       $v$sroa$48$1 = $$16$$i;
       $v$sroa$66$1 = $$15$i;
       $v$sroa$84$1 = $$$16$i;
       break;
      }
      $v$sroa$0$1 = $$10$$i;
      $v$sroa$16$1 = $$9$i;
      $v$sroa$32$1 = $$$10$i;
      $v$sroa$48$1 = $$18$$i;
      $v$sroa$66$1 = $$17$i;
      $v$sroa$84$1 = $$$18$i;
      break;
     }
    } while (0);
    $371 = $v$sroa$84$1 * $v$sroa$16$1 - $v$sroa$66$1 * $v$sroa$32$1;
    $374 = $v$sroa$48$1 * $v$sroa$32$1 - $v$sroa$84$1 * $v$sroa$0$1;
    $377 = $v$sroa$66$1 * $v$sroa$0$1 - $v$sroa$48$1 * $v$sroa$16$1;
    $383 = +Math_sqrt(+($377 * $377 + ($371 * $371 + $374 * $374)));
    HEAPF64[$initMatXw2Xc >> 3] = $v$sroa$0$1;
    HEAPF64[$initMatXw2Xc + 32 >> 3] = $v$sroa$16$1;
    HEAPF64[$initMatXw2Xc + 64 >> 3] = $v$sroa$32$1;
    HEAPF64[$initMatXw2Xc + 8 >> 3] = $v$sroa$48$1;
    HEAPF64[$initMatXw2Xc + 40 >> 3] = $v$sroa$66$1;
    HEAPF64[$initMatXw2Xc + 72 >> 3] = $v$sroa$84$1;
    HEAPF64[$initMatXw2Xc + 16 >> 3] = $371 / $383;
    HEAPF64[$initMatXw2Xc + 48 >> 3] = $374 / $383;
    HEAPF64[$initMatXw2Xc + 80 >> 3] = $377 / $383;
    HEAPF64[$initMatXw2Xc + 24 >> 3] = $t$sroa$0$0;
    HEAPF64[$initMatXw2Xc + 56 >> 3] = $t$sroa$8$0;
    HEAPF64[$initMatXw2Xc + 88 >> 3] = $180;
    $$0 = 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i14 = 0, $$0$i$i$i19 = 0, $$0$i$i$i24 = 0, $$0$i$i$i29 = 0, $$0$i$i$i34 = 0, $$0$i$i$i39 = 0, $$0$i$i$i42 = 0, $$1 = 0, $$lcssa91 = 0, $0 = 0, $1 = 0, $100 = 0, $102 = 0, $103 = 0, $106 = 0, $108 = 0, $111 = 0, $112 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $125 = 0, $127 = 0, $128 = 0, $13 = 0, $131 = 0, $133 = 0, $136 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $145 = 0, $15 = 0, $150 = 0, $152 = 0, $153 = 0, $156 = 0, $158 = 0, $16 = 0, $161 = 0, $162 = 0, $166 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $188 = 0, $190 = 0, $191 = 0, $194 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $206 = 0, $207 = 0, $211 = 0, $212 = 0, $214 = 0, $215 = 0, $217 = 0, $218 = 0, $222 = 0, $226 = 0, $230 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $241 = 0, $242 = 0, $244 = 0, $25 = 0, $250 = 0, $252 = 0, $253 = 0, $256 = 0, $258 = 0, $261 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $61 = 0, $62 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $75 = 0, $77 = 0, $78 = 0, $81 = 0, $83 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $__begin$sroa$0$0 = 0, $__begin2$sroa$0$0 = 0, $__v$i$i40 = 0, $isdigittmp11 = 0, $isdigittmp7 = 0, $sub$1 = 0, $sub$1$lcssa89 = 0, $t$0 = 0, $t$0$lcssa90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i40 = sp + 144 | 0;
 $0 = sp + 120 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 L1 : do if (($last - $first | 0) > 1) if ((HEAP8[$first >> 0] | 0) == 83) {
  $12 = $first + 1 | 0;
  $13 = HEAP8[$12 >> 0] | 0;
  $14 = $13 << 24 >> 24;
  switch ($14 | 0) {
  case 97:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($0, 15311);
    $15 = $db + 4 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $18 = HEAP32[$db + 8 >> 2] | 0;
    $20 = $18;
    if ($16 >>> 0 < $18 >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($16, $0);
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 24;
    } else {
     $25 = HEAP32[$db >> 2] | 0;
     $27 = ($16 - $25 | 0) / 24 | 0;
     $28 = $27 + 1 | 0;
     if ($28 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
     $31 = ($20 - $25 | 0) / 24 | 0;
     if ($31 >>> 0 < 89478485) {
      $33 = $31 << 1;
      $$0$i$i$i = $33 >>> 0 < $28 >>> 0 ? $28 : $33;
     } else $$0$i$i$i = 178956970;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i40, $$0$i$i$i, $27, $db + 12 | 0);
     $36 = $__v$i$i40 + 8 | 0;
     $37 = HEAP32[$36 >> 2] | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($37, $0);
     HEAP32[$36 >> 2] = $37 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i40);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i40);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
    $$1 = $first + 2 | 0;
    break L1;
    break;
   }
  case 98:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($1, 15326);
    $40 = $db + 4 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    $43 = HEAP32[$db + 8 >> 2] | 0;
    $45 = $43;
    if ($41 >>> 0 < $43 >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($41, $1);
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 24;
    } else {
     $50 = HEAP32[$db >> 2] | 0;
     $52 = ($41 - $50 | 0) / 24 | 0;
     $53 = $52 + 1 | 0;
     if ($53 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
     $56 = ($45 - $50 | 0) / 24 | 0;
     if ($56 >>> 0 < 89478485) {
      $58 = $56 << 1;
      $$0$i$i$i14 = $58 >>> 0 < $53 >>> 0 ? $53 : $58;
     } else $$0$i$i$i14 = 178956970;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i40, $$0$i$i$i14, $52, $db + 12 | 0);
     $61 = $__v$i$i40 + 8 | 0;
     $62 = HEAP32[$61 >> 2] | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($62, $1);
     HEAP32[$61 >> 2] = $62 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i40);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i40);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
    $$1 = $first + 2 | 0;
    break L1;
    break;
   }
  case 115:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($2, 15344);
    $65 = $db + 4 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    $68 = HEAP32[$db + 8 >> 2] | 0;
    $70 = $68;
    if ($66 >>> 0 < $68 >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($66, $2);
     HEAP32[$65 >> 2] = (HEAP32[$65 >> 2] | 0) + 24;
    } else {
     $75 = HEAP32[$db >> 2] | 0;
     $77 = ($66 - $75 | 0) / 24 | 0;
     $78 = $77 + 1 | 0;
     if ($78 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
     $81 = ($70 - $75 | 0) / 24 | 0;
     if ($81 >>> 0 < 89478485) {
      $83 = $81 << 1;
      $$0$i$i$i19 = $83 >>> 0 < $78 >>> 0 ? $78 : $83;
     } else $$0$i$i$i19 = 178956970;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i40, $$0$i$i$i19, $77, $db + 12 | 0);
     $86 = $__v$i$i40 + 8 | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($87, $2);
     HEAP32[$86 >> 2] = $87 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i40);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i40);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
    $$1 = $first + 2 | 0;
    break L1;
    break;
   }
  case 105:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3, 15356);
    $90 = $db + 4 | 0;
    $91 = HEAP32[$90 >> 2] | 0;
    $93 = HEAP32[$db + 8 >> 2] | 0;
    $95 = $93;
    if ($91 >>> 0 < $93 >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($91, $3);
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + 24;
    } else {
     $100 = HEAP32[$db >> 2] | 0;
     $102 = ($91 - $100 | 0) / 24 | 0;
     $103 = $102 + 1 | 0;
     if ($103 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
     $106 = ($95 - $100 | 0) / 24 | 0;
     if ($106 >>> 0 < 89478485) {
      $108 = $106 << 1;
      $$0$i$i$i24 = $108 >>> 0 < $103 >>> 0 ? $103 : $108;
     } else $$0$i$i$i24 = 178956970;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i40, $$0$i$i$i24, $102, $db + 12 | 0);
     $111 = $__v$i$i40 + 8 | 0;
     $112 = HEAP32[$111 >> 2] | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($112, $3);
     HEAP32[$111 >> 2] = $112 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i40);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i40);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    $$1 = $first + 2 | 0;
    break L1;
    break;
   }
  case 111:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($4, 15369);
    $115 = $db + 4 | 0;
    $116 = HEAP32[$115 >> 2] | 0;
    $118 = HEAP32[$db + 8 >> 2] | 0;
    $120 = $118;
    if ($116 >>> 0 < $118 >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($116, $4);
     HEAP32[$115 >> 2] = (HEAP32[$115 >> 2] | 0) + 24;
    } else {
     $125 = HEAP32[$db >> 2] | 0;
     $127 = ($116 - $125 | 0) / 24 | 0;
     $128 = $127 + 1 | 0;
     if ($128 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
     $131 = ($120 - $125 | 0) / 24 | 0;
     if ($131 >>> 0 < 89478485) {
      $133 = $131 << 1;
      $$0$i$i$i29 = $133 >>> 0 < $128 >>> 0 ? $128 : $133;
     } else $$0$i$i$i29 = 178956970;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i40, $$0$i$i$i29, $127, $db + 12 | 0);
     $136 = $__v$i$i40 + 8 | 0;
     $137 = HEAP32[$136 >> 2] | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($137, $4);
     HEAP32[$136 >> 2] = $137 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i40);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i40);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
    $$1 = $first + 2 | 0;
    break L1;
    break;
   }
  case 100:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($5, 15382);
    $140 = $db + 4 | 0;
    $141 = HEAP32[$140 >> 2] | 0;
    $143 = HEAP32[$db + 8 >> 2] | 0;
    $145 = $143;
    if ($141 >>> 0 < $143 >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($141, $5);
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + 24;
    } else {
     $150 = HEAP32[$db >> 2] | 0;
     $152 = ($141 - $150 | 0) / 24 | 0;
     $153 = $152 + 1 | 0;
     if ($153 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
     $156 = ($145 - $150 | 0) / 24 | 0;
     if ($156 >>> 0 < 89478485) {
      $158 = $156 << 1;
      $$0$i$i$i34 = $158 >>> 0 < $153 >>> 0 ? $153 : $158;
     } else $$0$i$i$i34 = 178956970;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i40, $$0$i$i$i34, $152, $db + 12 | 0);
     $161 = $__v$i$i40 + 8 | 0;
     $162 = HEAP32[$161 >> 2] | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($162, $5);
     HEAP32[$161 >> 2] = $162 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i40);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i40);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    $$1 = $first + 2 | 0;
    break L1;
    break;
   }
  case 95:
   {
    $166 = HEAP32[$db + 16 >> 2] | 0;
    if (($166 | 0) == (HEAP32[$db + 20 >> 2] | 0)) {
     $$1 = $first;
     break L1;
    }
    $172 = HEAP32[$166 + 4 >> 2] | 0;
    $173 = $db + 4 | 0;
    $174 = $db + 8 | 0;
    $175 = $db + 12 | 0;
    $176 = $__v$i$i40 + 8 | 0;
    $__begin$sroa$0$0 = HEAP32[$166 >> 2] | 0;
    while (1) {
     if (($__begin$sroa$0$0 | 0) == ($172 | 0)) {
      label = 55;
      break;
     }
     $179 = HEAP32[$173 >> 2] | 0;
     $180 = HEAP32[$174 >> 2] | 0;
     $182 = $180;
     if (($179 | 0) == ($180 | 0)) {
      $188 = HEAP32[$db >> 2] | 0;
      $190 = ($179 - $188 | 0) / 24 | 0;
      $191 = $190 + 1 | 0;
      if ($191 >>> 0 > 178956970) {
       label = 59;
       break;
      }
      $194 = ($182 - $188 | 0) / 24 | 0;
      if ($194 >>> 0 < 89478485) {
       $196 = $194 << 1;
       $$0$i$i$i39 = $196 >>> 0 < $191 >>> 0 ? $191 : $196;
      } else $$0$i$i$i39 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i40, $$0$i$i$i39, $190, $175);
      $199 = HEAP32[$176 >> 2] | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($199, $__begin$sroa$0$0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($199 + 12 | 0, $__begin$sroa$0$0 + 12 | 0);
      HEAP32[$176 >> 2] = $199 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i40);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i40);
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($179, $__begin$sroa$0$0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($179 + 12 | 0, $__begin$sroa$0$0 + 12 | 0);
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + 24;
     }
     $__begin$sroa$0$0 = $__begin$sroa$0$0 + 24 | 0;
    }
    if ((label | 0) == 55) {
     $$1 = $first + 2 | 0;
     break L1;
    } else if ((label | 0) == 59) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    break;
   }
  default:
   {
    if (($14 + -48 | 0) >>> 0 < 10) $207 = $13; else {
     if (!(_isupper($14) | 0)) {
      $$1 = $first;
      break L1;
     }
     $207 = HEAP8[$12 >> 0] | 0;
    }
    $206 = $207 << 24 >> 24;
    $isdigittmp7 = $206 + -48 | 0;
    $sub$1 = $isdigittmp7 >>> 0 < 10 ? $isdigittmp7 : $206 + -55 | 0;
    $t$0 = $first + 2 | 0;
    while (1) {
     if (($t$0 | 0) == ($last | 0)) {
      $$1 = $first;
      break L1;
     }
     $211 = HEAP8[$t$0 >> 0] | 0;
     $212 = $211 << 24 >> 24;
     if (($212 + -48 | 0) >>> 0 < 10) $218 = $211; else {
      $214 = (_isupper($212) | 0) == 0;
      $215 = HEAP8[$t$0 >> 0] | 0;
      if ($214) {
       $$lcssa91 = $215;
       $sub$1$lcssa89 = $sub$1;
       $t$0$lcssa90 = $t$0;
       break;
      } else $218 = $215;
     }
     $217 = $218 << 24 >> 24;
     $isdigittmp11 = $217 + -48 | 0;
     $sub$1 = ($isdigittmp11 >>> 0 < 10 ? $isdigittmp11 : $217 + -55 | 0) + ($sub$1 * 36 | 0) | 0;
     $t$0 = $t$0 + 1 | 0;
    }
    if ($$lcssa91 << 24 >> 24 != 95) {
     $$1 = $first;
     break L1;
    }
    $222 = $sub$1$lcssa89 + 1 | 0;
    $226 = HEAP32[$db + 16 >> 2] | 0;
    $230 = $226;
    if ($222 >>> 0 >= (HEAP32[$db + 20 >> 2] | 0) - $226 >> 4 >>> 0) {
     $$1 = $first;
     break L1;
    }
    $234 = HEAP32[$230 + ($222 << 4) + 4 >> 2] | 0;
    $235 = $db + 4 | 0;
    $236 = $db + 8 | 0;
    $237 = $db + 12 | 0;
    $238 = $__v$i$i40 + 8 | 0;
    $__begin2$sroa$0$0 = HEAP32[$230 + ($222 << 4) >> 2] | 0;
    while (1) {
     if (($__begin2$sroa$0$0 | 0) == ($234 | 0)) {
      label = 76;
      break;
     }
     $241 = HEAP32[$235 >> 2] | 0;
     $242 = HEAP32[$236 >> 2] | 0;
     $244 = $242;
     if (($241 | 0) == ($242 | 0)) {
      $250 = HEAP32[$db >> 2] | 0;
      $252 = ($241 - $250 | 0) / 24 | 0;
      $253 = $252 + 1 | 0;
      if ($253 >>> 0 > 178956970) {
       label = 80;
       break;
      }
      $256 = ($244 - $250 | 0) / 24 | 0;
      if ($256 >>> 0 < 89478485) {
       $258 = $256 << 1;
       $$0$i$i$i42 = $258 >>> 0 < $253 >>> 0 ? $253 : $258;
      } else $$0$i$i$i42 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i40, $$0$i$i$i42, $252, $237);
      $261 = HEAP32[$238 >> 2] | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($261, $__begin2$sroa$0$0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($261 + 12 | 0, $__begin2$sroa$0$0 + 12 | 0);
      HEAP32[$238 >> 2] = $261 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i40);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i40);
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($241, $__begin2$sroa$0$0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($241 + 12 | 0, $__begin2$sroa$0$0 + 12 | 0);
      HEAP32[$235 >> 2] = (HEAP32[$235 >> 2] | 0) + 24;
     }
     $__begin2$sroa$0$0 = $__begin2$sroa$0$0 + 24 | 0;
    }
    if ((label | 0) == 76) {
     $$1 = $t$0$lcssa90 + 1 | 0;
     break L1;
    } else if ((label | 0) == 80) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
   }
  }
 } else $$1 = $first; else $$1 = $first; while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$6 = 0, $$pre = 0, $$pre$phi105Z2D = 0, $$pre$phi107Z2D = 0, $0 = 0, $1 = 0, $103 = 0, $104 = 0, $107 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $129 = 0, $13 = 0, $131 = 0, $141 = 0, $143 = 0, $145 = 0, $146 = 0, $15 = 0, $153 = 0, $154 = 0, $155 = 0, $157 = 0, $159 = 0, $161 = 0, $171 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $180 = 0, $181 = 0, $182 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $198 = 0, $2 = 0, $200 = 0, $210 = 0, $214 = 0, $215 = 0, $218 = 0, $219 = 0, $220 = 0, $223 = 0, $226 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $244 = 0, $251 = 0, $252 = 0, $255 = 0, $257 = 0, $258 = 0, $260 = 0, $261 = 0, $268 = 0, $269 = 0, $270 = 0, $272 = 0, $273 = 0, $277 = 0, $279 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $54 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $75 = 0, $78 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $90 = 0, $94 = 0, $96 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i38 = 0, $__i$0$i$i$i52 = 0, $__i$0$i$i$i60 = 0, $__i$0$i$i$i70 = 0, $args = 0, $global$0$off0 = 0, $t$0 = 0, $t$1 = 0, $t$1$lcssa = 0, $t$1$ph = 0, $t$2 = 0, $t$3 = 0, $t$3$lcssa = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $args = sp + 60 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 $5 = $last;
 L1 : do if (($5 - $first | 0) > 2) {
  if ((HEAP8[$first >> 0] | 0) == 103) {
   $13 = (HEAP8[$first + 1 >> 0] | 0) == 115;
   $global$0$off0 = $13;
   $t$0 = $13 ? $first + 2 | 0 : $first;
  } else {
   $global$0$off0 = 0;
   $t$0 = $first;
  }
  $15 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
  if (($15 | 0) != ($t$0 | 0)) {
   if (!$global$0$off0) {
    $$6 = $15;
    break;
   }
   $19 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($19 | 0)) {
    $$6 = $first;
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($19 + -24 | 0, 0, 14755) | 0;
   $$6 = $15;
   break;
  }
  if (($5 - $t$0 | 0) > 2) if ((HEAP8[$t$0 >> 0] | 0) == 115) if ((HEAP8[$t$0 + 1 >> 0] | 0) == 114) {
   $30 = $t$0 + 2 | 0;
   if ((HEAP8[$30 >> 0] | 0) == 78) {
    $33 = $t$0 + 3 | 0;
    $34 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($33, $last, $db) | 0;
    if (($34 | 0) == ($33 | 0) | ($34 | 0) == ($last | 0)) {
     $$6 = $first;
     break;
    }
    $37 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($34, $last, $db) | 0;
    $$pre = $db + 4 | 0;
    do if (($37 | 0) == ($34 | 0)) {
     $$pre$phi105Z2D = $db;
     $t$1$ph = $34;
    } else {
     $39 = HEAP32[$$pre >> 2] | 0;
     if ((($39 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $39 + -24 | 0);
     $46 = HEAP32[$$pre >> 2] | 0;
     $47 = $46 + -24 | 0;
     $48 = $46;
     while (1) {
      if (($48 | 0) == ($47 | 0)) break;
      $50 = $48 + -24 | 0;
      HEAP32[$$pre >> 2] = $50;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
      $48 = HEAP32[$$pre >> 2] | 0;
     }
     $52 = HEAP8[$args >> 0] | 0;
     $54 = ($52 & 1) == 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($46 + -48 | 0, $54 ? $args + 1 | 0 : HEAP32[$args + 8 >> 2] | 0, $54 ? ($52 & 255) >>> 1 : HEAP32[$args + 4 >> 2] | 0) | 0;
     if (($37 | 0) != ($last | 0)) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
      $$pre$phi105Z2D = $db;
      $t$1$ph = $37;
      break;
     }
     $65 = HEAP32[$$pre >> 2] | 0;
     $66 = $65 + -24 | 0;
     $67 = $65;
     while (1) {
      if (($67 | 0) == ($66 | 0)) break;
      $69 = $67 + -24 | 0;
      HEAP32[$$pre >> 2] = $69;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($69);
      $67 = HEAP32[$$pre >> 2] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $$6 = $first;
     break L1;
    } while (0);
    $70 = $0 + 8 | 0;
    $71 = $0 + 1 | 0;
    $72 = $0 + 4 | 0;
    $t$1 = $t$1$ph;
    while (1) {
     if ((HEAP8[$t$1 >> 0] | 0) == 69) {
      $t$1$lcssa = $t$1;
      break;
     }
     $75 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$1, $last, $db) | 0;
     if (($75 | 0) == ($t$1 | 0) | ($75 | 0) == ($last | 0)) {
      $$6 = $first;
      break L1;
     }
     $78 = HEAP32[$$pre >> 2] | 0;
     if ((($78 - (HEAP32[$$pre$phi105Z2D >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $78 + -24 | 0);
     $85 = HEAP32[$$pre >> 2] | 0;
     $86 = $85 + -24 | 0;
     $87 = $85;
     while (1) {
      if (($87 | 0) == ($86 | 0)) break;
      $89 = $87 + -24 | 0;
      HEAP32[$$pre >> 2] = $89;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($89);
      $87 = HEAP32[$$pre >> 2] | 0;
     }
     $90 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($args, 0, 14755) | 0;
     HEAP32[$0 >> 2] = HEAP32[$90 >> 2];
     HEAP32[$0 + 4 >> 2] = HEAP32[$90 + 4 >> 2];
     HEAP32[$0 + 8 >> 2] = HEAP32[$90 + 8 >> 2];
     $__i$0$i$i$i = 0;
     while (1) {
      if (($__i$0$i$i$i | 0) == 3) break;
      HEAP32[$90 + ($__i$0$i$i$i << 2) >> 2] = 0;
      $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
     }
     $94 = HEAP8[$0 >> 0] | 0;
     $96 = ($94 & 1) == 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($85 + -48 | 0, $96 ? $71 : HEAP32[$70 >> 2] | 0, $96 ? ($94 & 255) >>> 1 : HEAP32[$72 >> 2] | 0) | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $t$1 = $75;
    }
    $103 = $t$1$lcssa + 1 | 0;
    $104 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($103, $last, $db) | 0;
    if (($104 | 0) == ($103 | 0)) {
     $107 = HEAP32[$$pre >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($107 | 0)) {
      $$6 = $first;
      break;
     }
     $109 = $107 + -24 | 0;
     $110 = $107;
     while (1) {
      if (($110 | 0) == ($109 | 0)) {
       $$6 = $first;
       break L1;
      }
      $112 = $110 + -24 | 0;
      HEAP32[$$pre >> 2] = $112;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($112);
      $110 = HEAP32[$$pre >> 2] | 0;
     }
    }
    $113 = HEAP32[$$pre >> 2] | 0;
    if ((($113 - (HEAP32[$$pre$phi105Z2D >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$6 = $first;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $113 + -24 | 0);
    $120 = HEAP32[$$pre >> 2] | 0;
    $121 = $120 + -24 | 0;
    $122 = $120;
    while (1) {
     if (($122 | 0) == ($121 | 0)) break;
     $124 = $122 + -24 | 0;
     HEAP32[$$pre >> 2] = $124;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($124);
     $122 = HEAP32[$$pre >> 2] | 0;
    }
    $125 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($args, 0, 14755) | 0;
    HEAP32[$1 >> 2] = HEAP32[$125 >> 2];
    HEAP32[$1 + 4 >> 2] = HEAP32[$125 + 4 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[$125 + 8 >> 2];
    $__i$0$i$i$i38 = 0;
    while (1) {
     if (($__i$0$i$i$i38 | 0) == 3) break;
     HEAP32[$125 + ($__i$0$i$i$i38 << 2) >> 2] = 0;
     $__i$0$i$i$i38 = $__i$0$i$i$i38 + 1 | 0;
    }
    $129 = HEAP8[$1 >> 0] | 0;
    $131 = ($129 & 1) == 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($120 + -48 | 0, $131 ? $1 + 1 | 0 : HEAP32[$1 + 8 >> 2] | 0, $131 ? ($129 & 255) >>> 1 : HEAP32[$1 + 4 >> 2] | 0) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
    $$6 = $104;
    break;
   }
   $141 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($30, $last, $db) | 0;
   if (($141 | 0) != ($30 | 0)) {
    $143 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($141, $last, $db) | 0;
    if (($143 | 0) == ($141 | 0)) $t$2 = $141; else {
     $145 = $db + 4 | 0;
     $146 = HEAP32[$145 >> 2] | 0;
     if ((($146 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6 = $first;
      break;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $146 + -24 | 0);
     $153 = HEAP32[$145 >> 2] | 0;
     $154 = $153 + -24 | 0;
     $155 = $153;
     while (1) {
      if (($155 | 0) == ($154 | 0)) break;
      $157 = $155 + -24 | 0;
      HEAP32[$145 >> 2] = $157;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($157);
      $155 = HEAP32[$145 >> 2] | 0;
     }
     $159 = HEAP8[$args >> 0] | 0;
     $161 = ($159 & 1) == 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($153 + -48 | 0, $161 ? $args + 1 | 0 : HEAP32[$args + 8 >> 2] | 0, $161 ? ($159 & 255) >>> 1 : HEAP32[$args + 4 >> 2] | 0) | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $t$2 = $143;
    }
    $171 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$2, $last, $db) | 0;
    if (($171 | 0) == ($t$2 | 0)) {
     $174 = $db + 4 | 0;
     $175 = HEAP32[$174 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($175 | 0)) {
      $$6 = $first;
      break;
     }
     $177 = $175 + -24 | 0;
     $178 = $175;
     while (1) {
      if (($178 | 0) == ($177 | 0)) {
       $$6 = $first;
       break L1;
      }
      $180 = $178 + -24 | 0;
      HEAP32[$174 >> 2] = $180;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($180);
      $178 = HEAP32[$174 >> 2] | 0;
     }
    }
    $181 = $db + 4 | 0;
    $182 = HEAP32[$181 >> 2] | 0;
    if ((($182 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $$6 = $first;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $182 + -24 | 0);
    $189 = HEAP32[$181 >> 2] | 0;
    $190 = $189 + -24 | 0;
    $191 = $189;
    while (1) {
     if (($191 | 0) == ($190 | 0)) break;
     $193 = $191 + -24 | 0;
     HEAP32[$181 >> 2] = $193;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($193);
     $191 = HEAP32[$181 >> 2] | 0;
    }
    $194 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($args, 0, 14755) | 0;
    HEAP32[$2 >> 2] = HEAP32[$194 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[$194 + 4 >> 2];
    HEAP32[$2 + 8 >> 2] = HEAP32[$194 + 8 >> 2];
    $__i$0$i$i$i52 = 0;
    while (1) {
     if (($__i$0$i$i$i52 | 0) == 3) break;
     HEAP32[$194 + ($__i$0$i$i$i52 << 2) >> 2] = 0;
     $__i$0$i$i$i52 = $__i$0$i$i$i52 + 1 | 0;
    }
    $198 = HEAP8[$2 >> 0] | 0;
    $200 = ($198 & 1) == 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($189 + -48 | 0, $200 ? $2 + 1 | 0 : HEAP32[$2 + 8 >> 2] | 0, $200 ? ($198 & 255) >>> 1 : HEAP32[$2 + 4 >> 2] | 0) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
    $$6 = $171;
    break;
   }
   $210 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($30, $last, $db) | 0;
   if (($210 | 0) == ($30 | 0) | ($210 | 0) == ($last | 0)) $$6 = $first; else {
    if ($global$0$off0) {
     $214 = $db + 4 | 0;
     $215 = HEAP32[$214 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($215 | 0)) {
      $$6 = $first;
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($215 + -24 | 0, 0, 14755) | 0;
     $$pre$phi107Z2D = $214;
    } else $$pre$phi107Z2D = $db + 4 | 0;
    $218 = $3 + 8 | 0;
    $219 = $3 + 1 | 0;
    $220 = $3 + 4 | 0;
    $t$3 = $210;
    while (1) {
     if ((HEAP8[$t$3 >> 0] | 0) == 69) {
      $t$3$lcssa = $t$3;
      break;
     }
     $223 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$3, $last, $db) | 0;
     if (($223 | 0) == ($t$3 | 0) | ($223 | 0) == ($last | 0)) {
      $$6 = $first;
      break L1;
     }
     $226 = HEAP32[$$pre$phi107Z2D >> 2] | 0;
     if ((($226 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $$6 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $226 + -24 | 0);
     $233 = HEAP32[$$pre$phi107Z2D >> 2] | 0;
     $234 = $233 + -24 | 0;
     $235 = $233;
     while (1) {
      if (($235 | 0) == ($234 | 0)) break;
      $237 = $235 + -24 | 0;
      HEAP32[$$pre$phi107Z2D >> 2] = $237;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($237);
      $235 = HEAP32[$$pre$phi107Z2D >> 2] | 0;
     }
     $238 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($args, 0, 14755) | 0;
     HEAP32[$3 >> 2] = HEAP32[$238 >> 2];
     HEAP32[$3 + 4 >> 2] = HEAP32[$238 + 4 >> 2];
     HEAP32[$3 + 8 >> 2] = HEAP32[$238 + 8 >> 2];
     $__i$0$i$i$i60 = 0;
     while (1) {
      if (($__i$0$i$i$i60 | 0) == 3) break;
      HEAP32[$238 + ($__i$0$i$i$i60 << 2) >> 2] = 0;
      $__i$0$i$i$i60 = $__i$0$i$i$i60 + 1 | 0;
     }
     $242 = HEAP8[$3 >> 0] | 0;
     $244 = ($242 & 1) == 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($233 + -48 | 0, $244 ? $219 : HEAP32[$218 >> 2] | 0, $244 ? ($242 & 255) >>> 1 : HEAP32[$220 >> 2] | 0) | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $t$3 = $223;
    }
    $251 = $t$3$lcssa + 1 | 0;
    $252 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($251, $last, $db) | 0;
    if (($252 | 0) == ($251 | 0)) {
     $255 = HEAP32[$$pre$phi107Z2D >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($255 | 0)) {
      $$6 = $first;
      break;
     }
     $257 = $255 + -24 | 0;
     $258 = $255;
     while (1) {
      if (($258 | 0) == ($257 | 0)) {
       $$6 = $first;
       break L1;
      }
      $260 = $258 + -24 | 0;
      HEAP32[$$pre$phi107Z2D >> 2] = $260;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($260);
      $258 = HEAP32[$$pre$phi107Z2D >> 2] | 0;
     }
    }
    $261 = HEAP32[$$pre$phi107Z2D >> 2] | 0;
    if ((($261 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$6 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $261 + -24 | 0);
     $268 = HEAP32[$$pre$phi107Z2D >> 2] | 0;
     $269 = $268 + -24 | 0;
     $270 = $268;
     while (1) {
      if (($270 | 0) == ($269 | 0)) break;
      $272 = $270 + -24 | 0;
      HEAP32[$$pre$phi107Z2D >> 2] = $272;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($272);
      $270 = HEAP32[$$pre$phi107Z2D >> 2] | 0;
     }
     $273 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($args, 0, 14755) | 0;
     HEAP32[$4 >> 2] = HEAP32[$273 >> 2];
     HEAP32[$4 + 4 >> 2] = HEAP32[$273 + 4 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$273 + 8 >> 2];
     $__i$0$i$i$i70 = 0;
     while (1) {
      if (($__i$0$i$i$i70 | 0) == 3) break;
      HEAP32[$273 + ($__i$0$i$i$i70 << 2) >> 2] = 0;
      $__i$0$i$i$i70 = $__i$0$i$i$i70 + 1 | 0;
     }
     $277 = HEAP8[$4 >> 0] | 0;
     $279 = ($277 & 1) == 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($268 + -48 | 0, $279 ? $4 + 1 | 0 : HEAP32[$4 + 8 >> 2] | 0, $279 ? ($277 & 255) >>> 1 : HEAP32[$4 + 4 >> 2] | 0) | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $$6 = $252;
    }
   }
  } else $$6 = $first; else $$6 = $first; else $$6 = $first;
 } else $$6 = $first; while (0);
 STACKTOP = sp;
 return $$6 | 0;
}

function _PCA($input, $output, $ev) {
 $input = $input | 0;
 $output = $output | 0;
 $ev = $ev | 0;
 var $$0 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $113 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $120 = 0.0, $131 = 0.0, $136 = 0.0, $14 = 0, $140 = 0.0, $143 = 0.0, $147 = 0.0, $149 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $157 = 0, $161 = 0.0, $165 = 0, $17 = 0, $172 = 0.0, $177 = 0, $178 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $184 = 0, $185 = 0.0, $194 = 0.0, $196 = 0, $197 = 0.0, $2 = 0, $202 = 0.0, $204 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $216 = 0.0, $217 = 0, $220 = 0, $221 = 0, $225 = 0.0, $230 = 0, $231 = 0, $24 = 0, $248 = 0.0, $25 = 0, $252 = 0.0, $253 = 0, $26 = 0, $261 = 0.0, $28 = 0, $3 = 0, $30 = 0, $34 = 0, $36 = 0, $39 = 0, $46 = 0.0, $47 = 0.0, $5 = 0, $53 = 0, $58 = 0, $60 = 0, $67 = 0.0, $68 = 0.0, $78 = 0, $8 = 0, $80 = 0, $86 = 0, $91 = 0.0, $92 = 0, $93 = 0, $96 = 0.0, $c$0$i = 0.0, $ev1$i = 0, $h$0$i = 0, $h$1$i = 0, $h$1$i$lcssa = 0, $i$0 = 0, $i$0$i = 0, $i$0$i11 = 0, $i$0$i2 = 0, $i$0$i25 = 0, $i$1 = 0, $i$1$i = 0, $i$1$i27 = 0, $i$2$i = 0, $in1$0$i = 0, $in1$0$i17 = 0, $in2$0$i = 0, $in2$0$i16 = 0, $iter$0$i = 0, $j$0 = 0, $j$0$i = 0, $j$0$i13 = 0, $j$0$i23 = 0, $j$0$i23$lcssa = 0, $j$0$i3 = 0, $j$1 = 0, $j$1$i = 0, $k$0$i = 0, $k$0$i18 = 0, $k$0$i24 = 0, $k$0$i4 = 0, $k$1$i = 0, $m$0$i = 0, $m$1$i = 0, $m$2$i = 0, $m$3$i = 0, $m$3$i$lcssa = 0, $m1$0 = 0, $m1$0$i = 0, $m1$1 = 0, $m1$1$lcssa = 0, $m2$0 = 0, $m2$0$i = 0, $m2$1 = 0, $m2$1$lcssa = 0, $m2$2 = 0, $m2$3 = 0, $m2$3$lcssa = 0, $out$0$i = 0, $out$0$i10 = 0, $out$1$i = 0, $out$1$i12 = 0, $s$1$i = 0.0, $sum$0$i = 0.0, $sum$0$i$lcssa = 0.0, $t$0$i = 0.0, $t$0$i$lcssa = 0.0, $v1$0$i = 0, $v2$0$i = 0, $x$0$i = 0.0, $x$1$i = 0.0, $x$1$i$lcssa = 0.0, $y$0$i = 0.0, $y$1$i = 0.0, $y$1$i$lcssa = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ev1$i = sp;
 $0 = $input + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $input + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = ($3 | 0) < ($1 | 0) ? $3 : $1;
 L1 : do if (($1 | 0) < 2 | ($3 | 0) < 2) $$0 = -1; else {
  $8 = $output + 8 | 0;
  if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
   $11 = $output + 4 | 0;
   if ((HEAP32[$11 >> 2] | 0) == ($5 | 0)) {
    $14 = $ev + 4 | 0;
    if ((HEAP32[$14 >> 2] | 0) == ($5 | 0)) {
     $17 = _arMatrixAlloc($5, $5) | 0;
     $18 = $17 + 4 | 0;
     if ((HEAP32[$18 >> 2] | 0) == ($5 | 0)) {
      $21 = $17 + 8 | 0;
      if ((HEAP32[$21 >> 2] | 0) == ($5 | 0)) {
       $24 = ($1 | 0) < ($3 | 0);
       $25 = HEAP32[$0 >> 2] | 0;
       $26 = HEAP32[$2 >> 2] | 0;
       L9 : do if ($24) {
        if (($5 | 0) != ($25 | 0)) {
         _arMatrixFree($17) | 0;
         $$0 = -1;
         break L1;
        }
        $28 = HEAP32[$17 >> 2] | 0;
        $i$0$i = 0;
        $out$0$i = $28;
        while (1) {
         if (($i$0$i | 0) >= ($5 | 0)) break L9;
         $30 = Math_imul($i$0$i, $26) | 0;
         $j$0$i = 0;
         $out$1$i = $out$0$i;
         while (1) {
          if (($j$0$i | 0) == ($5 | 0)) break;
          L20 : do if (($j$0$i | 0) < ($i$0$i | 0)) {
           $34 = $28 + ((Math_imul($j$0$i, $5) | 0) + $i$0$i << 3) | 0;
           HEAPF64[$out$1$i >> 3] = +HEAPF64[$34 >> 3];
          } else {
           $36 = HEAP32[$input >> 2] | 0;
           $39 = $36 + ((Math_imul($j$0$i, $26) | 0) << 3) | 0;
           HEAPF64[$out$1$i >> 3] = 0.0;
           $47 = 0.0;
           $in1$0$i = $36 + ($30 << 3) | 0;
           $in2$0$i = $39;
           $k$0$i = 0;
           while (1) {
            if (($k$0$i | 0) >= ($26 | 0)) break L20;
            $46 = $47 + +HEAPF64[$in1$0$i >> 3] * +HEAPF64[$in2$0$i >> 3];
            HEAPF64[$out$1$i >> 3] = $46;
            $47 = $46;
            $in1$0$i = $in1$0$i + 8 | 0;
            $in2$0$i = $in2$0$i + 8 | 0;
            $k$0$i = $k$0$i + 1 | 0;
           }
          } while (0);
          $j$0$i = $j$0$i + 1 | 0;
          $out$1$i = $out$1$i + 8 | 0;
         }
         $i$0$i = $i$0$i + 1 | 0;
         $out$0$i = $out$0$i + ($5 << 3) | 0;
        }
       } else {
        if (($5 | 0) != ($26 | 0)) {
         _arMatrixFree($17) | 0;
         $$0 = -1;
         break L1;
        }
        $53 = HEAP32[$17 >> 2] | 0;
        $i$0$i11 = 0;
        $out$0$i10 = $53;
        while (1) {
         if (($i$0$i11 | 0) < ($5 | 0)) {
          $j$0$i13 = 0;
          $out$1$i12 = $out$0$i10;
         } else break L9;
         while (1) {
          if (($j$0$i13 | 0) == ($5 | 0)) break;
          L37 : do if (($j$0$i13 | 0) < ($i$0$i11 | 0)) {
           $58 = $53 + ((Math_imul($j$0$i13, $5) | 0) + $i$0$i11 << 3) | 0;
           HEAPF64[$out$1$i12 >> 3] = +HEAPF64[$58 >> 3];
          } else {
           $60 = HEAP32[$input >> 2] | 0;
           HEAPF64[$out$1$i12 >> 3] = 0.0;
           $68 = 0.0;
           $in1$0$i17 = $60 + ($i$0$i11 << 3) | 0;
           $in2$0$i16 = $60 + ($j$0$i13 << 3) | 0;
           $k$0$i18 = 0;
           while (1) {
            if (($k$0$i18 | 0) >= ($25 | 0)) break L37;
            $67 = $68 + +HEAPF64[$in1$0$i17 >> 3] * +HEAPF64[$in2$0$i16 >> 3];
            HEAPF64[$out$1$i12 >> 3] = $67;
            $68 = $67;
            $in1$0$i17 = $in1$0$i17 + ($5 << 3) | 0;
            $in2$0$i16 = $in2$0$i16 + ($5 << 3) | 0;
            $k$0$i18 = $k$0$i18 + 1 | 0;
           }
          } while (0);
          $j$0$i13 = $j$0$i13 + 1 | 0;
          $out$1$i12 = $out$1$i12 + 8 | 0;
         }
         $i$0$i11 = $i$0$i11 + 1 | 0;
         $out$0$i10 = $out$0$i10 + ($5 << 3) | 0;
        }
       } while (0);
       do if (($5 | 0) >= 2) if ((HEAP32[$14 >> 2] | 0) == ($5 | 0)) {
        $78 = _arVecAlloc($5) | 0;
        if ($78 | 0) {
         $80 = $5 + -1 | 0;
         HEAP32[$ev1$i + 4 >> 2] = $80;
         HEAP32[$ev1$i >> 2] = (HEAP32[$78 >> 2] | 0) + 8;
         if ((_arVecTridiagonalize($17, $ev, $ev1$i) | 0) < 0) {
          _arVecFree($78) | 0;
          break;
         }
         $86 = HEAP32[$78 >> 2] | 0;
         HEAPF64[$86 >> 3] = 0.0;
         $h$0$i = $80;
         L53 : while (1) {
          if (($h$0$i | 0) > 0) $j$0$i23 = $h$0$i; else {
           $k$1$i = 0;
           break;
          }
          while (1) {
           if (($j$0$i23 | 0) <= 0) {
            $j$0$i23$lcssa = $j$0$i23;
            break;
           }
           $91 = +Math_abs(+(+HEAPF64[$86 + ($j$0$i23 << 3) >> 3]));
           $92 = $j$0$i23 + -1 | 0;
           $93 = HEAP32[$ev >> 2] | 0;
           $96 = +Math_abs(+(+HEAPF64[$93 + ($92 << 3) >> 3]));
           if ($91 > ($96 + +Math_abs(+(+HEAPF64[$93 + ($j$0$i23 << 3) >> 3]))) * 1.0e-06) $j$0$i23 = $92; else {
            $j$0$i23$lcssa = $j$0$i23;
            break;
           }
          }
          $$pre$i = $h$0$i + -1 | 0;
          if (($j$0$i23$lcssa | 0) == ($h$0$i | 0)) {
           $h$0$i = $$pre$i;
           continue;
          }
          $105 = $86 + ($h$0$i << 3) | 0;
          $106 = $86 + ($j$0$i23$lcssa + 1 << 3) | 0;
          $iter$0$i = 0;
          while (1) {
           $107 = $iter$0$i + 1 | 0;
           if (($iter$0$i | 0) > 99) {
            $h$0$i = $$pre$i;
            continue L53;
           }
           $109 = HEAP32[$ev >> 2] | 0;
           $110 = $109 + ($$pre$i << 3) | 0;
           $112 = $109 + ($h$0$i << 3) | 0;
           $113 = +HEAPF64[$112 >> 3];
           $115 = (+HEAPF64[$110 >> 3] - $113) * .5;
           $116 = +HEAPF64[$105 >> 3];
           $117 = $116 * $116;
           $120 = +Math_sqrt(+($117 + $115 * $115));
           $k$0$i24 = $j$0$i23$lcssa;
           $x$0$i = +HEAPF64[$109 + ($j$0$i23$lcssa << 3) >> 3] - $113 + $117 / ($115 + ($115 < 0.0 ? -$120 : $120));
           $y$0$i = +HEAPF64[$106 >> 3];
           while (1) {
            if (($k$0$i24 | 0) >= ($h$0$i | 0)) break;
            $131 = +Math_abs(+$x$0$i);
            do if (!($131 >= +Math_abs(+$y$0$i))) {
             $143 = -$x$0$i / $y$0$i;
             $147 = 1.0 / +Math_sqrt(+($143 * $143 + 1.0));
             $c$0$i = $143 * $147;
             $s$1$i = $147;
            } else {
             if (!($131 > 1.0e-16)) {
              $c$0$i = 1.0;
              $s$1$i = 0.0;
              break;
             }
             $136 = -$y$0$i / $x$0$i;
             $140 = 1.0 / +Math_sqrt(+($136 * $136 + 1.0));
             $c$0$i = $140;
             $s$1$i = $136 * $140;
            } while (0);
            $149 = $109 + ($k$0$i24 << 3) | 0;
            $150 = +HEAPF64[$149 >> 3];
            $151 = $k$0$i24 + 1 | 0;
            $152 = $109 + ($151 << 3) | 0;
            $153 = +HEAPF64[$152 >> 3];
            $154 = $150 - $153;
            $157 = $86 + ($151 << 3) | 0;
            $161 = $s$1$i * ($s$1$i * $154 + $c$0$i * 2.0 * +HEAPF64[$157 >> 3]);
            HEAPF64[$149 >> 3] = $150 - $161;
            HEAPF64[$152 >> 3] = $153 + $161;
            if (($k$0$i24 | 0) > ($j$0$i23$lcssa | 0)) {
             $165 = $86 + ($k$0$i24 << 3) | 0;
             HEAPF64[$165 >> 3] = $c$0$i * +HEAPF64[$165 >> 3] - $y$0$i * $s$1$i;
            }
            $172 = +HEAPF64[$157 >> 3];
            HEAPF64[$157 >> 3] = $172 + $s$1$i * ($c$0$i * $154 - $s$1$i * 2.0 * $172);
            $177 = Math_imul($k$0$i24, $5) | 0;
            $178 = Math_imul($151, $5) | 0;
            $i$0$i25 = 0;
            $x$1$i = $x$0$i;
            $y$1$i = $y$0$i;
            while (1) {
             if (($i$0$i25 | 0) == ($5 | 0)) {
              $x$1$i$lcssa = $x$1$i;
              $y$1$i$lcssa = $y$1$i;
              break;
             }
             $180 = HEAP32[$17 >> 2] | 0;
             $181 = $180 + ($i$0$i25 + $177 << 3) | 0;
             $182 = +HEAPF64[$181 >> 3];
             $184 = $180 + ($i$0$i25 + $178 << 3) | 0;
             $185 = +HEAPF64[$184 >> 3];
             HEAPF64[$181 >> 3] = $c$0$i * $182 - $s$1$i * $185;
             HEAPF64[$184 >> 3] = $s$1$i * $182 + $c$0$i * $185;
             $i$0$i25 = $i$0$i25 + 1 | 0;
             $x$1$i = $182;
             $y$1$i = $185;
            }
            if (($k$0$i24 | 0) >= ($$pre$i | 0)) {
             $k$0$i24 = $151;
             $x$0$i = $x$1$i$lcssa;
             $y$0$i = $y$1$i$lcssa;
             continue;
            }
            $194 = +HEAPF64[$157 >> 3];
            $196 = $86 + ($k$0$i24 + 2 << 3) | 0;
            $197 = +HEAPF64[$196 >> 3];
            HEAPF64[$196 >> 3] = $c$0$i * $197;
            $k$0$i24 = $151;
            $x$0$i = $194;
            $y$0$i = -($s$1$i * $197);
           }
           $202 = +Math_abs(+(+HEAPF64[$105 >> 3]));
           $204 = +Math_abs(+(+HEAPF64[$110 >> 3]));
           if ($202 > ($204 + +Math_abs(+(+HEAPF64[$112 >> 3]))) * 1.0e-06) $iter$0$i = $107; else {
            $h$0$i = $$pre$i;
            continue L53;
           }
          }
         }
         L80 : while (1) {
          if (($k$1$i | 0) == ($80 | 0)) break;
          $210 = HEAP32[$ev >> 2] | 0;
          $211 = $210 + ($k$1$i << 3) | 0;
          $212 = +HEAPF64[$211 >> 3];
          $213 = $k$1$i + 1 | 0;
          $h$1$i = $k$1$i;
          $i$1$i27 = $213;
          $t$0$i = $212;
          while (1) {
           if (($i$1$i27 | 0) >= ($5 | 0)) {
            $h$1$i$lcssa = $h$1$i;
            $t$0$i$lcssa = $t$0$i;
            break;
           }
           $216 = +HEAPF64[$210 + ($i$1$i27 << 3) >> 3];
           $217 = $216 > $t$0$i;
           $h$1$i = $217 ? $i$1$i27 : $h$1$i;
           $i$1$i27 = $i$1$i27 + 1 | 0;
           $t$0$i = $217 ? $216 : $t$0$i;
          }
          HEAPF64[$210 + ($h$1$i$lcssa << 3) >> 3] = $212;
          HEAPF64[$211 >> 3] = $t$0$i$lcssa;
          $220 = Math_imul($h$1$i$lcssa, $5) | 0;
          $221 = HEAP32[$17 >> 2] | 0;
          $i$2$i = 0;
          $v1$0$i = $221 + ($220 << 3) | 0;
          $v2$0$i = $221 + ((Math_imul($k$1$i, $5) | 0) << 3) | 0;
          while (1) {
           if (($i$2$i | 0) == ($5 | 0)) {
            $k$1$i = $213;
            continue L80;
           }
           $225 = +HEAPF64[$v1$0$i >> 3];
           HEAPF64[$v1$0$i >> 3] = +HEAPF64[$v2$0$i >> 3];
           HEAPF64[$v2$0$i >> 3] = $225;
           $i$2$i = $i$2$i + 1 | 0;
           $v1$0$i = $v1$0$i + 8 | 0;
           $v2$0$i = $v2$0$i + 8 | 0;
          }
         }
         _arVecFree($78) | 0;
         L91 : do if ($24) {
          $230 = HEAP32[$0 >> 2] | 0;
          $231 = HEAP32[$2 >> 2] | 0;
          do if (!(($230 | 0) < 1 | ($231 | 0) < 1)) if ((HEAP32[$18 >> 2] | 0) == ($230 | 0)) if ((HEAP32[$21 >> 2] | 0) == ($230 | 0)) {
           if ((HEAP32[$11 >> 2] | 0) != ($230 | 0)) break;
           if ((HEAP32[$8 >> 2] | 0) != ($231 | 0)) break;
           if ((HEAP32[$14 >> 2] | 0) != ($230 | 0)) break;
           $i$0$i2 = 0;
           $m$0$i = HEAP32[$output >> 2] | 0;
           while (1) {
            if (($i$0$i2 | 0) >= ($230 | 0)) {
             $i$1$i = $i$0$i2;
             $m$2$i = $m$0$i;
             break;
            }
            $248 = +HEAPF64[(HEAP32[$ev >> 2] | 0) + ($i$0$i2 << 3) >> 3];
            if ($248 < 1.0e-16) {
             $i$1$i = $i$0$i2;
             $m$2$i = $m$0$i;
             break;
            }
            $252 = 1.0 / +Math_sqrt(+(+Math_abs(+$248)));
            $253 = Math_imul($i$0$i2, $230) | 0;
            $j$0$i3 = 0;
            $m$1$i = $m$0$i;
            while (1) {
             if (($j$0$i3 | 0) == ($231 | 0)) break;
             $k$0$i4 = 0;
             $m1$0$i = (HEAP32[$17 >> 2] | 0) + ($253 << 3) | 0;
             $m2$0$i = (HEAP32[$input >> 2] | 0) + ($j$0$i3 << 3) | 0;
             $sum$0$i = 0.0;
             while (1) {
              if (($k$0$i4 | 0) == ($230 | 0)) {
               $sum$0$i$lcssa = $sum$0$i;
               break;
              }
              $261 = $sum$0$i + +HEAPF64[$m1$0$i >> 3] * +HEAPF64[$m2$0$i >> 3];
              $k$0$i4 = $k$0$i4 + 1 | 0;
              $m1$0$i = $m1$0$i + 8 | 0;
              $m2$0$i = $m2$0$i + ($231 << 3) | 0;
              $sum$0$i = $261;
             }
             HEAPF64[$m$1$i >> 3] = $252 * $sum$0$i$lcssa;
             $j$0$i3 = $j$0$i3 + 1 | 0;
             $m$1$i = $m$1$i + 8 | 0;
            }
            $i$0$i2 = $i$0$i2 + 1 | 0;
            $m$0$i = $m$0$i + ($231 << 3) | 0;
           }
           while (1) {
            if (($i$1$i | 0) >= ($230 | 0)) break L91;
            HEAPF64[(HEAP32[$ev >> 2] | 0) + ($i$1$i << 3) >> 3] = 0.0;
            $j$1$i = 0;
            $m$3$i = $m$2$i;
            while (1) {
             if (($j$1$i | 0) >= ($231 | 0)) {
              $m$3$i$lcssa = $m$3$i;
              break;
             }
             HEAPF64[$m$3$i >> 3] = 0.0;
             $j$1$i = $j$1$i + 1 | 0;
             $m$3$i = $m$3$i + 8 | 0;
            }
            $i$1$i = $i$1$i + 1 | 0;
            $m$2$i = $m$3$i$lcssa;
           }
          } while (0);
          _arMatrixFree($17) | 0;
          $$0 = -1;
          break L1;
         } else {
          $i$0 = 0;
          $m1$0 = HEAP32[$17 >> 2] | 0;
          $m2$0 = HEAP32[$output >> 2] | 0;
          while (1) {
           if (($i$0 | 0) >= ($5 | 0)) {
            $i$1 = $i$0;
            $m2$2 = $m2$0;
            break;
           }
           if (+HEAPF64[(HEAP32[$ev >> 2] | 0) + ($i$0 << 3) >> 3] < 1.0e-16) {
            $i$1 = $i$0;
            $m2$2 = $m2$0;
            break;
           } else {
            $j$0 = 0;
            $m1$1 = $m1$0;
            $m2$1 = $m2$0;
           }
           while (1) {
            if (($j$0 | 0) >= ($5 | 0)) {
             $m1$1$lcssa = $m1$1;
             $m2$1$lcssa = $m2$1;
             break;
            }
            HEAPF64[$m2$1 >> 3] = +HEAPF64[$m1$1 >> 3];
            $j$0 = $j$0 + 1 | 0;
            $m1$1 = $m1$1 + 8 | 0;
            $m2$1 = $m2$1 + 8 | 0;
           }
           $i$0 = $i$0 + 1 | 0;
           $m1$0 = $m1$1$lcssa;
           $m2$0 = $m2$1$lcssa;
          }
          while (1) {
           if (($i$1 | 0) >= ($5 | 0)) break L91;
           HEAPF64[(HEAP32[$ev >> 2] | 0) + ($i$1 << 3) >> 3] = 0.0;
           $j$1 = 0;
           $m2$3 = $m2$2;
           while (1) {
            if (($j$1 | 0) >= ($5 | 0)) {
             $m2$3$lcssa = $m2$3;
             break;
            }
            HEAPF64[$m2$3 >> 3] = 0.0;
            $j$1 = $j$1 + 1 | 0;
            $m2$3 = $m2$3 + 8 | 0;
           }
           $i$1 = $i$1 + 1 | 0;
           $m2$2 = $m2$3$lcssa;
          }
         } while (0);
         _arMatrixFree($17) | 0;
         $$0 = 0;
         break L1;
        }
       } while (0);
       _arMatrixFree($17) | 0;
       $$0 = -1;
       break;
      }
     }
     _arMatrixFree($17) | 0;
     $$0 = -1;
    } else $$0 = -1;
   } else $$0 = -1;
  } else $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabeling($image, $xsize, $ysize, $pixFormat, $debugMode, $labelingMode, $labelingThresh, $imageProcMode, $labelInfo, $image_thresh) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $pixFormat = $pixFormat | 0;
 $debugMode = $debugMode | 0;
 $labelingMode = $labelingMode | 0;
 $labelingThresh = $labelingThresh | 0;
 $imageProcMode = $imageProcMode | 0;
 $labelInfo = $labelInfo | 0;
 $image_thresh = $image_thresh | 0;
 var $$0 = 0, $107 = 0, $123 = 0, $21 = 0, $39 = 0, $5 = 0, $55 = 0, $73 = 0, $89 = 0;
 L1 : do switch ($debugMode | 0) {
 case 0:
  {
   switch ($labelingMode | 0) {
   case 1:
    {
     if ($image_thresh | 0) {
      $$0 = _arLabelingSubDBZ($image, $xsize, $ysize, $image_thresh, $labelInfo) | 0;
      break L1;
     }
     switch ($imageProcMode | 0) {
     case 0:
      {
       switch ($pixFormat | 1 | 0) {
       case 1:
        {
         $$0 = _arLabelingSubDBR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       case 3:
        {
         $$0 = _arLabelingSubDBR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       default:
        {
         $5 = $pixFormat | 2;
         if (($5 | 0) == 6) {
          $$0 = _arLabelingSubDBRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         if (($5 | 0) == 14 | ($pixFormat | 8 | 0) == 13) {
          $$0 = _arLabelingSubDBRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         switch ($pixFormat | 0) {
         case 8:
          {
           $$0 = _arLabelingSubDBRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 7:
          {
           $$0 = _arLabelingSubDBRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 9:
          {
           $$0 = _arLabelingSubDBR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 10:
          {
           $$0 = _arLabelingSubDBR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 11:
          {
           $$0 = _arLabelingSubDBR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         default:
          _exit(0);
         }
        }
       }
       break;
      }
     case 1:
      {
       switch ($pixFormat | 1 | 0) {
       case 1:
        {
         $$0 = _arLabelingSubDBI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       case 3:
        {
         $$0 = _arLabelingSubDBI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       default:
        {
         $21 = $pixFormat | 2;
         if (($21 | 0) == 6) {
          $$0 = _arLabelingSubDBIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         if (($21 | 0) == 14 | ($pixFormat | 8 | 0) == 13) {
          $$0 = _arLabelingSubDBIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         switch ($pixFormat | 0) {
         case 8:
          {
           $$0 = _arLabelingSubDBIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 7:
          {
           $$0 = _arLabelingSubDBICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 9:
          {
           $$0 = _arLabelingSubDBI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 10:
          {
           $$0 = _arLabelingSubDBI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 11:
          {
           $$0 = _arLabelingSubDBI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         default:
          _exit(0);
         }
        }
       }
       break;
      }
     default:
      _exit(0);
     }
     break;
    }
   case 0:
    {
     if ($image_thresh | 0) {
      $$0 = _arLabelingSubDWZ($image, $xsize, $ysize, $image_thresh, $labelInfo) | 0;
      break L1;
     }
     switch ($imageProcMode | 0) {
     case 0:
      {
       switch ($pixFormat | 1 | 0) {
       case 1:
        {
         $$0 = _arLabelingSubDWR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       case 3:
        {
         $$0 = _arLabelingSubDWR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       default:
        {
         $39 = $pixFormat | 2;
         if (($39 | 0) == 6) {
          $$0 = _arLabelingSubDWRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         if (($39 | 0) == 14 | ($pixFormat | 8 | 0) == 13) {
          $$0 = _arLabelingSubDWRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         switch ($pixFormat | 0) {
         case 8:
          {
           $$0 = _arLabelingSubDWRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 7:
          {
           $$0 = _arLabelingSubDWRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 9:
          {
           $$0 = _arLabelingSubDWR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 10:
          {
           $$0 = _arLabelingSubDWR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 11:
          {
           $$0 = _arLabelingSubDWR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         default:
          _exit(0);
         }
        }
       }
       break;
      }
     case 1:
      {
       switch ($pixFormat | 1 | 0) {
       case 1:
        {
         $$0 = _arLabelingSubDWI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       case 3:
        {
         $$0 = _arLabelingSubDWI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       default:
        {
         $55 = $pixFormat | 2;
         if (($55 | 0) == 6) {
          $$0 = _arLabelingSubDWIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         if (($55 | 0) == 14 | ($pixFormat | 8 | 0) == 13) {
          $$0 = _arLabelingSubDWIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         switch ($pixFormat | 0) {
         case 8:
          {
           $$0 = _arLabelingSubDWIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 7:
          {
           $$0 = _arLabelingSubDWICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 9:
          {
           $$0 = _arLabelingSubDWI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 10:
          {
           $$0 = _arLabelingSubDWI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 11:
          {
           $$0 = _arLabelingSubDWI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         default:
          _exit(0);
         }
        }
       }
       break;
      }
     default:
      _exit(0);
     }
     break;
    }
   default:
    _exit(0);
   }
   break;
  }
 case 1:
  {
   switch ($labelingMode | 0) {
   case 1:
    {
     if ($image_thresh | 0) {
      $$0 = _arLabelingSubEBZ($image, $xsize, $ysize, $image_thresh, $labelInfo) | 0;
      break L1;
     }
     switch ($imageProcMode | 0) {
     case 0:
      {
       switch ($pixFormat | 1 | 0) {
       case 1:
        {
         $$0 = _arLabelingSubEBR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       case 3:
        {
         $$0 = _arLabelingSubEBR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       default:
        {
         $73 = $pixFormat | 2;
         if (($73 | 0) == 6) {
          $$0 = _arLabelingSubEBRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         if (($73 | 0) == 14 | ($pixFormat | 8 | 0) == 13) {
          $$0 = _arLabelingSubEBRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         switch ($pixFormat | 0) {
         case 8:
          {
           $$0 = _arLabelingSubEBRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 7:
          {
           $$0 = _arLabelingSubEBRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 9:
          {
           $$0 = _arLabelingSubEBR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 10:
          {
           $$0 = _arLabelingSubEBR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 11:
          {
           $$0 = _arLabelingSubEBR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         default:
          _exit(0);
         }
        }
       }
       break;
      }
     case 1:
      {
       switch ($pixFormat | 1 | 0) {
       case 1:
        {
         $$0 = _arLabelingSubEBI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       case 3:
        {
         $$0 = _arLabelingSubEBI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       default:
        {
         $89 = $pixFormat | 2;
         if (($89 | 0) == 6) {
          $$0 = _arLabelingSubEBIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         if (($89 | 0) == 14 | ($pixFormat | 8 | 0) == 13) {
          $$0 = _arLabelingSubEBIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         switch ($pixFormat | 0) {
         case 8:
          {
           $$0 = _arLabelingSubEBIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 7:
          {
           $$0 = _arLabelingSubEBICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 9:
          {
           $$0 = _arLabelingSubEBI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 10:
          {
           $$0 = _arLabelingSubEBI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 11:
          {
           $$0 = _arLabelingSubEBI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         default:
          _exit(0);
         }
        }
       }
       break;
      }
     default:
      _exit(0);
     }
     break;
    }
   case 0:
    {
     if ($image_thresh | 0) {
      $$0 = _arLabelingSubEWZ($image, $xsize, $ysize, $image_thresh, $labelInfo) | 0;
      break L1;
     }
     switch ($imageProcMode | 0) {
     case 0:
      {
       switch ($pixFormat | 1 | 0) {
       case 1:
        {
         $$0 = _arLabelingSubEWR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       case 3:
        {
         $$0 = _arLabelingSubEWR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       default:
        {
         $107 = $pixFormat | 2;
         if (($107 | 0) == 6) {
          $$0 = _arLabelingSubEWRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         if (($107 | 0) == 14 | ($pixFormat | 8 | 0) == 13) {
          $$0 = _arLabelingSubEWRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         switch ($pixFormat | 0) {
         case 8:
          {
           $$0 = _arLabelingSubEWRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 7:
          {
           $$0 = _arLabelingSubEWRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 9:
          {
           $$0 = _arLabelingSubEWR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 10:
          {
           $$0 = _arLabelingSubEWR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 11:
          {
           $$0 = _arLabelingSubEWR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         default:
          _exit(0);
         }
        }
       }
       break;
      }
     case 1:
      {
       switch ($pixFormat | 1 | 0) {
       case 1:
        {
         $$0 = _arLabelingSubEWI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       case 3:
        {
         $$0 = _arLabelingSubEWI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
         break L1;
         break;
        }
       default:
        {
         $123 = $pixFormat | 2;
         if (($123 | 0) == 6) {
          $$0 = _arLabelingSubEWIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         if (($123 | 0) == 14 | ($pixFormat | 8 | 0) == 13) {
          $$0 = _arLabelingSubEWIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
          break L1;
         }
         switch ($pixFormat | 0) {
         case 8:
          {
           $$0 = _arLabelingSubEWIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 7:
          {
           $$0 = _arLabelingSubEWICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 9:
          {
           $$0 = _arLabelingSubEWI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 10:
          {
           $$0 = _arLabelingSubEWI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         case 11:
          {
           $$0 = _arLabelingSubEWI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
           break L1;
           break;
          }
         default:
          _exit(0);
         }
        }
       }
       break;
      }
     default:
      _exit(0);
     }
     break;
    }
   default:
    _exit(0);
   }
   break;
  }
 default:
  _exit(0);
 } while (0);
 return $$0 | 0;
}

function _arGetTransMatMultiSquare2($handle, $marker_info, $marker_num, $config, $robustFlag) {
 $handle = $handle | 0;
 $marker_info = $marker_info | 0;
 $marker_num = $marker_num | 0;
 $config = $config | 0;
 $robustFlag = $robustFlag | 0;
 var $$0 = 0.0, $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $105 = 0, $108 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $117 = 0, $119 = 0, $122 = 0, $129 = 0, $139 = 0, $149 = 0, $160 = 0, $18 = 0.0, $198 = 0, $2 = 0, $209 = 0, $212 = 0, $213 = 0, $214 = 0.0, $217 = 0.0, $220 = 0.0, $223 = 0.0, $227 = 0.0, $228 = 0, $229 = 0.0, $230 = 0, $238 = 0.0, $239 = 0.0, $248 = 0.0, $249 = 0.0, $258 = 0.0, $259 = 0.0, $268 = 0.0, $269 = 0.0, $282 = 0, $286 = 0, $288 = 0, $3 = 0, $33 = 0, $36 = 0, $38 = 0, $41 = 0, $45 = 0, $5 = 0, $57 = 0.0, $72 = 0, $73 = 0, $75 = 0, $77 = 0, $84 = 0, $9 = 0, $err$0 = 0.0, $err$1 = 0.0, $err$2 = 0.0, $err$3 = 0.0, $err$4 = 0.0, $err$5 = 0.0, $err$6 = 0.0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $i$8 = 0, $i$9 = 0, $j$0 = 0, $j$1 = 0, $j$10 = 0, $j$2 = 0, $j$3 = 0, $j$4 = 0, $j$5 = 0, $j$6 = 0, $j$7 = 0, $j$8 = 0, $j$9 = 0, $k$0 = 0, $k$0$lcssa = 0, $k$1 = 0, $k$2 = 0, $k$2$lcssa = 0, $k$3 = 0, $k$4 = 0, $max$0 = 0, $max$0$lcssa = 0, $max$1 = 0, $max$2 = 0, $maxArea$0 = 0, $maxArea$1 = 0, $maxArea$2 = 0, $trans1 = 0, $trans2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vnum$0 = 0, $vnum$0$lcssa = 0, $vnum$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 200 | 0;
 $vararg_buffer = sp + 192 | 0;
 $trans1 = sp + 96 | 0;
 $trans2 = sp;
 $0 = $config + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $config + 112 | 0;
 $3 = $config + 120 | 0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) >= ($1 | 0)) break;
  $5 = HEAP32[$config >> 2] | 0;
  if (!(HEAP32[$5 + ($i$0 * 320 | 0) + 4 >> 2] | 0)) {
   $11 = $5 + ($i$0 * 320 | 0) | 0;
   $j$0 = 0;
   $k$0 = -1;
   while (1) {
    if (($j$0 | 0) >= ($marker_num | 0)) {
     $k$0$lcssa = $k$0;
     break;
    }
    if ((HEAP32[$marker_info + ($j$0 << 8) + 8 >> 2] | 0) == (HEAP32[$11 >> 2] | 0)) {
     $18 = +HEAPF64[$marker_info + ($j$0 << 8) + 40 >> 3];
     if ($18 < +HEAPF64[$2 >> 3]) $k$1 = $k$0; else if (($k$0 | 0) == -1) $k$1 = $j$0; else if (+HEAPF64[$marker_info + ($k$0 << 8) + 40 >> 3] < $18) $k$1 = $j$0; else $k$1 = $k$0;
    } else $k$1 = $k$0;
    $j$0 = $j$0 + 1 | 0;
    $k$0 = $k$1;
   }
   HEAP32[$5 + ($i$0 * 320 | 0) + 304 >> 2] = $k$0$lcssa;
   if (($k$0$lcssa | 0) > -1) HEAP32[$marker_info + ($k$0$lcssa << 8) + 16 >> 2] = HEAP32[$marker_info + ($k$0$lcssa << 8) + 20 >> 2];
  } else {
   $9 = $5 + ($i$0 * 320 | 0) + 312 | 0;
   $10 = $5 + ($i$0 * 320 | 0) | 0;
   $j$1 = 0;
   $k$2 = -1;
   while (1) {
    if (($j$1 | 0) >= ($marker_num | 0)) {
     $k$2$lcssa = $k$2;
     break;
    }
    $33 = HEAP32[$marker_info + ($j$1 << 8) + 12 >> 2] | 0;
    if (!$33) {
     $36 = $marker_info + ($j$1 << 8) + 248 | 0;
     $38 = HEAP32[$36 >> 2] | 0;
     $41 = HEAP32[$36 + 4 >> 2] | 0;
     if (($38 | 0) == 0 & ($41 | 0) == 0) label = 20; else {
      $45 = $9;
      if (($38 | 0) == (HEAP32[$45 >> 2] | 0) ? ($41 | 0) == (HEAP32[$45 + 4 >> 2] | 0) : 0) label = 21; else $k$3 = $k$2;
     }
    } else label = 20;
    if ((label | 0) == 20) {
     label = 0;
     if (($33 | 0) == (HEAP32[$10 >> 2] | 0)) label = 21; else $k$3 = $k$2;
    }
    if ((label | 0) == 21) {
     label = 0;
     $57 = +HEAPF64[$marker_info + ($j$1 << 8) + 48 >> 3];
     if ($57 < +HEAPF64[$3 >> 3]) $k$3 = $k$2; else if (($k$2 | 0) == -1) $k$3 = $j$1; else if (+HEAPF64[$marker_info + ($k$2 << 8) + 48 >> 3] < $57) $k$3 = $j$1; else $k$3 = $k$2;
    }
    $j$1 = $j$1 + 1 | 0;
    $k$2 = $k$3;
   }
   HEAP32[$5 + ($i$0 * 320 | 0) + 304 >> 2] = $k$2$lcssa;
   if (($k$2$lcssa | 0) > -1) HEAP32[$marker_info + ($k$2$lcssa << 8) + 16 >> 2] = HEAP32[$marker_info + ($k$2$lcssa << 8) + 24 >> 2];
  }
  $i$0 = $i$0 + 1 | 0;
 }
 $72 = $1;
 $i$1 = 0;
 $max$0 = 0;
 $maxArea$0 = 0;
 $vnum$0 = 0;
 while (1) {
  if (($i$1 | 0) >= ($72 | 0)) {
   $max$0$lcssa = $max$0;
   $vnum$0$lcssa = $vnum$0;
   break;
  }
  $73 = HEAP32[$config >> 2] | 0;
  $75 = HEAP32[$73 + ($i$1 * 320 | 0) + 304 >> 2] | 0;
  do if (($75 | 0) < 0) {
   $max$2 = $max$0;
   $maxArea$2 = $maxArea$0;
   $vnum$1 = $vnum$0;
  } else {
   $77 = $marker_info + ($75 << 8) | 0;
   if (+_arGetTransMatSquare($handle, $77, +HEAPF64[$73 + ($i$1 * 320 | 0) + 8 >> 3], $trans2) > 4.0) {
    HEAP32[(HEAP32[$config >> 2] | 0) + ($i$1 * 320 | 0) + 304 >> 2] = -1;
    $84 = $marker_info + ($75 << 8) + 236 | 0;
    if (HEAP32[$84 >> 2] | 0) {
     $max$2 = $max$0;
     $maxArea$2 = $maxArea$0;
     $vnum$1 = $vnum$0;
     break;
    }
    HEAP32[$84 >> 2] = 7;
    $max$2 = $max$0;
    $maxArea$2 = $maxArea$0;
    $vnum$1 = $vnum$0;
    break;
   }
   $$pre39 = HEAP32[$77 >> 2] | 0;
   L45 : do if (($vnum$0 | 0) == 0 | ($maxArea$0 | 0) < ($$pre39 | 0)) {
    $j$2 = 0;
    while (1) {
     if (($j$2 | 0) == 3) {
      $max$1 = $i$1;
      $maxArea$1 = $$pre39;
      break L45;
     } else $k$4 = 0;
     while (1) {
      if (($k$4 | 0) == 4) break;
      HEAPF64[$trans1 + ($j$2 << 5) + ($k$4 << 3) >> 3] = +HEAPF64[$trans2 + ($j$2 << 5) + ($k$4 << 3) >> 3];
      $k$4 = $k$4 + 1 | 0;
     }
     $j$2 = $j$2 + 1 | 0;
    }
   } else {
    $max$1 = $max$0;
    $maxArea$1 = $maxArea$0;
   } while (0);
   $max$2 = $max$1;
   $maxArea$2 = $maxArea$1;
   $vnum$1 = $vnum$0 + 1 | 0;
  } while (0);
  $72 = HEAP32[$0 >> 2] | 0;
  $i$1 = $i$1 + 1 | 0;
  $max$0 = $max$2;
  $maxArea$0 = $maxArea$2;
  $vnum$0 = $vnum$1;
 }
 L55 : do if (!$vnum$0$lcssa) label = 43; else if (($vnum$0$lcssa | 0) < (HEAP32[$config + 128 >> 2] | 0)) label = 43; else {
  _arUtilMatMul($trans1, (HEAP32[$config >> 2] | 0) + ($max$0$lcssa * 320 | 0) + 112 | 0, $trans2) | 0;
  $103 = $vnum$0$lcssa << 2;
  $105 = _malloc($vnum$0$lcssa << 6) | 0;
  if (!$105) {
   _arLog(3, 4491, $vararg_buffer);
   _exit(1);
  }
  $108 = _malloc($vnum$0$lcssa * 96 | 0) | 0;
  if (!$108) {
   _arLog(3, 4491, $vararg_buffer1);
   _exit(1);
  }
  $110 = HEAP32[$0 >> 2] | 0;
  $i$2 = 0;
  $j$3 = 0;
  while (1) {
   if (($i$2 | 0) >= ($110 | 0)) break;
   $112 = HEAP32[$config >> 2] | 0;
   $114 = HEAP32[$112 + ($i$2 * 320 | 0) + 304 >> 2] | 0;
   if (($114 | 0) < 0) $j$4 = $j$3; else {
    $117 = HEAP32[$marker_info + ($114 << 8) + 16 >> 2] | 0;
    $119 = (4 - $117 | 0) % 4 | 0;
    $122 = $j$3 << 3;
    HEAPF64[$105 + ($122 << 3) >> 3] = +HEAPF64[$marker_info + ($114 << 8) + 168 + ($119 << 4) >> 3];
    HEAPF64[$105 + (($122 | 1) << 3) >> 3] = +HEAPF64[$marker_info + ($114 << 8) + 168 + ($119 << 4) + 8 >> 3];
    $129 = (5 - $117 | 0) % 4 | 0;
    HEAPF64[$105 + (($122 | 2) << 3) >> 3] = +HEAPF64[$marker_info + ($114 << 8) + 168 + ($129 << 4) >> 3];
    HEAPF64[$105 + (($122 | 3) << 3) >> 3] = +HEAPF64[$marker_info + ($114 << 8) + 168 + ($129 << 4) + 8 >> 3];
    $139 = (6 - $117 | 0) % 4 | 0;
    HEAPF64[$105 + (($122 | 4) << 3) >> 3] = +HEAPF64[$marker_info + ($114 << 8) + 168 + ($139 << 4) >> 3];
    HEAPF64[$105 + (($122 | 5) << 3) >> 3] = +HEAPF64[$marker_info + ($114 << 8) + 168 + ($139 << 4) + 8 >> 3];
    $149 = (7 - $117 | 0) % 4 | 0;
    HEAPF64[$105 + (($122 | 6) << 3) >> 3] = +HEAPF64[$marker_info + ($114 << 8) + 168 + ($149 << 4) >> 3];
    HEAPF64[$105 + (($122 | 7) << 3) >> 3] = +HEAPF64[$marker_info + ($114 << 8) + 168 + ($149 << 4) + 8 >> 3];
    $160 = $j$3 * 12 | 0;
    HEAPF64[$108 + ($160 << 3) >> 3] = +HEAPF64[$112 + ($i$2 * 320 | 0) + 208 >> 3];
    HEAPF64[$108 + (($160 | 1) << 3) >> 3] = +HEAPF64[$112 + ($i$2 * 320 | 0) + 216 >> 3];
    HEAPF64[$108 + (($160 | 2) << 3) >> 3] = +HEAPF64[$112 + ($i$2 * 320 | 0) + 224 >> 3];
    HEAPF64[$108 + (($160 | 3) << 3) >> 3] = +HEAPF64[$112 + ($i$2 * 320 | 0) + 232 >> 3];
    HEAPF64[$108 + ($160 + 4 << 3) >> 3] = +HEAPF64[$112 + ($i$2 * 320 | 0) + 240 >> 3];
    HEAPF64[$108 + ($160 + 5 << 3) >> 3] = +HEAPF64[$112 + ($i$2 * 320 | 0) + 248 >> 3];
    HEAPF64[$108 + ($160 + 6 << 3) >> 3] = +HEAPF64[$112 + ($i$2 * 320 | 0) + 256 >> 3];
    HEAPF64[$108 + ($160 + 7 << 3) >> 3] = +HEAPF64[$112 + ($i$2 * 320 | 0) + 264 >> 3];
    HEAPF64[$108 + ($160 + 8 << 3) >> 3] = +HEAPF64[$112 + ($i$2 * 320 | 0) + 272 >> 3];
    HEAPF64[$108 + ($160 + 9 << 3) >> 3] = +HEAPF64[$112 + ($i$2 * 320 | 0) + 280 >> 3];
    $198 = HEAP32[$config >> 2] | 0;
    HEAPF64[$108 + ($160 + 10 << 3) >> 3] = +HEAPF64[$198 + ($i$2 * 320 | 0) + 288 >> 3];
    HEAPF64[$108 + ($160 + 11 << 3) >> 3] = +HEAPF64[$198 + ($i$2 * 320 | 0) + 296 >> 3];
    $j$4 = $j$3 + 1 | 0;
   }
   $i$2 = $i$2 + 1 | 0;
   $j$3 = $j$4;
  }
  $209 = $config + 104 | 0;
  $212 = ($robustFlag | 0) != 0;
  if (!(HEAP32[$209 >> 2] | 0)) {
   $213 = $config + 8 | 0;
   $214 = +_arGetTransMat($handle, $trans2, $105, $108, $103, $213);
   if ($212 & $214 >= 20.0) {
    _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .8) | 0;
    $217 = +_arGetTransMatRobust($handle, $trans2, $105, $108, $103, $213);
    if (!($217 >= 20.0)) $err$0 = $217; else {
     _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .6) | 0;
     $220 = +_arGetTransMatRobust($handle, $trans2, $105, $108, $103, $213);
     if (!($220 >= 20.0)) $err$0 = $220; else {
      _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .4) | 0;
      $223 = +_arGetTransMatRobust($handle, $trans2, $105, $108, $103, $213);
      if (!($223 >= 20.0)) $err$0 = $223; else {
       _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, 0.0) | 0;
       $err$0 = +_arGetTransMatRobust($handle, $trans2, $105, $108, $103, $213);
      }
     }
    }
   } else $err$0 = $214;
   _free($108);
   _free($105);
   $err$6 = $err$0;
  } else {
   $227 = +_arGetTransMat($handle, $trans2, $105, $108, $103, $trans1);
   $228 = $config + 8 | 0;
   $229 = +_arGetTransMat($handle, $228, $105, $108, $103, $228);
   $230 = $227 < $229;
   L80 : do if ($212) {
    L82 : do if ($230) {
     $j$5 = 0;
     while (1) {
      if (($j$5 | 0) == 3) {
       $err$1 = $227;
       break L82;
      } else $i$3 = 0;
      while (1) {
       if (($i$3 | 0) == 4) break;
       HEAPF64[$config + 8 + ($j$5 << 5) + ($i$3 << 3) >> 3] = +HEAPF64[$trans1 + ($j$5 << 5) + ($i$3 << 3) >> 3];
       $i$3 = $i$3 + 1 | 0;
      }
      $j$5 = $j$5 + 1 | 0;
     }
    } else $err$1 = $229; while (0);
    if (!($err$1 >= 20.0)) $err$5 = $err$1; else {
     _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .8) | 0;
     $238 = +_arGetTransMatRobust($handle, $trans2, $105, $108, $103, $trans1);
     $239 = +_arGetTransMatRobust($handle, $228, $105, $108, $103, $228);
     L91 : do if ($238 < $239) {
      $j$6 = 0;
      while (1) {
       if (($j$6 | 0) == 3) {
        $err$2 = $238;
        break L91;
       } else $i$4 = 0;
       while (1) {
        if (($i$4 | 0) == 4) break;
        HEAPF64[$config + 8 + ($j$6 << 5) + ($i$4 << 3) >> 3] = +HEAPF64[$trans1 + ($j$6 << 5) + ($i$4 << 3) >> 3];
        $i$4 = $i$4 + 1 | 0;
       }
       $j$6 = $j$6 + 1 | 0;
      }
     } else $err$2 = $239; while (0);
     if (!($err$2 >= 20.0)) $err$5 = $err$2; else {
      _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .6) | 0;
      $248 = +_arGetTransMatRobust($handle, $trans2, $105, $108, $103, $trans1);
      $249 = +_arGetTransMatRobust($handle, $228, $105, $108, $103, $228);
      L100 : do if ($248 < $249) {
       $j$7 = 0;
       while (1) {
        if (($j$7 | 0) == 3) {
         $err$3 = $248;
         break L100;
        } else $i$5 = 0;
        while (1) {
         if (($i$5 | 0) == 4) break;
         HEAPF64[$config + 8 + ($j$7 << 5) + ($i$5 << 3) >> 3] = +HEAPF64[$trans1 + ($j$7 << 5) + ($i$5 << 3) >> 3];
         $i$5 = $i$5 + 1 | 0;
        }
        $j$7 = $j$7 + 1 | 0;
       }
      } else $err$3 = $249; while (0);
      if (!($err$3 >= 20.0)) $err$5 = $err$3; else {
       _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .4) | 0;
       $258 = +_arGetTransMatRobust($handle, $trans2, $105, $108, $103, $trans1);
       $259 = +_arGetTransMatRobust($handle, $228, $105, $108, $103, $228);
       L109 : do if ($258 < $259) {
        $j$8 = 0;
        while (1) {
         if (($j$8 | 0) == 3) {
          $err$4 = $258;
          break L109;
         } else $i$6 = 0;
         while (1) {
          if (($i$6 | 0) == 4) break;
          HEAPF64[$config + 8 + ($j$8 << 5) + ($i$6 << 3) >> 3] = +HEAPF64[$trans1 + ($j$8 << 5) + ($i$6 << 3) >> 3];
          $i$6 = $i$6 + 1 | 0;
         }
         $j$8 = $j$8 + 1 | 0;
        }
       } else $err$4 = $259; while (0);
       if (!($err$4 >= 20.0)) $err$5 = $err$4; else {
        _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, 0.0) | 0;
        $268 = +_arGetTransMatRobust($handle, $trans2, $105, $108, $103, $trans1);
        $269 = +_arGetTransMatRobust($handle, $228, $105, $108, $103, $228);
        if ($268 < $269) {
         $j$9 = 0;
         while (1) {
          if (($j$9 | 0) == 3) {
           $err$5 = $268;
           break L80;
          } else $i$7 = 0;
          while (1) {
           if (($i$7 | 0) == 4) break;
           HEAPF64[$config + 8 + ($j$9 << 5) + ($i$7 << 3) >> 3] = +HEAPF64[$trans1 + ($j$9 << 5) + ($i$7 << 3) >> 3];
           $i$7 = $i$7 + 1 | 0;
          }
          $j$9 = $j$9 + 1 | 0;
         }
        } else $err$5 = $269;
       }
      }
     }
    }
   } else if ($230) {
    $j$10 = 0;
    while (1) {
     if (($j$10 | 0) == 3) {
      $err$5 = $227;
      break L80;
     } else $i$8 = 0;
     while (1) {
      if (($i$8 | 0) == 4) break;
      HEAPF64[$config + 8 + ($j$10 << 5) + ($i$8 << 3) >> 3] = +HEAPF64[$trans1 + ($j$10 << 5) + ($i$8 << 3) >> 3];
      $i$8 = $i$8 + 1 | 0;
     }
     $j$10 = $j$10 + 1 | 0;
    }
   } else $err$5 = $229; while (0);
   _free($108);
   _free($105);
   $err$6 = $err$5;
  }
  if ($err$6 < 20.0) {
   HEAP32[$209 >> 2] = 1;
   $$0 = $err$6;
   break;
  }
  HEAP32[$209 >> 2] = 0;
  $282 = HEAP32[$0 >> 2] | 0;
  $i$9 = 0;
  while (1) {
   if (($i$9 | 0) >= ($282 | 0)) {
    $$0 = $err$6;
    break L55;
   }
   $286 = HEAP32[(HEAP32[$config >> 2] | 0) + ($i$9 * 320 | 0) + 304 >> 2] | 0;
   if (($286 | 0) >= 0) {
    $288 = $marker_info + ($286 << 8) + 236 | 0;
    if (!(HEAP32[$288 >> 2] | 0)) HEAP32[$288 >> 2] = 8;
   }
   $i$9 = $i$9 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 43) {
  HEAP32[$config + 104 >> 2] = 0;
  $$0 = -1.0;
 }
 STACKTOP = sp;
 return +$$0;
}

function __ZNSt3__112__next_primeEj($n) {
 $n = $n | 0;
 var $$0$ph$i = 0, $$0$ph$i$lcssa = 0, $$0$ph$i13 = 0, $$0$ph$i13$lcssa = 0, $$8 = 0, $$9 = 0, $$k0$0 = 0, $$lcssa = 0, $$lcssa73 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $10 = 0, $102 = 0, $103 = 0, $107 = 0, $108 = 0, $11 = 0, $112 = 0, $113 = 0, $117 = 0, $118 = 0, $122 = 0, $123 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $133 = 0, $137 = 0, $138 = 0, $14 = 0, $142 = 0, $143 = 0, $147 = 0, $148 = 0, $152 = 0, $153 = 0, $157 = 0, $158 = 0, $162 = 0, $163 = 0, $167 = 0, $168 = 0, $172 = 0, $173 = 0, $177 = 0, $178 = 0, $182 = 0, $183 = 0, $187 = 0, $188 = 0, $192 = 0, $193 = 0, $197 = 0, $198 = 0, $2 = 0, $202 = 0, $203 = 0, $207 = 0, $208 = 0, $21 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $222 = 0, $223 = 0, $227 = 0, $228 = 0, $232 = 0, $233 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $247 = 0, $248 = 0, $252 = 0, $253 = 0, $257 = 0, $258 = 0, $262 = 0, $263 = 0, $267 = 0, $268 = 0, $27 = 0, $273 = 0, $274 = 0, $28 = 0, $3 = 0, $33 = 0, $37 = 0, $38 = 0, $42 = 0, $43 = 0, $47 = 0, $48 = 0, $52 = 0, $53 = 0, $57 = 0, $58 = 0, $62 = 0, $63 = 0, $67 = 0, $68 = 0, $72 = 0, $73 = 0, $77 = 0, $78 = 0, $82 = 0, $83 = 0, $87 = 0, $88 = 0, $9 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $__len$0$i = 0, $__len$0$i$lcssa72 = 0, $__len$0$i15 = 0, $__len$0$i15$lcssa75 = 0, $__len$0$ph$i = 0, $__len$0$ph$i12 = 0, $i$0 = 0, $in$0 = 0, $j$0 = 0, $k0$0 = 0, $storemerge = 0, label = 0;
 L1 : do if ($n >>> 0 < 212) {
  $$0$ph$i = 2372;
  $__len$0$ph$i = 48;
  L2 : while (1) {
   $__len$0$i = $__len$0$ph$i;
   while (1) {
    if (!$__len$0$i) {
     $$0$ph$i$lcssa = $$0$ph$i;
     break L2;
    }
    $2 = ($__len$0$i | 0) / 2 | 0;
    $3 = $$0$ph$i + ($2 << 2) | 0;
    if ((HEAP32[$3 >> 2] | 0) >>> 0 < $n >>> 0) {
     $$lcssa = $2;
     $$lcssa73 = $3;
     $__len$0$i$lcssa72 = $__len$0$i;
     break;
    } else $__len$0$i = $2;
   }
   $$0$ph$i = $$lcssa73 + 4 | 0;
   $__len$0$ph$i = $__len$0$i$lcssa72 + -1 - $$lcssa | 0;
  }
  $$8 = HEAP32[$$0$ph$i$lcssa >> 2] | 0;
 } else {
  $9 = ($n >>> 0) / 210 | 0;
  $10 = $9 * 210 | 0;
  $11 = $n - $10 | 0;
  $$0$ph$i13 = 2564;
  $__len$0$ph$i12 = 48;
  L10 : while (1) {
   $__len$0$i15 = $__len$0$ph$i12;
   while (1) {
    if (!$__len$0$i15) {
     $$0$ph$i13$lcssa = $$0$ph$i13;
     break L10;
    }
    $13 = ($__len$0$i15 | 0) / 2 | 0;
    $14 = $$0$ph$i13 + ($13 << 2) | 0;
    if ((HEAP32[$14 >> 2] | 0) >>> 0 < $11 >>> 0) {
     $$lcssa76 = $13;
     $$lcssa77 = $14;
     $__len$0$i15$lcssa75 = $__len$0$i15;
     break;
    } else $__len$0$i15 = $13;
   }
   $$0$ph$i13 = $$lcssa77 + 4 | 0;
   $__len$0$ph$i12 = $__len$0$i15$lcssa75 + -1 - $$lcssa76 | 0;
  }
  $21 = $$0$ph$i13$lcssa - 2564 >> 2;
  $in$0 = $21;
  $k0$0 = $9;
  $storemerge = (HEAP32[2564 + ($21 << 2) >> 2] | 0) + $10 | 0;
  while (1) {
   $j$0 = 5;
   while (1) {
    if ($j$0 >>> 0 >= 47) {
     $i$0 = 211;
     label = 17;
     break;
    }
    $27 = HEAP32[2372 + ($j$0 << 2) >> 2] | 0;
    $28 = ($storemerge >>> 0) / ($27 >>> 0) | 0;
    if ($28 >>> 0 < $27 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($28, $27) | 0)) break; else $j$0 = $j$0 + 1 | 0;
   }
   L23 : do if ((label | 0) == 17) while (1) {
    label = 0;
    $33 = ($storemerge >>> 0) / ($i$0 >>> 0) | 0;
    if ($33 >>> 0 < $i$0 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($33, $i$0) | 0)) break L23;
    $37 = $i$0 + 10 | 0;
    $38 = ($storemerge >>> 0) / ($37 >>> 0) | 0;
    if ($38 >>> 0 < $37 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($38, $37) | 0)) break L23;
    $42 = $i$0 + 12 | 0;
    $43 = ($storemerge >>> 0) / ($42 >>> 0) | 0;
    if ($43 >>> 0 < $42 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($43, $42) | 0)) break L23;
    $47 = $i$0 + 16 | 0;
    $48 = ($storemerge >>> 0) / ($47 >>> 0) | 0;
    if ($48 >>> 0 < $47 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($48, $47) | 0)) break L23;
    $52 = $i$0 + 18 | 0;
    $53 = ($storemerge >>> 0) / ($52 >>> 0) | 0;
    if ($53 >>> 0 < $52 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($53, $52) | 0)) break L23;
    $57 = $i$0 + 22 | 0;
    $58 = ($storemerge >>> 0) / ($57 >>> 0) | 0;
    if ($58 >>> 0 < $57 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($58, $57) | 0)) break L23;
    $62 = $i$0 + 28 | 0;
    $63 = ($storemerge >>> 0) / ($62 >>> 0) | 0;
    if ($63 >>> 0 < $62 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($63, $62) | 0)) break L23;
    $67 = $i$0 + 30 | 0;
    $68 = ($storemerge >>> 0) / ($67 >>> 0) | 0;
    if ($68 >>> 0 < $67 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($68, $67) | 0)) break L23;
    $72 = $i$0 + 36 | 0;
    $73 = ($storemerge >>> 0) / ($72 >>> 0) | 0;
    if ($73 >>> 0 < $72 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($73, $72) | 0)) break L23;
    $77 = $i$0 + 40 | 0;
    $78 = ($storemerge >>> 0) / ($77 >>> 0) | 0;
    if ($78 >>> 0 < $77 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($78, $77) | 0)) break L23;
    $82 = $i$0 + 42 | 0;
    $83 = ($storemerge >>> 0) / ($82 >>> 0) | 0;
    if ($83 >>> 0 < $82 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($83, $82) | 0)) break L23;
    $87 = $i$0 + 46 | 0;
    $88 = ($storemerge >>> 0) / ($87 >>> 0) | 0;
    if ($88 >>> 0 < $87 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($88, $87) | 0)) break L23;
    $92 = $i$0 + 52 | 0;
    $93 = ($storemerge >>> 0) / ($92 >>> 0) | 0;
    if ($93 >>> 0 < $92 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($93, $92) | 0)) break L23;
    $97 = $i$0 + 58 | 0;
    $98 = ($storemerge >>> 0) / ($97 >>> 0) | 0;
    if ($98 >>> 0 < $97 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($98, $97) | 0)) break L23;
    $102 = $i$0 + 60 | 0;
    $103 = ($storemerge >>> 0) / ($102 >>> 0) | 0;
    if ($103 >>> 0 < $102 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($103, $102) | 0)) break L23;
    $107 = $i$0 + 66 | 0;
    $108 = ($storemerge >>> 0) / ($107 >>> 0) | 0;
    if ($108 >>> 0 < $107 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($108, $107) | 0)) break L23;
    $112 = $i$0 + 70 | 0;
    $113 = ($storemerge >>> 0) / ($112 >>> 0) | 0;
    if ($113 >>> 0 < $112 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($113, $112) | 0)) break L23;
    $117 = $i$0 + 72 | 0;
    $118 = ($storemerge >>> 0) / ($117 >>> 0) | 0;
    if ($118 >>> 0 < $117 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($118, $117) | 0)) break L23;
    $122 = $i$0 + 78 | 0;
    $123 = ($storemerge >>> 0) / ($122 >>> 0) | 0;
    if ($123 >>> 0 < $122 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($123, $122) | 0)) break L23;
    $127 = $i$0 + 82 | 0;
    $128 = ($storemerge >>> 0) / ($127 >>> 0) | 0;
    if ($128 >>> 0 < $127 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($128, $127) | 0)) break L23;
    $132 = $i$0 + 88 | 0;
    $133 = ($storemerge >>> 0) / ($132 >>> 0) | 0;
    if ($133 >>> 0 < $132 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($133, $132) | 0)) break L23;
    $137 = $i$0 + 96 | 0;
    $138 = ($storemerge >>> 0) / ($137 >>> 0) | 0;
    if ($138 >>> 0 < $137 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($138, $137) | 0)) break L23;
    $142 = $i$0 + 100 | 0;
    $143 = ($storemerge >>> 0) / ($142 >>> 0) | 0;
    if ($143 >>> 0 < $142 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($143, $142) | 0)) break L23;
    $147 = $i$0 + 102 | 0;
    $148 = ($storemerge >>> 0) / ($147 >>> 0) | 0;
    if ($148 >>> 0 < $147 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($148, $147) | 0)) break L23;
    $152 = $i$0 + 106 | 0;
    $153 = ($storemerge >>> 0) / ($152 >>> 0) | 0;
    if ($153 >>> 0 < $152 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($153, $152) | 0)) break L23;
    $157 = $i$0 + 108 | 0;
    $158 = ($storemerge >>> 0) / ($157 >>> 0) | 0;
    if ($158 >>> 0 < $157 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($158, $157) | 0)) break L23;
    $162 = $i$0 + 112 | 0;
    $163 = ($storemerge >>> 0) / ($162 >>> 0) | 0;
    if ($163 >>> 0 < $162 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($163, $162) | 0)) break L23;
    $167 = $i$0 + 120 | 0;
    $168 = ($storemerge >>> 0) / ($167 >>> 0) | 0;
    if ($168 >>> 0 < $167 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($168, $167) | 0)) break L23;
    $172 = $i$0 + 126 | 0;
    $173 = ($storemerge >>> 0) / ($172 >>> 0) | 0;
    if ($173 >>> 0 < $172 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($173, $172) | 0)) break L23;
    $177 = $i$0 + 130 | 0;
    $178 = ($storemerge >>> 0) / ($177 >>> 0) | 0;
    if ($178 >>> 0 < $177 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($178, $177) | 0)) break L23;
    $182 = $i$0 + 136 | 0;
    $183 = ($storemerge >>> 0) / ($182 >>> 0) | 0;
    if ($183 >>> 0 < $182 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($183, $182) | 0)) break L23;
    $187 = $i$0 + 138 | 0;
    $188 = ($storemerge >>> 0) / ($187 >>> 0) | 0;
    if ($188 >>> 0 < $187 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($188, $187) | 0)) break L23;
    $192 = $i$0 + 142 | 0;
    $193 = ($storemerge >>> 0) / ($192 >>> 0) | 0;
    if ($193 >>> 0 < $192 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($193, $192) | 0)) break L23;
    $197 = $i$0 + 148 | 0;
    $198 = ($storemerge >>> 0) / ($197 >>> 0) | 0;
    if ($198 >>> 0 < $197 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($198, $197) | 0)) break L23;
    $202 = $i$0 + 150 | 0;
    $203 = ($storemerge >>> 0) / ($202 >>> 0) | 0;
    if ($203 >>> 0 < $202 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($203, $202) | 0)) break L23;
    $207 = $i$0 + 156 | 0;
    $208 = ($storemerge >>> 0) / ($207 >>> 0) | 0;
    if ($208 >>> 0 < $207 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($208, $207) | 0)) break L23;
    $212 = $i$0 + 162 | 0;
    $213 = ($storemerge >>> 0) / ($212 >>> 0) | 0;
    if ($213 >>> 0 < $212 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($213, $212) | 0)) break L23;
    $217 = $i$0 + 166 | 0;
    $218 = ($storemerge >>> 0) / ($217 >>> 0) | 0;
    if ($218 >>> 0 < $217 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($218, $217) | 0)) break L23;
    $222 = $i$0 + 168 | 0;
    $223 = ($storemerge >>> 0) / ($222 >>> 0) | 0;
    if ($223 >>> 0 < $222 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($223, $222) | 0)) break L23;
    $227 = $i$0 + 172 | 0;
    $228 = ($storemerge >>> 0) / ($227 >>> 0) | 0;
    if ($228 >>> 0 < $227 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($228, $227) | 0)) break L23;
    $232 = $i$0 + 178 | 0;
    $233 = ($storemerge >>> 0) / ($232 >>> 0) | 0;
    if ($233 >>> 0 < $232 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($233, $232) | 0)) break L23;
    $237 = $i$0 + 180 | 0;
    $238 = ($storemerge >>> 0) / ($237 >>> 0) | 0;
    if ($238 >>> 0 < $237 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($238, $237) | 0)) break L23;
    $242 = $i$0 + 186 | 0;
    $243 = ($storemerge >>> 0) / ($242 >>> 0) | 0;
    if ($243 >>> 0 < $242 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($243, $242) | 0)) break L23;
    $247 = $i$0 + 190 | 0;
    $248 = ($storemerge >>> 0) / ($247 >>> 0) | 0;
    if ($248 >>> 0 < $247 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($248, $247) | 0)) break L23;
    $252 = $i$0 + 192 | 0;
    $253 = ($storemerge >>> 0) / ($252 >>> 0) | 0;
    if ($253 >>> 0 < $252 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($253, $252) | 0)) break L23;
    $257 = $i$0 + 196 | 0;
    $258 = ($storemerge >>> 0) / ($257 >>> 0) | 0;
    if ($258 >>> 0 < $257 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($258, $257) | 0)) break L23;
    $262 = $i$0 + 198 | 0;
    $263 = ($storemerge >>> 0) / ($262 >>> 0) | 0;
    if ($263 >>> 0 < $262 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($263, $262) | 0)) break L23;
    $267 = $i$0 + 208 | 0;
    $268 = ($storemerge >>> 0) / ($267 >>> 0) | 0;
    if ($268 >>> 0 < $267 >>> 0) {
     $$8 = $storemerge;
     break L1;
    }
    if (($storemerge | 0) == (Math_imul($268, $267) | 0)) break; else {
     $i$0 = $i$0 + 210 | 0;
     label = 17;
    }
   } while (0);
   $273 = $in$0 + 1 | 0;
   $274 = ($273 | 0) == 48;
   $$k0$0 = ($274 & 1) + $k0$0 | 0;
   $$9 = $274 ? 0 : $273;
   $in$0 = $$9;
   $k0$0 = $$k0$0;
   $storemerge = (HEAP32[2564 + ($$9 << 2) >> 2] | 0) + ($$k0$0 * 210 | 0) | 0;
  }
 } while (0);
 return $$8 | 0;
}

function _arPattGetIDGlobal($pattHandle, $imageProcMode, $pattDetectMode, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, $pattRatio, $codePatt, $dirPatt, $cfPatt, $codeMatrix, $dirMatrix, $cfMatrix, $matrixCodeType, $errorCorrected, $codeGlobalID_p) {
 $pattHandle = $pattHandle | 0;
 $imageProcMode = $imageProcMode | 0;
 $pattDetectMode = $pattDetectMode | 0;
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $pixelFormat = $pixelFormat | 0;
 $paramLTf = $paramLTf | 0;
 $vertex = $vertex | 0;
 $pattRatio = +$pattRatio;
 $codePatt = $codePatt | 0;
 $dirPatt = $dirPatt | 0;
 $cfPatt = $cfPatt | 0;
 $codeMatrix = $codeMatrix | 0;
 $dirMatrix = $dirMatrix | 0;
 $cfMatrix = $cfMatrix | 0;
 $matrixCodeType = $matrixCodeType | 0;
 $errorCorrected = $errorCorrected | 0;
 $codeGlobalID_p = $codeGlobalID_p | 0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $105 = 0, $109 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $129 = 0, $133 = 0, $140 = 0.0, $141 = 0, $144 = 0, $151 = 0, $153 = 0, $16 = 0, $162 = 0, $166 = 0, $17 = 0, $170 = 0, $172 = 0, $180 = 0, $181 = 0, $182 = 0, $21 = 0, $35 = 0, $46 = 0, $47 = 0, $50 = 0, $59 = 0, $63 = 0, $67 = 0, $68 = 0, $69 = 0, $74 = 0, $81 = 0, $85 = 0, $93 = 0, $bit$0$i = 0, $bit$1$i = 0, $bit$1$i$lcssa = 0, $bit$10$i = 0, $bit$10$i$lcssa = 0, $bit$11$i = 0, $bit$2$i = 0, $bit$3$i = 0, $bit$4$i = 0, $bit$4$i$lcssa = 0, $bit$5$i = 0, $bit$6$i = 0, $bit$7$i = 0, $bit$7$i$lcssa = 0, $bit$8$i = 0, $bit$9$i = 0, $code$i = 0, $contrastMin$0$i = 0, $contrastMin$1$i = 0, $contrastMin$1$i$lcssa = 0, $contrastMin$10$i = 0, $contrastMin$10$i$lcssa = 0, $contrastMin$11$i = 0, $contrastMin$12$i = 0, $contrastMin$2$i = 0, $contrastMin$3$i = 0, $contrastMin$4$i = 0, $contrastMin$4$i$lcssa = 0, $contrastMin$5$i = 0, $contrastMin$6$i = 0, $contrastMin$7$i = 0, $contrastMin$7$i$lcssa = 0, $contrastMin$8$i = 0, $contrastMin$9$i = 0, $corner$i = 0, $dirCode$i = 0, $errorCodeMtx$0 = 0, $errorCodePatt$0 = 0, $ext_patt = 0, $i$0$i = 0, $i$1$i = 0, $i$2$i = 0, $i$2$i$lcssa = 0, $i$3$i = 0, $i$4$i = 0, $i$4$off$i = 0, $i$5$i = 0, $i$6$i = 0, $i$6$off$i = 0, $j$0$i = 0, $j$0$off$i = 0, $j$1$i = 0, $j$2$i = 0, $j$2$off$i = 0, $j$3$i = 0, $max$0$i = 0, $max$0$i$lcssa = 0, $min$0$i = 0, $min$0$i$lcssa = 0, $or$cond4454$i = 0, $recd127$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12448 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $dirCode$i = sp + 12440 | 0;
 $corner$i = sp + 8 | 0;
 $code$i = sp;
 $recd127$i = sp + 12312 | 0;
 $ext_patt = sp + 24 | 0;
 $0 = $pattDetectMode | 1;
 do if (($pattDetectMode | 0) == 4 | ($0 | 0) == 3) {
  if (($matrixCodeType | 0) != 2830) {
   $166 = $matrixCodeType & 255;
   if ((_arPattGetImage2($imageProcMode, 2, $166, $166 * 3 | 0, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, $pattRatio, $ext_patt) | 0) < 0) {
    HEAP32[$codeMatrix >> 2] = -1;
    $errorCodeMtx$0 = -6;
    break;
   }
   $170 = _get_matrix_code($ext_patt, $166, $codeMatrix, $dirMatrix, $cfMatrix, $matrixCodeType, $errorCorrected) | 0;
   if (!$codeGlobalID_p) {
    $errorCodeMtx$0 = $170;
    break;
   }
   $172 = $codeGlobalID_p;
   HEAP32[$172 >> 2] = 0;
   HEAP32[$172 + 4 >> 2] = 0;
   $errorCodeMtx$0 = $170;
   break;
  }
  if ((_arPattGetImage2($imageProcMode, 2, 14, 42, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, .875, $ext_patt) | 0) < 0) {
   HEAP32[$codeMatrix >> 2] = -1;
   $errorCodeMtx$0 = -6;
   break;
  }
  HEAP32[$corner$i >> 2] = 0;
  HEAP32[$corner$i + 4 >> 2] = 182;
  HEAP32[$corner$i + 8 >> 2] = 195;
  HEAP32[$corner$i + 12 >> 2] = 13;
  $i$0$i = 0;
  $max$0$i = 0;
  $min$0$i = -1;
  while (1) {
   if (($i$0$i | 0) == 4) {
    $max$0$i$lcssa = $max$0$i;
    $min$0$i$lcssa = $min$0$i;
    break;
   }
   $12 = HEAP8[$ext_patt + (HEAP32[$corner$i + ($i$0$i << 2) >> 2] | 0) >> 0] | 0;
   $i$0$i = $i$0$i + 1 | 0;
   $max$0$i = ($12 & 255) > ($max$0$i & 255) ? $12 : $max$0$i;
   $min$0$i = ($12 & 255) < ($min$0$i & 255) ? $12 : $min$0$i;
  }
  $16 = $max$0$i$lcssa & 255;
  $17 = $min$0$i$lcssa & 255;
  L17 : do if (($16 - $17 | 0) < 30) {
   HEAP32[$dirMatrix >> 2] = 0;
   HEAPF64[$cfMatrix >> 3] = -1.0;
   $$0$i = -2;
   $151 = 0;
   $153 = 0;
  } else {
   $21 = ($16 + $17 | 0) >>> 1;
   $i$1$i = 0;
   while (1) {
    if (($i$1$i | 0) == 4) {
     $i$2$i = 0;
     break;
    }
    HEAP8[$dirCode$i + $i$1$i >> 0] = (HEAPU8[$ext_patt + (HEAP32[$corner$i + ($i$1$i << 2) >> 2] | 0) >> 0] | 0) >>> 0 < $21 >>> 0 & 1;
    $i$1$i = $i$1$i + 1 | 0;
   }
   while (1) {
    if (($i$2$i | 0) >= 4) {
     $i$2$i$lcssa = $i$2$i;
     break;
    }
    $35 = $i$2$i + 1 | 0;
    if ((HEAP8[$dirCode$i + $i$2$i >> 0] | 0) != 1) {
     $i$2$i = $35;
     continue;
    }
    if ((HEAP8[$dirCode$i + (($35 | 0) % 4 | 0) >> 0] | 0) != 1) {
     $i$2$i = $35;
     continue;
    }
    if (!(HEAP8[$dirCode$i + (($i$2$i + 2 | 0) % 4 | 0) >> 0] | 0)) {
     $i$2$i$lcssa = $i$2$i;
     break;
    } else $i$2$i = $35;
   }
   L29 : do switch ($i$2$i$lcssa | 0) {
   case 4:
    {
     HEAP32[$dirMatrix >> 2] = 0;
     HEAPF64[$cfMatrix >> 3] = -1.0;
     $$0$i = -3;
     $151 = 0;
     $153 = 0;
     break L17;
     break;
    }
   case 0:
    {
     $bit$0$i = 119;
     $contrastMin$0$i = 255;
     $j$0$i = 0;
     while (1) {
      if (($j$0$i | 0) == 14) {
       $contrastMin$12$i = $contrastMin$0$i;
       label = 55;
       break L29;
      }
      $j$0$off$i = $j$0$i + -3 | 0;
      $46 = ($j$0$i & -2 | 0) == 12;
      $47 = $j$0$i * 14 | 0;
      $bit$1$i = $bit$0$i;
      $contrastMin$1$i = $contrastMin$0$i;
      $i$3$i = 0;
      while (1) {
       if (($i$3$i | 0) == 14) {
        $bit$1$i$lcssa = $bit$1$i;
        $contrastMin$1$i$lcssa = $contrastMin$1$i;
        break;
       }
       if (($i$3$i + -3 | $j$0$off$i) >>> 0 < 8) {
        $bit$2$i = $bit$1$i;
        $contrastMin$2$i = $contrastMin$1$i;
       } else {
        $50 = $i$3$i & -2;
        if (($i$3$i | $j$0$i) >>> 0 < 2) {
         $bit$2$i = $bit$1$i;
         $contrastMin$2$i = $contrastMin$1$i;
        } else if ($46 & (($50 | 0) == 0 | ($50 | 0) == 12)) {
         $bit$2$i = $bit$1$i;
         $contrastMin$2$i = $contrastMin$1$i;
        } else {
         $59 = (HEAPU8[$ext_patt + ($i$3$i + $47) >> 0] | 0) - $21 | 0;
         HEAP8[$recd127$i + $bit$1$i >> 0] = $59 >>> 31;
         $63 = ($59 | 0) > -1 ? $59 : 0 - $59 | 0;
         $bit$2$i = $bit$1$i + -1 | 0;
         $contrastMin$2$i = ($63 | 0) < ($contrastMin$1$i | 0) ? $63 : $contrastMin$1$i;
        }
       }
       $bit$1$i = $bit$2$i;
       $contrastMin$1$i = $contrastMin$2$i;
       $i$3$i = $i$3$i + 1 | 0;
      }
      $bit$0$i = $bit$1$i$lcssa;
      $contrastMin$0$i = $contrastMin$1$i$lcssa;
      $j$0$i = $j$0$i + 1 | 0;
     }
     break;
    }
   case 1:
    {
     $bit$3$i = 119;
     $contrastMin$3$i = 255;
     $i$4$i = 0;
     while (1) {
      if (($i$4$i | 0) == 14) {
       $contrastMin$12$i = $contrastMin$3$i;
       label = 55;
       break L29;
      }
      $i$4$off$i = $i$4$i + -3 | 0;
      $67 = $i$4$i & -2;
      $68 = ($67 | 0) == 0;
      $69 = ($67 | 0) == 12;
      $bit$4$i = $bit$3$i;
      $contrastMin$4$i = $contrastMin$3$i;
      $j$1$i = 13;
      while (1) {
       if (($j$1$i | 0) <= -1) {
        $bit$4$i$lcssa = $bit$4$i;
        $contrastMin$4$i$lcssa = $contrastMin$4$i;
        break;
       }
       if (($j$1$i + -3 | $i$4$off$i) >>> 0 < 8) {
        $bit$5$i = $bit$4$i;
        $contrastMin$5$i = $contrastMin$4$i;
       } else {
        $74 = ($j$1$i & -2 | 0) == 12;
        if ($68 & $74) {
         $bit$5$i = $bit$4$i;
         $contrastMin$5$i = $contrastMin$4$i;
        } else if ($69 & ($j$1$i >>> 0 < 2 | $74)) {
         $bit$5$i = $bit$4$i;
         $contrastMin$5$i = $contrastMin$4$i;
        } else {
         $81 = (HEAPU8[$ext_patt + (($j$1$i * 14 | 0) + $i$4$i) >> 0] | 0) - $21 | 0;
         HEAP8[$recd127$i + $bit$4$i >> 0] = $81 >>> 31;
         $85 = ($81 | 0) > -1 ? $81 : 0 - $81 | 0;
         $bit$5$i = $bit$4$i + -1 | 0;
         $contrastMin$5$i = ($85 | 0) < ($contrastMin$4$i | 0) ? $85 : $contrastMin$4$i;
        }
       }
       $bit$4$i = $bit$5$i;
       $contrastMin$4$i = $contrastMin$5$i;
       $j$1$i = $j$1$i + -1 | 0;
      }
      $bit$3$i = $bit$4$i$lcssa;
      $contrastMin$3$i = $contrastMin$4$i$lcssa;
      $i$4$i = $i$4$i + 1 | 0;
     }
     break;
    }
   case 2:
    {
     $bit$6$i = 119;
     $contrastMin$6$i = 255;
     $j$2$i = 13;
     while (1) {
      if (($j$2$i | 0) <= -1) {
       $contrastMin$12$i = $contrastMin$6$i;
       label = 55;
       break L29;
      }
      $j$2$off$i = $j$2$i + -3 | 0;
      $or$cond4454$i = $j$2$i >>> 0 < 2 | ($j$2$i & -2 | 0) == 12;
      $93 = $j$2$i * 14 | 0;
      $bit$7$i = $bit$6$i;
      $contrastMin$7$i = $contrastMin$6$i;
      $i$5$i = 13;
      while (1) {
       if (($i$5$i | 0) <= -1) {
        $bit$7$i$lcssa = $bit$7$i;
        $contrastMin$7$i$lcssa = $contrastMin$7$i;
        break;
       }
       if (($i$5$i + -3 | $j$2$off$i) >>> 0 < 8) {
        $bit$8$i = $bit$7$i;
        $contrastMin$8$i = $contrastMin$7$i;
       } else if (($i$5$i | $j$2$i) >>> 0 < 2 | $or$cond4454$i & ($i$5$i & -2 | 0) == 12) {
        $bit$8$i = $bit$7$i;
        $contrastMin$8$i = $contrastMin$7$i;
       } else {
        $105 = (HEAPU8[$ext_patt + ($i$5$i + $93) >> 0] | 0) - $21 | 0;
        HEAP8[$recd127$i + $bit$7$i >> 0] = $105 >>> 31;
        $109 = ($105 | 0) > -1 ? $105 : 0 - $105 | 0;
        $bit$8$i = $bit$7$i + -1 | 0;
        $contrastMin$8$i = ($109 | 0) < ($contrastMin$7$i | 0) ? $109 : $contrastMin$7$i;
       }
       $bit$7$i = $bit$8$i;
       $contrastMin$7$i = $contrastMin$8$i;
       $i$5$i = $i$5$i + -1 | 0;
      }
      $bit$6$i = $bit$7$i$lcssa;
      $contrastMin$6$i = $contrastMin$7$i$lcssa;
      $j$2$i = $j$2$i + -1 | 0;
     }
     break;
    }
   case 3:
    {
     $bit$9$i = 119;
     $contrastMin$9$i = 255;
     $i$6$i = 13;
     while (1) {
      if (($i$6$i | 0) <= -1) {
       $contrastMin$12$i = $contrastMin$9$i;
       label = 55;
       break L29;
      }
      $i$6$off$i = $i$6$i + -3 | 0;
      $114 = $i$6$i & -2;
      $115 = ($114 | 0) == 12;
      $116 = ($114 | 0) == 0;
      $bit$10$i = $bit$9$i;
      $contrastMin$10$i = $contrastMin$9$i;
      $j$3$i = 0;
      while (1) {
       if (($j$3$i | 0) == 14) {
        $bit$10$i$lcssa = $bit$10$i;
        $contrastMin$10$i$lcssa = $contrastMin$10$i;
        break;
       }
       if (($j$3$i + -3 | $i$6$off$i) >>> 0 < 8) {
        $bit$11$i = $bit$10$i;
        $contrastMin$11$i = $contrastMin$10$i;
       } else if ($115 & $j$3$i >>> 0 < 2 | ($j$3$i | $i$6$i) >>> 0 < 2) {
        $bit$11$i = $bit$10$i;
        $contrastMin$11$i = $contrastMin$10$i;
       } else if ($116 & ($j$3$i & -2 | 0) == 12) {
        $bit$11$i = $bit$10$i;
        $contrastMin$11$i = $contrastMin$10$i;
       } else {
        $129 = (HEAPU8[$ext_patt + (($j$3$i * 14 | 0) + $i$6$i) >> 0] | 0) - $21 | 0;
        HEAP8[$recd127$i + $bit$10$i >> 0] = $129 >>> 31;
        $133 = ($129 | 0) > -1 ? $129 : 0 - $129 | 0;
        $bit$11$i = $bit$10$i + -1 | 0;
        $contrastMin$11$i = ($133 | 0) < ($contrastMin$10$i | 0) ? $133 : $contrastMin$10$i;
       }
       $bit$10$i = $bit$11$i;
       $contrastMin$10$i = $contrastMin$11$i;
       $j$3$i = $j$3$i + 1 | 0;
      }
      $bit$9$i = $bit$10$i$lcssa;
      $contrastMin$9$i = $contrastMin$10$i$lcssa;
      $i$6$i = $i$6$i + -1 | 0;
     }
     break;
    }
   default:
    {
     HEAP32[$dirMatrix >> 2] = $i$2$i$lcssa;
     $140 = 1.0;
    }
   } while (0);
   if ((label | 0) == 55) {
    HEAP32[$dirMatrix >> 2] = $i$2$i$lcssa;
    if (($contrastMin$12$i | 0) > 30) $140 = 1.0; else $140 = +($contrastMin$12$i | 0) / 30.0;
   }
   HEAPF64[$cfMatrix >> 3] = $140;
   $141 = _decode_bch(2830, 0, 0, $recd127$i, $code$i) | 0;
   if (($141 | 0) < 0) {
    $$0$i = -4;
    $151 = 0;
    $153 = 0;
   } else {
    if ($errorCorrected | 0) HEAP32[$errorCorrected >> 2] = $141;
    $144 = $code$i;
    $$0$i = 0;
    $151 = HEAP32[$144 >> 2] | 0;
    $153 = HEAP32[$144 + 4 >> 2] | 0;
   }
  } while (0);
  if (($$0$i | 0) < 0) {
   HEAP32[$codeMatrix >> 2] = -1;
   $errorCodeMtx$0 = $$0$i;
   break;
  }
  if (($151 | 0) == -1 & ($153 | 0) == -1) {
   HEAP32[$codeMatrix >> 2] = -1;
   $errorCodeMtx$0 = -5;
   break;
  }
  HEAP32[$codeMatrix >> 2] = ($151 & -32768 | 0) == 0 & 0 == 0 ? $151 & 32767 : 0;
  if (!$codeGlobalID_p) $errorCodeMtx$0 = 0; else {
   $162 = $codeGlobalID_p;
   HEAP32[$162 >> 2] = $151;
   HEAP32[$162 + 4 >> 2] = $153;
   $errorCodeMtx$0 = 0;
  }
 } else $errorCodeMtx$0 = 1; while (0);
 L96 : do if (($pattDetectMode + -3 | 0) >>> 0 < 2 | ($0 | 0) == 1) {
  if (!$pattHandle) {
   HEAP32[$codePatt >> 2] = -1;
   $errorCodePatt$0 = -1;
   break;
  }
  $180 = $pattHandle + 28 | 0;
  $181 = HEAP32[$180 >> 2] | 0;
  $182 = $181 << 2;
  switch ($pattDetectMode | 0) {
  case 0:
  case 3:
   {
    if ((_arPattGetImage2($imageProcMode, 0, $181, $182, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, $pattRatio, $ext_patt) | 0) < 0) {
     HEAP32[$codePatt >> 2] = -1;
     $errorCodePatt$0 = -6;
     break L96;
    } else {
     $errorCodePatt$0 = _pattern_match($pattHandle, 0, $ext_patt, HEAP32[$180 >> 2] | 0, $codePatt, $dirPatt, $cfPatt) | 0;
     break L96;
    }
    break;
   }
  default:
   if ((_arPattGetImage2($imageProcMode, 1, $181, $182, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, $pattRatio, $ext_patt) | 0) < 0) {
    HEAP32[$codePatt >> 2] = -1;
    $errorCodePatt$0 = -6;
    break L96;
   } else {
    $errorCodePatt$0 = _pattern_match($pattHandle, 1, $ext_patt, HEAP32[$180 >> 2] | 0, $codePatt, $dirPatt, $cfPatt) | 0;
    break L96;
   }
  }
 } else $errorCodePatt$0 = 1; while (0);
 if (($errorCodeMtx$0 | 0) == 1) $$0 = $errorCodePatt$0; else if (($errorCodePatt$0 | 0) == 1) $$0 = $errorCodeMtx$0; else $$0 = ($errorCodePatt$0 & $errorCodeMtx$0 | 0) < 0 ? $errorCodePatt$0 : 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $106 = 0, $11 = 0, $112 = 0, $117 = 0, $120 = 0, $135 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $150 = 0, $152 = 0, $156 = 0, $160 = 0, $164 = 0, $169 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $189 = 0, $192 = 0, $194 = 0, $198 = 0, $2 = 0, $202 = 0, $206 = 0, $209 = 0, $214 = 0, $23 = 0, $237 = 0, $239 = 0, $245 = 0, $248 = 0, $249 = 0, $255 = 0, $256 = 0, $268 = 0, $269 = 0, $27 = 0, $272 = 0, $279 = 0, $280 = 0, $288 = 0, $291 = 0, $292 = 0, $296 = 0, $299 = 0, $3 = 0, $303 = 0, $306 = 0, $31 = 0, $310 = 0, $313 = 0, $317 = 0, $322 = 0, $325 = 0, $326 = 0, $332 = 0, $37 = 0, $47 = 0, $48 = 0, $51 = 0, $53 = 0, $57 = 0, $61 = 0, $67 = 0, $68 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $79 = 0, $94 = 0, $96 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $23 = $xsize << 1;
 $27 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $31 = HEAPU8[$pnt$1 >> 0] | 0;
   $37 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($31 & 248) + 12 + ($31 << 5 & 224) + ($37 >>> 3 & 24) + ($37 << 2 & 248) | 0) > ($10 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $47 = $pnt2$3 + ($27 << 1) | 0;
    $48 = HEAP16[$47 >> 1] | 0;
    if ($48 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $48;
     $51 = ($48 << 16 >> 16) * 7 | 0;
     $53 = $labelInfo + 1310736 + ($51 + -7 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 1;
     $57 = $labelInfo + 1310736 + ($51 + -6 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $i$2;
     $61 = $labelInfo + 1310736 + ($51 + -5 << 2) | 0;
     HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($51 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $67 = HEAP16[$47 + 2 >> 1] | 0;
    $68 = $67 << 16 >> 16;
    $71 = HEAP16[$47 + -2 >> 1] | 0;
    $72 = $71 << 16 >> 16;
    $73 = $71 << 16 >> 16 > 0;
    if ($67 << 16 >> 16 <= 0) {
     if ($73) {
      HEAP16[$pnt2$3 >> 1] = $71;
      $169 = $72 * 7 | 0;
      $171 = $labelInfo + 1310736 + ($169 + -7 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + 1;
      $175 = $labelInfo + 1310736 + ($169 + -6 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $i$2;
      $179 = $labelInfo + 1310736 + ($169 + -5 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $j$0;
      $183 = $labelInfo + 1310736 + ($169 + -3 << 2) | 0;
      if ((HEAP32[$183 >> 2] | 0) < ($i$2 | 0)) HEAP32[$183 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($169 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $189 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($189 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $189;
      $192 = ($189 << 16 >> 16) * 7 | 0;
      $194 = $labelInfo + 1310736 + ($192 + -7 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + 1;
      $198 = $labelInfo + 1310736 + ($192 + -6 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $i$2;
      $202 = $labelInfo + 1310736 + ($192 + -5 << 2) | 0;
      HEAP32[$202 >> 2] = (HEAP32[$202 >> 2] | 0) + $j$0;
      $206 = $labelInfo + 1310736 + ($192 + -3 << 2) | 0;
      if ((HEAP32[$206 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$206 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $209 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $209;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $209 << 16 >> 16;
      $214 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($214 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($214 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($214 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($214 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $209;
      break;
     }
    }
    if ($73) {
     $76 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
     $79 = HEAP32[$labelInfo + 1179664 + ($72 + -1 << 2) >> 2] | 0;
     L35 : do if (($76 | 0) > ($79 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $79;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $94 = $79;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($76 | 0)) HEAP32[$wk$0 >> 2] = $79;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $76;
      if (($76 | 0) < ($79 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $94 = $76;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($79 | 0)) HEAP32[$wk$1 >> 2] = $76;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $94 = $76;
     } while (0);
     $96 = ($94 << 16 >> 16) * 7 | 0;
     $98 = $labelInfo + 1310736 + ($96 + -7 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + 1;
     $102 = $labelInfo + 1310736 + ($96 + -6 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $i$2;
     $106 = $labelInfo + 1310736 + ($96 + -5 << 2) | 0;
     HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($96 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $112 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($112 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $67;
     $150 = $68 * 7 | 0;
     $152 = $labelInfo + 1310736 + ($150 + -7 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
     $156 = $labelInfo + 1310736 + ($150 + -6 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $i$2;
     $160 = $labelInfo + 1310736 + ($150 + -5 << 2) | 0;
     HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $j$0;
     $164 = $labelInfo + 1310736 + ($150 + -4 << 2) | 0;
     if ((HEAP32[$164 >> 2] | 0) > ($i$2 | 0)) HEAP32[$164 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($150 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $117 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
    $120 = HEAP32[$labelInfo + 1179664 + (($112 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($117 | 0) > ($120 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $120;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $135 = $120;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($117 | 0)) HEAP32[$wk$2 >> 2] = $120;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $117;
     if (($117 | 0) < ($120 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $135 = $117;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($120 | 0)) HEAP32[$wk$3 >> 2] = $117;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $135 = $117;
    } while (0);
    $137 = ($135 << 16 >> 16) * 7 | 0;
    $139 = $labelInfo + 1310736 + ($137 + -7 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
    $143 = $labelInfo + 1310736 + ($137 + -6 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $i$2;
    $147 = $labelInfo + 1310736 + ($137 + -5 << 2) | 0;
    HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $23 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $237 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $239 = HEAP32[$wk$4 >> 2] | 0;
   if (($239 | 0) == ($i$3 | 0)) {
    $245 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $245 = HEAP32[$labelInfo + 1179664 + ($239 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $245;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $248 = $labelInfo + 8 | 0;
  $249 = $j$1$lcssa + -1 | 0;
  HEAP32[$248 >> 2] = $249;
  if (!$249) $$0 = 0; else {
   _memset($237 | 0, 0, $249 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $249 << 4 | 0) | 0;
   $255 = $249;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($255 | 0)) {
     $i$5 = 0;
     break;
    }
    $256 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($256 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($256 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($256 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($256 | 3) << 2) >> 2] = 0;
    $255 = HEAP32[$248 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $268 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $269 = $i$5 * 7 | 0;
    $272 = $labelInfo + 12 + ($268 << 2) | 0;
    HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($269 << 2) >> 2] | 0);
    $279 = $268 << 1;
    $280 = $labelInfo + 655376 + ($279 << 3) | 0;
    HEAPF64[$280 >> 3] = +HEAPF64[$280 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($269 + 1 << 2) >> 2] | 0);
    $288 = $labelInfo + 655376 + (($279 | 1) << 3) | 0;
    HEAPF64[$288 >> 3] = +HEAPF64[$288 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($269 + 2 << 2) >> 2] | 0);
    $291 = $268 << 2;
    $292 = $labelInfo + 131084 + ($291 << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($269 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $labelInfo + 131084 + (($291 | 1) << 2) | 0;
    $303 = HEAP32[$labelInfo + 1310736 + ($269 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $306 = $labelInfo + 131084 + (($291 | 2) << 2) | 0;
    $310 = HEAP32[$labelInfo + 1310736 + ($269 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$306 >> 2] | 0) > ($310 | 0)) HEAP32[$306 >> 2] = $310;
    $313 = $labelInfo + 131084 + (($291 | 3) << 2) | 0;
    $317 = HEAP32[$labelInfo + 1310736 + ($269 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$313 >> 2] | 0) < ($317 | 0)) HEAP32[$313 >> 2] = $317;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$248 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $322 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $325 = $i$6 << 1;
    $326 = $labelInfo + 655376 + ($325 << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $332 = $labelInfo + 655376 + (($325 | 1) << 3) | 0;
    HEAPF64[$332 >> 3] = +HEAPF64[$332 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $106 = 0, $11 = 0, $112 = 0, $117 = 0, $120 = 0, $135 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $150 = 0, $152 = 0, $156 = 0, $160 = 0, $164 = 0, $169 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $189 = 0, $192 = 0, $194 = 0, $198 = 0, $2 = 0, $202 = 0, $206 = 0, $209 = 0, $214 = 0, $23 = 0, $237 = 0, $239 = 0, $245 = 0, $248 = 0, $249 = 0, $255 = 0, $256 = 0, $268 = 0, $269 = 0, $27 = 0, $272 = 0, $279 = 0, $280 = 0, $288 = 0, $291 = 0, $292 = 0, $296 = 0, $299 = 0, $3 = 0, $303 = 0, $306 = 0, $31 = 0, $310 = 0, $313 = 0, $317 = 0, $322 = 0, $325 = 0, $326 = 0, $332 = 0, $37 = 0, $47 = 0, $48 = 0, $51 = 0, $53 = 0, $57 = 0, $61 = 0, $67 = 0, $68 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $79 = 0, $94 = 0, $96 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $23 = $xsize << 1;
 $27 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $31 = HEAPU8[$pnt$1 >> 0] | 0;
   $37 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($31 & 248) + 12 + ($31 << 5 & 224) + ($37 >>> 3 & 24) + ($37 << 2 & 248) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $47 = $pnt2$3 + ($27 << 1) | 0;
    $48 = HEAP16[$47 >> 1] | 0;
    if ($48 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $48;
     $51 = ($48 << 16 >> 16) * 7 | 0;
     $53 = $labelInfo + 1310736 + ($51 + -7 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 1;
     $57 = $labelInfo + 1310736 + ($51 + -6 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $i$2;
     $61 = $labelInfo + 1310736 + ($51 + -5 << 2) | 0;
     HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($51 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $67 = HEAP16[$47 + 2 >> 1] | 0;
    $68 = $67 << 16 >> 16;
    $71 = HEAP16[$47 + -2 >> 1] | 0;
    $72 = $71 << 16 >> 16;
    $73 = $71 << 16 >> 16 > 0;
    if ($67 << 16 >> 16 <= 0) {
     if ($73) {
      HEAP16[$pnt2$3 >> 1] = $71;
      $169 = $72 * 7 | 0;
      $171 = $labelInfo + 1310736 + ($169 + -7 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + 1;
      $175 = $labelInfo + 1310736 + ($169 + -6 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $i$2;
      $179 = $labelInfo + 1310736 + ($169 + -5 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $j$0;
      $183 = $labelInfo + 1310736 + ($169 + -3 << 2) | 0;
      if ((HEAP32[$183 >> 2] | 0) < ($i$2 | 0)) HEAP32[$183 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($169 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $189 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($189 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $189;
      $192 = ($189 << 16 >> 16) * 7 | 0;
      $194 = $labelInfo + 1310736 + ($192 + -7 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + 1;
      $198 = $labelInfo + 1310736 + ($192 + -6 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $i$2;
      $202 = $labelInfo + 1310736 + ($192 + -5 << 2) | 0;
      HEAP32[$202 >> 2] = (HEAP32[$202 >> 2] | 0) + $j$0;
      $206 = $labelInfo + 1310736 + ($192 + -3 << 2) | 0;
      if ((HEAP32[$206 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$206 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $209 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $209;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $209 << 16 >> 16;
      $214 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($214 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($214 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($214 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($214 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $209;
      break;
     }
    }
    if ($73) {
     $76 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
     $79 = HEAP32[$labelInfo + 1179664 + ($72 + -1 << 2) >> 2] | 0;
     L36 : do if (($76 | 0) > ($79 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $79;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $94 = $79;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($76 | 0)) HEAP32[$wk$0 >> 2] = $79;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $76;
      if (($76 | 0) < ($79 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $94 = $76;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($79 | 0)) HEAP32[$wk$1 >> 2] = $76;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $94 = $76;
     } while (0);
     $96 = ($94 << 16 >> 16) * 7 | 0;
     $98 = $labelInfo + 1310736 + ($96 + -7 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + 1;
     $102 = $labelInfo + 1310736 + ($96 + -6 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $i$2;
     $106 = $labelInfo + 1310736 + ($96 + -5 << 2) | 0;
     HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($96 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $112 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($112 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $67;
     $150 = $68 * 7 | 0;
     $152 = $labelInfo + 1310736 + ($150 + -7 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
     $156 = $labelInfo + 1310736 + ($150 + -6 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $i$2;
     $160 = $labelInfo + 1310736 + ($150 + -5 << 2) | 0;
     HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $j$0;
     $164 = $labelInfo + 1310736 + ($150 + -4 << 2) | 0;
     if ((HEAP32[$164 >> 2] | 0) > ($i$2 | 0)) HEAP32[$164 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($150 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $117 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
    $120 = HEAP32[$labelInfo + 1179664 + (($112 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($117 | 0) > ($120 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $120;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $135 = $120;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($117 | 0)) HEAP32[$wk$2 >> 2] = $120;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $117;
     if (($117 | 0) < ($120 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $135 = $117;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($120 | 0)) HEAP32[$wk$3 >> 2] = $117;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $135 = $117;
    } while (0);
    $137 = ($135 << 16 >> 16) * 7 | 0;
    $139 = $labelInfo + 1310736 + ($137 + -7 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
    $143 = $labelInfo + 1310736 + ($137 + -6 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $i$2;
    $147 = $labelInfo + 1310736 + ($137 + -5 << 2) | 0;
    HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $23 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $237 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $239 = HEAP32[$wk$4 >> 2] | 0;
   if (($239 | 0) == ($i$3 | 0)) {
    $245 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $245 = HEAP32[$labelInfo + 1179664 + ($239 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $245;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $248 = $labelInfo + 8 | 0;
  $249 = $j$1$lcssa + -1 | 0;
  HEAP32[$248 >> 2] = $249;
  if (!$249) $$0 = 0; else {
   _memset($237 | 0, 0, $249 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $249 << 4 | 0) | 0;
   $255 = $249;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($255 | 0)) {
     $i$5 = 0;
     break;
    }
    $256 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($256 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($256 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($256 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($256 | 3) << 2) >> 2] = 0;
    $255 = HEAP32[$248 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $268 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $269 = $i$5 * 7 | 0;
    $272 = $labelInfo + 12 + ($268 << 2) | 0;
    HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($269 << 2) >> 2] | 0);
    $279 = $268 << 1;
    $280 = $labelInfo + 655376 + ($279 << 3) | 0;
    HEAPF64[$280 >> 3] = +HEAPF64[$280 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($269 + 1 << 2) >> 2] | 0);
    $288 = $labelInfo + 655376 + (($279 | 1) << 3) | 0;
    HEAPF64[$288 >> 3] = +HEAPF64[$288 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($269 + 2 << 2) >> 2] | 0);
    $291 = $268 << 2;
    $292 = $labelInfo + 131084 + ($291 << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($269 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $labelInfo + 131084 + (($291 | 1) << 2) | 0;
    $303 = HEAP32[$labelInfo + 1310736 + ($269 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $306 = $labelInfo + 131084 + (($291 | 2) << 2) | 0;
    $310 = HEAP32[$labelInfo + 1310736 + ($269 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$306 >> 2] | 0) > ($310 | 0)) HEAP32[$306 >> 2] = $310;
    $313 = $labelInfo + 131084 + (($291 | 3) << 2) | 0;
    $317 = HEAP32[$labelInfo + 1310736 + ($269 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$313 >> 2] | 0) < ($317 | 0)) HEAP32[$313 >> 2] = $317;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$248 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $322 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $325 = $i$6 << 1;
    $326 = $labelInfo + 655376 + ($325 << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $332 = $labelInfo + 655376 + (($325 | 1) << 3) | 0;
    HEAPF64[$332 >> 3] = +HEAPF64[$332 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $106 = 0, $11 = 0, $112 = 0, $117 = 0, $120 = 0, $135 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $150 = 0, $152 = 0, $156 = 0, $160 = 0, $164 = 0, $169 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $189 = 0, $192 = 0, $194 = 0, $198 = 0, $2 = 0, $202 = 0, $206 = 0, $209 = 0, $214 = 0, $23 = 0, $237 = 0, $239 = 0, $245 = 0, $248 = 0, $249 = 0, $255 = 0, $256 = 0, $268 = 0, $269 = 0, $27 = 0, $272 = 0, $279 = 0, $280 = 0, $288 = 0, $291 = 0, $292 = 0, $296 = 0, $299 = 0, $3 = 0, $303 = 0, $306 = 0, $31 = 0, $310 = 0, $313 = 0, $317 = 0, $322 = 0, $325 = 0, $326 = 0, $332 = 0, $37 = 0, $47 = 0, $48 = 0, $51 = 0, $53 = 0, $57 = 0, $61 = 0, $67 = 0, $68 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $79 = 0, $94 = 0, $96 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $23 = $xsize << 1;
 $27 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $31 = HEAPU8[$pnt$1 >> 0] | 0;
   $37 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($31 & 248) + 10 + ($31 << 5 & 224) + ($37 >>> 3 & 28) + ($37 << 3 & 248) | 0) > ($10 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $47 = $pnt2$3 + ($27 << 1) | 0;
    $48 = HEAP16[$47 >> 1] | 0;
    if ($48 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $48;
     $51 = ($48 << 16 >> 16) * 7 | 0;
     $53 = $labelInfo + 1310736 + ($51 + -7 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 1;
     $57 = $labelInfo + 1310736 + ($51 + -6 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $i$2;
     $61 = $labelInfo + 1310736 + ($51 + -5 << 2) | 0;
     HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($51 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $67 = HEAP16[$47 + 2 >> 1] | 0;
    $68 = $67 << 16 >> 16;
    $71 = HEAP16[$47 + -2 >> 1] | 0;
    $72 = $71 << 16 >> 16;
    $73 = $71 << 16 >> 16 > 0;
    if ($67 << 16 >> 16 <= 0) {
     if ($73) {
      HEAP16[$pnt2$3 >> 1] = $71;
      $169 = $72 * 7 | 0;
      $171 = $labelInfo + 1310736 + ($169 + -7 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + 1;
      $175 = $labelInfo + 1310736 + ($169 + -6 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $i$2;
      $179 = $labelInfo + 1310736 + ($169 + -5 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $j$0;
      $183 = $labelInfo + 1310736 + ($169 + -3 << 2) | 0;
      if ((HEAP32[$183 >> 2] | 0) < ($i$2 | 0)) HEAP32[$183 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($169 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $189 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($189 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $189;
      $192 = ($189 << 16 >> 16) * 7 | 0;
      $194 = $labelInfo + 1310736 + ($192 + -7 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + 1;
      $198 = $labelInfo + 1310736 + ($192 + -6 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $i$2;
      $202 = $labelInfo + 1310736 + ($192 + -5 << 2) | 0;
      HEAP32[$202 >> 2] = (HEAP32[$202 >> 2] | 0) + $j$0;
      $206 = $labelInfo + 1310736 + ($192 + -3 << 2) | 0;
      if ((HEAP32[$206 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$206 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $209 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $209;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $209 << 16 >> 16;
      $214 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($214 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($214 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($214 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($214 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $209;
      break;
     }
    }
    if ($73) {
     $76 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
     $79 = HEAP32[$labelInfo + 1179664 + ($72 + -1 << 2) >> 2] | 0;
     L35 : do if (($76 | 0) > ($79 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $79;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $94 = $79;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($76 | 0)) HEAP32[$wk$0 >> 2] = $79;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $76;
      if (($76 | 0) < ($79 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $94 = $76;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($79 | 0)) HEAP32[$wk$1 >> 2] = $76;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $94 = $76;
     } while (0);
     $96 = ($94 << 16 >> 16) * 7 | 0;
     $98 = $labelInfo + 1310736 + ($96 + -7 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + 1;
     $102 = $labelInfo + 1310736 + ($96 + -6 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $i$2;
     $106 = $labelInfo + 1310736 + ($96 + -5 << 2) | 0;
     HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($96 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $112 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($112 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $67;
     $150 = $68 * 7 | 0;
     $152 = $labelInfo + 1310736 + ($150 + -7 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
     $156 = $labelInfo + 1310736 + ($150 + -6 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $i$2;
     $160 = $labelInfo + 1310736 + ($150 + -5 << 2) | 0;
     HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $j$0;
     $164 = $labelInfo + 1310736 + ($150 + -4 << 2) | 0;
     if ((HEAP32[$164 >> 2] | 0) > ($i$2 | 0)) HEAP32[$164 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($150 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $117 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
    $120 = HEAP32[$labelInfo + 1179664 + (($112 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($117 | 0) > ($120 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $120;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $135 = $120;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($117 | 0)) HEAP32[$wk$2 >> 2] = $120;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $117;
     if (($117 | 0) < ($120 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $135 = $117;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($120 | 0)) HEAP32[$wk$3 >> 2] = $117;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $135 = $117;
    } while (0);
    $137 = ($135 << 16 >> 16) * 7 | 0;
    $139 = $labelInfo + 1310736 + ($137 + -7 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
    $143 = $labelInfo + 1310736 + ($137 + -6 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $i$2;
    $147 = $labelInfo + 1310736 + ($137 + -5 << 2) | 0;
    HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $23 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $237 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $239 = HEAP32[$wk$4 >> 2] | 0;
   if (($239 | 0) == ($i$3 | 0)) {
    $245 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $245 = HEAP32[$labelInfo + 1179664 + ($239 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $245;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $248 = $labelInfo + 8 | 0;
  $249 = $j$1$lcssa + -1 | 0;
  HEAP32[$248 >> 2] = $249;
  if (!$249) $$0 = 0; else {
   _memset($237 | 0, 0, $249 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $249 << 4 | 0) | 0;
   $255 = $249;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($255 | 0)) {
     $i$5 = 0;
     break;
    }
    $256 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($256 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($256 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($256 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($256 | 3) << 2) >> 2] = 0;
    $255 = HEAP32[$248 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $268 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $269 = $i$5 * 7 | 0;
    $272 = $labelInfo + 12 + ($268 << 2) | 0;
    HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($269 << 2) >> 2] | 0);
    $279 = $268 << 1;
    $280 = $labelInfo + 655376 + ($279 << 3) | 0;
    HEAPF64[$280 >> 3] = +HEAPF64[$280 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($269 + 1 << 2) >> 2] | 0);
    $288 = $labelInfo + 655376 + (($279 | 1) << 3) | 0;
    HEAPF64[$288 >> 3] = +HEAPF64[$288 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($269 + 2 << 2) >> 2] | 0);
    $291 = $268 << 2;
    $292 = $labelInfo + 131084 + ($291 << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($269 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $labelInfo + 131084 + (($291 | 1) << 2) | 0;
    $303 = HEAP32[$labelInfo + 1310736 + ($269 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $306 = $labelInfo + 131084 + (($291 | 2) << 2) | 0;
    $310 = HEAP32[$labelInfo + 1310736 + ($269 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$306 >> 2] | 0) > ($310 | 0)) HEAP32[$306 >> 2] = $310;
    $313 = $labelInfo + 131084 + (($291 | 3) << 2) | 0;
    $317 = HEAP32[$labelInfo + 1310736 + ($269 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$313 >> 2] | 0) < ($317 | 0)) HEAP32[$313 >> 2] = $317;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$248 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $322 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $325 = $i$6 << 1;
    $326 = $labelInfo + 655376 + ($325 << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $332 = $labelInfo + 655376 + (($325 | 1) << 3) | 0;
    HEAPF64[$332 >> 3] = +HEAPF64[$332 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $106 = 0, $11 = 0, $112 = 0, $117 = 0, $120 = 0, $135 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $150 = 0, $152 = 0, $156 = 0, $160 = 0, $164 = 0, $169 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $189 = 0, $192 = 0, $194 = 0, $198 = 0, $2 = 0, $202 = 0, $206 = 0, $209 = 0, $214 = 0, $23 = 0, $237 = 0, $239 = 0, $245 = 0, $248 = 0, $249 = 0, $255 = 0, $256 = 0, $268 = 0, $269 = 0, $27 = 0, $272 = 0, $279 = 0, $280 = 0, $288 = 0, $291 = 0, $292 = 0, $296 = 0, $299 = 0, $3 = 0, $303 = 0, $306 = 0, $31 = 0, $310 = 0, $313 = 0, $317 = 0, $322 = 0, $325 = 0, $326 = 0, $332 = 0, $37 = 0, $47 = 0, $48 = 0, $51 = 0, $53 = 0, $57 = 0, $61 = 0, $67 = 0, $68 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $79 = 0, $94 = 0, $96 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $23 = $xsize << 1;
 $27 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $31 = HEAPU8[$pnt$1 >> 0] | 0;
   $37 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($31 & 248) + 10 + ($31 << 5 & 224) + ($37 >>> 3 & 28) + ($37 << 3 & 248) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $47 = $pnt2$3 + ($27 << 1) | 0;
    $48 = HEAP16[$47 >> 1] | 0;
    if ($48 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $48;
     $51 = ($48 << 16 >> 16) * 7 | 0;
     $53 = $labelInfo + 1310736 + ($51 + -7 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 1;
     $57 = $labelInfo + 1310736 + ($51 + -6 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $i$2;
     $61 = $labelInfo + 1310736 + ($51 + -5 << 2) | 0;
     HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($51 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $67 = HEAP16[$47 + 2 >> 1] | 0;
    $68 = $67 << 16 >> 16;
    $71 = HEAP16[$47 + -2 >> 1] | 0;
    $72 = $71 << 16 >> 16;
    $73 = $71 << 16 >> 16 > 0;
    if ($67 << 16 >> 16 <= 0) {
     if ($73) {
      HEAP16[$pnt2$3 >> 1] = $71;
      $169 = $72 * 7 | 0;
      $171 = $labelInfo + 1310736 + ($169 + -7 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + 1;
      $175 = $labelInfo + 1310736 + ($169 + -6 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $i$2;
      $179 = $labelInfo + 1310736 + ($169 + -5 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $j$0;
      $183 = $labelInfo + 1310736 + ($169 + -3 << 2) | 0;
      if ((HEAP32[$183 >> 2] | 0) < ($i$2 | 0)) HEAP32[$183 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($169 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $189 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($189 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $189;
      $192 = ($189 << 16 >> 16) * 7 | 0;
      $194 = $labelInfo + 1310736 + ($192 + -7 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + 1;
      $198 = $labelInfo + 1310736 + ($192 + -6 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $i$2;
      $202 = $labelInfo + 1310736 + ($192 + -5 << 2) | 0;
      HEAP32[$202 >> 2] = (HEAP32[$202 >> 2] | 0) + $j$0;
      $206 = $labelInfo + 1310736 + ($192 + -3 << 2) | 0;
      if ((HEAP32[$206 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$206 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $209 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $209;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $209 << 16 >> 16;
      $214 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($214 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($214 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($214 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($214 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($214 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $209;
      break;
     }
    }
    if ($73) {
     $76 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
     $79 = HEAP32[$labelInfo + 1179664 + ($72 + -1 << 2) >> 2] | 0;
     L36 : do if (($76 | 0) > ($79 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $79;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $94 = $79;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($76 | 0)) HEAP32[$wk$0 >> 2] = $79;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $76;
      if (($76 | 0) < ($79 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $94 = $76;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($79 | 0)) HEAP32[$wk$1 >> 2] = $76;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $94 = $76;
     } while (0);
     $96 = ($94 << 16 >> 16) * 7 | 0;
     $98 = $labelInfo + 1310736 + ($96 + -7 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + 1;
     $102 = $labelInfo + 1310736 + ($96 + -6 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $i$2;
     $106 = $labelInfo + 1310736 + ($96 + -5 << 2) | 0;
     HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($96 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $112 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($112 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $67;
     $150 = $68 * 7 | 0;
     $152 = $labelInfo + 1310736 + ($150 + -7 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
     $156 = $labelInfo + 1310736 + ($150 + -6 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $i$2;
     $160 = $labelInfo + 1310736 + ($150 + -5 << 2) | 0;
     HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $j$0;
     $164 = $labelInfo + 1310736 + ($150 + -4 << 2) | 0;
     if ((HEAP32[$164 >> 2] | 0) > ($i$2 | 0)) HEAP32[$164 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($150 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $117 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
    $120 = HEAP32[$labelInfo + 1179664 + (($112 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($117 | 0) > ($120 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $120;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $135 = $120;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($117 | 0)) HEAP32[$wk$2 >> 2] = $120;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $117;
     if (($117 | 0) < ($120 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $135 = $117;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($120 | 0)) HEAP32[$wk$3 >> 2] = $117;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $135 = $117;
    } while (0);
    $137 = ($135 << 16 >> 16) * 7 | 0;
    $139 = $labelInfo + 1310736 + ($137 + -7 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
    $143 = $labelInfo + 1310736 + ($137 + -6 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $i$2;
    $147 = $labelInfo + 1310736 + ($137 + -5 << 2) | 0;
    HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $23 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $237 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $239 = HEAP32[$wk$4 >> 2] | 0;
   if (($239 | 0) == ($i$3 | 0)) {
    $245 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $245 = HEAP32[$labelInfo + 1179664 + ($239 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $245;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $248 = $labelInfo + 8 | 0;
  $249 = $j$1$lcssa + -1 | 0;
  HEAP32[$248 >> 2] = $249;
  if (!$249) $$0 = 0; else {
   _memset($237 | 0, 0, $249 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $249 << 4 | 0) | 0;
   $255 = $249;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($255 | 0)) {
     $i$5 = 0;
     break;
    }
    $256 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($256 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($256 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($256 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($256 | 3) << 2) >> 2] = 0;
    $255 = HEAP32[$248 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $268 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $269 = $i$5 * 7 | 0;
    $272 = $labelInfo + 12 + ($268 << 2) | 0;
    HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($269 << 2) >> 2] | 0);
    $279 = $268 << 1;
    $280 = $labelInfo + 655376 + ($279 << 3) | 0;
    HEAPF64[$280 >> 3] = +HEAPF64[$280 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($269 + 1 << 2) >> 2] | 0);
    $288 = $labelInfo + 655376 + (($279 | 1) << 3) | 0;
    HEAPF64[$288 >> 3] = +HEAPF64[$288 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($269 + 2 << 2) >> 2] | 0);
    $291 = $268 << 2;
    $292 = $labelInfo + 131084 + ($291 << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($269 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $labelInfo + 131084 + (($291 | 1) << 2) | 0;
    $303 = HEAP32[$labelInfo + 1310736 + ($269 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $306 = $labelInfo + 131084 + (($291 | 2) << 2) | 0;
    $310 = HEAP32[$labelInfo + 1310736 + ($269 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$306 >> 2] | 0) > ($310 | 0)) HEAP32[$306 >> 2] = $310;
    $313 = $labelInfo + 131084 + (($291 | 3) << 2) | 0;
    $317 = HEAP32[$labelInfo + 1310736 + ($269 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$313 >> 2] | 0) < ($317 | 0)) HEAP32[$313 >> 2] = $317;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$248 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $322 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $325 = $i$6 << 1;
    $326 = $labelInfo + 655376 + ($325 << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $332 = $labelInfo + 655376 + (($325 | 1) << 3) | 0;
    HEAPF64[$332 >> 3] = +HEAPF64[$332 >> 3] / +(HEAP32[$322 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWZ($image, $xsize, $ysize, $image_thresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $image_thresh = $image_thresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $101 = 0, $116 = 0, $118 = 0, $120 = 0, $124 = 0, $128 = 0, $131 = 0, $133 = 0, $137 = 0, $14 = 0, $141 = 0, $145 = 0, $15 = 0, $150 = 0, $152 = 0, $156 = 0, $160 = 0, $164 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $187 = 0, $190 = 0, $195 = 0, $219 = 0, $22 = 0, $221 = 0, $227 = 0, $230 = 0, $231 = 0, $237 = 0, $238 = 0, $250 = 0, $251 = 0, $254 = 0, $261 = 0, $262 = 0, $270 = 0, $273 = 0, $274 = 0, $278 = 0, $28 = 0, $281 = 0, $285 = 0, $288 = 0, $29 = 0, $292 = 0, $295 = 0, $299 = 0, $304 = 0, $307 = 0, $308 = 0, $314 = 0, $32 = 0, $34 = 0, $38 = 0, $42 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $60 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $83 = 0, $87 = 0, $93 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $pnt_thresh$0 = 0, $pnt_thresh$1 = 0, $pnt_thresh$1$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $22 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $15 | 0;
 $j$0 = 1;
 $pnt$0 = $image + $15 | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $pnt_thresh$0 = $image_thresh + $15 | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $pnt_thresh$1 = $pnt_thresh$0;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $pnt_thresh$1$lcssa = $pnt_thresh$1;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0) > (HEAPU8[$pnt_thresh$1 >> 0] | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $28 = $pnt2$3 + ($22 << 1) | 0;
    $29 = HEAP16[$28 >> 1] | 0;
    if ($29 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $29;
     $32 = ($29 << 16 >> 16) * 7 | 0;
     $34 = $labelInfo + 1310736 + ($32 + -7 << 2) | 0;
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 1;
     $38 = $labelInfo + 1310736 + ($32 + -6 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + $i$2;
     $42 = $labelInfo + 1310736 + ($32 + -5 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($32 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $48 = HEAP16[$28 + 2 >> 1] | 0;
    $49 = $48 << 16 >> 16;
    $52 = HEAP16[$28 + -2 >> 1] | 0;
    $53 = $52 << 16 >> 16;
    $54 = $52 << 16 >> 16 > 0;
    if ($48 << 16 >> 16 <= 0) {
     if ($54) {
      HEAP16[$pnt2$3 >> 1] = $52;
      $150 = $53 * 7 | 0;
      $152 = $labelInfo + 1310736 + ($150 + -7 << 2) | 0;
      HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
      $156 = $labelInfo + 1310736 + ($150 + -6 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $i$2;
      $160 = $labelInfo + 1310736 + ($150 + -5 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $j$0;
      $164 = $labelInfo + 1310736 + ($150 + -3 << 2) | 0;
      if ((HEAP32[$164 >> 2] | 0) < ($i$2 | 0)) HEAP32[$164 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($150 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $170 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $labelInfo + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $labelInfo + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $i$2;
      $183 = $labelInfo + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $j$0;
      $187 = $labelInfo + 1310736 + ($173 + -3 << 2) | 0;
      if ((HEAP32[$187 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$187 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $190 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $190;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($195 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $190;
      break;
     }
    }
    if ($54) {
     $57 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
     $60 = HEAP32[$labelInfo + 1179664 + ($53 + -1 << 2) >> 2] | 0;
     L35 : do if (($57 | 0) > ($60 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $60;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $75 = $60;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($57 | 0)) HEAP32[$wk$0 >> 2] = $60;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $57;
      if (($57 | 0) < ($60 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $75 = $57;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($60 | 0)) HEAP32[$wk$1 >> 2] = $57;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $75 = $57;
     } while (0);
     $77 = ($75 << 16 >> 16) * 7 | 0;
     $79 = $labelInfo + 1310736 + ($77 + -7 << 2) | 0;
     HEAP32[$79 >> 2] = (HEAP32[$79 >> 2] | 0) + 1;
     $83 = $labelInfo + 1310736 + ($77 + -6 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + $i$2;
     $87 = $labelInfo + 1310736 + ($77 + -5 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($77 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $93 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($93 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $48;
     $131 = $49 * 7 | 0;
     $133 = $labelInfo + 1310736 + ($131 + -7 << 2) | 0;
     HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
     $137 = $labelInfo + 1310736 + ($131 + -6 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $i$2;
     $141 = $labelInfo + 1310736 + ($131 + -5 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $j$0;
     $145 = $labelInfo + 1310736 + ($131 + -4 << 2) | 0;
     if ((HEAP32[$145 >> 2] | 0) > ($i$2 | 0)) HEAP32[$145 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($131 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $98 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
    $101 = HEAP32[$labelInfo + 1179664 + (($93 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($98 | 0) > ($101 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $101;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $116 = $101;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($98 | 0)) HEAP32[$wk$2 >> 2] = $101;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $98;
     if (($98 | 0) < ($101 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $116 = $98;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($101 | 0)) HEAP32[$wk$3 >> 2] = $98;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $116 = $98;
    } while (0);
    $118 = ($116 << 16 >> 16) * 7 | 0;
    $120 = $labelInfo + 1310736 + ($118 + -7 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + 1;
    $124 = $labelInfo + 1310736 + ($118 + -6 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $i$2;
    $128 = $labelInfo + 1310736 + ($118 + -5 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $pnt_thresh$1 = $pnt_thresh$1 + 1 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 2 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $pnt_thresh$0 = $pnt_thresh$1$lcssa + 2 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $219 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $221 = HEAP32[$wk$4 >> 2] | 0;
   if (($221 | 0) == ($i$3 | 0)) {
    $227 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $227 = HEAP32[$labelInfo + 1179664 + ($221 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $227;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $230 = $labelInfo + 8 | 0;
  $231 = $j$1$lcssa + -1 | 0;
  HEAP32[$230 >> 2] = $231;
  if (!$231) $$0 = 0; else {
   _memset($219 | 0, 0, $231 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $231 << 4 | 0) | 0;
   $237 = $231;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($237 | 0)) {
     $i$5 = 0;
     break;
    }
    $238 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($238 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($238 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($238 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($238 | 3) << 2) >> 2] = 0;
    $237 = HEAP32[$230 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $250 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $251 = $i$5 * 7 | 0;
    $254 = $labelInfo + 12 + ($250 << 2) | 0;
    HEAP32[$254 >> 2] = (HEAP32[$254 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($251 << 2) >> 2] | 0);
    $261 = $250 << 1;
    $262 = $labelInfo + 655376 + ($261 << 3) | 0;
    HEAPF64[$262 >> 3] = +HEAPF64[$262 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($251 + 1 << 2) >> 2] | 0);
    $270 = $labelInfo + 655376 + (($261 | 1) << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($251 + 2 << 2) >> 2] | 0);
    $273 = $250 << 2;
    $274 = $labelInfo + 131084 + ($273 << 2) | 0;
    $278 = HEAP32[$labelInfo + 1310736 + ($251 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$274 >> 2] | 0) > ($278 | 0)) HEAP32[$274 >> 2] = $278;
    $281 = $labelInfo + 131084 + (($273 | 1) << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($251 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) < ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($273 | 2) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($251 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) > ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($273 | 3) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($251 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) < ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$230 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $304 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $307 = $i$6 << 1;
    $308 = $labelInfo + 655376 + ($307 << 3) | 0;
    HEAPF64[$308 >> 3] = +HEAPF64[$308 >> 3] / +(HEAP32[$304 >> 2] | 0);
    $314 = $labelInfo + 655376 + (($307 | 1) << 3) | 0;
    HEAPF64[$314 >> 3] = +HEAPF64[$314 >> 3] / +(HEAP32[$304 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBZ($image, $xsize, $ysize, $image_thresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $image_thresh = $image_thresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $101 = 0, $116 = 0, $118 = 0, $120 = 0, $124 = 0, $128 = 0, $131 = 0, $133 = 0, $137 = 0, $14 = 0, $141 = 0, $145 = 0, $15 = 0, $150 = 0, $152 = 0, $156 = 0, $160 = 0, $164 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $187 = 0, $190 = 0, $195 = 0, $219 = 0, $22 = 0, $221 = 0, $227 = 0, $230 = 0, $231 = 0, $237 = 0, $238 = 0, $250 = 0, $251 = 0, $254 = 0, $261 = 0, $262 = 0, $270 = 0, $273 = 0, $274 = 0, $278 = 0, $28 = 0, $281 = 0, $285 = 0, $288 = 0, $29 = 0, $292 = 0, $295 = 0, $299 = 0, $304 = 0, $307 = 0, $308 = 0, $314 = 0, $32 = 0, $34 = 0, $38 = 0, $42 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $60 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $83 = 0, $87 = 0, $93 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $pnt_thresh$0 = 0, $pnt_thresh$1 = 0, $pnt_thresh$1$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $22 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $15 | 0;
 $j$0 = 1;
 $pnt$0 = $image + $15 | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $pnt_thresh$0 = $image_thresh + $15 | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $pnt_thresh$1 = $pnt_thresh$0;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $pnt_thresh$1$lcssa = $pnt_thresh$1;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0) > (HEAPU8[$pnt_thresh$1 >> 0] | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $28 = $pnt2$3 + ($22 << 1) | 0;
    $29 = HEAP16[$28 >> 1] | 0;
    if ($29 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $29;
     $32 = ($29 << 16 >> 16) * 7 | 0;
     $34 = $labelInfo + 1310736 + ($32 + -7 << 2) | 0;
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 1;
     $38 = $labelInfo + 1310736 + ($32 + -6 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + $i$2;
     $42 = $labelInfo + 1310736 + ($32 + -5 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($32 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $48 = HEAP16[$28 + 2 >> 1] | 0;
    $49 = $48 << 16 >> 16;
    $52 = HEAP16[$28 + -2 >> 1] | 0;
    $53 = $52 << 16 >> 16;
    $54 = $52 << 16 >> 16 > 0;
    if ($48 << 16 >> 16 <= 0) {
     if ($54) {
      HEAP16[$pnt2$3 >> 1] = $52;
      $150 = $53 * 7 | 0;
      $152 = $labelInfo + 1310736 + ($150 + -7 << 2) | 0;
      HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
      $156 = $labelInfo + 1310736 + ($150 + -6 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $i$2;
      $160 = $labelInfo + 1310736 + ($150 + -5 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $j$0;
      $164 = $labelInfo + 1310736 + ($150 + -3 << 2) | 0;
      if ((HEAP32[$164 >> 2] | 0) < ($i$2 | 0)) HEAP32[$164 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($150 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $170 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $labelInfo + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $labelInfo + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $i$2;
      $183 = $labelInfo + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $j$0;
      $187 = $labelInfo + 1310736 + ($173 + -3 << 2) | 0;
      if ((HEAP32[$187 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$187 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $190 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $190;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($195 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $190;
      break;
     }
    }
    if ($54) {
     $57 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
     $60 = HEAP32[$labelInfo + 1179664 + ($53 + -1 << 2) >> 2] | 0;
     L36 : do if (($57 | 0) > ($60 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $60;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $75 = $60;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($57 | 0)) HEAP32[$wk$0 >> 2] = $60;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $57;
      if (($57 | 0) < ($60 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $75 = $57;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($60 | 0)) HEAP32[$wk$1 >> 2] = $57;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $75 = $57;
     } while (0);
     $77 = ($75 << 16 >> 16) * 7 | 0;
     $79 = $labelInfo + 1310736 + ($77 + -7 << 2) | 0;
     HEAP32[$79 >> 2] = (HEAP32[$79 >> 2] | 0) + 1;
     $83 = $labelInfo + 1310736 + ($77 + -6 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + $i$2;
     $87 = $labelInfo + 1310736 + ($77 + -5 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($77 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $93 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($93 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $48;
     $131 = $49 * 7 | 0;
     $133 = $labelInfo + 1310736 + ($131 + -7 << 2) | 0;
     HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
     $137 = $labelInfo + 1310736 + ($131 + -6 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $i$2;
     $141 = $labelInfo + 1310736 + ($131 + -5 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $j$0;
     $145 = $labelInfo + 1310736 + ($131 + -4 << 2) | 0;
     if ((HEAP32[$145 >> 2] | 0) > ($i$2 | 0)) HEAP32[$145 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($131 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $98 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
    $101 = HEAP32[$labelInfo + 1179664 + (($93 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($98 | 0) > ($101 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $101;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $116 = $101;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($98 | 0)) HEAP32[$wk$2 >> 2] = $101;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $98;
     if (($98 | 0) < ($101 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $116 = $98;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($101 | 0)) HEAP32[$wk$3 >> 2] = $98;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $116 = $98;
    } while (0);
    $118 = ($116 << 16 >> 16) * 7 | 0;
    $120 = $labelInfo + 1310736 + ($118 + -7 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + 1;
    $124 = $labelInfo + 1310736 + ($118 + -6 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $i$2;
    $128 = $labelInfo + 1310736 + ($118 + -5 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $pnt_thresh$1 = $pnt_thresh$1 + 1 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 2 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $pnt_thresh$0 = $pnt_thresh$1$lcssa + 2 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $219 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $221 = HEAP32[$wk$4 >> 2] | 0;
   if (($221 | 0) == ($i$3 | 0)) {
    $227 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $227 = HEAP32[$labelInfo + 1179664 + ($221 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $227;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $230 = $labelInfo + 8 | 0;
  $231 = $j$1$lcssa + -1 | 0;
  HEAP32[$230 >> 2] = $231;
  if (!$231) $$0 = 0; else {
   _memset($219 | 0, 0, $231 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $231 << 4 | 0) | 0;
   $237 = $231;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($237 | 0)) {
     $i$5 = 0;
     break;
    }
    $238 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($238 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($238 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($238 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($238 | 3) << 2) >> 2] = 0;
    $237 = HEAP32[$230 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $250 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $251 = $i$5 * 7 | 0;
    $254 = $labelInfo + 12 + ($250 << 2) | 0;
    HEAP32[$254 >> 2] = (HEAP32[$254 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($251 << 2) >> 2] | 0);
    $261 = $250 << 1;
    $262 = $labelInfo + 655376 + ($261 << 3) | 0;
    HEAPF64[$262 >> 3] = +HEAPF64[$262 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($251 + 1 << 2) >> 2] | 0);
    $270 = $labelInfo + 655376 + (($261 | 1) << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($251 + 2 << 2) >> 2] | 0);
    $273 = $250 << 2;
    $274 = $labelInfo + 131084 + ($273 << 2) | 0;
    $278 = HEAP32[$labelInfo + 1310736 + ($251 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$274 >> 2] | 0) > ($278 | 0)) HEAP32[$274 >> 2] = $278;
    $281 = $labelInfo + 131084 + (($273 | 1) << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($251 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) < ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($273 | 2) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($251 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) > ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($273 | 3) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($251 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) < ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$230 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $304 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $307 = $i$6 << 1;
    $308 = $labelInfo + 655376 + ($307 << 3) | 0;
    HEAPF64[$308 >> 3] = +HEAPF64[$308 >> 3] / +(HEAP32[$304 >> 2] | 0);
    $314 = $labelInfo + 655376 + (($307 | 1) << 3) | 0;
    HEAPF64[$314 >> 3] = +HEAPF64[$314 >> 3] / +(HEAP32[$304 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $108 = 0, $11 = 0, $113 = 0, $116 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $146 = 0, $148 = 0, $152 = 0, $156 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $2 = 0, $202 = 0, $205 = 0, $210 = 0, $23 = 0, $233 = 0, $235 = 0, $241 = 0, $244 = 0, $245 = 0, $251 = 0, $252 = 0, $264 = 0, $265 = 0, $268 = 0, $27 = 0, $275 = 0, $276 = 0, $284 = 0, $287 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $3 = 0, $302 = 0, $306 = 0, $309 = 0, $31 = 0, $313 = 0, $318 = 0, $321 = 0, $322 = 0, $328 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $53 = 0, $57 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $23 = $xsize << 1;
 $27 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $31 = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($31 & 240) + 24 + ($31 << 4 & 240) + ((HEAPU8[$pnt$1 + 1 >> 0] | 0) & 240) | 0) > ($10 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $43 = $pnt2$3 + ($27 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $labelInfo + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $labelInfo + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $i$2;
     $57 = $labelInfo + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($47 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $64 = $63 << 16 >> 16;
    $67 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $67 << 16 >> 16;
    $69 = $67 << 16 >> 16 > 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($69) {
      HEAP16[$pnt2$3 >> 1] = $67;
      $165 = $68 * 7 | 0;
      $167 = $labelInfo + 1310736 + ($165 + -7 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + 1;
      $171 = $labelInfo + 1310736 + ($165 + -6 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $i$2;
      $175 = $labelInfo + 1310736 + ($165 + -5 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $j$0;
      $179 = $labelInfo + 1310736 + ($165 + -3 << 2) | 0;
      if ((HEAP32[$179 >> 2] | 0) < ($i$2 | 0)) HEAP32[$179 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($165 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $185 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $labelInfo + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $labelInfo + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $i$2;
      $198 = $labelInfo + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $j$0;
      $202 = $labelInfo + 1310736 + ($188 + -3 << 2) | 0;
      if ((HEAP32[$202 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$202 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $205 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $205;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($210 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $205;
      break;
     }
    }
    if ($69) {
     $72 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
     $75 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
     L35 : do if (($72 | 0) > ($75 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $75;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $90 = $75;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$0 >> 2] = $75;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $72;
      if (($72 | 0) < ($75 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $90 = $72;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($75 | 0)) HEAP32[$wk$1 >> 2] = $72;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $90 = $72;
     } while (0);
     $92 = ($90 << 16 >> 16) * 7 | 0;
     $94 = $labelInfo + 1310736 + ($92 + -7 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 1;
     $98 = $labelInfo + 1310736 + ($92 + -6 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $i$2;
     $102 = $labelInfo + 1310736 + ($92 + -5 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($92 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $63;
     $146 = $64 * 7 | 0;
     $148 = $labelInfo + 1310736 + ($146 + -7 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
     $152 = $labelInfo + 1310736 + ($146 + -6 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $i$2;
     $156 = $labelInfo + 1310736 + ($146 + -5 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $j$0;
     $160 = $labelInfo + 1310736 + ($146 + -4 << 2) | 0;
     if ((HEAP32[$160 >> 2] | 0) > ($i$2 | 0)) HEAP32[$160 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($146 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $113 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
    $116 = HEAP32[$labelInfo + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $116;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $131 = $116;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$2 >> 2] = $116;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $131 = $113;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($116 | 0)) HEAP32[$wk$3 >> 2] = $113;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $labelInfo + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $labelInfo + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $i$2;
    $143 = $labelInfo + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $23 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $233 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $235 = HEAP32[$wk$4 >> 2] | 0;
   if (($235 | 0) == ($i$3 | 0)) {
    $241 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $241 = HEAP32[$labelInfo + 1179664 + ($235 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $241;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $244 = $labelInfo + 8 | 0;
  $245 = $j$1$lcssa + -1 | 0;
  HEAP32[$244 >> 2] = $245;
  if (!$245) $$0 = 0; else {
   _memset($233 | 0, 0, $245 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $245 << 4 | 0) | 0;
   $251 = $245;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($251 | 0)) {
     $i$5 = 0;
     break;
    }
    $252 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($252 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($252 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($252 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($252 | 3) << 2) >> 2] = 0;
    $251 = HEAP32[$244 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $264 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $265 = $i$5 * 7 | 0;
    $268 = $labelInfo + 12 + ($264 << 2) | 0;
    HEAP32[$268 >> 2] = (HEAP32[$268 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($265 << 2) >> 2] | 0);
    $275 = $264 << 1;
    $276 = $labelInfo + 655376 + ($275 << 3) | 0;
    HEAPF64[$276 >> 3] = +HEAPF64[$276 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($265 + 1 << 2) >> 2] | 0);
    $284 = $labelInfo + 655376 + (($275 | 1) << 3) | 0;
    HEAPF64[$284 >> 3] = +HEAPF64[$284 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($265 + 2 << 2) >> 2] | 0);
    $287 = $264 << 2;
    $288 = $labelInfo + 131084 + ($287 << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($265 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) > ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($287 | 1) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($265 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) < ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $labelInfo + 131084 + (($287 | 2) << 2) | 0;
    $306 = HEAP32[$labelInfo + 1310736 + ($265 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) > ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $309 = $labelInfo + 131084 + (($287 | 3) << 2) | 0;
    $313 = HEAP32[$labelInfo + 1310736 + ($265 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$309 >> 2] | 0) < ($313 | 0)) HEAP32[$309 >> 2] = $313;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$244 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $318 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $321 = $i$6 << 1;
    $322 = $labelInfo + 655376 + ($321 << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$318 >> 2] | 0);
    $328 = $labelInfo + 655376 + (($321 | 1) << 3) | 0;
    HEAPF64[$328 >> 3] = +HEAPF64[$328 >> 3] / +(HEAP32[$318 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $108 = 0, $11 = 0, $113 = 0, $116 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $146 = 0, $148 = 0, $152 = 0, $156 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $2 = 0, $202 = 0, $205 = 0, $210 = 0, $23 = 0, $233 = 0, $235 = 0, $241 = 0, $244 = 0, $245 = 0, $251 = 0, $252 = 0, $264 = 0, $265 = 0, $268 = 0, $27 = 0, $275 = 0, $276 = 0, $284 = 0, $287 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $3 = 0, $302 = 0, $306 = 0, $309 = 0, $31 = 0, $313 = 0, $318 = 0, $321 = 0, $322 = 0, $328 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $53 = 0, $57 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $23 = $xsize << 1;
 $27 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $31 = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($31 & 240) + 24 + ($31 << 4 & 240) + ((HEAPU8[$pnt$1 + 1 >> 0] | 0) & 240) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $43 = $pnt2$3 + ($27 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $labelInfo + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $labelInfo + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $i$2;
     $57 = $labelInfo + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($47 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $64 = $63 << 16 >> 16;
    $67 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $67 << 16 >> 16;
    $69 = $67 << 16 >> 16 > 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($69) {
      HEAP16[$pnt2$3 >> 1] = $67;
      $165 = $68 * 7 | 0;
      $167 = $labelInfo + 1310736 + ($165 + -7 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + 1;
      $171 = $labelInfo + 1310736 + ($165 + -6 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $i$2;
      $175 = $labelInfo + 1310736 + ($165 + -5 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $j$0;
      $179 = $labelInfo + 1310736 + ($165 + -3 << 2) | 0;
      if ((HEAP32[$179 >> 2] | 0) < ($i$2 | 0)) HEAP32[$179 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($165 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $185 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $labelInfo + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $labelInfo + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $i$2;
      $198 = $labelInfo + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $j$0;
      $202 = $labelInfo + 1310736 + ($188 + -3 << 2) | 0;
      if ((HEAP32[$202 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$202 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $205 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $205;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($210 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $205;
      break;
     }
    }
    if ($69) {
     $72 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
     $75 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
     L36 : do if (($72 | 0) > ($75 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $75;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $90 = $75;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$0 >> 2] = $75;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $72;
      if (($72 | 0) < ($75 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $90 = $72;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($75 | 0)) HEAP32[$wk$1 >> 2] = $72;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $90 = $72;
     } while (0);
     $92 = ($90 << 16 >> 16) * 7 | 0;
     $94 = $labelInfo + 1310736 + ($92 + -7 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 1;
     $98 = $labelInfo + 1310736 + ($92 + -6 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $i$2;
     $102 = $labelInfo + 1310736 + ($92 + -5 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($92 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $63;
     $146 = $64 * 7 | 0;
     $148 = $labelInfo + 1310736 + ($146 + -7 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
     $152 = $labelInfo + 1310736 + ($146 + -6 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $i$2;
     $156 = $labelInfo + 1310736 + ($146 + -5 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $j$0;
     $160 = $labelInfo + 1310736 + ($146 + -4 << 2) | 0;
     if ((HEAP32[$160 >> 2] | 0) > ($i$2 | 0)) HEAP32[$160 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($146 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $113 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
    $116 = HEAP32[$labelInfo + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $116;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $131 = $116;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$2 >> 2] = $116;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $131 = $113;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($116 | 0)) HEAP32[$wk$3 >> 2] = $113;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $labelInfo + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $labelInfo + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $i$2;
    $143 = $labelInfo + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $23 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $233 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $235 = HEAP32[$wk$4 >> 2] | 0;
   if (($235 | 0) == ($i$3 | 0)) {
    $241 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $241 = HEAP32[$labelInfo + 1179664 + ($235 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $241;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $244 = $labelInfo + 8 | 0;
  $245 = $j$1$lcssa + -1 | 0;
  HEAP32[$244 >> 2] = $245;
  if (!$245) $$0 = 0; else {
   _memset($233 | 0, 0, $245 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $245 << 4 | 0) | 0;
   $251 = $245;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($251 | 0)) {
     $i$5 = 0;
     break;
    }
    $252 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($252 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($252 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($252 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($252 | 3) << 2) >> 2] = 0;
    $251 = HEAP32[$244 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $264 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $265 = $i$5 * 7 | 0;
    $268 = $labelInfo + 12 + ($264 << 2) | 0;
    HEAP32[$268 >> 2] = (HEAP32[$268 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($265 << 2) >> 2] | 0);
    $275 = $264 << 1;
    $276 = $labelInfo + 655376 + ($275 << 3) | 0;
    HEAPF64[$276 >> 3] = +HEAPF64[$276 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($265 + 1 << 2) >> 2] | 0);
    $284 = $labelInfo + 655376 + (($275 | 1) << 3) | 0;
    HEAPF64[$284 >> 3] = +HEAPF64[$284 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($265 + 2 << 2) >> 2] | 0);
    $287 = $264 << 2;
    $288 = $labelInfo + 131084 + ($287 << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($265 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) > ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($287 | 1) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($265 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) < ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $labelInfo + 131084 + (($287 | 2) << 2) | 0;
    $306 = HEAP32[$labelInfo + 1310736 + ($265 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) > ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $309 = $labelInfo + 131084 + (($287 | 3) << 2) | 0;
    $313 = HEAP32[$labelInfo + 1310736 + ($265 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$309 >> 2] | 0) < ($313 | 0)) HEAP32[$309 >> 2] = $313;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$244 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $318 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $321 = $i$6 << 1;
    $322 = $labelInfo + 655376 + ($321 << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$318 >> 2] | 0);
    $328 = $labelInfo + 655376 + (($321 | 1) << 3) | 0;
    HEAPF64[$328 >> 3] = +HEAPF64[$328 >> 3] / +(HEAP32[$318 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $106 = 0, $11 = 0, $111 = 0, $114 = 0, $129 = 0, $131 = 0, $133 = 0, $137 = 0, $141 = 0, $144 = 0, $146 = 0, $150 = 0, $154 = 0, $158 = 0, $163 = 0, $165 = 0, $169 = 0, $17 = 0, $173 = 0, $177 = 0, $18 = 0, $183 = 0, $186 = 0, $188 = 0, $192 = 0, $196 = 0, $2 = 0, $200 = 0, $203 = 0, $208 = 0, $231 = 0, $233 = 0, $239 = 0, $242 = 0, $243 = 0, $249 = 0, $250 = 0, $26 = 0, $262 = 0, $263 = 0, $266 = 0, $27 = 0, $273 = 0, $274 = 0, $282 = 0, $285 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $3 = 0, $300 = 0, $304 = 0, $307 = 0, $311 = 0, $316 = 0, $319 = 0, $320 = 0, $326 = 0, $41 = 0, $42 = 0, $45 = 0, $47 = 0, $51 = 0, $55 = 0, $61 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $70 = 0, $73 = 0, $88 = 0, $90 = 0, $92 = 0, $96 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $26 = 0 - $0 | 0;
 $27 = $xsize * 3 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize * 6 | 0) + 6) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($10 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $41 = $pnt2$3 + ($26 << 1) | 0;
    $42 = HEAP16[$41 >> 1] | 0;
    if ($42 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $42;
     $45 = ($42 << 16 >> 16) * 7 | 0;
     $47 = $labelInfo + 1310736 + ($45 + -7 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
     $51 = $labelInfo + 1310736 + ($45 + -6 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $i$2;
     $55 = $labelInfo + 1310736 + ($45 + -5 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($45 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $61 = HEAP16[$41 + 2 >> 1] | 0;
    $62 = $61 << 16 >> 16;
    $65 = HEAP16[$41 + -2 >> 1] | 0;
    $66 = $65 << 16 >> 16;
    $67 = $65 << 16 >> 16 > 0;
    if ($61 << 16 >> 16 <= 0) {
     if ($67) {
      HEAP16[$pnt2$3 >> 1] = $65;
      $163 = $66 * 7 | 0;
      $165 = $labelInfo + 1310736 + ($163 + -7 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
      $169 = $labelInfo + 1310736 + ($163 + -6 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $i$2;
      $173 = $labelInfo + 1310736 + ($163 + -5 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $j$0;
      $177 = $labelInfo + 1310736 + ($163 + -3 << 2) | 0;
      if ((HEAP32[$177 >> 2] | 0) < ($i$2 | 0)) HEAP32[$177 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($163 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $183 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($183 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $183;
      $186 = ($183 << 16 >> 16) * 7 | 0;
      $188 = $labelInfo + 1310736 + ($186 + -7 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + 1;
      $192 = $labelInfo + 1310736 + ($186 + -6 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $i$2;
      $196 = $labelInfo + 1310736 + ($186 + -5 << 2) | 0;
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + $j$0;
      $200 = $labelInfo + 1310736 + ($186 + -3 << 2) | 0;
      if ((HEAP32[$200 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$200 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $203 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $203;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $203 << 16 >> 16;
      $208 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($208 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($208 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($208 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($208 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $203;
      break;
     }
    }
    if ($67) {
     $70 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
     $73 = HEAP32[$labelInfo + 1179664 + ($66 + -1 << 2) >> 2] | 0;
     L35 : do if (($70 | 0) > ($73 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $73;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $88 = $73;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($70 | 0)) HEAP32[$wk$0 >> 2] = $73;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $70;
      if (($70 | 0) < ($73 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $88 = $70;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($73 | 0)) HEAP32[$wk$1 >> 2] = $70;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $88 = $70;
     } while (0);
     $90 = ($88 << 16 >> 16) * 7 | 0;
     $92 = $labelInfo + 1310736 + ($90 + -7 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + 1;
     $96 = $labelInfo + 1310736 + ($90 + -6 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $i$2;
     $100 = $labelInfo + 1310736 + ($90 + -5 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($90 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $106 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($106 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $61;
     $144 = $62 * 7 | 0;
     $146 = $labelInfo + 1310736 + ($144 + -7 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + 1;
     $150 = $labelInfo + 1310736 + ($144 + -6 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $i$2;
     $154 = $labelInfo + 1310736 + ($144 + -5 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $j$0;
     $158 = $labelInfo + 1310736 + ($144 + -4 << 2) | 0;
     if ((HEAP32[$158 >> 2] | 0) > ($i$2 | 0)) HEAP32[$158 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($144 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $111 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
    $114 = HEAP32[$labelInfo + 1179664 + (($106 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($111 | 0) > ($114 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $114;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $129 = $114;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($111 | 0)) HEAP32[$wk$2 >> 2] = $114;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $111;
     if (($111 | 0) < ($114 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $129 = $111;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($114 | 0)) HEAP32[$wk$3 >> 2] = $111;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $129 = $111;
    } while (0);
    $131 = ($129 << 16 >> 16) * 7 | 0;
    $133 = $labelInfo + 1310736 + ($131 + -7 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
    $137 = $labelInfo + 1310736 + ($131 + -6 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $i$2;
    $141 = $labelInfo + 1310736 + ($131 + -5 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 6 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $27 + 12 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $231 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $233 = HEAP32[$wk$4 >> 2] | 0;
   if (($233 | 0) == ($i$3 | 0)) {
    $239 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $239 = HEAP32[$labelInfo + 1179664 + ($233 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $239;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $242 = $labelInfo + 8 | 0;
  $243 = $j$1$lcssa + -1 | 0;
  HEAP32[$242 >> 2] = $243;
  if (!$243) $$0 = 0; else {
   _memset($231 | 0, 0, $243 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $243 << 4 | 0) | 0;
   $249 = $243;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($249 | 0)) {
     $i$5 = 0;
     break;
    }
    $250 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($250 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($250 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($250 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($250 | 3) << 2) >> 2] = 0;
    $249 = HEAP32[$242 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $262 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $263 = $i$5 * 7 | 0;
    $266 = $labelInfo + 12 + ($262 << 2) | 0;
    HEAP32[$266 >> 2] = (HEAP32[$266 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($263 << 2) >> 2] | 0);
    $273 = $262 << 1;
    $274 = $labelInfo + 655376 + ($273 << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($263 + 1 << 2) >> 2] | 0);
    $282 = $labelInfo + 655376 + (($273 | 1) << 3) | 0;
    HEAPF64[$282 >> 3] = +HEAPF64[$282 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($263 + 2 << 2) >> 2] | 0);
    $285 = $262 << 2;
    $286 = $labelInfo + 131084 + ($285 << 2) | 0;
    $290 = HEAP32[$labelInfo + 1310736 + ($263 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $labelInfo + 131084 + (($285 | 1) << 2) | 0;
    $297 = HEAP32[$labelInfo + 1310736 + ($263 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $300 = $labelInfo + 131084 + (($285 | 2) << 2) | 0;
    $304 = HEAP32[$labelInfo + 1310736 + ($263 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$300 >> 2] | 0) > ($304 | 0)) HEAP32[$300 >> 2] = $304;
    $307 = $labelInfo + 131084 + (($285 | 3) << 2) | 0;
    $311 = HEAP32[$labelInfo + 1310736 + ($263 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$307 >> 2] | 0) < ($311 | 0)) HEAP32[$307 >> 2] = $311;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$242 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $316 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $319 = $i$6 << 1;
    $320 = $labelInfo + 655376 + ($319 << 3) | 0;
    HEAPF64[$320 >> 3] = +HEAPF64[$320 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $326 = $labelInfo + 655376 + (($319 | 1) << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $106 = 0, $11 = 0, $111 = 0, $114 = 0, $129 = 0, $131 = 0, $133 = 0, $137 = 0, $141 = 0, $144 = 0, $146 = 0, $150 = 0, $154 = 0, $158 = 0, $163 = 0, $165 = 0, $169 = 0, $17 = 0, $173 = 0, $177 = 0, $18 = 0, $183 = 0, $186 = 0, $188 = 0, $192 = 0, $196 = 0, $2 = 0, $200 = 0, $203 = 0, $208 = 0, $231 = 0, $233 = 0, $239 = 0, $242 = 0, $243 = 0, $249 = 0, $250 = 0, $26 = 0, $262 = 0, $263 = 0, $266 = 0, $27 = 0, $273 = 0, $274 = 0, $282 = 0, $285 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $3 = 0, $300 = 0, $304 = 0, $307 = 0, $311 = 0, $316 = 0, $319 = 0, $320 = 0, $326 = 0, $41 = 0, $42 = 0, $45 = 0, $47 = 0, $51 = 0, $55 = 0, $61 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $70 = 0, $73 = 0, $88 = 0, $90 = 0, $92 = 0, $96 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $26 = 0 - $0 | 0;
 $27 = $xsize * 3 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize * 6 | 0) + 6) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $41 = $pnt2$3 + ($26 << 1) | 0;
    $42 = HEAP16[$41 >> 1] | 0;
    if ($42 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $42;
     $45 = ($42 << 16 >> 16) * 7 | 0;
     $47 = $labelInfo + 1310736 + ($45 + -7 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
     $51 = $labelInfo + 1310736 + ($45 + -6 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $i$2;
     $55 = $labelInfo + 1310736 + ($45 + -5 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($45 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $61 = HEAP16[$41 + 2 >> 1] | 0;
    $62 = $61 << 16 >> 16;
    $65 = HEAP16[$41 + -2 >> 1] | 0;
    $66 = $65 << 16 >> 16;
    $67 = $65 << 16 >> 16 > 0;
    if ($61 << 16 >> 16 <= 0) {
     if ($67) {
      HEAP16[$pnt2$3 >> 1] = $65;
      $163 = $66 * 7 | 0;
      $165 = $labelInfo + 1310736 + ($163 + -7 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
      $169 = $labelInfo + 1310736 + ($163 + -6 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $i$2;
      $173 = $labelInfo + 1310736 + ($163 + -5 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $j$0;
      $177 = $labelInfo + 1310736 + ($163 + -3 << 2) | 0;
      if ((HEAP32[$177 >> 2] | 0) < ($i$2 | 0)) HEAP32[$177 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($163 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $183 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($183 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $183;
      $186 = ($183 << 16 >> 16) * 7 | 0;
      $188 = $labelInfo + 1310736 + ($186 + -7 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + 1;
      $192 = $labelInfo + 1310736 + ($186 + -6 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $i$2;
      $196 = $labelInfo + 1310736 + ($186 + -5 << 2) | 0;
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + $j$0;
      $200 = $labelInfo + 1310736 + ($186 + -3 << 2) | 0;
      if ((HEAP32[$200 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$200 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $203 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $203;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $203 << 16 >> 16;
      $208 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($208 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($208 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($208 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($208 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $203;
      break;
     }
    }
    if ($67) {
     $70 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
     $73 = HEAP32[$labelInfo + 1179664 + ($66 + -1 << 2) >> 2] | 0;
     L36 : do if (($70 | 0) > ($73 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $73;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $88 = $73;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($70 | 0)) HEAP32[$wk$0 >> 2] = $73;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $70;
      if (($70 | 0) < ($73 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $88 = $70;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($73 | 0)) HEAP32[$wk$1 >> 2] = $70;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $88 = $70;
     } while (0);
     $90 = ($88 << 16 >> 16) * 7 | 0;
     $92 = $labelInfo + 1310736 + ($90 + -7 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + 1;
     $96 = $labelInfo + 1310736 + ($90 + -6 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $i$2;
     $100 = $labelInfo + 1310736 + ($90 + -5 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($90 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $106 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($106 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $61;
     $144 = $62 * 7 | 0;
     $146 = $labelInfo + 1310736 + ($144 + -7 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + 1;
     $150 = $labelInfo + 1310736 + ($144 + -6 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $i$2;
     $154 = $labelInfo + 1310736 + ($144 + -5 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $j$0;
     $158 = $labelInfo + 1310736 + ($144 + -4 << 2) | 0;
     if ((HEAP32[$158 >> 2] | 0) > ($i$2 | 0)) HEAP32[$158 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($144 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $111 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
    $114 = HEAP32[$labelInfo + 1179664 + (($106 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($111 | 0) > ($114 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $114;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $129 = $114;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($111 | 0)) HEAP32[$wk$2 >> 2] = $114;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $111;
     if (($111 | 0) < ($114 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $129 = $111;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($114 | 0)) HEAP32[$wk$3 >> 2] = $111;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $129 = $111;
    } while (0);
    $131 = ($129 << 16 >> 16) * 7 | 0;
    $133 = $labelInfo + 1310736 + ($131 + -7 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
    $137 = $labelInfo + 1310736 + ($131 + -6 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $i$2;
    $141 = $labelInfo + 1310736 + ($131 + -5 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 6 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $27 + 12 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $231 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $233 = HEAP32[$wk$4 >> 2] | 0;
   if (($233 | 0) == ($i$3 | 0)) {
    $239 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $239 = HEAP32[$labelInfo + 1179664 + ($233 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $239;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $242 = $labelInfo + 8 | 0;
  $243 = $j$1$lcssa + -1 | 0;
  HEAP32[$242 >> 2] = $243;
  if (!$243) $$0 = 0; else {
   _memset($231 | 0, 0, $243 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $243 << 4 | 0) | 0;
   $249 = $243;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($249 | 0)) {
     $i$5 = 0;
     break;
    }
    $250 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($250 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($250 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($250 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($250 | 3) << 2) >> 2] = 0;
    $249 = HEAP32[$242 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $262 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $263 = $i$5 * 7 | 0;
    $266 = $labelInfo + 12 + ($262 << 2) | 0;
    HEAP32[$266 >> 2] = (HEAP32[$266 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($263 << 2) >> 2] | 0);
    $273 = $262 << 1;
    $274 = $labelInfo + 655376 + ($273 << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($263 + 1 << 2) >> 2] | 0);
    $282 = $labelInfo + 655376 + (($273 | 1) << 3) | 0;
    HEAPF64[$282 >> 3] = +HEAPF64[$282 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($263 + 2 << 2) >> 2] | 0);
    $285 = $262 << 2;
    $286 = $labelInfo + 131084 + ($285 << 2) | 0;
    $290 = HEAP32[$labelInfo + 1310736 + ($263 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $labelInfo + 131084 + (($285 | 1) << 2) | 0;
    $297 = HEAP32[$labelInfo + 1310736 + ($263 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $300 = $labelInfo + 131084 + (($285 | 2) << 2) | 0;
    $304 = HEAP32[$labelInfo + 1310736 + ($263 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$300 >> 2] | 0) > ($304 | 0)) HEAP32[$300 >> 2] = $304;
    $307 = $labelInfo + 131084 + (($285 | 3) << 2) | 0;
    $311 = HEAP32[$labelInfo + 1310736 + ($263 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$307 >> 2] | 0) < ($311 | 0)) HEAP32[$307 >> 2] = $311;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$242 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $316 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $319 = $i$6 << 1;
    $320 = $labelInfo + 655376 + ($319 << 3) | 0;
    HEAPF64[$320 >> 3] = +HEAPF64[$320 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $326 = $labelInfo + 655376 + (($319 | 1) << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $107 = 0, $11 = 0, $112 = 0, $115 = 0, $130 = 0, $132 = 0, $134 = 0, $138 = 0, $142 = 0, $145 = 0, $147 = 0, $151 = 0, $155 = 0, $159 = 0, $164 = 0, $166 = 0, $17 = 0, $170 = 0, $174 = 0, $178 = 0, $18 = 0, $184 = 0, $187 = 0, $189 = 0, $193 = 0, $197 = 0, $2 = 0, $201 = 0, $204 = 0, $209 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $26 = 0, $263 = 0, $264 = 0, $267 = 0, $27 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $3 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $42 = 0, $43 = 0, $46 = 0, $48 = 0, $52 = 0, $56 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $71 = 0, $74 = 0, $89 = 0, $91 = 0, $93 = 0, $97 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $26 = 0 - $0 | 0;
 $27 = $xsize << 2;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($10 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $42 = $pnt2$3 + ($26 << 1) | 0;
    $43 = HEAP16[$42 >> 1] | 0;
    if ($43 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $43;
     $46 = ($43 << 16 >> 16) * 7 | 0;
     $48 = $labelInfo + 1310736 + ($46 + -7 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
     $52 = $labelInfo + 1310736 + ($46 + -6 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $i$2;
     $56 = $labelInfo + 1310736 + ($46 + -5 << 2) | 0;
     HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($46 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $62 = HEAP16[$42 + 2 >> 1] | 0;
    $63 = $62 << 16 >> 16;
    $66 = HEAP16[$42 + -2 >> 1] | 0;
    $67 = $66 << 16 >> 16;
    $68 = $66 << 16 >> 16 > 0;
    if ($62 << 16 >> 16 <= 0) {
     if ($68) {
      HEAP16[$pnt2$3 >> 1] = $66;
      $164 = $67 * 7 | 0;
      $166 = $labelInfo + 1310736 + ($164 + -7 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + 1;
      $170 = $labelInfo + 1310736 + ($164 + -6 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $i$2;
      $174 = $labelInfo + 1310736 + ($164 + -5 << 2) | 0;
      HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + $j$0;
      $178 = $labelInfo + 1310736 + ($164 + -3 << 2) | 0;
      if ((HEAP32[$178 >> 2] | 0) < ($i$2 | 0)) HEAP32[$178 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($164 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $184 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($184 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $184;
      $187 = ($184 << 16 >> 16) * 7 | 0;
      $189 = $labelInfo + 1310736 + ($187 + -7 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + 1;
      $193 = $labelInfo + 1310736 + ($187 + -6 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $i$2;
      $197 = $labelInfo + 1310736 + ($187 + -5 << 2) | 0;
      HEAP32[$197 >> 2] = (HEAP32[$197 >> 2] | 0) + $j$0;
      $201 = $labelInfo + 1310736 + ($187 + -3 << 2) | 0;
      if ((HEAP32[$201 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$201 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $204 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $204;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $204 << 16 >> 16;
      $209 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($209 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($209 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($209 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($209 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($209 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($209 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($209 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $204;
      break;
     }
    }
    if ($68) {
     $71 = HEAP32[$labelInfo + 1179664 + ($63 + -1 << 2) >> 2] | 0;
     $74 = HEAP32[$labelInfo + 1179664 + ($67 + -1 << 2) >> 2] | 0;
     L35 : do if (($71 | 0) > ($74 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $74;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $89 = $74;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($71 | 0)) HEAP32[$wk$0 >> 2] = $74;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $71;
      if (($71 | 0) < ($74 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $89 = $71;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($74 | 0)) HEAP32[$wk$1 >> 2] = $71;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $89 = $71;
     } while (0);
     $91 = ($89 << 16 >> 16) * 7 | 0;
     $93 = $labelInfo + 1310736 + ($91 + -7 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + 1;
     $97 = $labelInfo + 1310736 + ($91 + -6 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $i$2;
     $101 = $labelInfo + 1310736 + ($91 + -5 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($91 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $107 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($107 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $62;
     $145 = $63 * 7 | 0;
     $147 = $labelInfo + 1310736 + ($145 + -7 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + 1;
     $151 = $labelInfo + 1310736 + ($145 + -6 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $i$2;
     $155 = $labelInfo + 1310736 + ($145 + -5 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $j$0;
     $159 = $labelInfo + 1310736 + ($145 + -4 << 2) | 0;
     if ((HEAP32[$159 >> 2] | 0) > ($i$2 | 0)) HEAP32[$159 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($145 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $112 = HEAP32[$labelInfo + 1179664 + ($63 + -1 << 2) >> 2] | 0;
    $115 = HEAP32[$labelInfo + 1179664 + (($107 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($112 | 0) > ($115 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $115;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $130 = $115;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($112 | 0)) HEAP32[$wk$2 >> 2] = $115;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $112;
     if (($112 | 0) < ($115 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $130 = $112;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($115 | 0)) HEAP32[$wk$3 >> 2] = $112;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $130 = $112;
    } while (0);
    $132 = ($130 << 16 >> 16) * 7 | 0;
    $134 = $labelInfo + 1310736 + ($132 + -7 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
    $138 = $labelInfo + 1310736 + ($132 + -6 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $i$2;
    $142 = $labelInfo + 1310736 + ($132 + -5 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $27 + 16 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $234 = HEAP32[$wk$4 >> 2] | 0;
   if (($234 | 0) == ($i$3 | 0)) {
    $240 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $240 = HEAP32[$labelInfo + 1179664 + ($234 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $240;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $243 = $labelInfo + 8 | 0;
  $244 = $j$1$lcssa + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $250 = $244;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($250 | 0)) {
     $i$5 = 0;
     break;
    }
    $251 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($251 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($251 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $250 = HEAP32[$243 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $263 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $i$5 * 7 | 0;
    $267 = $labelInfo + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $labelInfo + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $labelInfo + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $labelInfo + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $labelInfo + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$labelInfo + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $labelInfo + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$labelInfo + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $320 = $i$6 << 1;
    $321 = $labelInfo + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $labelInfo + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $107 = 0, $11 = 0, $112 = 0, $115 = 0, $130 = 0, $132 = 0, $134 = 0, $138 = 0, $142 = 0, $145 = 0, $147 = 0, $151 = 0, $155 = 0, $159 = 0, $164 = 0, $166 = 0, $17 = 0, $170 = 0, $174 = 0, $178 = 0, $18 = 0, $184 = 0, $187 = 0, $189 = 0, $193 = 0, $197 = 0, $2 = 0, $201 = 0, $204 = 0, $209 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $26 = 0, $263 = 0, $264 = 0, $267 = 0, $27 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $3 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $42 = 0, $43 = 0, $46 = 0, $48 = 0, $52 = 0, $56 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $71 = 0, $74 = 0, $89 = 0, $91 = 0, $93 = 0, $97 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $26 = 0 - $0 | 0;
 $27 = $xsize << 2;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $42 = $pnt2$3 + ($26 << 1) | 0;
    $43 = HEAP16[$42 >> 1] | 0;
    if ($43 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $43;
     $46 = ($43 << 16 >> 16) * 7 | 0;
     $48 = $labelInfo + 1310736 + ($46 + -7 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
     $52 = $labelInfo + 1310736 + ($46 + -6 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $i$2;
     $56 = $labelInfo + 1310736 + ($46 + -5 << 2) | 0;
     HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($46 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $62 = HEAP16[$42 + 2 >> 1] | 0;
    $63 = $62 << 16 >> 16;
    $66 = HEAP16[$42 + -2 >> 1] | 0;
    $67 = $66 << 16 >> 16;
    $68 = $66 << 16 >> 16 > 0;
    if ($62 << 16 >> 16 <= 0) {
     if ($68) {
      HEAP16[$pnt2$3 >> 1] = $66;
      $164 = $67 * 7 | 0;
      $166 = $labelInfo + 1310736 + ($164 + -7 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + 1;
      $170 = $labelInfo + 1310736 + ($164 + -6 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $i$2;
      $174 = $labelInfo + 1310736 + ($164 + -5 << 2) | 0;
      HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + $j$0;
      $178 = $labelInfo + 1310736 + ($164 + -3 << 2) | 0;
      if ((HEAP32[$178 >> 2] | 0) < ($i$2 | 0)) HEAP32[$178 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($164 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $184 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($184 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $184;
      $187 = ($184 << 16 >> 16) * 7 | 0;
      $189 = $labelInfo + 1310736 + ($187 + -7 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + 1;
      $193 = $labelInfo + 1310736 + ($187 + -6 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $i$2;
      $197 = $labelInfo + 1310736 + ($187 + -5 << 2) | 0;
      HEAP32[$197 >> 2] = (HEAP32[$197 >> 2] | 0) + $j$0;
      $201 = $labelInfo + 1310736 + ($187 + -3 << 2) | 0;
      if ((HEAP32[$201 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$201 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $204 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $204;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $204 << 16 >> 16;
      $209 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($209 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($209 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($209 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($209 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($209 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($209 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($209 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $204;
      break;
     }
    }
    if ($68) {
     $71 = HEAP32[$labelInfo + 1179664 + ($63 + -1 << 2) >> 2] | 0;
     $74 = HEAP32[$labelInfo + 1179664 + ($67 + -1 << 2) >> 2] | 0;
     L36 : do if (($71 | 0) > ($74 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $74;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $89 = $74;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($71 | 0)) HEAP32[$wk$0 >> 2] = $74;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $71;
      if (($71 | 0) < ($74 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $89 = $71;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($74 | 0)) HEAP32[$wk$1 >> 2] = $71;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $89 = $71;
     } while (0);
     $91 = ($89 << 16 >> 16) * 7 | 0;
     $93 = $labelInfo + 1310736 + ($91 + -7 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + 1;
     $97 = $labelInfo + 1310736 + ($91 + -6 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $i$2;
     $101 = $labelInfo + 1310736 + ($91 + -5 << 2) | 0;
     HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($91 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $107 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($107 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $62;
     $145 = $63 * 7 | 0;
     $147 = $labelInfo + 1310736 + ($145 + -7 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + 1;
     $151 = $labelInfo + 1310736 + ($145 + -6 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $i$2;
     $155 = $labelInfo + 1310736 + ($145 + -5 << 2) | 0;
     HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $j$0;
     $159 = $labelInfo + 1310736 + ($145 + -4 << 2) | 0;
     if ((HEAP32[$159 >> 2] | 0) > ($i$2 | 0)) HEAP32[$159 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($145 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $112 = HEAP32[$labelInfo + 1179664 + ($63 + -1 << 2) >> 2] | 0;
    $115 = HEAP32[$labelInfo + 1179664 + (($107 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($112 | 0) > ($115 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $115;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $130 = $115;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($112 | 0)) HEAP32[$wk$2 >> 2] = $115;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $112;
     if (($112 | 0) < ($115 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $130 = $112;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($115 | 0)) HEAP32[$wk$3 >> 2] = $112;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $130 = $112;
    } while (0);
    $132 = ($130 << 16 >> 16) * 7 | 0;
    $134 = $labelInfo + 1310736 + ($132 + -7 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
    $138 = $labelInfo + 1310736 + ($132 + -6 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $i$2;
    $142 = $labelInfo + 1310736 + ($132 + -5 << 2) | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $27 + 16 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $234 = HEAP32[$wk$4 >> 2] | 0;
   if (($234 | 0) == ($i$3 | 0)) {
    $240 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $240 = HEAP32[$labelInfo + 1179664 + ($234 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $240;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $243 = $labelInfo + 8 | 0;
  $244 = $j$1$lcssa + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $250 = $244;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($250 | 0)) {
     $i$5 = 0;
     break;
    }
    $251 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($251 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($251 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $250 = HEAP32[$243 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $263 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $i$5 * 7 | 0;
    $267 = $labelInfo + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $labelInfo + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $labelInfo + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $labelInfo + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $labelInfo + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$labelInfo + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $labelInfo + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$labelInfo + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $320 = $i$6 << 1;
    $321 = $labelInfo + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $labelInfo + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $106 = 0, $11 = 0, $111 = 0, $114 = 0, $129 = 0, $131 = 0, $133 = 0, $137 = 0, $141 = 0, $144 = 0, $146 = 0, $150 = 0, $154 = 0, $158 = 0, $163 = 0, $165 = 0, $169 = 0, $17 = 0, $173 = 0, $177 = 0, $18 = 0, $183 = 0, $186 = 0, $188 = 0, $192 = 0, $196 = 0, $2 = 0, $200 = 0, $203 = 0, $208 = 0, $231 = 0, $233 = 0, $239 = 0, $242 = 0, $243 = 0, $249 = 0, $250 = 0, $26 = 0, $262 = 0, $263 = 0, $266 = 0, $27 = 0, $273 = 0, $274 = 0, $282 = 0, $285 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $3 = 0, $300 = 0, $304 = 0, $307 = 0, $311 = 0, $316 = 0, $319 = 0, $320 = 0, $326 = 0, $41 = 0, $42 = 0, $45 = 0, $47 = 0, $51 = 0, $55 = 0, $61 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $70 = 0, $73 = 0, $88 = 0, $90 = 0, $92 = 0, $96 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $26 = 0 - $0 | 0;
 $27 = $xsize << 2;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($10 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $41 = $pnt2$3 + ($26 << 1) | 0;
    $42 = HEAP16[$41 >> 1] | 0;
    if ($42 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $42;
     $45 = ($42 << 16 >> 16) * 7 | 0;
     $47 = $labelInfo + 1310736 + ($45 + -7 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
     $51 = $labelInfo + 1310736 + ($45 + -6 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $i$2;
     $55 = $labelInfo + 1310736 + ($45 + -5 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($45 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $61 = HEAP16[$41 + 2 >> 1] | 0;
    $62 = $61 << 16 >> 16;
    $65 = HEAP16[$41 + -2 >> 1] | 0;
    $66 = $65 << 16 >> 16;
    $67 = $65 << 16 >> 16 > 0;
    if ($61 << 16 >> 16 <= 0) {
     if ($67) {
      HEAP16[$pnt2$3 >> 1] = $65;
      $163 = $66 * 7 | 0;
      $165 = $labelInfo + 1310736 + ($163 + -7 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
      $169 = $labelInfo + 1310736 + ($163 + -6 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $i$2;
      $173 = $labelInfo + 1310736 + ($163 + -5 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $j$0;
      $177 = $labelInfo + 1310736 + ($163 + -3 << 2) | 0;
      if ((HEAP32[$177 >> 2] | 0) < ($i$2 | 0)) HEAP32[$177 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($163 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $183 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($183 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $183;
      $186 = ($183 << 16 >> 16) * 7 | 0;
      $188 = $labelInfo + 1310736 + ($186 + -7 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + 1;
      $192 = $labelInfo + 1310736 + ($186 + -6 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $i$2;
      $196 = $labelInfo + 1310736 + ($186 + -5 << 2) | 0;
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + $j$0;
      $200 = $labelInfo + 1310736 + ($186 + -3 << 2) | 0;
      if ((HEAP32[$200 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$200 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $203 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $203;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $203 << 16 >> 16;
      $208 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($208 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($208 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($208 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($208 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $203;
      break;
     }
    }
    if ($67) {
     $70 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
     $73 = HEAP32[$labelInfo + 1179664 + ($66 + -1 << 2) >> 2] | 0;
     L35 : do if (($70 | 0) > ($73 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $73;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $88 = $73;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($70 | 0)) HEAP32[$wk$0 >> 2] = $73;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $70;
      if (($70 | 0) < ($73 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $88 = $70;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($73 | 0)) HEAP32[$wk$1 >> 2] = $70;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $88 = $70;
     } while (0);
     $90 = ($88 << 16 >> 16) * 7 | 0;
     $92 = $labelInfo + 1310736 + ($90 + -7 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + 1;
     $96 = $labelInfo + 1310736 + ($90 + -6 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $i$2;
     $100 = $labelInfo + 1310736 + ($90 + -5 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($90 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $106 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($106 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $61;
     $144 = $62 * 7 | 0;
     $146 = $labelInfo + 1310736 + ($144 + -7 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + 1;
     $150 = $labelInfo + 1310736 + ($144 + -6 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $i$2;
     $154 = $labelInfo + 1310736 + ($144 + -5 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $j$0;
     $158 = $labelInfo + 1310736 + ($144 + -4 << 2) | 0;
     if ((HEAP32[$158 >> 2] | 0) > ($i$2 | 0)) HEAP32[$158 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($144 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $111 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
    $114 = HEAP32[$labelInfo + 1179664 + (($106 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($111 | 0) > ($114 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $114;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $129 = $114;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($111 | 0)) HEAP32[$wk$2 >> 2] = $114;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $111;
     if (($111 | 0) < ($114 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $129 = $111;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($114 | 0)) HEAP32[$wk$3 >> 2] = $111;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $129 = $111;
    } while (0);
    $131 = ($129 << 16 >> 16) * 7 | 0;
    $133 = $labelInfo + 1310736 + ($131 + -7 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
    $137 = $labelInfo + 1310736 + ($131 + -6 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $i$2;
    $141 = $labelInfo + 1310736 + ($131 + -5 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $27 + 16 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $231 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $233 = HEAP32[$wk$4 >> 2] | 0;
   if (($233 | 0) == ($i$3 | 0)) {
    $239 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $239 = HEAP32[$labelInfo + 1179664 + ($233 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $239;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $242 = $labelInfo + 8 | 0;
  $243 = $j$1$lcssa + -1 | 0;
  HEAP32[$242 >> 2] = $243;
  if (!$243) $$0 = 0; else {
   _memset($231 | 0, 0, $243 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $243 << 4 | 0) | 0;
   $249 = $243;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($249 | 0)) {
     $i$5 = 0;
     break;
    }
    $250 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($250 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($250 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($250 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($250 | 3) << 2) >> 2] = 0;
    $249 = HEAP32[$242 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $262 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $263 = $i$5 * 7 | 0;
    $266 = $labelInfo + 12 + ($262 << 2) | 0;
    HEAP32[$266 >> 2] = (HEAP32[$266 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($263 << 2) >> 2] | 0);
    $273 = $262 << 1;
    $274 = $labelInfo + 655376 + ($273 << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($263 + 1 << 2) >> 2] | 0);
    $282 = $labelInfo + 655376 + (($273 | 1) << 3) | 0;
    HEAPF64[$282 >> 3] = +HEAPF64[$282 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($263 + 2 << 2) >> 2] | 0);
    $285 = $262 << 2;
    $286 = $labelInfo + 131084 + ($285 << 2) | 0;
    $290 = HEAP32[$labelInfo + 1310736 + ($263 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $labelInfo + 131084 + (($285 | 1) << 2) | 0;
    $297 = HEAP32[$labelInfo + 1310736 + ($263 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $300 = $labelInfo + 131084 + (($285 | 2) << 2) | 0;
    $304 = HEAP32[$labelInfo + 1310736 + ($263 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$300 >> 2] | 0) > ($304 | 0)) HEAP32[$300 >> 2] = $304;
    $307 = $labelInfo + 131084 + (($285 | 3) << 2) | 0;
    $311 = HEAP32[$labelInfo + 1310736 + ($263 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$307 >> 2] | 0) < ($311 | 0)) HEAP32[$307 >> 2] = $311;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$242 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $316 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $319 = $i$6 << 1;
    $320 = $labelInfo + 655376 + ($319 << 3) | 0;
    HEAPF64[$320 >> 3] = +HEAPF64[$320 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $326 = $labelInfo + 655376 + (($319 | 1) << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $106 = 0, $11 = 0, $111 = 0, $114 = 0, $129 = 0, $131 = 0, $133 = 0, $137 = 0, $141 = 0, $144 = 0, $146 = 0, $150 = 0, $154 = 0, $158 = 0, $163 = 0, $165 = 0, $169 = 0, $17 = 0, $173 = 0, $177 = 0, $18 = 0, $183 = 0, $186 = 0, $188 = 0, $192 = 0, $196 = 0, $2 = 0, $200 = 0, $203 = 0, $208 = 0, $231 = 0, $233 = 0, $239 = 0, $242 = 0, $243 = 0, $249 = 0, $250 = 0, $26 = 0, $262 = 0, $263 = 0, $266 = 0, $27 = 0, $273 = 0, $274 = 0, $282 = 0, $285 = 0, $286 = 0, $290 = 0, $293 = 0, $297 = 0, $3 = 0, $300 = 0, $304 = 0, $307 = 0, $311 = 0, $316 = 0, $319 = 0, $320 = 0, $326 = 0, $41 = 0, $42 = 0, $45 = 0, $47 = 0, $51 = 0, $55 = 0, $61 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $70 = 0, $73 = 0, $88 = 0, $90 = 0, $92 = 0, $96 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $18 = $0 + 1 | 0;
 $26 = 0 - $0 | 0;
 $27 = $xsize << 2;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $18 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $2 + ($18 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $41 = $pnt2$3 + ($26 << 1) | 0;
    $42 = HEAP16[$41 >> 1] | 0;
    if ($42 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $42;
     $45 = ($42 << 16 >> 16) * 7 | 0;
     $47 = $labelInfo + 1310736 + ($45 + -7 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
     $51 = $labelInfo + 1310736 + ($45 + -6 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $i$2;
     $55 = $labelInfo + 1310736 + ($45 + -5 << 2) | 0;
     HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($45 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $61 = HEAP16[$41 + 2 >> 1] | 0;
    $62 = $61 << 16 >> 16;
    $65 = HEAP16[$41 + -2 >> 1] | 0;
    $66 = $65 << 16 >> 16;
    $67 = $65 << 16 >> 16 > 0;
    if ($61 << 16 >> 16 <= 0) {
     if ($67) {
      HEAP16[$pnt2$3 >> 1] = $65;
      $163 = $66 * 7 | 0;
      $165 = $labelInfo + 1310736 + ($163 + -7 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
      $169 = $labelInfo + 1310736 + ($163 + -6 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $i$2;
      $173 = $labelInfo + 1310736 + ($163 + -5 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + $j$0;
      $177 = $labelInfo + 1310736 + ($163 + -3 << 2) | 0;
      if ((HEAP32[$177 >> 2] | 0) < ($i$2 | 0)) HEAP32[$177 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($163 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $183 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($183 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $183;
      $186 = ($183 << 16 >> 16) * 7 | 0;
      $188 = $labelInfo + 1310736 + ($186 + -7 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + 1;
      $192 = $labelInfo + 1310736 + ($186 + -6 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $i$2;
      $196 = $labelInfo + 1310736 + ($186 + -5 << 2) | 0;
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + $j$0;
      $200 = $labelInfo + 1310736 + ($186 + -3 << 2) | 0;
      if ((HEAP32[$200 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$200 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $203 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $203;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $203 << 16 >> 16;
      $208 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($208 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($208 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($208 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($208 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($208 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $203;
      break;
     }
    }
    if ($67) {
     $70 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
     $73 = HEAP32[$labelInfo + 1179664 + ($66 + -1 << 2) >> 2] | 0;
     L36 : do if (($70 | 0) > ($73 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $73;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $88 = $73;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($70 | 0)) HEAP32[$wk$0 >> 2] = $73;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $70;
      if (($70 | 0) < ($73 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $88 = $70;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($73 | 0)) HEAP32[$wk$1 >> 2] = $70;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $88 = $70;
     } while (0);
     $90 = ($88 << 16 >> 16) * 7 | 0;
     $92 = $labelInfo + 1310736 + ($90 + -7 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + 1;
     $96 = $labelInfo + 1310736 + ($90 + -6 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $i$2;
     $100 = $labelInfo + 1310736 + ($90 + -5 << 2) | 0;
     HEAP32[$100 >> 2] = (HEAP32[$100 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($90 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $106 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($106 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $61;
     $144 = $62 * 7 | 0;
     $146 = $labelInfo + 1310736 + ($144 + -7 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + 1;
     $150 = $labelInfo + 1310736 + ($144 + -6 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $i$2;
     $154 = $labelInfo + 1310736 + ($144 + -5 << 2) | 0;
     HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $j$0;
     $158 = $labelInfo + 1310736 + ($144 + -4 << 2) | 0;
     if ((HEAP32[$158 >> 2] | 0) > ($i$2 | 0)) HEAP32[$158 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($144 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $111 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
    $114 = HEAP32[$labelInfo + 1179664 + (($106 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($111 | 0) > ($114 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $114;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $129 = $114;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($111 | 0)) HEAP32[$wk$2 >> 2] = $114;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $111;
     if (($111 | 0) < ($114 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $129 = $111;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($114 | 0)) HEAP32[$wk$3 >> 2] = $111;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $129 = $111;
    } while (0);
    $131 = ($129 << 16 >> 16) * 7 | 0;
    $133 = $labelInfo + 1310736 + ($131 + -7 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
    $137 = $labelInfo + 1310736 + ($131 + -6 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $i$2;
    $141 = $labelInfo + 1310736 + ($131 + -5 << 2) | 0;
    HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $27 + 16 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $231 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $233 = HEAP32[$wk$4 >> 2] | 0;
   if (($233 | 0) == ($i$3 | 0)) {
    $239 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $239 = HEAP32[$labelInfo + 1179664 + ($233 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $239;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $242 = $labelInfo + 8 | 0;
  $243 = $j$1$lcssa + -1 | 0;
  HEAP32[$242 >> 2] = $243;
  if (!$243) $$0 = 0; else {
   _memset($231 | 0, 0, $243 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $243 << 4 | 0) | 0;
   $249 = $243;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($249 | 0)) {
     $i$5 = 0;
     break;
    }
    $250 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($250 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($250 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($250 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($250 | 3) << 2) >> 2] = 0;
    $249 = HEAP32[$242 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $262 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $263 = $i$5 * 7 | 0;
    $266 = $labelInfo + 12 + ($262 << 2) | 0;
    HEAP32[$266 >> 2] = (HEAP32[$266 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($263 << 2) >> 2] | 0);
    $273 = $262 << 1;
    $274 = $labelInfo + 655376 + ($273 << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($263 + 1 << 2) >> 2] | 0);
    $282 = $labelInfo + 655376 + (($273 | 1) << 3) | 0;
    HEAPF64[$282 >> 3] = +HEAPF64[$282 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($263 + 2 << 2) >> 2] | 0);
    $285 = $262 << 2;
    $286 = $labelInfo + 131084 + ($285 << 2) | 0;
    $290 = HEAP32[$labelInfo + 1310736 + ($263 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $labelInfo + 131084 + (($285 | 1) << 2) | 0;
    $297 = HEAP32[$labelInfo + 1310736 + ($263 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $300 = $labelInfo + 131084 + (($285 | 2) << 2) | 0;
    $304 = HEAP32[$labelInfo + 1310736 + ($263 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$300 >> 2] | 0) > ($304 | 0)) HEAP32[$300 >> 2] = $304;
    $307 = $labelInfo + 131084 + (($285 | 3) << 2) | 0;
    $311 = HEAP32[$labelInfo + 1310736 + ($263 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$307 >> 2] | 0) < ($311 | 0)) HEAP32[$307 >> 2] = $311;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$242 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $316 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $319 = $i$6 << 1;
    $320 = $labelInfo + 655376 + ($319 << 3) | 0;
    HEAPF64[$320 >> 3] = +HEAPF64[$320 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $326 = $labelInfo + 655376 + (($319 | 1) << 3) | 0;
    HEAPF64[$326 >> 3] = +HEAPF64[$326 >> 3] / +(HEAP32[$316 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $102 = 0, $108 = 0, $113 = 0, $116 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $146 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $171 = 0, $175 = 0, $179 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $202 = 0, $205 = 0, $210 = 0, $23 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $27 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $33 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $53 = 0, $57 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $8 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $27 = HEAPU8[$pnt$1 >> 0] | 0;
   $33 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($27 & 248) + 12 + ($27 << 5 & 224) + ($33 >>> 3 & 24) + ($33 << 2 & 248) | 0) > ($8 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $43 = $pnt2$3 + ($23 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $labelInfo + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $labelInfo + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $i$2;
     $57 = $labelInfo + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($47 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $64 = $63 << 16 >> 16;
    $67 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $67 << 16 >> 16;
    $69 = $67 << 16 >> 16 > 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($69) {
      HEAP16[$pnt2$3 >> 1] = $67;
      $165 = $68 * 7 | 0;
      $167 = $labelInfo + 1310736 + ($165 + -7 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + 1;
      $171 = $labelInfo + 1310736 + ($165 + -6 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $i$2;
      $175 = $labelInfo + 1310736 + ($165 + -5 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $j$0;
      $179 = $labelInfo + 1310736 + ($165 + -3 << 2) | 0;
      if ((HEAP32[$179 >> 2] | 0) < ($i$2 | 0)) HEAP32[$179 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($165 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $185 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $labelInfo + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $labelInfo + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $i$2;
      $198 = $labelInfo + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $j$0;
      $202 = $labelInfo + 1310736 + ($188 + -3 << 2) | 0;
      if ((HEAP32[$202 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$202 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $205 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $205;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($210 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $205;
      break;
     }
    }
    if ($69) {
     $72 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
     $75 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
     L35 : do if (($72 | 0) > ($75 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $75;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $90 = $75;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$0 >> 2] = $75;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $72;
      if (($72 | 0) < ($75 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $90 = $72;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($75 | 0)) HEAP32[$wk$1 >> 2] = $72;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $90 = $72;
     } while (0);
     $92 = ($90 << 16 >> 16) * 7 | 0;
     $94 = $labelInfo + 1310736 + ($92 + -7 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 1;
     $98 = $labelInfo + 1310736 + ($92 + -6 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $i$2;
     $102 = $labelInfo + 1310736 + ($92 + -5 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($92 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $63;
     $146 = $64 * 7 | 0;
     $148 = $labelInfo + 1310736 + ($146 + -7 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
     $152 = $labelInfo + 1310736 + ($146 + -6 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $i$2;
     $156 = $labelInfo + 1310736 + ($146 + -5 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $j$0;
     $160 = $labelInfo + 1310736 + ($146 + -4 << 2) | 0;
     if ((HEAP32[$160 >> 2] | 0) > ($i$2 | 0)) HEAP32[$160 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($146 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $113 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
    $116 = HEAP32[$labelInfo + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $116;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $131 = $116;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$2 >> 2] = $116;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $131 = $113;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($116 | 0)) HEAP32[$wk$3 >> 2] = $113;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $labelInfo + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $labelInfo + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $i$2;
    $143 = $labelInfo + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $234 = HEAP32[$wk$4 >> 2] | 0;
   if (($234 | 0) == ($i$3 | 0)) {
    $240 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $240 = HEAP32[$labelInfo + 1179664 + ($234 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $240;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $243 = $labelInfo + 8 | 0;
  $244 = $j$1$lcssa + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $250 = $244;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($250 | 0)) {
     $i$5 = 0;
     break;
    }
    $251 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($251 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($251 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $250 = HEAP32[$243 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $263 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $i$5 * 7 | 0;
    $267 = $labelInfo + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $labelInfo + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $labelInfo + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $labelInfo + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $labelInfo + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$labelInfo + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $labelInfo + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$labelInfo + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $320 = $i$6 << 1;
    $321 = $labelInfo + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $labelInfo + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $102 = 0, $108 = 0, $113 = 0, $116 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $146 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $171 = 0, $175 = 0, $179 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $202 = 0, $205 = 0, $210 = 0, $23 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $27 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $33 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $53 = 0, $57 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $8 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $27 = HEAPU8[$pnt$1 >> 0] | 0;
   $33 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($27 & 248) + 12 + ($27 << 5 & 224) + ($33 >>> 3 & 24) + ($33 << 2 & 248) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $43 = $pnt2$3 + ($23 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $labelInfo + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $labelInfo + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $i$2;
     $57 = $labelInfo + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($47 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $64 = $63 << 16 >> 16;
    $67 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $67 << 16 >> 16;
    $69 = $67 << 16 >> 16 > 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($69) {
      HEAP16[$pnt2$3 >> 1] = $67;
      $165 = $68 * 7 | 0;
      $167 = $labelInfo + 1310736 + ($165 + -7 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + 1;
      $171 = $labelInfo + 1310736 + ($165 + -6 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $i$2;
      $175 = $labelInfo + 1310736 + ($165 + -5 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $j$0;
      $179 = $labelInfo + 1310736 + ($165 + -3 << 2) | 0;
      if ((HEAP32[$179 >> 2] | 0) < ($i$2 | 0)) HEAP32[$179 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($165 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $185 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $labelInfo + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $labelInfo + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $i$2;
      $198 = $labelInfo + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $j$0;
      $202 = $labelInfo + 1310736 + ($188 + -3 << 2) | 0;
      if ((HEAP32[$202 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$202 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $205 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $205;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($210 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $205;
      break;
     }
    }
    if ($69) {
     $72 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
     $75 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
     L36 : do if (($72 | 0) > ($75 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $75;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $90 = $75;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$0 >> 2] = $75;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $72;
      if (($72 | 0) < ($75 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $90 = $72;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($75 | 0)) HEAP32[$wk$1 >> 2] = $72;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $90 = $72;
     } while (0);
     $92 = ($90 << 16 >> 16) * 7 | 0;
     $94 = $labelInfo + 1310736 + ($92 + -7 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 1;
     $98 = $labelInfo + 1310736 + ($92 + -6 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $i$2;
     $102 = $labelInfo + 1310736 + ($92 + -5 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($92 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $63;
     $146 = $64 * 7 | 0;
     $148 = $labelInfo + 1310736 + ($146 + -7 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
     $152 = $labelInfo + 1310736 + ($146 + -6 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $i$2;
     $156 = $labelInfo + 1310736 + ($146 + -5 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $j$0;
     $160 = $labelInfo + 1310736 + ($146 + -4 << 2) | 0;
     if ((HEAP32[$160 >> 2] | 0) > ($i$2 | 0)) HEAP32[$160 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($146 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $113 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
    $116 = HEAP32[$labelInfo + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $116;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $131 = $116;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$2 >> 2] = $116;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $131 = $113;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($116 | 0)) HEAP32[$wk$3 >> 2] = $113;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $labelInfo + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $labelInfo + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $i$2;
    $143 = $labelInfo + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $234 = HEAP32[$wk$4 >> 2] | 0;
   if (($234 | 0) == ($i$3 | 0)) {
    $240 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $240 = HEAP32[$labelInfo + 1179664 + ($234 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $240;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $243 = $labelInfo + 8 | 0;
  $244 = $j$1$lcssa + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $250 = $244;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($250 | 0)) {
     $i$5 = 0;
     break;
    }
    $251 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($251 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($251 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $250 = HEAP32[$243 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $263 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $i$5 * 7 | 0;
    $267 = $labelInfo + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $labelInfo + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $labelInfo + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $labelInfo + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $labelInfo + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$labelInfo + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $labelInfo + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$labelInfo + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $320 = $i$6 << 1;
    $321 = $labelInfo + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $labelInfo + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $102 = 0, $108 = 0, $113 = 0, $116 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $146 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $171 = 0, $175 = 0, $179 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $202 = 0, $205 = 0, $210 = 0, $23 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $27 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $33 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $53 = 0, $57 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $8 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $27 = HEAPU8[$pnt$1 >> 0] | 0;
   $33 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($27 & 248) + 10 + ($27 << 5 & 224) + ($33 >>> 3 & 28) + ($33 << 3 & 248) | 0) > ($8 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $43 = $pnt2$3 + ($23 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $labelInfo + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $labelInfo + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $i$2;
     $57 = $labelInfo + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($47 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $64 = $63 << 16 >> 16;
    $67 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $67 << 16 >> 16;
    $69 = $67 << 16 >> 16 > 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($69) {
      HEAP16[$pnt2$3 >> 1] = $67;
      $165 = $68 * 7 | 0;
      $167 = $labelInfo + 1310736 + ($165 + -7 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + 1;
      $171 = $labelInfo + 1310736 + ($165 + -6 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $i$2;
      $175 = $labelInfo + 1310736 + ($165 + -5 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $j$0;
      $179 = $labelInfo + 1310736 + ($165 + -3 << 2) | 0;
      if ((HEAP32[$179 >> 2] | 0) < ($i$2 | 0)) HEAP32[$179 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($165 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $185 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $labelInfo + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $labelInfo + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $i$2;
      $198 = $labelInfo + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $j$0;
      $202 = $labelInfo + 1310736 + ($188 + -3 << 2) | 0;
      if ((HEAP32[$202 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$202 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $205 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $205;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($210 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $205;
      break;
     }
    }
    if ($69) {
     $72 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
     $75 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
     L35 : do if (($72 | 0) > ($75 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $75;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $90 = $75;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$0 >> 2] = $75;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $72;
      if (($72 | 0) < ($75 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $90 = $72;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($75 | 0)) HEAP32[$wk$1 >> 2] = $72;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $90 = $72;
     } while (0);
     $92 = ($90 << 16 >> 16) * 7 | 0;
     $94 = $labelInfo + 1310736 + ($92 + -7 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 1;
     $98 = $labelInfo + 1310736 + ($92 + -6 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $i$2;
     $102 = $labelInfo + 1310736 + ($92 + -5 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($92 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $63;
     $146 = $64 * 7 | 0;
     $148 = $labelInfo + 1310736 + ($146 + -7 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
     $152 = $labelInfo + 1310736 + ($146 + -6 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $i$2;
     $156 = $labelInfo + 1310736 + ($146 + -5 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $j$0;
     $160 = $labelInfo + 1310736 + ($146 + -4 << 2) | 0;
     if ((HEAP32[$160 >> 2] | 0) > ($i$2 | 0)) HEAP32[$160 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($146 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $113 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
    $116 = HEAP32[$labelInfo + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $116;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $131 = $116;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$2 >> 2] = $116;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $131 = $113;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($116 | 0)) HEAP32[$wk$3 >> 2] = $113;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $labelInfo + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $labelInfo + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $i$2;
    $143 = $labelInfo + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $234 = HEAP32[$wk$4 >> 2] | 0;
   if (($234 | 0) == ($i$3 | 0)) {
    $240 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $240 = HEAP32[$labelInfo + 1179664 + ($234 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $240;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $243 = $labelInfo + 8 | 0;
  $244 = $j$1$lcssa + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $250 = $244;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($250 | 0)) {
     $i$5 = 0;
     break;
    }
    $251 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($251 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($251 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $250 = HEAP32[$243 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $263 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $i$5 * 7 | 0;
    $267 = $labelInfo + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $labelInfo + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $labelInfo + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $labelInfo + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $labelInfo + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$labelInfo + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $labelInfo + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$labelInfo + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $320 = $i$6 << 1;
    $321 = $labelInfo + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $labelInfo + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $102 = 0, $108 = 0, $113 = 0, $116 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $146 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $171 = 0, $175 = 0, $179 = 0, $185 = 0, $188 = 0, $190 = 0, $194 = 0, $198 = 0, $202 = 0, $205 = 0, $210 = 0, $23 = 0, $232 = 0, $234 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $27 = 0, $274 = 0, $275 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $33 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $53 = 0, $57 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $8 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $27 = HEAPU8[$pnt$1 >> 0] | 0;
   $33 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($27 & 248) + 10 + ($27 << 5 & 224) + ($33 >>> 3 & 28) + ($33 << 3 & 248) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $43 = $pnt2$3 + ($23 << 1) | 0;
    $44 = HEAP16[$43 >> 1] | 0;
    if ($44 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $44;
     $47 = ($44 << 16 >> 16) * 7 | 0;
     $49 = $labelInfo + 1310736 + ($47 + -7 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     $53 = $labelInfo + 1310736 + ($47 + -6 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $i$2;
     $57 = $labelInfo + 1310736 + ($47 + -5 << 2) | 0;
     HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($47 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $63 = HEAP16[$43 + 2 >> 1] | 0;
    $64 = $63 << 16 >> 16;
    $67 = HEAP16[$43 + -2 >> 1] | 0;
    $68 = $67 << 16 >> 16;
    $69 = $67 << 16 >> 16 > 0;
    if ($63 << 16 >> 16 <= 0) {
     if ($69) {
      HEAP16[$pnt2$3 >> 1] = $67;
      $165 = $68 * 7 | 0;
      $167 = $labelInfo + 1310736 + ($165 + -7 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + 1;
      $171 = $labelInfo + 1310736 + ($165 + -6 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $i$2;
      $175 = $labelInfo + 1310736 + ($165 + -5 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $j$0;
      $179 = $labelInfo + 1310736 + ($165 + -3 << 2) | 0;
      if ((HEAP32[$179 >> 2] | 0) < ($i$2 | 0)) HEAP32[$179 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($165 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $185 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($185 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $185;
      $188 = ($185 << 16 >> 16) * 7 | 0;
      $190 = $labelInfo + 1310736 + ($188 + -7 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + 1;
      $194 = $labelInfo + 1310736 + ($188 + -6 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $i$2;
      $198 = $labelInfo + 1310736 + ($188 + -5 << 2) | 0;
      HEAP32[$198 >> 2] = (HEAP32[$198 >> 2] | 0) + $j$0;
      $202 = $labelInfo + 1310736 + ($188 + -3 << 2) | 0;
      if ((HEAP32[$202 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$202 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $205 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $205;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $205 << 16 >> 16;
      $210 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($210 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($210 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($210 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($210 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $205;
      break;
     }
    }
    if ($69) {
     $72 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
     $75 = HEAP32[$labelInfo + 1179664 + ($68 + -1 << 2) >> 2] | 0;
     L36 : do if (($72 | 0) > ($75 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $75;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $90 = $75;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$0 >> 2] = $75;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $72;
      if (($72 | 0) < ($75 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $90 = $72;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($75 | 0)) HEAP32[$wk$1 >> 2] = $72;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $90 = $72;
     } while (0);
     $92 = ($90 << 16 >> 16) * 7 | 0;
     $94 = $labelInfo + 1310736 + ($92 + -7 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + 1;
     $98 = $labelInfo + 1310736 + ($92 + -6 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $i$2;
     $102 = $labelInfo + 1310736 + ($92 + -5 << 2) | 0;
     HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($92 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($108 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $63;
     $146 = $64 * 7 | 0;
     $148 = $labelInfo + 1310736 + ($146 + -7 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
     $152 = $labelInfo + 1310736 + ($146 + -6 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $i$2;
     $156 = $labelInfo + 1310736 + ($146 + -5 << 2) | 0;
     HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $j$0;
     $160 = $labelInfo + 1310736 + ($146 + -4 << 2) | 0;
     if ((HEAP32[$160 >> 2] | 0) > ($i$2 | 0)) HEAP32[$160 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($146 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $113 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
    $116 = HEAP32[$labelInfo + 1179664 + (($108 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($113 | 0) > ($116 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $116;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $131 = $116;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$2 >> 2] = $116;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $113;
     if (($113 | 0) < ($116 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $131 = $113;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($116 | 0)) HEAP32[$wk$3 >> 2] = $113;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $131 = $113;
    } while (0);
    $133 = ($131 << 16 >> 16) * 7 | 0;
    $135 = $labelInfo + 1310736 + ($133 + -7 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
    $139 = $labelInfo + 1310736 + ($133 + -6 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $i$2;
    $143 = $labelInfo + 1310736 + ($133 + -5 << 2) | 0;
    HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $234 = HEAP32[$wk$4 >> 2] | 0;
   if (($234 | 0) == ($i$3 | 0)) {
    $240 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $240 = HEAP32[$labelInfo + 1179664 + ($234 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $240;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $243 = $labelInfo + 8 | 0;
  $244 = $j$1$lcssa + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $250 = $244;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($250 | 0)) {
     $i$5 = 0;
     break;
    }
    $251 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($251 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($251 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $250 = HEAP32[$243 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $263 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $i$5 * 7 | 0;
    $267 = $labelInfo + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $labelInfo + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $labelInfo + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $labelInfo + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $labelInfo + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$labelInfo + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $labelInfo + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$labelInfo + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $320 = $i$6 << 1;
    $321 = $labelInfo + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $labelInfo + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $104 = 0, $109 = 0, $112 = 0, $127 = 0, $129 = 0, $131 = 0, $135 = 0, $139 = 0, $142 = 0, $144 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $161 = 0, $163 = 0, $167 = 0, $171 = 0, $175 = 0, $181 = 0, $184 = 0, $186 = 0, $190 = 0, $194 = 0, $198 = 0, $201 = 0, $206 = 0, $228 = 0, $23 = 0, $230 = 0, $236 = 0, $239 = 0, $240 = 0, $246 = 0, $247 = 0, $259 = 0, $260 = 0, $263 = 0, $27 = 0, $270 = 0, $271 = 0, $279 = 0, $282 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $304 = 0, $308 = 0, $313 = 0, $316 = 0, $317 = 0, $323 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $49 = 0, $53 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $68 = 0, $71 = 0, $8 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $94 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $27 = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($27 & 240) + 24 + ($27 << 4 & 240) + ((HEAPU8[$pnt$1 + 1 >> 0] | 0) & 240) | 0) > ($8 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $39 = $pnt2$3 + ($23 << 1) | 0;
    $40 = HEAP16[$39 >> 1] | 0;
    if ($40 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $40;
     $43 = ($40 << 16 >> 16) * 7 | 0;
     $45 = $labelInfo + 1310736 + ($43 + -7 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1;
     $49 = $labelInfo + 1310736 + ($43 + -6 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $i$2;
     $53 = $labelInfo + 1310736 + ($43 + -5 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($43 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $59 = HEAP16[$39 + 2 >> 1] | 0;
    $60 = $59 << 16 >> 16;
    $63 = HEAP16[$39 + -2 >> 1] | 0;
    $64 = $63 << 16 >> 16;
    $65 = $63 << 16 >> 16 > 0;
    if ($59 << 16 >> 16 <= 0) {
     if ($65) {
      HEAP16[$pnt2$3 >> 1] = $63;
      $161 = $64 * 7 | 0;
      $163 = $labelInfo + 1310736 + ($161 + -7 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 1;
      $167 = $labelInfo + 1310736 + ($161 + -6 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $i$2;
      $171 = $labelInfo + 1310736 + ($161 + -5 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $j$0;
      $175 = $labelInfo + 1310736 + ($161 + -3 << 2) | 0;
      if ((HEAP32[$175 >> 2] | 0) < ($i$2 | 0)) HEAP32[$175 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($161 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $181 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($181 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $181;
      $184 = ($181 << 16 >> 16) * 7 | 0;
      $186 = $labelInfo + 1310736 + ($184 + -7 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + 1;
      $190 = $labelInfo + 1310736 + ($184 + -6 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $i$2;
      $194 = $labelInfo + 1310736 + ($184 + -5 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $j$0;
      $198 = $labelInfo + 1310736 + ($184 + -3 << 2) | 0;
      if ((HEAP32[$198 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$198 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $201 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $201;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $201 << 16 >> 16;
      $206 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($206 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($206 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($206 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($206 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $201;
      break;
     }
    }
    if ($65) {
     $68 = HEAP32[$labelInfo + 1179664 + ($60 + -1 << 2) >> 2] | 0;
     $71 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
     L35 : do if (($68 | 0) > ($71 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $71;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $86 = $71;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($68 | 0)) HEAP32[$wk$0 >> 2] = $71;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $68;
      if (($68 | 0) < ($71 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $86 = $68;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($71 | 0)) HEAP32[$wk$1 >> 2] = $68;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $86 = $68;
     } while (0);
     $88 = ($86 << 16 >> 16) * 7 | 0;
     $90 = $labelInfo + 1310736 + ($88 + -7 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + 1;
     $94 = $labelInfo + 1310736 + ($88 + -6 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $i$2;
     $98 = $labelInfo + 1310736 + ($88 + -5 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($88 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $104 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($104 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $59;
     $142 = $60 * 7 | 0;
     $144 = $labelInfo + 1310736 + ($142 + -7 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + 1;
     $148 = $labelInfo + 1310736 + ($142 + -6 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $i$2;
     $152 = $labelInfo + 1310736 + ($142 + -5 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $j$0;
     $156 = $labelInfo + 1310736 + ($142 + -4 << 2) | 0;
     if ((HEAP32[$156 >> 2] | 0) > ($i$2 | 0)) HEAP32[$156 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($142 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $109 = HEAP32[$labelInfo + 1179664 + ($60 + -1 << 2) >> 2] | 0;
    $112 = HEAP32[$labelInfo + 1179664 + (($104 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($109 | 0) > ($112 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $112;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $127 = $112;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($109 | 0)) HEAP32[$wk$2 >> 2] = $112;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $109;
     if (($109 | 0) < ($112 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $127 = $109;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($112 | 0)) HEAP32[$wk$3 >> 2] = $109;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $127 = $109;
    } while (0);
    $129 = ($127 << 16 >> 16) * 7 | 0;
    $131 = $labelInfo + 1310736 + ($129 + -7 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + 1;
    $135 = $labelInfo + 1310736 + ($129 + -6 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $i$2;
    $139 = $labelInfo + 1310736 + ($129 + -5 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $228 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $230 = HEAP32[$wk$4 >> 2] | 0;
   if (($230 | 0) == ($i$3 | 0)) {
    $236 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $236 = HEAP32[$labelInfo + 1179664 + ($230 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $236;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $239 = $labelInfo + 8 | 0;
  $240 = $j$1$lcssa + -1 | 0;
  HEAP32[$239 >> 2] = $240;
  if (!$240) $$0 = 0; else {
   _memset($228 | 0, 0, $240 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $240 << 4 | 0) | 0;
   $246 = $240;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($246 | 0)) {
     $i$5 = 0;
     break;
    }
    $247 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($247 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($247 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($247 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($247 | 3) << 2) >> 2] = 0;
    $246 = HEAP32[$239 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $259 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $260 = $i$5 * 7 | 0;
    $263 = $labelInfo + 12 + ($259 << 2) | 0;
    HEAP32[$263 >> 2] = (HEAP32[$263 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($260 << 2) >> 2] | 0);
    $270 = $259 << 1;
    $271 = $labelInfo + 655376 + ($270 << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($260 + 1 << 2) >> 2] | 0);
    $279 = $labelInfo + 655376 + (($270 | 1) << 3) | 0;
    HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($260 + 2 << 2) >> 2] | 0);
    $282 = $259 << 2;
    $283 = $labelInfo + 131084 + ($282 << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($260 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($282 | 1) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($260 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $labelInfo + 131084 + (($282 | 2) << 2) | 0;
    $301 = HEAP32[$labelInfo + 1310736 + ($260 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) > ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $304 = $labelInfo + 131084 + (($282 | 3) << 2) | 0;
    $308 = HEAP32[$labelInfo + 1310736 + ($260 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$304 >> 2] | 0) < ($308 | 0)) HEAP32[$304 >> 2] = $308;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$239 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $313 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $316 = $i$6 << 1;
    $317 = $labelInfo + 655376 + ($316 << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $323 = $labelInfo + 655376 + (($316 | 1) << 3) | 0;
    HEAPF64[$323 >> 3] = +HEAPF64[$323 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $104 = 0, $109 = 0, $112 = 0, $127 = 0, $129 = 0, $131 = 0, $135 = 0, $139 = 0, $142 = 0, $144 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $161 = 0, $163 = 0, $167 = 0, $171 = 0, $175 = 0, $181 = 0, $184 = 0, $186 = 0, $190 = 0, $194 = 0, $198 = 0, $201 = 0, $206 = 0, $228 = 0, $23 = 0, $230 = 0, $236 = 0, $239 = 0, $240 = 0, $246 = 0, $247 = 0, $259 = 0, $260 = 0, $263 = 0, $27 = 0, $270 = 0, $271 = 0, $279 = 0, $282 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $304 = 0, $308 = 0, $313 = 0, $316 = 0, $317 = 0, $323 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $49 = 0, $53 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $68 = 0, $71 = 0, $8 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $94 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $27 = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($27 & 240) + 24 + ($27 << 4 & 240) + ((HEAPU8[$pnt$1 + 1 >> 0] | 0) & 240) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $39 = $pnt2$3 + ($23 << 1) | 0;
    $40 = HEAP16[$39 >> 1] | 0;
    if ($40 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $40;
     $43 = ($40 << 16 >> 16) * 7 | 0;
     $45 = $labelInfo + 1310736 + ($43 + -7 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1;
     $49 = $labelInfo + 1310736 + ($43 + -6 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $i$2;
     $53 = $labelInfo + 1310736 + ($43 + -5 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($43 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $59 = HEAP16[$39 + 2 >> 1] | 0;
    $60 = $59 << 16 >> 16;
    $63 = HEAP16[$39 + -2 >> 1] | 0;
    $64 = $63 << 16 >> 16;
    $65 = $63 << 16 >> 16 > 0;
    if ($59 << 16 >> 16 <= 0) {
     if ($65) {
      HEAP16[$pnt2$3 >> 1] = $63;
      $161 = $64 * 7 | 0;
      $163 = $labelInfo + 1310736 + ($161 + -7 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 1;
      $167 = $labelInfo + 1310736 + ($161 + -6 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $i$2;
      $171 = $labelInfo + 1310736 + ($161 + -5 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $j$0;
      $175 = $labelInfo + 1310736 + ($161 + -3 << 2) | 0;
      if ((HEAP32[$175 >> 2] | 0) < ($i$2 | 0)) HEAP32[$175 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($161 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $181 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($181 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $181;
      $184 = ($181 << 16 >> 16) * 7 | 0;
      $186 = $labelInfo + 1310736 + ($184 + -7 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + 1;
      $190 = $labelInfo + 1310736 + ($184 + -6 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $i$2;
      $194 = $labelInfo + 1310736 + ($184 + -5 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $j$0;
      $198 = $labelInfo + 1310736 + ($184 + -3 << 2) | 0;
      if ((HEAP32[$198 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$198 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $201 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $201;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $201 << 16 >> 16;
      $206 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($206 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($206 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($206 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($206 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $201;
      break;
     }
    }
    if ($65) {
     $68 = HEAP32[$labelInfo + 1179664 + ($60 + -1 << 2) >> 2] | 0;
     $71 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
     L36 : do if (($68 | 0) > ($71 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $71;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $86 = $71;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($68 | 0)) HEAP32[$wk$0 >> 2] = $71;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $68;
      if (($68 | 0) < ($71 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $86 = $68;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($71 | 0)) HEAP32[$wk$1 >> 2] = $68;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $86 = $68;
     } while (0);
     $88 = ($86 << 16 >> 16) * 7 | 0;
     $90 = $labelInfo + 1310736 + ($88 + -7 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + 1;
     $94 = $labelInfo + 1310736 + ($88 + -6 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $i$2;
     $98 = $labelInfo + 1310736 + ($88 + -5 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($88 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $104 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($104 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $59;
     $142 = $60 * 7 | 0;
     $144 = $labelInfo + 1310736 + ($142 + -7 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + 1;
     $148 = $labelInfo + 1310736 + ($142 + -6 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $i$2;
     $152 = $labelInfo + 1310736 + ($142 + -5 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $j$0;
     $156 = $labelInfo + 1310736 + ($142 + -4 << 2) | 0;
     if ((HEAP32[$156 >> 2] | 0) > ($i$2 | 0)) HEAP32[$156 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($142 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $109 = HEAP32[$labelInfo + 1179664 + ($60 + -1 << 2) >> 2] | 0;
    $112 = HEAP32[$labelInfo + 1179664 + (($104 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($109 | 0) > ($112 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $112;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $127 = $112;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($109 | 0)) HEAP32[$wk$2 >> 2] = $112;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $109;
     if (($109 | 0) < ($112 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $127 = $109;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($112 | 0)) HEAP32[$wk$3 >> 2] = $109;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $127 = $109;
    } while (0);
    $129 = ($127 << 16 >> 16) * 7 | 0;
    $131 = $labelInfo + 1310736 + ($129 + -7 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + 1;
    $135 = $labelInfo + 1310736 + ($129 + -6 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $i$2;
    $139 = $labelInfo + 1310736 + ($129 + -5 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $228 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $230 = HEAP32[$wk$4 >> 2] | 0;
   if (($230 | 0) == ($i$3 | 0)) {
    $236 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $236 = HEAP32[$labelInfo + 1179664 + ($230 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $236;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $239 = $labelInfo + 8 | 0;
  $240 = $j$1$lcssa + -1 | 0;
  HEAP32[$239 >> 2] = $240;
  if (!$240) $$0 = 0; else {
   _memset($228 | 0, 0, $240 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $240 << 4 | 0) | 0;
   $246 = $240;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($246 | 0)) {
     $i$5 = 0;
     break;
    }
    $247 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($247 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($247 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($247 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($247 | 3) << 2) >> 2] = 0;
    $246 = HEAP32[$239 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $259 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $260 = $i$5 * 7 | 0;
    $263 = $labelInfo + 12 + ($259 << 2) | 0;
    HEAP32[$263 >> 2] = (HEAP32[$263 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($260 << 2) >> 2] | 0);
    $270 = $259 << 1;
    $271 = $labelInfo + 655376 + ($270 << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($260 + 1 << 2) >> 2] | 0);
    $279 = $labelInfo + 655376 + (($270 | 1) << 3) | 0;
    HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($260 + 2 << 2) >> 2] | 0);
    $282 = $259 << 2;
    $283 = $labelInfo + 131084 + ($282 << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($260 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($282 | 1) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($260 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $labelInfo + 131084 + (($282 | 2) << 2) | 0;
    $301 = HEAP32[$labelInfo + 1310736 + ($260 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) > ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $304 = $labelInfo + 131084 + (($282 | 3) << 2) | 0;
    $308 = HEAP32[$labelInfo + 1310736 + ($260 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$304 >> 2] | 0) < ($308 | 0)) HEAP32[$304 >> 2] = $308;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$239 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $313 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $316 = $i$6 << 1;
    $317 = $labelInfo + 655376 + ($316 << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $323 = $labelInfo + 655376 + (($316 | 1) << 3) | 0;
    HEAPF64[$323 >> 3] = +HEAPF64[$323 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $103 = 0, $108 = 0, $111 = 0, $126 = 0, $128 = 0, $130 = 0, $134 = 0, $138 = 0, $141 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $16 = 0, $160 = 0, $162 = 0, $166 = 0, $170 = 0, $174 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $197 = 0, $200 = 0, $205 = 0, $227 = 0, $229 = 0, $23 = 0, $235 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $48 = 0, $52 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $70 = 0, $8 = 0, $85 = 0, $87 = 0, $89 = 0, $9 = 0, $93 = 0, $97 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 2) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($8 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $38 = $pnt2$3 + ($23 << 1) | 0;
    $39 = HEAP16[$38 >> 1] | 0;
    if ($39 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $39;
     $42 = ($39 << 16 >> 16) * 7 | 0;
     $44 = $labelInfo + 1310736 + ($42 + -7 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 1;
     $48 = $labelInfo + 1310736 + ($42 + -6 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $i$2;
     $52 = $labelInfo + 1310736 + ($42 + -5 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($42 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $58 = HEAP16[$38 + 2 >> 1] | 0;
    $59 = $58 << 16 >> 16;
    $62 = HEAP16[$38 + -2 >> 1] | 0;
    $63 = $62 << 16 >> 16;
    $64 = $62 << 16 >> 16 > 0;
    if ($58 << 16 >> 16 <= 0) {
     if ($64) {
      HEAP16[$pnt2$3 >> 1] = $62;
      $160 = $63 * 7 | 0;
      $162 = $labelInfo + 1310736 + ($160 + -7 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 1;
      $166 = $labelInfo + 1310736 + ($160 + -6 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $i$2;
      $170 = $labelInfo + 1310736 + ($160 + -5 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $j$0;
      $174 = $labelInfo + 1310736 + ($160 + -3 << 2) | 0;
      if ((HEAP32[$174 >> 2] | 0) < ($i$2 | 0)) HEAP32[$174 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($160 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $180 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $labelInfo + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $labelInfo + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $i$2;
      $193 = $labelInfo + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $j$0;
      $197 = $labelInfo + 1310736 + ($183 + -3 << 2) | 0;
      if ((HEAP32[$197 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$197 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $200 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $200;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($205 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $200;
      break;
     }
    }
    if ($64) {
     $67 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
     $70 = HEAP32[$labelInfo + 1179664 + ($63 + -1 << 2) >> 2] | 0;
     L35 : do if (($67 | 0) > ($70 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $70;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $85 = $70;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($67 | 0)) HEAP32[$wk$0 >> 2] = $70;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $67;
      if (($67 | 0) < ($70 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $85 = $67;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($70 | 0)) HEAP32[$wk$1 >> 2] = $67;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $85 = $67;
     } while (0);
     $87 = ($85 << 16 >> 16) * 7 | 0;
     $89 = $labelInfo + 1310736 + ($87 + -7 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + 1;
     $93 = $labelInfo + 1310736 + ($87 + -6 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $i$2;
     $97 = $labelInfo + 1310736 + ($87 + -5 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($87 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $103 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($103 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $58;
     $141 = $59 * 7 | 0;
     $143 = $labelInfo + 1310736 + ($141 + -7 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + 1;
     $147 = $labelInfo + 1310736 + ($141 + -6 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $i$2;
     $151 = $labelInfo + 1310736 + ($141 + -5 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $j$0;
     $155 = $labelInfo + 1310736 + ($141 + -4 << 2) | 0;
     if ((HEAP32[$155 >> 2] | 0) > ($i$2 | 0)) HEAP32[$155 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($141 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
    $111 = HEAP32[$labelInfo + 1179664 + (($103 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($108 | 0) > ($111 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $111;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $126 = $111;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($108 | 0)) HEAP32[$wk$2 >> 2] = $111;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $108;
     if (($108 | 0) < ($111 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $126 = $108;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($111 | 0)) HEAP32[$wk$3 >> 2] = $108;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $126 = $108;
    } while (0);
    $128 = ($126 << 16 >> 16) * 7 | 0;
    $130 = $labelInfo + 1310736 + ($128 + -7 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
    $134 = $labelInfo + 1310736 + ($128 + -6 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $i$2;
    $138 = $labelInfo + 1310736 + ($128 + -5 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $229 = HEAP32[$wk$4 >> 2] | 0;
   if (($229 | 0) == ($i$3 | 0)) {
    $235 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $235 = HEAP32[$labelInfo + 1179664 + ($229 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $235;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $238 = $labelInfo + 8 | 0;
  $239 = $j$1$lcssa + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $245 = $239;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($245 | 0)) {
     $i$5 = 0;
     break;
    }
    $246 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($246 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($246 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $245 = HEAP32[$238 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $258 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $i$5 * 7 | 0;
    $262 = $labelInfo + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $labelInfo + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $labelInfo + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $labelInfo + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$labelInfo + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $labelInfo + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$labelInfo + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $labelInfo + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$labelInfo + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $labelInfo + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$labelInfo + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $315 = $i$6 << 1;
    $316 = $labelInfo + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $labelInfo + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $103 = 0, $108 = 0, $111 = 0, $126 = 0, $128 = 0, $130 = 0, $134 = 0, $138 = 0, $141 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $16 = 0, $160 = 0, $162 = 0, $166 = 0, $170 = 0, $174 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $197 = 0, $200 = 0, $205 = 0, $227 = 0, $229 = 0, $23 = 0, $235 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $48 = 0, $52 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $70 = 0, $8 = 0, $85 = 0, $87 = 0, $89 = 0, $9 = 0, $93 = 0, $97 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 2) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $38 = $pnt2$3 + ($23 << 1) | 0;
    $39 = HEAP16[$38 >> 1] | 0;
    if ($39 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $39;
     $42 = ($39 << 16 >> 16) * 7 | 0;
     $44 = $labelInfo + 1310736 + ($42 + -7 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 1;
     $48 = $labelInfo + 1310736 + ($42 + -6 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $i$2;
     $52 = $labelInfo + 1310736 + ($42 + -5 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($42 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $58 = HEAP16[$38 + 2 >> 1] | 0;
    $59 = $58 << 16 >> 16;
    $62 = HEAP16[$38 + -2 >> 1] | 0;
    $63 = $62 << 16 >> 16;
    $64 = $62 << 16 >> 16 > 0;
    if ($58 << 16 >> 16 <= 0) {
     if ($64) {
      HEAP16[$pnt2$3 >> 1] = $62;
      $160 = $63 * 7 | 0;
      $162 = $labelInfo + 1310736 + ($160 + -7 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 1;
      $166 = $labelInfo + 1310736 + ($160 + -6 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $i$2;
      $170 = $labelInfo + 1310736 + ($160 + -5 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $j$0;
      $174 = $labelInfo + 1310736 + ($160 + -3 << 2) | 0;
      if ((HEAP32[$174 >> 2] | 0) < ($i$2 | 0)) HEAP32[$174 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($160 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $180 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $labelInfo + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $labelInfo + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $i$2;
      $193 = $labelInfo + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $j$0;
      $197 = $labelInfo + 1310736 + ($183 + -3 << 2) | 0;
      if ((HEAP32[$197 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$197 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $200 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $200;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($205 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $200;
      break;
     }
    }
    if ($64) {
     $67 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
     $70 = HEAP32[$labelInfo + 1179664 + ($63 + -1 << 2) >> 2] | 0;
     L36 : do if (($67 | 0) > ($70 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $70;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $85 = $70;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($67 | 0)) HEAP32[$wk$0 >> 2] = $70;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $67;
      if (($67 | 0) < ($70 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $85 = $67;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($70 | 0)) HEAP32[$wk$1 >> 2] = $67;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $85 = $67;
     } while (0);
     $87 = ($85 << 16 >> 16) * 7 | 0;
     $89 = $labelInfo + 1310736 + ($87 + -7 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + 1;
     $93 = $labelInfo + 1310736 + ($87 + -6 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $i$2;
     $97 = $labelInfo + 1310736 + ($87 + -5 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($87 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $103 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($103 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $58;
     $141 = $59 * 7 | 0;
     $143 = $labelInfo + 1310736 + ($141 + -7 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + 1;
     $147 = $labelInfo + 1310736 + ($141 + -6 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $i$2;
     $151 = $labelInfo + 1310736 + ($141 + -5 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $j$0;
     $155 = $labelInfo + 1310736 + ($141 + -4 << 2) | 0;
     if ((HEAP32[$155 >> 2] | 0) > ($i$2 | 0)) HEAP32[$155 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($141 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
    $111 = HEAP32[$labelInfo + 1179664 + (($103 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($108 | 0) > ($111 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $111;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $126 = $111;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($108 | 0)) HEAP32[$wk$2 >> 2] = $111;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $108;
     if (($108 | 0) < ($111 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $126 = $108;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($111 | 0)) HEAP32[$wk$3 >> 2] = $108;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $126 = $108;
    } while (0);
    $128 = ($126 << 16 >> 16) * 7 | 0;
    $130 = $labelInfo + 1310736 + ($128 + -7 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
    $134 = $labelInfo + 1310736 + ($128 + -6 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $i$2;
    $138 = $labelInfo + 1310736 + ($128 + -5 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $229 = HEAP32[$wk$4 >> 2] | 0;
   if (($229 | 0) == ($i$3 | 0)) {
    $235 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $235 = HEAP32[$labelInfo + 1179664 + ($229 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $235;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $238 = $labelInfo + 8 | 0;
  $239 = $j$1$lcssa + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $245 = $239;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($245 | 0)) {
     $i$5 = 0;
     break;
    }
    $246 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($246 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($246 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $245 = HEAP32[$238 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $258 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $i$5 * 7 | 0;
    $262 = $labelInfo + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $labelInfo + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $labelInfo + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $labelInfo + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$labelInfo + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $labelInfo + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$labelInfo + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $labelInfo + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$labelInfo + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $labelInfo + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$labelInfo + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $315 = $i$6 << 1;
    $316 = $labelInfo + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $labelInfo + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $102 = 0, $107 = 0, $110 = 0, $125 = 0, $127 = 0, $129 = 0, $133 = 0, $137 = 0, $140 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $154 = 0, $159 = 0, $16 = 0, $161 = 0, $165 = 0, $169 = 0, $173 = 0, $179 = 0, $182 = 0, $184 = 0, $188 = 0, $192 = 0, $196 = 0, $199 = 0, $204 = 0, $226 = 0, $228 = 0, $23 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $37 = 0, $38 = 0, $41 = 0, $43 = 0, $47 = 0, $51 = 0, $57 = 0, $58 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $8 = 0, $84 = 0, $86 = 0, $88 = 0, $9 = 0, $92 = 0, $96 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 * 3 | 0) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($8 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $37 = $pnt2$3 + ($23 << 1) | 0;
    $38 = HEAP16[$37 >> 1] | 0;
    if ($38 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $38;
     $41 = ($38 << 16 >> 16) * 7 | 0;
     $43 = $labelInfo + 1310736 + ($41 + -7 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + 1;
     $47 = $labelInfo + 1310736 + ($41 + -6 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $i$2;
     $51 = $labelInfo + 1310736 + ($41 + -5 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($41 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $57 = HEAP16[$37 + 2 >> 1] | 0;
    $58 = $57 << 16 >> 16;
    $61 = HEAP16[$37 + -2 >> 1] | 0;
    $62 = $61 << 16 >> 16;
    $63 = $61 << 16 >> 16 > 0;
    if ($57 << 16 >> 16 <= 0) {
     if ($63) {
      HEAP16[$pnt2$3 >> 1] = $61;
      $159 = $62 * 7 | 0;
      $161 = $labelInfo + 1310736 + ($159 + -7 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + 1;
      $165 = $labelInfo + 1310736 + ($159 + -6 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $i$2;
      $169 = $labelInfo + 1310736 + ($159 + -5 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $j$0;
      $173 = $labelInfo + 1310736 + ($159 + -3 << 2) | 0;
      if ((HEAP32[$173 >> 2] | 0) < ($i$2 | 0)) HEAP32[$173 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($159 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $179 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($179 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $179;
      $182 = ($179 << 16 >> 16) * 7 | 0;
      $184 = $labelInfo + 1310736 + ($182 + -7 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + 1;
      $188 = $labelInfo + 1310736 + ($182 + -6 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $i$2;
      $192 = $labelInfo + 1310736 + ($182 + -5 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $j$0;
      $196 = $labelInfo + 1310736 + ($182 + -3 << 2) | 0;
      if ((HEAP32[$196 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$196 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $199 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $199;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $199 << 16 >> 16;
      $204 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($204 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($204 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($204 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($204 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $199;
      break;
     }
    }
    if ($63) {
     $66 = HEAP32[$labelInfo + 1179664 + ($58 + -1 << 2) >> 2] | 0;
     $69 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
     L35 : do if (($66 | 0) > ($69 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $69;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $84 = $69;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($66 | 0)) HEAP32[$wk$0 >> 2] = $69;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $66;
      if (($66 | 0) < ($69 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $84 = $66;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($69 | 0)) HEAP32[$wk$1 >> 2] = $66;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $84 = $66;
     } while (0);
     $86 = ($84 << 16 >> 16) * 7 | 0;
     $88 = $labelInfo + 1310736 + ($86 + -7 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + 1;
     $92 = $labelInfo + 1310736 + ($86 + -6 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $i$2;
     $96 = $labelInfo + 1310736 + ($86 + -5 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($86 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $102 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($102 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $57;
     $140 = $58 * 7 | 0;
     $142 = $labelInfo + 1310736 + ($140 + -7 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1;
     $146 = $labelInfo + 1310736 + ($140 + -6 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $i$2;
     $150 = $labelInfo + 1310736 + ($140 + -5 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $j$0;
     $154 = $labelInfo + 1310736 + ($140 + -4 << 2) | 0;
     if ((HEAP32[$154 >> 2] | 0) > ($i$2 | 0)) HEAP32[$154 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($140 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $107 = HEAP32[$labelInfo + 1179664 + ($58 + -1 << 2) >> 2] | 0;
    $110 = HEAP32[$labelInfo + 1179664 + (($102 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($107 | 0) > ($110 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $110;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $125 = $110;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($107 | 0)) HEAP32[$wk$2 >> 2] = $110;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $107;
     if (($107 | 0) < ($110 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $125 = $107;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($110 | 0)) HEAP32[$wk$3 >> 2] = $107;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $125 = $107;
    } while (0);
    $127 = ($125 << 16 >> 16) * 7 | 0;
    $129 = $labelInfo + 1310736 + ($127 + -7 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 1;
    $133 = $labelInfo + 1310736 + ($127 + -6 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $i$2;
    $137 = $labelInfo + 1310736 + ($127 + -5 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 3 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 6 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $228 = HEAP32[$wk$4 >> 2] | 0;
   if (($228 | 0) == ($i$3 | 0)) {
    $234 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $234 = HEAP32[$labelInfo + 1179664 + ($228 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $234;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $237 = $labelInfo + 8 | 0;
  $238 = $j$1$lcssa + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $244 = $238;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($244 | 0)) {
     $i$5 = 0;
     break;
    }
    $245 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($245 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($245 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $244 = HEAP32[$237 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $257 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $i$5 * 7 | 0;
    $261 = $labelInfo + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $labelInfo + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $labelInfo + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $labelInfo + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $labelInfo + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$labelInfo + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $314 = $i$6 << 1;
    $315 = $labelInfo + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $labelInfo + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $102 = 0, $107 = 0, $110 = 0, $125 = 0, $127 = 0, $129 = 0, $133 = 0, $137 = 0, $140 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $154 = 0, $159 = 0, $16 = 0, $161 = 0, $165 = 0, $169 = 0, $173 = 0, $179 = 0, $182 = 0, $184 = 0, $188 = 0, $192 = 0, $196 = 0, $199 = 0, $204 = 0, $226 = 0, $228 = 0, $23 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $37 = 0, $38 = 0, $41 = 0, $43 = 0, $47 = 0, $51 = 0, $57 = 0, $58 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $8 = 0, $84 = 0, $86 = 0, $88 = 0, $9 = 0, $92 = 0, $96 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 * 3 | 0) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $37 = $pnt2$3 + ($23 << 1) | 0;
    $38 = HEAP16[$37 >> 1] | 0;
    if ($38 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $38;
     $41 = ($38 << 16 >> 16) * 7 | 0;
     $43 = $labelInfo + 1310736 + ($41 + -7 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + 1;
     $47 = $labelInfo + 1310736 + ($41 + -6 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $i$2;
     $51 = $labelInfo + 1310736 + ($41 + -5 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($41 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $57 = HEAP16[$37 + 2 >> 1] | 0;
    $58 = $57 << 16 >> 16;
    $61 = HEAP16[$37 + -2 >> 1] | 0;
    $62 = $61 << 16 >> 16;
    $63 = $61 << 16 >> 16 > 0;
    if ($57 << 16 >> 16 <= 0) {
     if ($63) {
      HEAP16[$pnt2$3 >> 1] = $61;
      $159 = $62 * 7 | 0;
      $161 = $labelInfo + 1310736 + ($159 + -7 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + 1;
      $165 = $labelInfo + 1310736 + ($159 + -6 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $i$2;
      $169 = $labelInfo + 1310736 + ($159 + -5 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $j$0;
      $173 = $labelInfo + 1310736 + ($159 + -3 << 2) | 0;
      if ((HEAP32[$173 >> 2] | 0) < ($i$2 | 0)) HEAP32[$173 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($159 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $179 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($179 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $179;
      $182 = ($179 << 16 >> 16) * 7 | 0;
      $184 = $labelInfo + 1310736 + ($182 + -7 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + 1;
      $188 = $labelInfo + 1310736 + ($182 + -6 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $i$2;
      $192 = $labelInfo + 1310736 + ($182 + -5 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $j$0;
      $196 = $labelInfo + 1310736 + ($182 + -3 << 2) | 0;
      if ((HEAP32[$196 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$196 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $199 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $199;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $199 << 16 >> 16;
      $204 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($204 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($204 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($204 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($204 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $199;
      break;
     }
    }
    if ($63) {
     $66 = HEAP32[$labelInfo + 1179664 + ($58 + -1 << 2) >> 2] | 0;
     $69 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
     L36 : do if (($66 | 0) > ($69 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $69;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $84 = $69;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($66 | 0)) HEAP32[$wk$0 >> 2] = $69;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $66;
      if (($66 | 0) < ($69 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $84 = $66;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($69 | 0)) HEAP32[$wk$1 >> 2] = $66;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $84 = $66;
     } while (0);
     $86 = ($84 << 16 >> 16) * 7 | 0;
     $88 = $labelInfo + 1310736 + ($86 + -7 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + 1;
     $92 = $labelInfo + 1310736 + ($86 + -6 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $i$2;
     $96 = $labelInfo + 1310736 + ($86 + -5 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($86 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $102 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($102 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $57;
     $140 = $58 * 7 | 0;
     $142 = $labelInfo + 1310736 + ($140 + -7 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1;
     $146 = $labelInfo + 1310736 + ($140 + -6 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $i$2;
     $150 = $labelInfo + 1310736 + ($140 + -5 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $j$0;
     $154 = $labelInfo + 1310736 + ($140 + -4 << 2) | 0;
     if ((HEAP32[$154 >> 2] | 0) > ($i$2 | 0)) HEAP32[$154 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($140 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $107 = HEAP32[$labelInfo + 1179664 + ($58 + -1 << 2) >> 2] | 0;
    $110 = HEAP32[$labelInfo + 1179664 + (($102 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($107 | 0) > ($110 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $110;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $125 = $110;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($107 | 0)) HEAP32[$wk$2 >> 2] = $110;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $107;
     if (($107 | 0) < ($110 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $125 = $107;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($110 | 0)) HEAP32[$wk$3 >> 2] = $107;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $125 = $107;
    } while (0);
    $127 = ($125 << 16 >> 16) * 7 | 0;
    $129 = $labelInfo + 1310736 + ($127 + -7 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 1;
    $133 = $labelInfo + 1310736 + ($127 + -6 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $i$2;
    $137 = $labelInfo + 1310736 + ($127 + -5 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 3 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 6 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $228 = HEAP32[$wk$4 >> 2] | 0;
   if (($228 | 0) == ($i$3 | 0)) {
    $234 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $234 = HEAP32[$labelInfo + 1179664 + ($228 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $234;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $237 = $labelInfo + 8 | 0;
  $238 = $j$1$lcssa + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $244 = $238;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($244 | 0)) {
     $i$5 = 0;
     break;
    }
    $245 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($245 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($245 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $244 = HEAP32[$237 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $257 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $i$5 * 7 | 0;
    $261 = $labelInfo + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $labelInfo + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $labelInfo + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $labelInfo + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $labelInfo + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$labelInfo + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $314 = $i$6 << 1;
    $315 = $labelInfo + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $labelInfo + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $102 = 0, $107 = 0, $110 = 0, $125 = 0, $127 = 0, $129 = 0, $133 = 0, $137 = 0, $140 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $154 = 0, $159 = 0, $16 = 0, $161 = 0, $165 = 0, $169 = 0, $173 = 0, $179 = 0, $182 = 0, $184 = 0, $188 = 0, $192 = 0, $196 = 0, $199 = 0, $204 = 0, $226 = 0, $228 = 0, $23 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $37 = 0, $38 = 0, $41 = 0, $43 = 0, $47 = 0, $51 = 0, $57 = 0, $58 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $8 = 0, $84 = 0, $86 = 0, $88 = 0, $9 = 0, $92 = 0, $96 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 2) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($8 | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $37 = $pnt2$3 + ($23 << 1) | 0;
    $38 = HEAP16[$37 >> 1] | 0;
    if ($38 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $38;
     $41 = ($38 << 16 >> 16) * 7 | 0;
     $43 = $labelInfo + 1310736 + ($41 + -7 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + 1;
     $47 = $labelInfo + 1310736 + ($41 + -6 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $i$2;
     $51 = $labelInfo + 1310736 + ($41 + -5 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($41 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $57 = HEAP16[$37 + 2 >> 1] | 0;
    $58 = $57 << 16 >> 16;
    $61 = HEAP16[$37 + -2 >> 1] | 0;
    $62 = $61 << 16 >> 16;
    $63 = $61 << 16 >> 16 > 0;
    if ($57 << 16 >> 16 <= 0) {
     if ($63) {
      HEAP16[$pnt2$3 >> 1] = $61;
      $159 = $62 * 7 | 0;
      $161 = $labelInfo + 1310736 + ($159 + -7 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + 1;
      $165 = $labelInfo + 1310736 + ($159 + -6 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $i$2;
      $169 = $labelInfo + 1310736 + ($159 + -5 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $j$0;
      $173 = $labelInfo + 1310736 + ($159 + -3 << 2) | 0;
      if ((HEAP32[$173 >> 2] | 0) < ($i$2 | 0)) HEAP32[$173 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($159 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $179 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($179 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $179;
      $182 = ($179 << 16 >> 16) * 7 | 0;
      $184 = $labelInfo + 1310736 + ($182 + -7 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + 1;
      $188 = $labelInfo + 1310736 + ($182 + -6 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $i$2;
      $192 = $labelInfo + 1310736 + ($182 + -5 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $j$0;
      $196 = $labelInfo + 1310736 + ($182 + -3 << 2) | 0;
      if ((HEAP32[$196 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$196 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $199 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $199;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $199 << 16 >> 16;
      $204 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($204 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($204 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($204 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($204 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $199;
      break;
     }
    }
    if ($63) {
     $66 = HEAP32[$labelInfo + 1179664 + ($58 + -1 << 2) >> 2] | 0;
     $69 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
     L35 : do if (($66 | 0) > ($69 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $69;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $84 = $69;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($66 | 0)) HEAP32[$wk$0 >> 2] = $69;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $66;
      if (($66 | 0) < ($69 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $84 = $66;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($69 | 0)) HEAP32[$wk$1 >> 2] = $66;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $84 = $66;
     } while (0);
     $86 = ($84 << 16 >> 16) * 7 | 0;
     $88 = $labelInfo + 1310736 + ($86 + -7 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + 1;
     $92 = $labelInfo + 1310736 + ($86 + -6 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $i$2;
     $96 = $labelInfo + 1310736 + ($86 + -5 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($86 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $102 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($102 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $57;
     $140 = $58 * 7 | 0;
     $142 = $labelInfo + 1310736 + ($140 + -7 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1;
     $146 = $labelInfo + 1310736 + ($140 + -6 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $i$2;
     $150 = $labelInfo + 1310736 + ($140 + -5 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $j$0;
     $154 = $labelInfo + 1310736 + ($140 + -4 << 2) | 0;
     if ((HEAP32[$154 >> 2] | 0) > ($i$2 | 0)) HEAP32[$154 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($140 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $107 = HEAP32[$labelInfo + 1179664 + ($58 + -1 << 2) >> 2] | 0;
    $110 = HEAP32[$labelInfo + 1179664 + (($102 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($107 | 0) > ($110 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $110;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $125 = $110;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($107 | 0)) HEAP32[$wk$2 >> 2] = $110;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $107;
     if (($107 | 0) < ($110 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $125 = $107;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($110 | 0)) HEAP32[$wk$3 >> 2] = $107;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $125 = $107;
    } while (0);
    $127 = ($125 << 16 >> 16) * 7 | 0;
    $129 = $labelInfo + 1310736 + ($127 + -7 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 1;
    $133 = $labelInfo + 1310736 + ($127 + -6 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $i$2;
    $137 = $labelInfo + 1310736 + ($127 + -5 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $228 = HEAP32[$wk$4 >> 2] | 0;
   if (($228 | 0) == ($i$3 | 0)) {
    $234 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $234 = HEAP32[$labelInfo + 1179664 + ($228 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $234;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $237 = $labelInfo + 8 | 0;
  $238 = $j$1$lcssa + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $244 = $238;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($244 | 0)) {
     $i$5 = 0;
     break;
    }
    $245 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($245 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($245 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $244 = HEAP32[$237 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $257 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $i$5 * 7 | 0;
    $261 = $labelInfo + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $labelInfo + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $labelInfo + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $labelInfo + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $labelInfo + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$labelInfo + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $314 = $i$6 << 1;
    $315 = $labelInfo + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $labelInfo + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}
function _arLabelingSubEBR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $102 = 0, $107 = 0, $110 = 0, $125 = 0, $127 = 0, $129 = 0, $133 = 0, $137 = 0, $140 = 0, $142 = 0, $146 = 0, $15 = 0, $150 = 0, $154 = 0, $159 = 0, $16 = 0, $161 = 0, $165 = 0, $169 = 0, $173 = 0, $179 = 0, $182 = 0, $184 = 0, $188 = 0, $192 = 0, $196 = 0, $199 = 0, $204 = 0, $226 = 0, $228 = 0, $23 = 0, $234 = 0, $237 = 0, $238 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $37 = 0, $38 = 0, $41 = 0, $43 = 0, $47 = 0, $51 = 0, $57 = 0, $58 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $8 = 0, $84 = 0, $86 = 0, $88 = 0, $9 = 0, $92 = 0, $96 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $23 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $16 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 2) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $37 = $pnt2$3 + ($23 << 1) | 0;
    $38 = HEAP16[$37 >> 1] | 0;
    if ($38 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $38;
     $41 = ($38 << 16 >> 16) * 7 | 0;
     $43 = $labelInfo + 1310736 + ($41 + -7 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + 1;
     $47 = $labelInfo + 1310736 + ($41 + -6 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $i$2;
     $51 = $labelInfo + 1310736 + ($41 + -5 << 2) | 0;
     HEAP32[$51 >> 2] = (HEAP32[$51 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($41 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $57 = HEAP16[$37 + 2 >> 1] | 0;
    $58 = $57 << 16 >> 16;
    $61 = HEAP16[$37 + -2 >> 1] | 0;
    $62 = $61 << 16 >> 16;
    $63 = $61 << 16 >> 16 > 0;
    if ($57 << 16 >> 16 <= 0) {
     if ($63) {
      HEAP16[$pnt2$3 >> 1] = $61;
      $159 = $62 * 7 | 0;
      $161 = $labelInfo + 1310736 + ($159 + -7 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + 1;
      $165 = $labelInfo + 1310736 + ($159 + -6 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $i$2;
      $169 = $labelInfo + 1310736 + ($159 + -5 << 2) | 0;
      HEAP32[$169 >> 2] = (HEAP32[$169 >> 2] | 0) + $j$0;
      $173 = $labelInfo + 1310736 + ($159 + -3 << 2) | 0;
      if ((HEAP32[$173 >> 2] | 0) < ($i$2 | 0)) HEAP32[$173 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($159 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $179 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($179 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $179;
      $182 = ($179 << 16 >> 16) * 7 | 0;
      $184 = $labelInfo + 1310736 + ($182 + -7 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + 1;
      $188 = $labelInfo + 1310736 + ($182 + -6 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $i$2;
      $192 = $labelInfo + 1310736 + ($182 + -5 << 2) | 0;
      HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + $j$0;
      $196 = $labelInfo + 1310736 + ($182 + -3 << 2) | 0;
      if ((HEAP32[$196 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$196 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $199 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $199;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $199 << 16 >> 16;
      $204 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($204 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($204 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($204 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($204 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($204 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $199;
      break;
     }
    }
    if ($63) {
     $66 = HEAP32[$labelInfo + 1179664 + ($58 + -1 << 2) >> 2] | 0;
     $69 = HEAP32[$labelInfo + 1179664 + ($62 + -1 << 2) >> 2] | 0;
     L36 : do if (($66 | 0) > ($69 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $69;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $84 = $69;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($66 | 0)) HEAP32[$wk$0 >> 2] = $69;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $66;
      if (($66 | 0) < ($69 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $84 = $66;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($69 | 0)) HEAP32[$wk$1 >> 2] = $66;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $84 = $66;
     } while (0);
     $86 = ($84 << 16 >> 16) * 7 | 0;
     $88 = $labelInfo + 1310736 + ($86 + -7 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + 1;
     $92 = $labelInfo + 1310736 + ($86 + -6 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $i$2;
     $96 = $labelInfo + 1310736 + ($86 + -5 << 2) | 0;
     HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($86 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $102 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($102 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $57;
     $140 = $58 * 7 | 0;
     $142 = $labelInfo + 1310736 + ($140 + -7 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1;
     $146 = $labelInfo + 1310736 + ($140 + -6 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $i$2;
     $150 = $labelInfo + 1310736 + ($140 + -5 << 2) | 0;
     HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + $j$0;
     $154 = $labelInfo + 1310736 + ($140 + -4 << 2) | 0;
     if ((HEAP32[$154 >> 2] | 0) > ($i$2 | 0)) HEAP32[$154 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($140 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $107 = HEAP32[$labelInfo + 1179664 + ($58 + -1 << 2) >> 2] | 0;
    $110 = HEAP32[$labelInfo + 1179664 + (($102 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($107 | 0) > ($110 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $110;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $125 = $110;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($107 | 0)) HEAP32[$wk$2 >> 2] = $110;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $107;
     if (($107 | 0) < ($110 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $125 = $107;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($110 | 0)) HEAP32[$wk$3 >> 2] = $107;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $125 = $107;
    } while (0);
    $127 = ($125 << 16 >> 16) * 7 | 0;
    $129 = $labelInfo + 1310736 + ($127 + -7 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 1;
    $133 = $labelInfo + 1310736 + ($127 + -6 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $i$2;
    $137 = $labelInfo + 1310736 + ($127 + -5 << 2) | 0;
    HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $228 = HEAP32[$wk$4 >> 2] | 0;
   if (($228 | 0) == ($i$3 | 0)) {
    $234 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $234 = HEAP32[$labelInfo + 1179664 + ($228 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $234;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $237 = $labelInfo + 8 | 0;
  $238 = $j$1$lcssa + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $244 = $238;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($244 | 0)) {
     $i$5 = 0;
     break;
    }
    $245 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($245 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($245 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $244 = HEAP32[$237 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $257 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $i$5 * 7 | 0;
    $261 = $labelInfo + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $labelInfo + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $labelInfo + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $labelInfo + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $labelInfo + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$labelInfo + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $314 = $i$6 << 1;
    $315 = $labelInfo + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $labelInfo + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $106 = 0, $121 = 0, $123 = 0, $125 = 0, $129 = 0, $133 = 0, $136 = 0, $138 = 0, $142 = 0, $146 = 0, $150 = 0, $155 = 0, $157 = 0, $16 = 0, $161 = 0, $165 = 0, $169 = 0, $17 = 0, $175 = 0, $178 = 0, $180 = 0, $184 = 0, $188 = 0, $192 = 0, $195 = 0, $2 = 0, $200 = 0, $22 = 0, $223 = 0, $225 = 0, $231 = 0, $234 = 0, $235 = 0, $241 = 0, $242 = 0, $254 = 0, $255 = 0, $258 = 0, $26 = 0, $265 = 0, $266 = 0, $274 = 0, $277 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $299 = 0, $3 = 0, $303 = 0, $308 = 0, $311 = 0, $312 = 0, $318 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $62 = 0, $65 = 0, $80 = 0, $82 = 0, $84 = 0, $88 = 0, $92 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $17 = $0 + 1 | 0;
 $22 = $xsize << 1;
 $26 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $17 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($17 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $33 = $pnt2$3 + ($26 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $i$2;
     $47 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($37 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $57 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $57 << 16 >> 16;
    $59 = $57 << 16 >> 16 > 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($59) {
      HEAP16[$pnt2$3 >> 1] = $57;
      $155 = $58 * 7 | 0;
      $157 = $labelInfo + 1310736 + ($155 + -7 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + 1;
      $161 = $labelInfo + 1310736 + ($155 + -6 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $i$2;
      $165 = $labelInfo + 1310736 + ($155 + -5 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $j$0;
      $169 = $labelInfo + 1310736 + ($155 + -3 << 2) | 0;
      if ((HEAP32[$169 >> 2] | 0) < ($i$2 | 0)) HEAP32[$169 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($155 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $175 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($175 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $175;
      $178 = ($175 << 16 >> 16) * 7 | 0;
      $180 = $labelInfo + 1310736 + ($178 + -7 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + 1;
      $184 = $labelInfo + 1310736 + ($178 + -6 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $i$2;
      $188 = $labelInfo + 1310736 + ($178 + -5 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $j$0;
      $192 = $labelInfo + 1310736 + ($178 + -3 << 2) | 0;
      if ((HEAP32[$192 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$192 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $195 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $195;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $195 << 16 >> 16;
      $200 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($200 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($200 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($200 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($200 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($200 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($200 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($200 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $195;
      break;
     }
    }
    if ($59) {
     $62 = HEAP32[$labelInfo + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     $65 = HEAP32[$labelInfo + 1179664 + ($58 + -1 << 2) >> 2] | 0;
     L35 : do if (($62 | 0) > ($65 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $65;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $80 = $65;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($62 | 0)) HEAP32[$wk$0 >> 2] = $65;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $62;
      if (($62 | 0) < ($65 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $80 = $62;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($65 | 0)) HEAP32[$wk$1 >> 2] = $62;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $80 = $62;
     } while (0);
     $82 = ($80 << 16 >> 16) * 7 | 0;
     $84 = $labelInfo + 1310736 + ($82 + -7 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 1;
     $88 = $labelInfo + 1310736 + ($82 + -6 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $i$2;
     $92 = $labelInfo + 1310736 + ($82 + -5 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($82 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $98 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $53;
     $136 = $54 * 7 | 0;
     $138 = $labelInfo + 1310736 + ($136 + -7 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
     $142 = $labelInfo + 1310736 + ($136 + -6 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $i$2;
     $146 = $labelInfo + 1310736 + ($136 + -5 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $j$0;
     $150 = $labelInfo + 1310736 + ($136 + -4 << 2) | 0;
     if ((HEAP32[$150 >> 2] | 0) > ($i$2 | 0)) HEAP32[$150 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($136 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $103 = HEAP32[$labelInfo + 1179664 + ($54 + -1 << 2) >> 2] | 0;
    $106 = HEAP32[$labelInfo + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($103 | 0) > ($106 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $106;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $121 = $106;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($103 | 0)) HEAP32[$wk$2 >> 2] = $106;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $103;
     if (($103 | 0) < ($106 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $121 = $103;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($106 | 0)) HEAP32[$wk$3 >> 2] = $103;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $121 = $103;
    } while (0);
    $123 = ($121 << 16 >> 16) * 7 | 0;
    $125 = $labelInfo + 1310736 + ($123 + -7 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + 1;
    $129 = $labelInfo + 1310736 + ($123 + -6 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $i$2;
    $133 = $labelInfo + 1310736 + ($123 + -5 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $22 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $223 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $225 = HEAP32[$wk$4 >> 2] | 0;
   if (($225 | 0) == ($i$3 | 0)) {
    $231 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $231 = HEAP32[$labelInfo + 1179664 + ($225 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $231;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $234 = $labelInfo + 8 | 0;
  $235 = $j$1$lcssa + -1 | 0;
  HEAP32[$234 >> 2] = $235;
  if (!$235) $$0 = 0; else {
   _memset($223 | 0, 0, $235 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $235 << 4 | 0) | 0;
   $241 = $235;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($241 | 0)) {
     $i$5 = 0;
     break;
    }
    $242 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($242 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($242 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($242 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($242 | 3) << 2) >> 2] = 0;
    $241 = HEAP32[$234 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $254 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $255 = $i$5 * 7 | 0;
    $258 = $labelInfo + 12 + ($254 << 2) | 0;
    HEAP32[$258 >> 2] = (HEAP32[$258 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($255 << 2) >> 2] | 0);
    $265 = $254 << 1;
    $266 = $labelInfo + 655376 + ($265 << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($255 + 1 << 2) >> 2] | 0);
    $274 = $labelInfo + 655376 + (($265 | 1) << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($255 + 2 << 2) >> 2] | 0);
    $277 = $254 << 2;
    $278 = $labelInfo + 131084 + ($277 << 2) | 0;
    $282 = HEAP32[$labelInfo + 1310736 + ($255 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) > ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $labelInfo + 131084 + (($277 | 1) << 2) | 0;
    $289 = HEAP32[$labelInfo + 1310736 + ($255 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) < ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $labelInfo + 131084 + (($277 | 2) << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($255 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $labelInfo + 131084 + (($277 | 3) << 2) | 0;
    $303 = HEAP32[$labelInfo + 1310736 + ($255 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$234 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $308 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $311 = $i$6 << 1;
    $312 = $labelInfo + 655376 + ($311 << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $318 = $labelInfo + 655376 + (($311 | 1) << 3) | 0;
    HEAPF64[$318 >> 3] = +HEAPF64[$318 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $106 = 0, $121 = 0, $123 = 0, $125 = 0, $129 = 0, $133 = 0, $136 = 0, $138 = 0, $142 = 0, $146 = 0, $150 = 0, $155 = 0, $157 = 0, $16 = 0, $161 = 0, $165 = 0, $169 = 0, $17 = 0, $175 = 0, $178 = 0, $180 = 0, $184 = 0, $188 = 0, $192 = 0, $195 = 0, $2 = 0, $200 = 0, $22 = 0, $223 = 0, $225 = 0, $231 = 0, $234 = 0, $235 = 0, $241 = 0, $242 = 0, $254 = 0, $255 = 0, $258 = 0, $26 = 0, $265 = 0, $266 = 0, $274 = 0, $277 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $299 = 0, $3 = 0, $303 = 0, $308 = 0, $311 = 0, $312 = 0, $318 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $62 = 0, $65 = 0, $80 = 0, $82 = 0, $84 = 0, $88 = 0, $92 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $17 = $0 + 1 | 0;
 $22 = $xsize << 1;
 $26 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $17 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($17 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $33 = $pnt2$3 + ($26 << 1) | 0;
    $34 = HEAP16[$33 >> 1] | 0;
    if ($34 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $34;
     $37 = ($34 << 16 >> 16) * 7 | 0;
     $39 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
     $43 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $i$2;
     $47 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
     HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($37 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $53 = HEAP16[$33 + 2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $57 = HEAP16[$33 + -2 >> 1] | 0;
    $58 = $57 << 16 >> 16;
    $59 = $57 << 16 >> 16 > 0;
    if ($53 << 16 >> 16 <= 0) {
     if ($59) {
      HEAP16[$pnt2$3 >> 1] = $57;
      $155 = $58 * 7 | 0;
      $157 = $labelInfo + 1310736 + ($155 + -7 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + 1;
      $161 = $labelInfo + 1310736 + ($155 + -6 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $i$2;
      $165 = $labelInfo + 1310736 + ($155 + -5 << 2) | 0;
      HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + $j$0;
      $169 = $labelInfo + 1310736 + ($155 + -3 << 2) | 0;
      if ((HEAP32[$169 >> 2] | 0) < ($i$2 | 0)) HEAP32[$169 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($155 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $175 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($175 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $175;
      $178 = ($175 << 16 >> 16) * 7 | 0;
      $180 = $labelInfo + 1310736 + ($178 + -7 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + 1;
      $184 = $labelInfo + 1310736 + ($178 + -6 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $i$2;
      $188 = $labelInfo + 1310736 + ($178 + -5 << 2) | 0;
      HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + $j$0;
      $192 = $labelInfo + 1310736 + ($178 + -3 << 2) | 0;
      if ((HEAP32[$192 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$192 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $195 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $195;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $195 << 16 >> 16;
      $200 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($200 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($200 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($200 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($200 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($200 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($200 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($200 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $195;
      break;
     }
    }
    if ($59) {
     $62 = HEAP32[$labelInfo + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     $65 = HEAP32[$labelInfo + 1179664 + ($58 + -1 << 2) >> 2] | 0;
     L36 : do if (($62 | 0) > ($65 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $65;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $80 = $65;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($62 | 0)) HEAP32[$wk$0 >> 2] = $65;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $62;
      if (($62 | 0) < ($65 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $80 = $62;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($65 | 0)) HEAP32[$wk$1 >> 2] = $62;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $80 = $62;
     } while (0);
     $82 = ($80 << 16 >> 16) * 7 | 0;
     $84 = $labelInfo + 1310736 + ($82 + -7 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + 1;
     $88 = $labelInfo + 1310736 + ($82 + -6 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $i$2;
     $92 = $labelInfo + 1310736 + ($82 + -5 << 2) | 0;
     HEAP32[$92 >> 2] = (HEAP32[$92 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($82 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $98 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($98 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $53;
     $136 = $54 * 7 | 0;
     $138 = $labelInfo + 1310736 + ($136 + -7 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + 1;
     $142 = $labelInfo + 1310736 + ($136 + -6 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $i$2;
     $146 = $labelInfo + 1310736 + ($136 + -5 << 2) | 0;
     HEAP32[$146 >> 2] = (HEAP32[$146 >> 2] | 0) + $j$0;
     $150 = $labelInfo + 1310736 + ($136 + -4 << 2) | 0;
     if ((HEAP32[$150 >> 2] | 0) > ($i$2 | 0)) HEAP32[$150 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($136 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $103 = HEAP32[$labelInfo + 1179664 + ($54 + -1 << 2) >> 2] | 0;
    $106 = HEAP32[$labelInfo + 1179664 + (($98 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($103 | 0) > ($106 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $106;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $121 = $106;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($103 | 0)) HEAP32[$wk$2 >> 2] = $106;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $103;
     if (($103 | 0) < ($106 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $121 = $103;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($106 | 0)) HEAP32[$wk$3 >> 2] = $103;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $121 = $103;
    } while (0);
    $123 = ($121 << 16 >> 16) * 7 | 0;
    $125 = $labelInfo + 1310736 + ($123 + -7 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + 1;
    $129 = $labelInfo + 1310736 + ($123 + -6 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $i$2;
    $133 = $labelInfo + 1310736 + ($123 + -5 << 2) | 0;
    HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $22 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $223 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $225 = HEAP32[$wk$4 >> 2] | 0;
   if (($225 | 0) == ($i$3 | 0)) {
    $231 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $231 = HEAP32[$labelInfo + 1179664 + ($225 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $231;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $234 = $labelInfo + 8 | 0;
  $235 = $j$1$lcssa + -1 | 0;
  HEAP32[$234 >> 2] = $235;
  if (!$235) $$0 = 0; else {
   _memset($223 | 0, 0, $235 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $235 << 4 | 0) | 0;
   $241 = $235;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($241 | 0)) {
     $i$5 = 0;
     break;
    }
    $242 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($242 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($242 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($242 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($242 | 3) << 2) >> 2] = 0;
    $241 = HEAP32[$234 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $254 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $255 = $i$5 * 7 | 0;
    $258 = $labelInfo + 12 + ($254 << 2) | 0;
    HEAP32[$258 >> 2] = (HEAP32[$258 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($255 << 2) >> 2] | 0);
    $265 = $254 << 1;
    $266 = $labelInfo + 655376 + ($265 << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($255 + 1 << 2) >> 2] | 0);
    $274 = $labelInfo + 655376 + (($265 | 1) << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($255 + 2 << 2) >> 2] | 0);
    $277 = $254 << 2;
    $278 = $labelInfo + 131084 + ($277 << 2) | 0;
    $282 = HEAP32[$labelInfo + 1310736 + ($255 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) > ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $labelInfo + 131084 + (($277 | 1) << 2) | 0;
    $289 = HEAP32[$labelInfo + 1310736 + ($255 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) < ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $labelInfo + 131084 + (($277 | 2) << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($255 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $labelInfo + 131084 + (($277 | 3) << 2) | 0;
    $303 = HEAP32[$labelInfo + 1310736 + ($255 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$234 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $308 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $311 = $i$6 << 1;
    $312 = $labelInfo + 655376 + ($311 << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $318 = $labelInfo + 655376 + (($311 | 1) << 3) | 0;
    HEAPF64[$318 >> 3] = +HEAPF64[$318 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $105 = 0, $120 = 0, $122 = 0, $124 = 0, $128 = 0, $132 = 0, $135 = 0, $137 = 0, $141 = 0, $145 = 0, $149 = 0, $154 = 0, $156 = 0, $16 = 0, $160 = 0, $164 = 0, $168 = 0, $17 = 0, $174 = 0, $177 = 0, $179 = 0, $183 = 0, $187 = 0, $191 = 0, $194 = 0, $199 = 0, $2 = 0, $22 = 0, $222 = 0, $224 = 0, $230 = 0, $233 = 0, $234 = 0, $240 = 0, $241 = 0, $253 = 0, $254 = 0, $257 = 0, $26 = 0, $264 = 0, $265 = 0, $273 = 0, $276 = 0, $277 = 0, $281 = 0, $284 = 0, $288 = 0, $291 = 0, $295 = 0, $298 = 0, $3 = 0, $302 = 0, $307 = 0, $310 = 0, $311 = 0, $317 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $42 = 0, $46 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $64 = 0, $79 = 0, $81 = 0, $83 = 0, $87 = 0, $91 = 0, $97 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $17 = $0 + 1 | 0;
 $22 = $xsize << 1;
 $26 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $17 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($17 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $32 = $pnt2$3 + ($26 << 1) | 0;
    $33 = HEAP16[$32 >> 1] | 0;
    if ($33 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $33;
     $36 = ($33 << 16 >> 16) * 7 | 0;
     $38 = $labelInfo + 1310736 + ($36 + -7 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + 1;
     $42 = $labelInfo + 1310736 + ($36 + -6 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $i$2;
     $46 = $labelInfo + 1310736 + ($36 + -5 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($36 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $52 = HEAP16[$32 + 2 >> 1] | 0;
    $53 = $52 << 16 >> 16;
    $56 = HEAP16[$32 + -2 >> 1] | 0;
    $57 = $56 << 16 >> 16;
    $58 = $56 << 16 >> 16 > 0;
    if ($52 << 16 >> 16 <= 0) {
     if ($58) {
      HEAP16[$pnt2$3 >> 1] = $56;
      $154 = $57 * 7 | 0;
      $156 = $labelInfo + 1310736 + ($154 + -7 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 1;
      $160 = $labelInfo + 1310736 + ($154 + -6 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $i$2;
      $164 = $labelInfo + 1310736 + ($154 + -5 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $j$0;
      $168 = $labelInfo + 1310736 + ($154 + -3 << 2) | 0;
      if ((HEAP32[$168 >> 2] | 0) < ($i$2 | 0)) HEAP32[$168 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($154 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $174 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($174 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $174;
      $177 = ($174 << 16 >> 16) * 7 | 0;
      $179 = $labelInfo + 1310736 + ($177 + -7 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + 1;
      $183 = $labelInfo + 1310736 + ($177 + -6 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $i$2;
      $187 = $labelInfo + 1310736 + ($177 + -5 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $j$0;
      $191 = $labelInfo + 1310736 + ($177 + -3 << 2) | 0;
      if ((HEAP32[$191 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$191 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $194 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $194;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $194 << 16 >> 16;
      $199 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($199 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($199 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($199 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($199 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($199 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($199 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($199 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $194;
      break;
     }
    }
    if ($58) {
     $61 = HEAP32[$labelInfo + 1179664 + ($53 + -1 << 2) >> 2] | 0;
     $64 = HEAP32[$labelInfo + 1179664 + ($57 + -1 << 2) >> 2] | 0;
     L35 : do if (($61 | 0) > ($64 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $64;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $79 = $64;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($61 | 0)) HEAP32[$wk$0 >> 2] = $64;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $61;
      if (($61 | 0) < ($64 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $79 = $61;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($64 | 0)) HEAP32[$wk$1 >> 2] = $61;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $79 = $61;
     } while (0);
     $81 = ($79 << 16 >> 16) * 7 | 0;
     $83 = $labelInfo + 1310736 + ($81 + -7 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + 1;
     $87 = $labelInfo + 1310736 + ($81 + -6 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $i$2;
     $91 = $labelInfo + 1310736 + ($81 + -5 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($81 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $97 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($97 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $52;
     $135 = $53 * 7 | 0;
     $137 = $labelInfo + 1310736 + ($135 + -7 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 1;
     $141 = $labelInfo + 1310736 + ($135 + -6 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $i$2;
     $145 = $labelInfo + 1310736 + ($135 + -5 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $j$0;
     $149 = $labelInfo + 1310736 + ($135 + -4 << 2) | 0;
     if ((HEAP32[$149 >> 2] | 0) > ($i$2 | 0)) HEAP32[$149 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($135 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $102 = HEAP32[$labelInfo + 1179664 + ($53 + -1 << 2) >> 2] | 0;
    $105 = HEAP32[$labelInfo + 1179664 + (($97 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($102 | 0) > ($105 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $105;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $120 = $105;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($102 | 0)) HEAP32[$wk$2 >> 2] = $105;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $102;
     if (($102 | 0) < ($105 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $120 = $102;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($105 | 0)) HEAP32[$wk$3 >> 2] = $102;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $120 = $102;
    } while (0);
    $122 = ($120 << 16 >> 16) * 7 | 0;
    $124 = $labelInfo + 1310736 + ($122 + -7 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1;
    $128 = $labelInfo + 1310736 + ($122 + -6 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $i$2;
    $132 = $labelInfo + 1310736 + ($122 + -5 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $22 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $222 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $224 = HEAP32[$wk$4 >> 2] | 0;
   if (($224 | 0) == ($i$3 | 0)) {
    $230 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $230 = HEAP32[$labelInfo + 1179664 + ($224 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $230;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $233 = $labelInfo + 8 | 0;
  $234 = $j$1$lcssa + -1 | 0;
  HEAP32[$233 >> 2] = $234;
  if (!$234) $$0 = 0; else {
   _memset($222 | 0, 0, $234 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $234 << 4 | 0) | 0;
   $240 = $234;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($240 | 0)) {
     $i$5 = 0;
     break;
    }
    $241 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($241 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($241 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($241 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($241 | 3) << 2) >> 2] = 0;
    $240 = HEAP32[$233 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $253 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $254 = $i$5 * 7 | 0;
    $257 = $labelInfo + 12 + ($253 << 2) | 0;
    HEAP32[$257 >> 2] = (HEAP32[$257 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($254 << 2) >> 2] | 0);
    $264 = $253 << 1;
    $265 = $labelInfo + 655376 + ($264 << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($254 + 1 << 2) >> 2] | 0);
    $273 = $labelInfo + 655376 + (($264 | 1) << 3) | 0;
    HEAPF64[$273 >> 3] = +HEAPF64[$273 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($254 + 2 << 2) >> 2] | 0);
    $276 = $253 << 2;
    $277 = $labelInfo + 131084 + ($276 << 2) | 0;
    $281 = HEAP32[$labelInfo + 1310736 + ($254 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$277 >> 2] | 0) > ($281 | 0)) HEAP32[$277 >> 2] = $281;
    $284 = $labelInfo + 131084 + (($276 | 1) << 2) | 0;
    $288 = HEAP32[$labelInfo + 1310736 + ($254 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$284 >> 2] | 0) < ($288 | 0)) HEAP32[$284 >> 2] = $288;
    $291 = $labelInfo + 131084 + (($276 | 2) << 2) | 0;
    $295 = HEAP32[$labelInfo + 1310736 + ($254 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$291 >> 2] | 0) > ($295 | 0)) HEAP32[$291 >> 2] = $295;
    $298 = $labelInfo + 131084 + (($276 | 3) << 2) | 0;
    $302 = HEAP32[$labelInfo + 1310736 + ($254 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$298 >> 2] | 0) < ($302 | 0)) HEAP32[$298 >> 2] = $302;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$233 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $307 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $310 = $i$6 << 1;
    $311 = $labelInfo + 655376 + ($310 << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $317 = $labelInfo + 655376 + (($310 | 1) << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $105 = 0, $120 = 0, $122 = 0, $124 = 0, $128 = 0, $132 = 0, $135 = 0, $137 = 0, $141 = 0, $145 = 0, $149 = 0, $154 = 0, $156 = 0, $16 = 0, $160 = 0, $164 = 0, $168 = 0, $17 = 0, $174 = 0, $177 = 0, $179 = 0, $183 = 0, $187 = 0, $191 = 0, $194 = 0, $199 = 0, $2 = 0, $22 = 0, $222 = 0, $224 = 0, $230 = 0, $233 = 0, $234 = 0, $240 = 0, $241 = 0, $253 = 0, $254 = 0, $257 = 0, $26 = 0, $264 = 0, $265 = 0, $273 = 0, $276 = 0, $277 = 0, $281 = 0, $284 = 0, $288 = 0, $291 = 0, $295 = 0, $298 = 0, $3 = 0, $302 = 0, $307 = 0, $310 = 0, $311 = 0, $317 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $42 = 0, $46 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $64 = 0, $79 = 0, $81 = 0, $83 = 0, $87 = 0, $91 = 0, $97 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $17 = $0 + 1 | 0;
 $22 = $xsize << 1;
 $26 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $17 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($17 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $32 = $pnt2$3 + ($26 << 1) | 0;
    $33 = HEAP16[$32 >> 1] | 0;
    if ($33 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $33;
     $36 = ($33 << 16 >> 16) * 7 | 0;
     $38 = $labelInfo + 1310736 + ($36 + -7 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + 1;
     $42 = $labelInfo + 1310736 + ($36 + -6 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $i$2;
     $46 = $labelInfo + 1310736 + ($36 + -5 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($36 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $52 = HEAP16[$32 + 2 >> 1] | 0;
    $53 = $52 << 16 >> 16;
    $56 = HEAP16[$32 + -2 >> 1] | 0;
    $57 = $56 << 16 >> 16;
    $58 = $56 << 16 >> 16 > 0;
    if ($52 << 16 >> 16 <= 0) {
     if ($58) {
      HEAP16[$pnt2$3 >> 1] = $56;
      $154 = $57 * 7 | 0;
      $156 = $labelInfo + 1310736 + ($154 + -7 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 1;
      $160 = $labelInfo + 1310736 + ($154 + -6 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $i$2;
      $164 = $labelInfo + 1310736 + ($154 + -5 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $j$0;
      $168 = $labelInfo + 1310736 + ($154 + -3 << 2) | 0;
      if ((HEAP32[$168 >> 2] | 0) < ($i$2 | 0)) HEAP32[$168 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($154 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $174 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($174 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $174;
      $177 = ($174 << 16 >> 16) * 7 | 0;
      $179 = $labelInfo + 1310736 + ($177 + -7 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + 1;
      $183 = $labelInfo + 1310736 + ($177 + -6 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $i$2;
      $187 = $labelInfo + 1310736 + ($177 + -5 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $j$0;
      $191 = $labelInfo + 1310736 + ($177 + -3 << 2) | 0;
      if ((HEAP32[$191 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$191 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $194 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $194;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $194 << 16 >> 16;
      $199 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($199 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($199 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($199 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($199 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($199 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($199 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($199 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $194;
      break;
     }
    }
    if ($58) {
     $61 = HEAP32[$labelInfo + 1179664 + ($53 + -1 << 2) >> 2] | 0;
     $64 = HEAP32[$labelInfo + 1179664 + ($57 + -1 << 2) >> 2] | 0;
     L36 : do if (($61 | 0) > ($64 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $64;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $79 = $64;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($61 | 0)) HEAP32[$wk$0 >> 2] = $64;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $61;
      if (($61 | 0) < ($64 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $79 = $61;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($64 | 0)) HEAP32[$wk$1 >> 2] = $61;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $79 = $61;
     } while (0);
     $81 = ($79 << 16 >> 16) * 7 | 0;
     $83 = $labelInfo + 1310736 + ($81 + -7 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + 1;
     $87 = $labelInfo + 1310736 + ($81 + -6 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $i$2;
     $91 = $labelInfo + 1310736 + ($81 + -5 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($81 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $97 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($97 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $52;
     $135 = $53 * 7 | 0;
     $137 = $labelInfo + 1310736 + ($135 + -7 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + 1;
     $141 = $labelInfo + 1310736 + ($135 + -6 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $i$2;
     $145 = $labelInfo + 1310736 + ($135 + -5 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $j$0;
     $149 = $labelInfo + 1310736 + ($135 + -4 << 2) | 0;
     if ((HEAP32[$149 >> 2] | 0) > ($i$2 | 0)) HEAP32[$149 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($135 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $102 = HEAP32[$labelInfo + 1179664 + ($53 + -1 << 2) >> 2] | 0;
    $105 = HEAP32[$labelInfo + 1179664 + (($97 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($102 | 0) > ($105 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $105;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $120 = $105;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($102 | 0)) HEAP32[$wk$2 >> 2] = $105;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $102;
     if (($102 | 0) < ($105 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $120 = $102;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($105 | 0)) HEAP32[$wk$3 >> 2] = $102;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $120 = $102;
    } while (0);
    $122 = ($120 << 16 >> 16) * 7 | 0;
    $124 = $labelInfo + 1310736 + ($122 + -7 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1;
    $128 = $labelInfo + 1310736 + ($122 + -6 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $i$2;
    $132 = $labelInfo + 1310736 + ($122 + -5 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $22 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $222 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $224 = HEAP32[$wk$4 >> 2] | 0;
   if (($224 | 0) == ($i$3 | 0)) {
    $230 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $230 = HEAP32[$labelInfo + 1179664 + ($224 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $230;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $233 = $labelInfo + 8 | 0;
  $234 = $j$1$lcssa + -1 | 0;
  HEAP32[$233 >> 2] = $234;
  if (!$234) $$0 = 0; else {
   _memset($222 | 0, 0, $234 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $234 << 4 | 0) | 0;
   $240 = $234;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($240 | 0)) {
     $i$5 = 0;
     break;
    }
    $241 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($241 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($241 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($241 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($241 | 3) << 2) >> 2] = 0;
    $240 = HEAP32[$233 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $253 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $254 = $i$5 * 7 | 0;
    $257 = $labelInfo + 12 + ($253 << 2) | 0;
    HEAP32[$257 >> 2] = (HEAP32[$257 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($254 << 2) >> 2] | 0);
    $264 = $253 << 1;
    $265 = $labelInfo + 655376 + ($264 << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($254 + 1 << 2) >> 2] | 0);
    $273 = $labelInfo + 655376 + (($264 | 1) << 3) | 0;
    HEAPF64[$273 >> 3] = +HEAPF64[$273 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($254 + 2 << 2) >> 2] | 0);
    $276 = $253 << 2;
    $277 = $labelInfo + 131084 + ($276 << 2) | 0;
    $281 = HEAP32[$labelInfo + 1310736 + ($254 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$277 >> 2] | 0) > ($281 | 0)) HEAP32[$277 >> 2] = $281;
    $284 = $labelInfo + 131084 + (($276 | 1) << 2) | 0;
    $288 = HEAP32[$labelInfo + 1310736 + ($254 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$284 >> 2] | 0) < ($288 | 0)) HEAP32[$284 >> 2] = $288;
    $291 = $labelInfo + 131084 + (($276 | 2) << 2) | 0;
    $295 = HEAP32[$labelInfo + 1310736 + ($254 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$291 >> 2] | 0) > ($295 | 0)) HEAP32[$291 >> 2] = $295;
    $298 = $labelInfo + 131084 + (($276 | 3) << 2) | 0;
    $302 = HEAP32[$labelInfo + 1310736 + ($254 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$298 >> 2] | 0) < ($302 | 0)) HEAP32[$298 >> 2] = $302;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$233 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $307 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $310 = $i$6 << 1;
    $311 = $labelInfo + 655376 + ($310 << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $317 = $labelInfo + 655376 + (($310 | 1) << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $104 = 0, $119 = 0, $121 = 0, $123 = 0, $127 = 0, $131 = 0, $134 = 0, $136 = 0, $140 = 0, $144 = 0, $148 = 0, $153 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $173 = 0, $176 = 0, $178 = 0, $182 = 0, $186 = 0, $190 = 0, $193 = 0, $198 = 0, $2 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $25 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $3 = 0, $301 = 0, $306 = 0, $309 = 0, $31 = 0, $310 = 0, $316 = 0, $32 = 0, $35 = 0, $37 = 0, $41 = 0, $45 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $60 = 0, $63 = 0, $78 = 0, $80 = 0, $82 = 0, $86 = 0, $90 = 0, $96 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $17 = $0 + 1 | 0;
 $25 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $17 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 1) + 2) | 0;
 $pnt2$2 = $2 + ($17 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $31 = $pnt2$3 + ($25 << 1) | 0;
    $32 = HEAP16[$31 >> 1] | 0;
    if ($32 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $32;
     $35 = ($32 << 16 >> 16) * 7 | 0;
     $37 = $labelInfo + 1310736 + ($35 + -7 << 2) | 0;
     HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 1;
     $41 = $labelInfo + 1310736 + ($35 + -6 << 2) | 0;
     HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + $i$2;
     $45 = $labelInfo + 1310736 + ($35 + -5 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($35 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $51 = HEAP16[$31 + 2 >> 1] | 0;
    $52 = $51 << 16 >> 16;
    $55 = HEAP16[$31 + -2 >> 1] | 0;
    $56 = $55 << 16 >> 16;
    $57 = $55 << 16 >> 16 > 0;
    if ($51 << 16 >> 16 <= 0) {
     if ($57) {
      HEAP16[$pnt2$3 >> 1] = $55;
      $153 = $56 * 7 | 0;
      $155 = $labelInfo + 1310736 + ($153 + -7 << 2) | 0;
      HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + 1;
      $159 = $labelInfo + 1310736 + ($153 + -6 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $i$2;
      $163 = $labelInfo + 1310736 + ($153 + -5 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $j$0;
      $167 = $labelInfo + 1310736 + ($153 + -3 << 2) | 0;
      if ((HEAP32[$167 >> 2] | 0) < ($i$2 | 0)) HEAP32[$167 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($153 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $173 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($173 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $173;
      $176 = ($173 << 16 >> 16) * 7 | 0;
      $178 = $labelInfo + 1310736 + ($176 + -7 << 2) | 0;
      HEAP32[$178 >> 2] = (HEAP32[$178 >> 2] | 0) + 1;
      $182 = $labelInfo + 1310736 + ($176 + -6 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + $i$2;
      $186 = $labelInfo + 1310736 + ($176 + -5 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + $j$0;
      $190 = $labelInfo + 1310736 + ($176 + -3 << 2) | 0;
      if ((HEAP32[$190 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$190 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $193 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $193;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $193 << 16 >> 16;
      $198 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($198 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($198 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($198 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($198 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($198 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($198 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($198 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $193;
      break;
     }
    }
    if ($57) {
     $60 = HEAP32[$labelInfo + 1179664 + ($52 + -1 << 2) >> 2] | 0;
     $63 = HEAP32[$labelInfo + 1179664 + ($56 + -1 << 2) >> 2] | 0;
     L35 : do if (($60 | 0) > ($63 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $63;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $78 = $63;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($60 | 0)) HEAP32[$wk$0 >> 2] = $63;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $60;
      if (($60 | 0) < ($63 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $78 = $60;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($63 | 0)) HEAP32[$wk$1 >> 2] = $60;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $78 = $60;
     } while (0);
     $80 = ($78 << 16 >> 16) * 7 | 0;
     $82 = $labelInfo + 1310736 + ($80 + -7 << 2) | 0;
     HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + 1;
     $86 = $labelInfo + 1310736 + ($80 + -6 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + $i$2;
     $90 = $labelInfo + 1310736 + ($80 + -5 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($80 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $96 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($96 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $51;
     $134 = $52 * 7 | 0;
     $136 = $labelInfo + 1310736 + ($134 + -7 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
     $140 = $labelInfo + 1310736 + ($134 + -6 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $i$2;
     $144 = $labelInfo + 1310736 + ($134 + -5 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $j$0;
     $148 = $labelInfo + 1310736 + ($134 + -4 << 2) | 0;
     if ((HEAP32[$148 >> 2] | 0) > ($i$2 | 0)) HEAP32[$148 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($134 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $101 = HEAP32[$labelInfo + 1179664 + ($52 + -1 << 2) >> 2] | 0;
    $104 = HEAP32[$labelInfo + 1179664 + (($96 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($101 | 0) > ($104 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $104;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $119 = $104;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($101 | 0)) HEAP32[$wk$2 >> 2] = $104;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $101;
     if (($101 | 0) < ($104 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $119 = $101;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($104 | 0)) HEAP32[$wk$3 >> 2] = $101;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $119 = $101;
    } while (0);
    $121 = ($119 << 16 >> 16) * 7 | 0;
    $123 = $labelInfo + 1310736 + ($121 + -7 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + 1;
    $127 = $labelInfo + 1310736 + ($121 + -6 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $i$2;
    $131 = $labelInfo + 1310736 + ($121 + -5 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $xsize + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $223 = HEAP32[$wk$4 >> 2] | 0;
   if (($223 | 0) == ($i$3 | 0)) {
    $229 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $229 = HEAP32[$labelInfo + 1179664 + ($223 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $229;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $232 = $labelInfo + 8 | 0;
  $233 = $j$1$lcssa + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $239 = $233;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($239 | 0)) {
     $i$5 = 0;
     break;
    }
    $240 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($240 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($240 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $239 = HEAP32[$232 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $252 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $i$5 * 7 | 0;
    $256 = $labelInfo + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $labelInfo + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $labelInfo + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $labelInfo + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$labelInfo + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $labelInfo + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $labelInfo + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$labelInfo + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $309 = $i$6 << 1;
    $310 = $labelInfo + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $labelInfo + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $104 = 0, $119 = 0, $121 = 0, $123 = 0, $127 = 0, $131 = 0, $134 = 0, $136 = 0, $140 = 0, $144 = 0, $148 = 0, $153 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $173 = 0, $176 = 0, $178 = 0, $182 = 0, $186 = 0, $190 = 0, $193 = 0, $198 = 0, $2 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $25 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $3 = 0, $301 = 0, $306 = 0, $309 = 0, $31 = 0, $310 = 0, $316 = 0, $32 = 0, $35 = 0, $37 = 0, $41 = 0, $45 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $60 = 0, $63 = 0, $78 = 0, $80 = 0, $82 = 0, $86 = 0, $90 = 0, $96 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $17 = $0 + 1 | 0;
 $25 = 0 - $0 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $17 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 1) + 2) | 0;
 $pnt2$2 = $2 + ($17 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $31 = $pnt2$3 + ($25 << 1) | 0;
    $32 = HEAP16[$31 >> 1] | 0;
    if ($32 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $32;
     $35 = ($32 << 16 >> 16) * 7 | 0;
     $37 = $labelInfo + 1310736 + ($35 + -7 << 2) | 0;
     HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 1;
     $41 = $labelInfo + 1310736 + ($35 + -6 << 2) | 0;
     HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + $i$2;
     $45 = $labelInfo + 1310736 + ($35 + -5 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($35 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $51 = HEAP16[$31 + 2 >> 1] | 0;
    $52 = $51 << 16 >> 16;
    $55 = HEAP16[$31 + -2 >> 1] | 0;
    $56 = $55 << 16 >> 16;
    $57 = $55 << 16 >> 16 > 0;
    if ($51 << 16 >> 16 <= 0) {
     if ($57) {
      HEAP16[$pnt2$3 >> 1] = $55;
      $153 = $56 * 7 | 0;
      $155 = $labelInfo + 1310736 + ($153 + -7 << 2) | 0;
      HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + 1;
      $159 = $labelInfo + 1310736 + ($153 + -6 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $i$2;
      $163 = $labelInfo + 1310736 + ($153 + -5 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $j$0;
      $167 = $labelInfo + 1310736 + ($153 + -3 << 2) | 0;
      if ((HEAP32[$167 >> 2] | 0) < ($i$2 | 0)) HEAP32[$167 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($153 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $173 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($173 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $173;
      $176 = ($173 << 16 >> 16) * 7 | 0;
      $178 = $labelInfo + 1310736 + ($176 + -7 << 2) | 0;
      HEAP32[$178 >> 2] = (HEAP32[$178 >> 2] | 0) + 1;
      $182 = $labelInfo + 1310736 + ($176 + -6 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + $i$2;
      $186 = $labelInfo + 1310736 + ($176 + -5 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + $j$0;
      $190 = $labelInfo + 1310736 + ($176 + -3 << 2) | 0;
      if ((HEAP32[$190 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$190 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $193 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $193;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $193 << 16 >> 16;
      $198 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($198 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($198 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($198 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($198 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($198 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($198 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($198 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $193;
      break;
     }
    }
    if ($57) {
     $60 = HEAP32[$labelInfo + 1179664 + ($52 + -1 << 2) >> 2] | 0;
     $63 = HEAP32[$labelInfo + 1179664 + ($56 + -1 << 2) >> 2] | 0;
     L36 : do if (($60 | 0) > ($63 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $63;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $78 = $63;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($60 | 0)) HEAP32[$wk$0 >> 2] = $63;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $60;
      if (($60 | 0) < ($63 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $78 = $60;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($63 | 0)) HEAP32[$wk$1 >> 2] = $60;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $78 = $60;
     } while (0);
     $80 = ($78 << 16 >> 16) * 7 | 0;
     $82 = $labelInfo + 1310736 + ($80 + -7 << 2) | 0;
     HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + 1;
     $86 = $labelInfo + 1310736 + ($80 + -6 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + $i$2;
     $90 = $labelInfo + 1310736 + ($80 + -5 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($80 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $96 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($96 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $51;
     $134 = $52 * 7 | 0;
     $136 = $labelInfo + 1310736 + ($134 + -7 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
     $140 = $labelInfo + 1310736 + ($134 + -6 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $i$2;
     $144 = $labelInfo + 1310736 + ($134 + -5 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $j$0;
     $148 = $labelInfo + 1310736 + ($134 + -4 << 2) | 0;
     if ((HEAP32[$148 >> 2] | 0) > ($i$2 | 0)) HEAP32[$148 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($134 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $101 = HEAP32[$labelInfo + 1179664 + ($52 + -1 << 2) >> 2] | 0;
    $104 = HEAP32[$labelInfo + 1179664 + (($96 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($101 | 0) > ($104 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $104;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $119 = $104;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($101 | 0)) HEAP32[$wk$2 >> 2] = $104;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $101;
     if (($101 | 0) < ($104 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $119 = $101;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($104 | 0)) HEAP32[$wk$3 >> 2] = $101;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $119 = $101;
    } while (0);
    $121 = ($119 << 16 >> 16) * 7 | 0;
    $123 = $labelInfo + 1310736 + ($121 + -7 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + 1;
    $127 = $labelInfo + 1310736 + ($121 + -6 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $i$2;
    $131 = $labelInfo + 1310736 + ($121 + -5 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $xsize + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $223 = HEAP32[$wk$4 >> 2] | 0;
   if (($223 | 0) == ($i$3 | 0)) {
    $229 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $229 = HEAP32[$labelInfo + 1179664 + ($223 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $229;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $232 = $labelInfo + 8 | 0;
  $233 = $j$1$lcssa + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $239 = $233;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($239 | 0)) {
     $i$5 = 0;
     break;
    }
    $240 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($240 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($240 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $239 = HEAP32[$232 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $252 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $i$5 * 7 | 0;
    $256 = $labelInfo + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $labelInfo + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $labelInfo + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $labelInfo + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$labelInfo + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $labelInfo + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $labelInfo + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$labelInfo + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $309 = $i$6 << 1;
    $310 = $labelInfo + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $labelInfo + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $102 = 0, $117 = 0, $119 = 0, $121 = 0, $125 = 0, $129 = 0, $132 = 0, $134 = 0, $138 = 0, $14 = 0, $142 = 0, $146 = 0, $15 = 0, $151 = 0, $153 = 0, $157 = 0, $161 = 0, $165 = 0, $171 = 0, $174 = 0, $176 = 0, $180 = 0, $184 = 0, $188 = 0, $191 = 0, $196 = 0, $218 = 0, $22 = 0, $220 = 0, $226 = 0, $229 = 0, $230 = 0, $236 = 0, $237 = 0, $249 = 0, $250 = 0, $253 = 0, $260 = 0, $261 = 0, $269 = 0, $272 = 0, $273 = 0, $277 = 0, $280 = 0, $284 = 0, $287 = 0, $29 = 0, $291 = 0, $294 = 0, $298 = 0, $30 = 0, $303 = 0, $306 = 0, $307 = 0, $313 = 0, $33 = 0, $35 = 0, $39 = 0, $43 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $84 = 0, $88 = 0, $94 = 0, $99 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $22 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $15 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($15 << 1) | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $29 = $pnt2$3 + ($22 << 1) | 0;
    $30 = HEAP16[$29 >> 1] | 0;
    if ($30 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $30;
     $33 = ($30 << 16 >> 16) * 7 | 0;
     $35 = $labelInfo + 1310736 + ($33 + -7 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 1;
     $39 = $labelInfo + 1310736 + ($33 + -6 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $i$2;
     $43 = $labelInfo + 1310736 + ($33 + -5 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($33 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $49 = HEAP16[$29 + 2 >> 1] | 0;
    $50 = $49 << 16 >> 16;
    $53 = HEAP16[$29 + -2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $55 = $53 << 16 >> 16 > 0;
    if ($49 << 16 >> 16 <= 0) {
     if ($55) {
      HEAP16[$pnt2$3 >> 1] = $53;
      $151 = $54 * 7 | 0;
      $153 = $labelInfo + 1310736 + ($151 + -7 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $labelInfo + 1310736 + ($151 + -6 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $i$2;
      $161 = $labelInfo + 1310736 + ($151 + -5 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $j$0;
      $165 = $labelInfo + 1310736 + ($151 + -3 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($i$2 | 0)) HEAP32[$165 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($151 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $171 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($171 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $171;
      $174 = ($171 << 16 >> 16) * 7 | 0;
      $176 = $labelInfo + 1310736 + ($174 + -7 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1;
      $180 = $labelInfo + 1310736 + ($174 + -6 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $i$2;
      $184 = $labelInfo + 1310736 + ($174 + -5 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $j$0;
      $188 = $labelInfo + 1310736 + ($174 + -3 << 2) | 0;
      if ((HEAP32[$188 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$188 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $191 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $191;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $191 << 16 >> 16;
      $196 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($196 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($196 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($196 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($196 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $191;
      break;
     }
    }
    if ($55) {
     $58 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
     $61 = HEAP32[$labelInfo + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     L35 : do if (($58 | 0) > ($61 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $61;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $76 = $61;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($58 | 0)) HEAP32[$wk$0 >> 2] = $61;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $58;
      if (($58 | 0) < ($61 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $76 = $58;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($61 | 0)) HEAP32[$wk$1 >> 2] = $58;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $76 = $58;
     } while (0);
     $78 = ($76 << 16 >> 16) * 7 | 0;
     $80 = $labelInfo + 1310736 + ($78 + -7 << 2) | 0;
     HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 1;
     $84 = $labelInfo + 1310736 + ($78 + -6 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + $i$2;
     $88 = $labelInfo + 1310736 + ($78 + -5 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($78 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $94 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($94 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $49;
     $132 = $50 * 7 | 0;
     $134 = $labelInfo + 1310736 + ($132 + -7 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
     $138 = $labelInfo + 1310736 + ($132 + -6 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $i$2;
     $142 = $labelInfo + 1310736 + ($132 + -5 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $j$0;
     $146 = $labelInfo + 1310736 + ($132 + -4 << 2) | 0;
     if ((HEAP32[$146 >> 2] | 0) > ($i$2 | 0)) HEAP32[$146 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($132 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $99 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
    $102 = HEAP32[$labelInfo + 1179664 + (($94 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($99 | 0) > ($102 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $102;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $117 = $102;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($99 | 0)) HEAP32[$wk$2 >> 2] = $102;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $99;
     if (($99 | 0) < ($102 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $117 = $99;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($102 | 0)) HEAP32[$wk$3 >> 2] = $99;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $117 = $99;
    } while (0);
    $119 = ($117 << 16 >> 16) * 7 | 0;
    $121 = $labelInfo + 1310736 + ($119 + -7 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + 1;
    $125 = $labelInfo + 1310736 + ($119 + -6 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $i$2;
    $129 = $labelInfo + 1310736 + ($119 + -5 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $218 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $220 = HEAP32[$wk$4 >> 2] | 0;
   if (($220 | 0) == ($i$3 | 0)) {
    $226 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $226 = HEAP32[$labelInfo + 1179664 + ($220 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $226;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $229 = $labelInfo + 8 | 0;
  $230 = $j$1$lcssa + -1 | 0;
  HEAP32[$229 >> 2] = $230;
  if (!$230) $$0 = 0; else {
   _memset($218 | 0, 0, $230 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $230 << 4 | 0) | 0;
   $236 = $230;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($236 | 0)) {
     $i$5 = 0;
     break;
    }
    $237 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($237 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($237 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($237 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($237 | 3) << 2) >> 2] = 0;
    $236 = HEAP32[$229 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $249 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $250 = $i$5 * 7 | 0;
    $253 = $labelInfo + 12 + ($249 << 2) | 0;
    HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($250 << 2) >> 2] | 0);
    $260 = $249 << 1;
    $261 = $labelInfo + 655376 + ($260 << 3) | 0;
    HEAPF64[$261 >> 3] = +HEAPF64[$261 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($250 + 1 << 2) >> 2] | 0);
    $269 = $labelInfo + 655376 + (($260 | 1) << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($250 + 2 << 2) >> 2] | 0);
    $272 = $249 << 2;
    $273 = $labelInfo + 131084 + ($272 << 2) | 0;
    $277 = HEAP32[$labelInfo + 1310736 + ($250 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) > ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $labelInfo + 131084 + (($272 | 1) << 2) | 0;
    $284 = HEAP32[$labelInfo + 1310736 + ($250 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) < ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $labelInfo + 131084 + (($272 | 2) << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($250 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($272 | 3) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($250 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$229 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $303 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $306 = $i$6 << 1;
    $307 = $labelInfo + 655376 + ($306 << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $313 = $labelInfo + 655376 + (($306 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $102 = 0, $117 = 0, $119 = 0, $121 = 0, $125 = 0, $129 = 0, $132 = 0, $134 = 0, $138 = 0, $14 = 0, $142 = 0, $146 = 0, $15 = 0, $151 = 0, $153 = 0, $157 = 0, $161 = 0, $165 = 0, $171 = 0, $174 = 0, $176 = 0, $180 = 0, $184 = 0, $188 = 0, $191 = 0, $196 = 0, $218 = 0, $22 = 0, $220 = 0, $226 = 0, $229 = 0, $230 = 0, $236 = 0, $237 = 0, $249 = 0, $250 = 0, $253 = 0, $260 = 0, $261 = 0, $269 = 0, $272 = 0, $273 = 0, $277 = 0, $280 = 0, $284 = 0, $287 = 0, $29 = 0, $291 = 0, $294 = 0, $298 = 0, $30 = 0, $303 = 0, $306 = 0, $307 = 0, $313 = 0, $33 = 0, $35 = 0, $39 = 0, $43 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $84 = 0, $88 = 0, $94 = 0, $99 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $22 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $15 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($15 << 1) | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $29 = $pnt2$3 + ($22 << 1) | 0;
    $30 = HEAP16[$29 >> 1] | 0;
    if ($30 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $30;
     $33 = ($30 << 16 >> 16) * 7 | 0;
     $35 = $labelInfo + 1310736 + ($33 + -7 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 1;
     $39 = $labelInfo + 1310736 + ($33 + -6 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $i$2;
     $43 = $labelInfo + 1310736 + ($33 + -5 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($33 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $49 = HEAP16[$29 + 2 >> 1] | 0;
    $50 = $49 << 16 >> 16;
    $53 = HEAP16[$29 + -2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $55 = $53 << 16 >> 16 > 0;
    if ($49 << 16 >> 16 <= 0) {
     if ($55) {
      HEAP16[$pnt2$3 >> 1] = $53;
      $151 = $54 * 7 | 0;
      $153 = $labelInfo + 1310736 + ($151 + -7 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $labelInfo + 1310736 + ($151 + -6 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $i$2;
      $161 = $labelInfo + 1310736 + ($151 + -5 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $j$0;
      $165 = $labelInfo + 1310736 + ($151 + -3 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($i$2 | 0)) HEAP32[$165 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($151 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $171 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($171 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $171;
      $174 = ($171 << 16 >> 16) * 7 | 0;
      $176 = $labelInfo + 1310736 + ($174 + -7 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1;
      $180 = $labelInfo + 1310736 + ($174 + -6 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $i$2;
      $184 = $labelInfo + 1310736 + ($174 + -5 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $j$0;
      $188 = $labelInfo + 1310736 + ($174 + -3 << 2) | 0;
      if ((HEAP32[$188 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$188 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $191 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $191;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $191 << 16 >> 16;
      $196 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($196 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($196 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($196 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($196 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $191;
      break;
     }
    }
    if ($55) {
     $58 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
     $61 = HEAP32[$labelInfo + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     L36 : do if (($58 | 0) > ($61 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $61;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $76 = $61;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($58 | 0)) HEAP32[$wk$0 >> 2] = $61;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $58;
      if (($58 | 0) < ($61 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $76 = $58;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($61 | 0)) HEAP32[$wk$1 >> 2] = $58;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $76 = $58;
     } while (0);
     $78 = ($76 << 16 >> 16) * 7 | 0;
     $80 = $labelInfo + 1310736 + ($78 + -7 << 2) | 0;
     HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 1;
     $84 = $labelInfo + 1310736 + ($78 + -6 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + $i$2;
     $88 = $labelInfo + 1310736 + ($78 + -5 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($78 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $94 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($94 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $49;
     $132 = $50 * 7 | 0;
     $134 = $labelInfo + 1310736 + ($132 + -7 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
     $138 = $labelInfo + 1310736 + ($132 + -6 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $i$2;
     $142 = $labelInfo + 1310736 + ($132 + -5 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $j$0;
     $146 = $labelInfo + 1310736 + ($132 + -4 << 2) | 0;
     if ((HEAP32[$146 >> 2] | 0) > ($i$2 | 0)) HEAP32[$146 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($132 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $99 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
    $102 = HEAP32[$labelInfo + 1179664 + (($94 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($99 | 0) > ($102 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $102;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $117 = $102;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($99 | 0)) HEAP32[$wk$2 >> 2] = $102;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $99;
     if (($99 | 0) < ($102 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $117 = $99;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($102 | 0)) HEAP32[$wk$3 >> 2] = $99;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $117 = $99;
    } while (0);
    $119 = ($117 << 16 >> 16) * 7 | 0;
    $121 = $labelInfo + 1310736 + ($119 + -7 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + 1;
    $125 = $labelInfo + 1310736 + ($119 + -6 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $i$2;
    $129 = $labelInfo + 1310736 + ($119 + -5 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $218 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $220 = HEAP32[$wk$4 >> 2] | 0;
   if (($220 | 0) == ($i$3 | 0)) {
    $226 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $226 = HEAP32[$labelInfo + 1179664 + ($220 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $226;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $229 = $labelInfo + 8 | 0;
  $230 = $j$1$lcssa + -1 | 0;
  HEAP32[$229 >> 2] = $230;
  if (!$230) $$0 = 0; else {
   _memset($218 | 0, 0, $230 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $230 << 4 | 0) | 0;
   $236 = $230;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($236 | 0)) {
     $i$5 = 0;
     break;
    }
    $237 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($237 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($237 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($237 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($237 | 3) << 2) >> 2] = 0;
    $236 = HEAP32[$229 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $249 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $250 = $i$5 * 7 | 0;
    $253 = $labelInfo + 12 + ($249 << 2) | 0;
    HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($250 << 2) >> 2] | 0);
    $260 = $249 << 1;
    $261 = $labelInfo + 655376 + ($260 << 3) | 0;
    HEAPF64[$261 >> 3] = +HEAPF64[$261 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($250 + 1 << 2) >> 2] | 0);
    $269 = $labelInfo + 655376 + (($260 | 1) << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($250 + 2 << 2) >> 2] | 0);
    $272 = $249 << 2;
    $273 = $labelInfo + 131084 + ($272 << 2) | 0;
    $277 = HEAP32[$labelInfo + 1310736 + ($250 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) > ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $labelInfo + 131084 + (($272 | 1) << 2) | 0;
    $284 = HEAP32[$labelInfo + 1310736 + ($250 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) < ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $labelInfo + 131084 + (($272 | 2) << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($250 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($272 | 3) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($250 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$229 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $303 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $306 = $i$6 << 1;
    $307 = $labelInfo + 655376 + ($306 << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $313 = $labelInfo + 655376 + (($306 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $101 = 0, $116 = 0, $118 = 0, $120 = 0, $124 = 0, $128 = 0, $131 = 0, $133 = 0, $137 = 0, $14 = 0, $141 = 0, $145 = 0, $15 = 0, $150 = 0, $152 = 0, $156 = 0, $160 = 0, $164 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $187 = 0, $190 = 0, $195 = 0, $217 = 0, $219 = 0, $22 = 0, $225 = 0, $228 = 0, $229 = 0, $235 = 0, $236 = 0, $248 = 0, $249 = 0, $252 = 0, $259 = 0, $260 = 0, $268 = 0, $271 = 0, $272 = 0, $276 = 0, $279 = 0, $28 = 0, $283 = 0, $286 = 0, $29 = 0, $290 = 0, $293 = 0, $297 = 0, $302 = 0, $305 = 0, $306 = 0, $312 = 0, $32 = 0, $34 = 0, $38 = 0, $42 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $60 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $83 = 0, $87 = 0, $93 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $22 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $15 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($15 << 1) | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $28 = $pnt2$3 + ($22 << 1) | 0;
    $29 = HEAP16[$28 >> 1] | 0;
    if ($29 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $29;
     $32 = ($29 << 16 >> 16) * 7 | 0;
     $34 = $labelInfo + 1310736 + ($32 + -7 << 2) | 0;
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 1;
     $38 = $labelInfo + 1310736 + ($32 + -6 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + $i$2;
     $42 = $labelInfo + 1310736 + ($32 + -5 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($32 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $48 = HEAP16[$28 + 2 >> 1] | 0;
    $49 = $48 << 16 >> 16;
    $52 = HEAP16[$28 + -2 >> 1] | 0;
    $53 = $52 << 16 >> 16;
    $54 = $52 << 16 >> 16 > 0;
    if ($48 << 16 >> 16 <= 0) {
     if ($54) {
      HEAP16[$pnt2$3 >> 1] = $52;
      $150 = $53 * 7 | 0;
      $152 = $labelInfo + 1310736 + ($150 + -7 << 2) | 0;
      HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
      $156 = $labelInfo + 1310736 + ($150 + -6 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $i$2;
      $160 = $labelInfo + 1310736 + ($150 + -5 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $j$0;
      $164 = $labelInfo + 1310736 + ($150 + -3 << 2) | 0;
      if ((HEAP32[$164 >> 2] | 0) < ($i$2 | 0)) HEAP32[$164 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($150 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $170 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $labelInfo + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $labelInfo + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $i$2;
      $183 = $labelInfo + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $j$0;
      $187 = $labelInfo + 1310736 + ($173 + -3 << 2) | 0;
      if ((HEAP32[$187 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$187 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $190 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $190;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($195 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $190;
      break;
     }
    }
    if ($54) {
     $57 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
     $60 = HEAP32[$labelInfo + 1179664 + ($53 + -1 << 2) >> 2] | 0;
     L36 : do if (($57 | 0) > ($60 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $60;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $75 = $60;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($57 | 0)) HEAP32[$wk$0 >> 2] = $60;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $57;
      if (($57 | 0) < ($60 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $75 = $57;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($60 | 0)) HEAP32[$wk$1 >> 2] = $57;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $75 = $57;
     } while (0);
     $77 = ($75 << 16 >> 16) * 7 | 0;
     $79 = $labelInfo + 1310736 + ($77 + -7 << 2) | 0;
     HEAP32[$79 >> 2] = (HEAP32[$79 >> 2] | 0) + 1;
     $83 = $labelInfo + 1310736 + ($77 + -6 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + $i$2;
     $87 = $labelInfo + 1310736 + ($77 + -5 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($77 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $93 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($93 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $48;
     $131 = $49 * 7 | 0;
     $133 = $labelInfo + 1310736 + ($131 + -7 << 2) | 0;
     HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
     $137 = $labelInfo + 1310736 + ($131 + -6 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $i$2;
     $141 = $labelInfo + 1310736 + ($131 + -5 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $j$0;
     $145 = $labelInfo + 1310736 + ($131 + -4 << 2) | 0;
     if ((HEAP32[$145 >> 2] | 0) > ($i$2 | 0)) HEAP32[$145 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($131 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $98 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
    $101 = HEAP32[$labelInfo + 1179664 + (($93 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($98 | 0) > ($101 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $101;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $116 = $101;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($98 | 0)) HEAP32[$wk$2 >> 2] = $101;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $98;
     if (($98 | 0) < ($101 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $116 = $98;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($101 | 0)) HEAP32[$wk$3 >> 2] = $98;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $116 = $98;
    } while (0);
    $118 = ($116 << 16 >> 16) * 7 | 0;
    $120 = $labelInfo + 1310736 + ($118 + -7 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + 1;
    $124 = $labelInfo + 1310736 + ($118 + -6 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $i$2;
    $128 = $labelInfo + 1310736 + ($118 + -5 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $217 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $219 = HEAP32[$wk$4 >> 2] | 0;
   if (($219 | 0) == ($i$3 | 0)) {
    $225 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $225 = HEAP32[$labelInfo + 1179664 + ($219 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $225;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $228 = $labelInfo + 8 | 0;
  $229 = $j$1$lcssa + -1 | 0;
  HEAP32[$228 >> 2] = $229;
  if (!$229) $$0 = 0; else {
   _memset($217 | 0, 0, $229 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $229 << 4 | 0) | 0;
   $235 = $229;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($235 | 0)) {
     $i$5 = 0;
     break;
    }
    $236 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($236 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($236 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($236 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($236 | 3) << 2) >> 2] = 0;
    $235 = HEAP32[$228 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $248 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $249 = $i$5 * 7 | 0;
    $252 = $labelInfo + 12 + ($248 << 2) | 0;
    HEAP32[$252 >> 2] = (HEAP32[$252 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($249 << 2) >> 2] | 0);
    $259 = $248 << 1;
    $260 = $labelInfo + 655376 + ($259 << 3) | 0;
    HEAPF64[$260 >> 3] = +HEAPF64[$260 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($249 + 1 << 2) >> 2] | 0);
    $268 = $labelInfo + 655376 + (($259 | 1) << 3) | 0;
    HEAPF64[$268 >> 3] = +HEAPF64[$268 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($249 + 2 << 2) >> 2] | 0);
    $271 = $248 << 2;
    $272 = $labelInfo + 131084 + ($271 << 2) | 0;
    $276 = HEAP32[$labelInfo + 1310736 + ($249 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$272 >> 2] | 0) > ($276 | 0)) HEAP32[$272 >> 2] = $276;
    $279 = $labelInfo + 131084 + (($271 | 1) << 2) | 0;
    $283 = HEAP32[$labelInfo + 1310736 + ($249 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$279 >> 2] | 0) < ($283 | 0)) HEAP32[$279 >> 2] = $283;
    $286 = $labelInfo + 131084 + (($271 | 2) << 2) | 0;
    $290 = HEAP32[$labelInfo + 1310736 + ($249 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $labelInfo + 131084 + (($271 | 3) << 2) | 0;
    $297 = HEAP32[$labelInfo + 1310736 + ($249 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$228 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $302 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $305 = $i$6 << 1;
    $306 = $labelInfo + 655376 + ($305 << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $312 = $labelInfo + 655376 + (($305 | 1) << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}
function _arLabelingSubEWRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $101 = 0, $116 = 0, $118 = 0, $120 = 0, $124 = 0, $128 = 0, $131 = 0, $133 = 0, $137 = 0, $14 = 0, $141 = 0, $145 = 0, $15 = 0, $150 = 0, $152 = 0, $156 = 0, $160 = 0, $164 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $187 = 0, $190 = 0, $195 = 0, $217 = 0, $219 = 0, $22 = 0, $225 = 0, $228 = 0, $229 = 0, $235 = 0, $236 = 0, $248 = 0, $249 = 0, $252 = 0, $259 = 0, $260 = 0, $268 = 0, $271 = 0, $272 = 0, $276 = 0, $279 = 0, $28 = 0, $283 = 0, $286 = 0, $29 = 0, $290 = 0, $293 = 0, $297 = 0, $302 = 0, $305 = 0, $306 = 0, $312 = 0, $32 = 0, $34 = 0, $38 = 0, $42 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $60 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $83 = 0, $87 = 0, $93 = 0, $98 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $22 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $15 | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($15 << 1) | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $28 = $pnt2$3 + ($22 << 1) | 0;
    $29 = HEAP16[$28 >> 1] | 0;
    if ($29 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $29;
     $32 = ($29 << 16 >> 16) * 7 | 0;
     $34 = $labelInfo + 1310736 + ($32 + -7 << 2) | 0;
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 1;
     $38 = $labelInfo + 1310736 + ($32 + -6 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + $i$2;
     $42 = $labelInfo + 1310736 + ($32 + -5 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($32 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $48 = HEAP16[$28 + 2 >> 1] | 0;
    $49 = $48 << 16 >> 16;
    $52 = HEAP16[$28 + -2 >> 1] | 0;
    $53 = $52 << 16 >> 16;
    $54 = $52 << 16 >> 16 > 0;
    if ($48 << 16 >> 16 <= 0) {
     if ($54) {
      HEAP16[$pnt2$3 >> 1] = $52;
      $150 = $53 * 7 | 0;
      $152 = $labelInfo + 1310736 + ($150 + -7 << 2) | 0;
      HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
      $156 = $labelInfo + 1310736 + ($150 + -6 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $i$2;
      $160 = $labelInfo + 1310736 + ($150 + -5 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $j$0;
      $164 = $labelInfo + 1310736 + ($150 + -3 << 2) | 0;
      if ((HEAP32[$164 >> 2] | 0) < ($i$2 | 0)) HEAP32[$164 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($150 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $170 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $labelInfo + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $labelInfo + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $i$2;
      $183 = $labelInfo + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $j$0;
      $187 = $labelInfo + 1310736 + ($173 + -3 << 2) | 0;
      if ((HEAP32[$187 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$187 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $190 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $190;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($195 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $190;
      break;
     }
    }
    if ($54) {
     $57 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
     $60 = HEAP32[$labelInfo + 1179664 + ($53 + -1 << 2) >> 2] | 0;
     L35 : do if (($57 | 0) > ($60 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $60;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $75 = $60;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($57 | 0)) HEAP32[$wk$0 >> 2] = $60;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $57;
      if (($57 | 0) < ($60 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $75 = $57;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($60 | 0)) HEAP32[$wk$1 >> 2] = $57;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $75 = $57;
     } while (0);
     $77 = ($75 << 16 >> 16) * 7 | 0;
     $79 = $labelInfo + 1310736 + ($77 + -7 << 2) | 0;
     HEAP32[$79 >> 2] = (HEAP32[$79 >> 2] | 0) + 1;
     $83 = $labelInfo + 1310736 + ($77 + -6 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + $i$2;
     $87 = $labelInfo + 1310736 + ($77 + -5 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($77 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $93 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($93 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $48;
     $131 = $49 * 7 | 0;
     $133 = $labelInfo + 1310736 + ($131 + -7 << 2) | 0;
     HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
     $137 = $labelInfo + 1310736 + ($131 + -6 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $i$2;
     $141 = $labelInfo + 1310736 + ($131 + -5 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $j$0;
     $145 = $labelInfo + 1310736 + ($131 + -4 << 2) | 0;
     if ((HEAP32[$145 >> 2] | 0) > ($i$2 | 0)) HEAP32[$145 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($131 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $98 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
    $101 = HEAP32[$labelInfo + 1179664 + (($93 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($98 | 0) > ($101 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $101;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $116 = $101;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($98 | 0)) HEAP32[$wk$2 >> 2] = $101;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $98;
     if (($98 | 0) < ($101 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $116 = $98;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($101 | 0)) HEAP32[$wk$3 >> 2] = $98;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $116 = $98;
    } while (0);
    $118 = ($116 << 16 >> 16) * 7 | 0;
    $120 = $labelInfo + 1310736 + ($118 + -7 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + 1;
    $124 = $labelInfo + 1310736 + ($118 + -6 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $i$2;
    $128 = $labelInfo + 1310736 + ($118 + -5 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $217 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $219 = HEAP32[$wk$4 >> 2] | 0;
   if (($219 | 0) == ($i$3 | 0)) {
    $225 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $225 = HEAP32[$labelInfo + 1179664 + ($219 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $225;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $228 = $labelInfo + 8 | 0;
  $229 = $j$1$lcssa + -1 | 0;
  HEAP32[$228 >> 2] = $229;
  if (!$229) $$0 = 0; else {
   _memset($217 | 0, 0, $229 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $229 << 4 | 0) | 0;
   $235 = $229;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($235 | 0)) {
     $i$5 = 0;
     break;
    }
    $236 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($236 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($236 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($236 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($236 | 3) << 2) >> 2] = 0;
    $235 = HEAP32[$228 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $248 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $249 = $i$5 * 7 | 0;
    $252 = $labelInfo + 12 + ($248 << 2) | 0;
    HEAP32[$252 >> 2] = (HEAP32[$252 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($249 << 2) >> 2] | 0);
    $259 = $248 << 1;
    $260 = $labelInfo + 655376 + ($259 << 3) | 0;
    HEAPF64[$260 >> 3] = +HEAPF64[$260 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($249 + 1 << 2) >> 2] | 0);
    $268 = $labelInfo + 655376 + (($259 | 1) << 3) | 0;
    HEAPF64[$268 >> 3] = +HEAPF64[$268 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($249 + 2 << 2) >> 2] | 0);
    $271 = $248 << 2;
    $272 = $labelInfo + 131084 + ($271 << 2) | 0;
    $276 = HEAP32[$labelInfo + 1310736 + ($249 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$272 >> 2] | 0) > ($276 | 0)) HEAP32[$272 >> 2] = $276;
    $279 = $labelInfo + 131084 + (($271 | 1) << 2) | 0;
    $283 = HEAP32[$labelInfo + 1310736 + ($249 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$279 >> 2] | 0) < ($283 | 0)) HEAP32[$279 >> 2] = $283;
    $286 = $labelInfo + 131084 + (($271 | 2) << 2) | 0;
    $290 = HEAP32[$labelInfo + 1310736 + ($249 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $labelInfo + 131084 + (($271 | 3) << 2) | 0;
    $297 = HEAP32[$labelInfo + 1310736 + ($249 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$228 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $302 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $305 = $i$6 << 1;
    $306 = $labelInfo + 655376 + ($305 << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $312 = $labelInfo + 655376 + (($305 | 1) << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEWRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $100 = 0, $115 = 0, $117 = 0, $119 = 0, $123 = 0, $127 = 0, $130 = 0, $132 = 0, $136 = 0, $14 = 0, $140 = 0, $144 = 0, $149 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $163 = 0, $169 = 0, $172 = 0, $174 = 0, $178 = 0, $182 = 0, $186 = 0, $189 = 0, $194 = 0, $21 = 0, $216 = 0, $218 = 0, $224 = 0, $227 = 0, $228 = 0, $234 = 0, $235 = 0, $247 = 0, $248 = 0, $251 = 0, $258 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $271 = 0, $275 = 0, $278 = 0, $28 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $301 = 0, $304 = 0, $305 = 0, $31 = 0, $311 = 0, $33 = 0, $37 = 0, $41 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $82 = 0, $86 = 0, $92 = 0, $97 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $21 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $15 | 0;
 $j$0 = 1;
 $pnt$0 = $image + $15 | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $27 = $pnt2$3 + ($21 << 1) | 0;
    $28 = HEAP16[$27 >> 1] | 0;
    if ($28 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $28;
     $31 = ($28 << 16 >> 16) * 7 | 0;
     $33 = $labelInfo + 1310736 + ($31 + -7 << 2) | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     $37 = $labelInfo + 1310736 + ($31 + -6 << 2) | 0;
     HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + $i$2;
     $41 = $labelInfo + 1310736 + ($31 + -5 << 2) | 0;
     HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($31 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $47 = HEAP16[$27 + 2 >> 1] | 0;
    $48 = $47 << 16 >> 16;
    $51 = HEAP16[$27 + -2 >> 1] | 0;
    $52 = $51 << 16 >> 16;
    $53 = $51 << 16 >> 16 > 0;
    if ($47 << 16 >> 16 <= 0) {
     if ($53) {
      HEAP16[$pnt2$3 >> 1] = $51;
      $149 = $52 * 7 | 0;
      $151 = $labelInfo + 1310736 + ($149 + -7 << 2) | 0;
      HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + 1;
      $155 = $labelInfo + 1310736 + ($149 + -6 << 2) | 0;
      HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $i$2;
      $159 = $labelInfo + 1310736 + ($149 + -5 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $j$0;
      $163 = $labelInfo + 1310736 + ($149 + -3 << 2) | 0;
      if ((HEAP32[$163 >> 2] | 0) < ($i$2 | 0)) HEAP32[$163 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($149 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $169 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($169 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $169;
      $172 = ($169 << 16 >> 16) * 7 | 0;
      $174 = $labelInfo + 1310736 + ($172 + -7 << 2) | 0;
      HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + 1;
      $178 = $labelInfo + 1310736 + ($172 + -6 << 2) | 0;
      HEAP32[$178 >> 2] = (HEAP32[$178 >> 2] | 0) + $i$2;
      $182 = $labelInfo + 1310736 + ($172 + -5 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + $j$0;
      $186 = $labelInfo + 1310736 + ($172 + -3 << 2) | 0;
      if ((HEAP32[$186 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$186 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $189 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $189;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $189 << 16 >> 16;
      $194 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($194 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($194 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($194 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($194 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($194 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($194 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($194 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $189;
      break;
     }
    }
    if ($53) {
     $56 = HEAP32[$labelInfo + 1179664 + ($48 + -1 << 2) >> 2] | 0;
     $59 = HEAP32[$labelInfo + 1179664 + ($52 + -1 << 2) >> 2] | 0;
     L35 : do if (($56 | 0) > ($59 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $59;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $74 = $59;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($56 | 0)) HEAP32[$wk$0 >> 2] = $59;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $56;
      if (($56 | 0) < ($59 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $74 = $56;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($59 | 0)) HEAP32[$wk$1 >> 2] = $56;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $74 = $56;
     } while (0);
     $76 = ($74 << 16 >> 16) * 7 | 0;
     $78 = $labelInfo + 1310736 + ($76 + -7 << 2) | 0;
     HEAP32[$78 >> 2] = (HEAP32[$78 >> 2] | 0) + 1;
     $82 = $labelInfo + 1310736 + ($76 + -6 << 2) | 0;
     HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + $i$2;
     $86 = $labelInfo + 1310736 + ($76 + -5 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($76 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $92 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($92 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $47;
     $130 = $48 * 7 | 0;
     $132 = $labelInfo + 1310736 + ($130 + -7 << 2) | 0;
     HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
     $136 = $labelInfo + 1310736 + ($130 + -6 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $i$2;
     $140 = $labelInfo + 1310736 + ($130 + -5 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $j$0;
     $144 = $labelInfo + 1310736 + ($130 + -4 << 2) | 0;
     if ((HEAP32[$144 >> 2] | 0) > ($i$2 | 0)) HEAP32[$144 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($130 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $97 = HEAP32[$labelInfo + 1179664 + ($48 + -1 << 2) >> 2] | 0;
    $100 = HEAP32[$labelInfo + 1179664 + (($92 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($97 | 0) > ($100 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $100;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $115 = $100;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($97 | 0)) HEAP32[$wk$2 >> 2] = $100;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $97;
     if (($97 | 0) < ($100 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $115 = $97;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($100 | 0)) HEAP32[$wk$3 >> 2] = $97;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $115 = $97;
    } while (0);
    $117 = ($115 << 16 >> 16) * 7 | 0;
    $119 = $labelInfo + 1310736 + ($117 + -7 << 2) | 0;
    HEAP32[$119 >> 2] = (HEAP32[$119 >> 2] | 0) + 1;
    $123 = $labelInfo + 1310736 + ($117 + -6 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + $i$2;
    $127 = $labelInfo + 1310736 + ($117 + -5 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 2 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $216 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $218 = HEAP32[$wk$4 >> 2] | 0;
   if (($218 | 0) == ($i$3 | 0)) {
    $224 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $224 = HEAP32[$labelInfo + 1179664 + ($218 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $224;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $227 = $labelInfo + 8 | 0;
  $228 = $j$1$lcssa + -1 | 0;
  HEAP32[$227 >> 2] = $228;
  if (!$228) $$0 = 0; else {
   _memset($216 | 0, 0, $228 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $228 << 4 | 0) | 0;
   $234 = $228;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($234 | 0)) {
     $i$5 = 0;
     break;
    }
    $235 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($235 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($235 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($235 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($235 | 3) << 2) >> 2] = 0;
    $234 = HEAP32[$227 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $247 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $248 = $i$5 * 7 | 0;
    $251 = $labelInfo + 12 + ($247 << 2) | 0;
    HEAP32[$251 >> 2] = (HEAP32[$251 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($248 << 2) >> 2] | 0);
    $258 = $247 << 1;
    $259 = $labelInfo + 655376 + ($258 << 3) | 0;
    HEAPF64[$259 >> 3] = +HEAPF64[$259 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($248 + 1 << 2) >> 2] | 0);
    $267 = $labelInfo + 655376 + (($258 | 1) << 3) | 0;
    HEAPF64[$267 >> 3] = +HEAPF64[$267 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($248 + 2 << 2) >> 2] | 0);
    $270 = $247 << 2;
    $271 = $labelInfo + 131084 + ($270 << 2) | 0;
    $275 = HEAP32[$labelInfo + 1310736 + ($248 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$271 >> 2] | 0) > ($275 | 0)) HEAP32[$271 >> 2] = $275;
    $278 = $labelInfo + 131084 + (($270 | 1) << 2) | 0;
    $282 = HEAP32[$labelInfo + 1310736 + ($248 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) < ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $labelInfo + 131084 + (($270 | 2) << 2) | 0;
    $289 = HEAP32[$labelInfo + 1310736 + ($248 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) > ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $labelInfo + 131084 + (($270 | 3) << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($248 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) < ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$227 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $301 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $304 = $i$6 << 1;
    $305 = $labelInfo + 655376 + ($304 << 3) | 0;
    HEAPF64[$305 >> 3] = +HEAPF64[$305 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $311 = $labelInfo + 655376 + (($304 | 1) << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubEBRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $100 = 0, $115 = 0, $117 = 0, $119 = 0, $123 = 0, $127 = 0, $130 = 0, $132 = 0, $136 = 0, $14 = 0, $140 = 0, $144 = 0, $149 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $163 = 0, $169 = 0, $172 = 0, $174 = 0, $178 = 0, $182 = 0, $186 = 0, $189 = 0, $194 = 0, $21 = 0, $216 = 0, $218 = 0, $224 = 0, $227 = 0, $228 = 0, $234 = 0, $235 = 0, $247 = 0, $248 = 0, $251 = 0, $258 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $271 = 0, $275 = 0, $278 = 0, $28 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $301 = 0, $304 = 0, $305 = 0, $31 = 0, $311 = 0, $33 = 0, $37 = 0, $41 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $82 = 0, $86 = 0, $92 = 0, $97 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $dpnt$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $21 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $15 | 0;
 $j$0 = 1;
 $pnt$0 = $image + $15 | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $dpnt$1$lcssa = $dpnt$1;
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $27 = $pnt2$3 + ($21 << 1) | 0;
    $28 = HEAP16[$27 >> 1] | 0;
    if ($28 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $28;
     $31 = ($28 << 16 >> 16) * 7 | 0;
     $33 = $labelInfo + 1310736 + ($31 + -7 << 2) | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     $37 = $labelInfo + 1310736 + ($31 + -6 << 2) | 0;
     HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + $i$2;
     $41 = $labelInfo + 1310736 + ($31 + -5 << 2) | 0;
     HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($31 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $47 = HEAP16[$27 + 2 >> 1] | 0;
    $48 = $47 << 16 >> 16;
    $51 = HEAP16[$27 + -2 >> 1] | 0;
    $52 = $51 << 16 >> 16;
    $53 = $51 << 16 >> 16 > 0;
    if ($47 << 16 >> 16 <= 0) {
     if ($53) {
      HEAP16[$pnt2$3 >> 1] = $51;
      $149 = $52 * 7 | 0;
      $151 = $labelInfo + 1310736 + ($149 + -7 << 2) | 0;
      HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + 1;
      $155 = $labelInfo + 1310736 + ($149 + -6 << 2) | 0;
      HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + $i$2;
      $159 = $labelInfo + 1310736 + ($149 + -5 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + $j$0;
      $163 = $labelInfo + 1310736 + ($149 + -3 << 2) | 0;
      if ((HEAP32[$163 >> 2] | 0) < ($i$2 | 0)) HEAP32[$163 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($149 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $169 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($169 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $169;
      $172 = ($169 << 16 >> 16) * 7 | 0;
      $174 = $labelInfo + 1310736 + ($172 + -7 << 2) | 0;
      HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + 1;
      $178 = $labelInfo + 1310736 + ($172 + -6 << 2) | 0;
      HEAP32[$178 >> 2] = (HEAP32[$178 >> 2] | 0) + $i$2;
      $182 = $labelInfo + 1310736 + ($172 + -5 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + $j$0;
      $186 = $labelInfo + 1310736 + ($172 + -3 << 2) | 0;
      if ((HEAP32[$186 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$186 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $189 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $189;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $189 << 16 >> 16;
      $194 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($194 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($194 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($194 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($194 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($194 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($194 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($194 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $189;
      break;
     }
    }
    if ($53) {
     $56 = HEAP32[$labelInfo + 1179664 + ($48 + -1 << 2) >> 2] | 0;
     $59 = HEAP32[$labelInfo + 1179664 + ($52 + -1 << 2) >> 2] | 0;
     L36 : do if (($56 | 0) > ($59 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $59;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $74 = $59;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($56 | 0)) HEAP32[$wk$0 >> 2] = $59;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $56;
      if (($56 | 0) < ($59 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $74 = $56;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($59 | 0)) HEAP32[$wk$1 >> 2] = $56;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $74 = $56;
     } while (0);
     $76 = ($74 << 16 >> 16) * 7 | 0;
     $78 = $labelInfo + 1310736 + ($76 + -7 << 2) | 0;
     HEAP32[$78 >> 2] = (HEAP32[$78 >> 2] | 0) + 1;
     $82 = $labelInfo + 1310736 + ($76 + -6 << 2) | 0;
     HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + $i$2;
     $86 = $labelInfo + 1310736 + ($76 + -5 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($76 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $92 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($92 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $47;
     $130 = $48 * 7 | 0;
     $132 = $labelInfo + 1310736 + ($130 + -7 << 2) | 0;
     HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
     $136 = $labelInfo + 1310736 + ($130 + -6 << 2) | 0;
     HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $i$2;
     $140 = $labelInfo + 1310736 + ($130 + -5 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $j$0;
     $144 = $labelInfo + 1310736 + ($130 + -4 << 2) | 0;
     if ((HEAP32[$144 >> 2] | 0) > ($i$2 | 0)) HEAP32[$144 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($130 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $97 = HEAP32[$labelInfo + 1179664 + ($48 + -1 << 2) >> 2] | 0;
    $100 = HEAP32[$labelInfo + 1179664 + (($92 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($97 | 0) > ($100 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $100;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $115 = $100;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($97 | 0)) HEAP32[$wk$2 >> 2] = $100;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $97;
     if (($97 | 0) < ($100 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $115 = $97;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($100 | 0)) HEAP32[$wk$3 >> 2] = $97;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $115 = $97;
    } while (0);
    $117 = ($115 << 16 >> 16) * 7 | 0;
    $119 = $labelInfo + 1310736 + ($117 + -7 << 2) | 0;
    HEAP32[$119 >> 2] = (HEAP32[$119 >> 2] | 0) + 1;
    $123 = $labelInfo + 1310736 + ($117 + -6 << 2) | 0;
    HEAP32[$123 >> 2] = (HEAP32[$123 >> 2] | 0) + $i$2;
    $127 = $labelInfo + 1310736 + ($117 + -5 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $dpnt$0 = $dpnt$1$lcssa + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 2 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $216 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $218 = HEAP32[$wk$4 >> 2] | 0;
   if (($218 | 0) == ($i$3 | 0)) {
    $224 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $224 = HEAP32[$labelInfo + 1179664 + ($218 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $224;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $227 = $labelInfo + 8 | 0;
  $228 = $j$1$lcssa + -1 | 0;
  HEAP32[$227 >> 2] = $228;
  if (!$228) $$0 = 0; else {
   _memset($216 | 0, 0, $228 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $228 << 4 | 0) | 0;
   $234 = $228;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($234 | 0)) {
     $i$5 = 0;
     break;
    }
    $235 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($235 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($235 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($235 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($235 | 3) << 2) >> 2] = 0;
    $234 = HEAP32[$227 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $247 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $248 = $i$5 * 7 | 0;
    $251 = $labelInfo + 12 + ($247 << 2) | 0;
    HEAP32[$251 >> 2] = (HEAP32[$251 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($248 << 2) >> 2] | 0);
    $258 = $247 << 1;
    $259 = $labelInfo + 655376 + ($258 << 3) | 0;
    HEAPF64[$259 >> 3] = +HEAPF64[$259 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($248 + 1 << 2) >> 2] | 0);
    $267 = $labelInfo + 655376 + (($258 | 1) << 3) | 0;
    HEAPF64[$267 >> 3] = +HEAPF64[$267 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($248 + 2 << 2) >> 2] | 0);
    $270 = $247 << 2;
    $271 = $labelInfo + 131084 + ($270 << 2) | 0;
    $275 = HEAP32[$labelInfo + 1310736 + ($248 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$271 >> 2] | 0) > ($275 | 0)) HEAP32[$271 >> 2] = $275;
    $278 = $labelInfo + 131084 + (($270 | 1) << 2) | 0;
    $282 = HEAP32[$labelInfo + 1310736 + ($248 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) < ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $labelInfo + 131084 + (($270 | 2) << 2) | 0;
    $289 = HEAP32[$labelInfo + 1310736 + ($248 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) > ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $labelInfo + 131084 + (($270 | 3) << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($248 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) < ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$227 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $301 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $304 = $i$6 << 1;
    $305 = $labelInfo + 655376 + ($304 << 3) | 0;
    HEAPF64[$305 >> 3] = +HEAPF64[$305 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $311 = $labelInfo + 655376 + (($304 | 1) << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWZ($image, $xsize, $ysize, $image_thresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $image_thresh = $image_thresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $113 = 0, $115 = 0, $117 = 0, $121 = 0, $125 = 0, $128 = 0, $130 = 0, $134 = 0, $138 = 0, $14 = 0, $142 = 0, $147 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $161 = 0, $167 = 0, $170 = 0, $172 = 0, $176 = 0, $180 = 0, $184 = 0, $187 = 0, $19 = 0, $192 = 0, $214 = 0, $216 = 0, $222 = 0, $225 = 0, $226 = 0, $232 = 0, $233 = 0, $245 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $257 = 0, $26 = 0, $265 = 0, $268 = 0, $269 = 0, $273 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $29 = 0, $290 = 0, $294 = 0, $299 = 0, $302 = 0, $303 = 0, $309 = 0, $31 = 0, $35 = 0, $39 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $57 = 0, $72 = 0, $74 = 0, $76 = 0, $8 = 0, $80 = 0, $84 = 0, $90 = 0, $95 = 0, $98 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $pnt_thresh$0 = 0, $pnt_thresh$1 = 0, $pnt_thresh$1$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $19 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + $15 | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $pnt_thresh$0 = $image_thresh + $15 | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $pnt_thresh$1 = $pnt_thresh$0;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $pnt_thresh$1$lcssa = $pnt_thresh$1;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0) > (HEAPU8[$pnt_thresh$1 >> 0] | 0)) {
    $25 = $pnt2$3 + ($19 << 1) | 0;
    $26 = HEAP16[$25 >> 1] | 0;
    if ($26 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $26;
     $29 = ($26 << 16 >> 16) * 7 | 0;
     $31 = $labelInfo + 1310736 + ($29 + -7 << 2) | 0;
     HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1;
     $35 = $labelInfo + 1310736 + ($29 + -6 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + $i$2;
     $39 = $labelInfo + 1310736 + ($29 + -5 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($29 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $45 = HEAP16[$25 + 2 >> 1] | 0;
    $46 = $45 << 16 >> 16;
    $49 = HEAP16[$25 + -2 >> 1] | 0;
    $50 = $49 << 16 >> 16;
    $51 = $49 << 16 >> 16 > 0;
    if ($45 << 16 >> 16 <= 0) {
     if ($51) {
      HEAP16[$pnt2$3 >> 1] = $49;
      $147 = $50 * 7 | 0;
      $149 = $labelInfo + 1310736 + ($147 + -7 << 2) | 0;
      HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
      $153 = $labelInfo + 1310736 + ($147 + -6 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $i$2;
      $157 = $labelInfo + 1310736 + ($147 + -5 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $j$0;
      $161 = $labelInfo + 1310736 + ($147 + -3 << 2) | 0;
      if ((HEAP32[$161 >> 2] | 0) < ($i$2 | 0)) HEAP32[$161 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($147 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $167 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($167 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $167;
      $170 = ($167 << 16 >> 16) * 7 | 0;
      $172 = $labelInfo + 1310736 + ($170 + -7 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $labelInfo + 1310736 + ($170 + -6 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $i$2;
      $180 = $labelInfo + 1310736 + ($170 + -5 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $j$0;
      $184 = $labelInfo + 1310736 + ($170 + -3 << 2) | 0;
      if ((HEAP32[$184 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$184 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $187 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $187;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $187 << 16 >> 16;
      $192 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($192 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($192 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($192 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($192 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $187;
      break;
     }
    }
    if ($51) {
     $54 = HEAP32[$labelInfo + 1179664 + ($46 + -1 << 2) >> 2] | 0;
     $57 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
     L35 : do if (($54 | 0) > ($57 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $57;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $72 = $57;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($54 | 0)) HEAP32[$wk$0 >> 2] = $57;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $54;
      if (($54 | 0) < ($57 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $72 = $54;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($57 | 0)) HEAP32[$wk$1 >> 2] = $54;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $72 = $54;
     } while (0);
     $74 = ($72 << 16 >> 16) * 7 | 0;
     $76 = $labelInfo + 1310736 + ($74 + -7 << 2) | 0;
     HEAP32[$76 >> 2] = (HEAP32[$76 >> 2] | 0) + 1;
     $80 = $labelInfo + 1310736 + ($74 + -6 << 2) | 0;
     HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + $i$2;
     $84 = $labelInfo + 1310736 + ($74 + -5 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($74 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $90 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($90 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $45;
     $128 = $46 * 7 | 0;
     $130 = $labelInfo + 1310736 + ($128 + -7 << 2) | 0;
     HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
     $134 = $labelInfo + 1310736 + ($128 + -6 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $i$2;
     $138 = $labelInfo + 1310736 + ($128 + -5 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $j$0;
     $142 = $labelInfo + 1310736 + ($128 + -4 << 2) | 0;
     if ((HEAP32[$142 >> 2] | 0) > ($i$2 | 0)) HEAP32[$142 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($128 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $95 = HEAP32[$labelInfo + 1179664 + ($46 + -1 << 2) >> 2] | 0;
    $98 = HEAP32[$labelInfo + 1179664 + (($90 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($95 | 0) > ($98 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $98;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $113 = $98;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($95 | 0)) HEAP32[$wk$2 >> 2] = $98;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $95;
     if (($95 | 0) < ($98 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $113 = $95;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($98 | 0)) HEAP32[$wk$3 >> 2] = $95;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $113 = $95;
    } while (0);
    $115 = ($113 << 16 >> 16) * 7 | 0;
    $117 = $labelInfo + 1310736 + ($115 + -7 << 2) | 0;
    HEAP32[$117 >> 2] = (HEAP32[$117 >> 2] | 0) + 1;
    $121 = $labelInfo + 1310736 + ($115 + -6 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + $i$2;
    $125 = $labelInfo + 1310736 + ($115 + -5 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $pnt_thresh$1 = $pnt_thresh$1 + 1 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 2 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $pnt_thresh$0 = $pnt_thresh$1$lcssa + 2 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $214 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $216 = HEAP32[$wk$4 >> 2] | 0;
   if (($216 | 0) == ($i$3 | 0)) {
    $222 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $222 = HEAP32[$labelInfo + 1179664 + ($216 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $222;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $225 = $labelInfo + 8 | 0;
  $226 = $j$1$lcssa + -1 | 0;
  HEAP32[$225 >> 2] = $226;
  if (!$226) $$0 = 0; else {
   _memset($214 | 0, 0, $226 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $226 << 4 | 0) | 0;
   $232 = $226;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($232 | 0)) {
     $i$5 = 0;
     break;
    }
    $233 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($233 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($233 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($233 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($233 | 3) << 2) >> 2] = 0;
    $232 = HEAP32[$225 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $245 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $246 = $i$5 * 7 | 0;
    $249 = $labelInfo + 12 + ($245 << 2) | 0;
    HEAP32[$249 >> 2] = (HEAP32[$249 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($246 << 2) >> 2] | 0);
    $256 = $245 << 1;
    $257 = $labelInfo + 655376 + ($256 << 3) | 0;
    HEAPF64[$257 >> 3] = +HEAPF64[$257 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($246 + 1 << 2) >> 2] | 0);
    $265 = $labelInfo + 655376 + (($256 | 1) << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($246 + 2 << 2) >> 2] | 0);
    $268 = $245 << 2;
    $269 = $labelInfo + 131084 + ($268 << 2) | 0;
    $273 = HEAP32[$labelInfo + 1310736 + ($246 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$269 >> 2] | 0) > ($273 | 0)) HEAP32[$269 >> 2] = $273;
    $276 = $labelInfo + 131084 + (($268 | 1) << 2) | 0;
    $280 = HEAP32[$labelInfo + 1310736 + ($246 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) < ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $labelInfo + 131084 + (($268 | 2) << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($246 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($268 | 3) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($246 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$225 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $299 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $302 = $i$6 << 1;
    $303 = $labelInfo + 655376 + ($302 << 3) | 0;
    HEAPF64[$303 >> 3] = +HEAPF64[$303 >> 3] / +(HEAP32[$299 >> 2] | 0);
    $309 = $labelInfo + 655376 + (($302 | 1) << 3) | 0;
    HEAPF64[$309 >> 3] = +HEAPF64[$309 >> 3] / +(HEAP32[$299 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBZ($image, $xsize, $ysize, $image_thresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $image_thresh = $image_thresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $113 = 0, $115 = 0, $117 = 0, $121 = 0, $125 = 0, $128 = 0, $130 = 0, $134 = 0, $138 = 0, $14 = 0, $142 = 0, $147 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $161 = 0, $167 = 0, $170 = 0, $172 = 0, $176 = 0, $180 = 0, $184 = 0, $187 = 0, $19 = 0, $192 = 0, $214 = 0, $216 = 0, $222 = 0, $225 = 0, $226 = 0, $232 = 0, $233 = 0, $245 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $257 = 0, $26 = 0, $265 = 0, $268 = 0, $269 = 0, $273 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $29 = 0, $290 = 0, $294 = 0, $299 = 0, $302 = 0, $303 = 0, $309 = 0, $31 = 0, $35 = 0, $39 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $57 = 0, $72 = 0, $74 = 0, $76 = 0, $8 = 0, $80 = 0, $84 = 0, $90 = 0, $95 = 0, $98 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $pnt_thresh$0 = 0, $pnt_thresh$1 = 0, $pnt_thresh$1$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $19 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + $15 | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $pnt_thresh$0 = $image_thresh + $15 | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $pnt_thresh$1 = $pnt_thresh$0;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $pnt_thresh$1$lcssa = $pnt_thresh$1;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0) > (HEAPU8[$pnt_thresh$1 >> 0] | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $25 = $pnt2$3 + ($19 << 1) | 0;
    $26 = HEAP16[$25 >> 1] | 0;
    if ($26 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $26;
     $29 = ($26 << 16 >> 16) * 7 | 0;
     $31 = $labelInfo + 1310736 + ($29 + -7 << 2) | 0;
     HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1;
     $35 = $labelInfo + 1310736 + ($29 + -6 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + $i$2;
     $39 = $labelInfo + 1310736 + ($29 + -5 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($29 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $45 = HEAP16[$25 + 2 >> 1] | 0;
    $46 = $45 << 16 >> 16;
    $49 = HEAP16[$25 + -2 >> 1] | 0;
    $50 = $49 << 16 >> 16;
    $51 = $49 << 16 >> 16 > 0;
    if ($45 << 16 >> 16 <= 0) {
     if ($51) {
      HEAP16[$pnt2$3 >> 1] = $49;
      $147 = $50 * 7 | 0;
      $149 = $labelInfo + 1310736 + ($147 + -7 << 2) | 0;
      HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
      $153 = $labelInfo + 1310736 + ($147 + -6 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $i$2;
      $157 = $labelInfo + 1310736 + ($147 + -5 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $j$0;
      $161 = $labelInfo + 1310736 + ($147 + -3 << 2) | 0;
      if ((HEAP32[$161 >> 2] | 0) < ($i$2 | 0)) HEAP32[$161 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($147 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $167 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($167 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $167;
      $170 = ($167 << 16 >> 16) * 7 | 0;
      $172 = $labelInfo + 1310736 + ($170 + -7 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $labelInfo + 1310736 + ($170 + -6 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $i$2;
      $180 = $labelInfo + 1310736 + ($170 + -5 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $j$0;
      $184 = $labelInfo + 1310736 + ($170 + -3 << 2) | 0;
      if ((HEAP32[$184 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$184 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $187 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $187;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $187 << 16 >> 16;
      $192 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($192 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($192 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($192 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($192 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $187;
      break;
     }
    }
    if ($51) {
     $54 = HEAP32[$labelInfo + 1179664 + ($46 + -1 << 2) >> 2] | 0;
     $57 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
     L36 : do if (($54 | 0) > ($57 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $57;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $72 = $57;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($54 | 0)) HEAP32[$wk$0 >> 2] = $57;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $54;
      if (($54 | 0) < ($57 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $72 = $54;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($57 | 0)) HEAP32[$wk$1 >> 2] = $54;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $72 = $54;
     } while (0);
     $74 = ($72 << 16 >> 16) * 7 | 0;
     $76 = $labelInfo + 1310736 + ($74 + -7 << 2) | 0;
     HEAP32[$76 >> 2] = (HEAP32[$76 >> 2] | 0) + 1;
     $80 = $labelInfo + 1310736 + ($74 + -6 << 2) | 0;
     HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + $i$2;
     $84 = $labelInfo + 1310736 + ($74 + -5 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($74 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $90 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($90 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $45;
     $128 = $46 * 7 | 0;
     $130 = $labelInfo + 1310736 + ($128 + -7 << 2) | 0;
     HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
     $134 = $labelInfo + 1310736 + ($128 + -6 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $i$2;
     $138 = $labelInfo + 1310736 + ($128 + -5 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $j$0;
     $142 = $labelInfo + 1310736 + ($128 + -4 << 2) | 0;
     if ((HEAP32[$142 >> 2] | 0) > ($i$2 | 0)) HEAP32[$142 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($128 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $95 = HEAP32[$labelInfo + 1179664 + ($46 + -1 << 2) >> 2] | 0;
    $98 = HEAP32[$labelInfo + 1179664 + (($90 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($95 | 0) > ($98 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $98;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $113 = $98;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($95 | 0)) HEAP32[$wk$2 >> 2] = $98;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $95;
     if (($95 | 0) < ($98 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $113 = $95;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($98 | 0)) HEAP32[$wk$3 >> 2] = $95;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $113 = $95;
    } while (0);
    $115 = ($113 << 16 >> 16) * 7 | 0;
    $117 = $labelInfo + 1310736 + ($115 + -7 << 2) | 0;
    HEAP32[$117 >> 2] = (HEAP32[$117 >> 2] | 0) + 1;
    $121 = $labelInfo + 1310736 + ($115 + -6 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + $i$2;
    $125 = $labelInfo + 1310736 + ($115 + -5 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $pnt_thresh$1 = $pnt_thresh$1 + 1 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 2 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $pnt_thresh$0 = $pnt_thresh$1$lcssa + 2 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $214 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $216 = HEAP32[$wk$4 >> 2] | 0;
   if (($216 | 0) == ($i$3 | 0)) {
    $222 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $222 = HEAP32[$labelInfo + 1179664 + ($216 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $222;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $225 = $labelInfo + 8 | 0;
  $226 = $j$1$lcssa + -1 | 0;
  HEAP32[$225 >> 2] = $226;
  if (!$226) $$0 = 0; else {
   _memset($214 | 0, 0, $226 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $226 << 4 | 0) | 0;
   $232 = $226;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($232 | 0)) {
     $i$5 = 0;
     break;
    }
    $233 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($233 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($233 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($233 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($233 | 3) << 2) >> 2] = 0;
    $232 = HEAP32[$225 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $245 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $246 = $i$5 * 7 | 0;
    $249 = $labelInfo + 12 + ($245 << 2) | 0;
    HEAP32[$249 >> 2] = (HEAP32[$249 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($246 << 2) >> 2] | 0);
    $256 = $245 << 1;
    $257 = $labelInfo + 655376 + ($256 << 3) | 0;
    HEAPF64[$257 >> 3] = +HEAPF64[$257 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($246 + 1 << 2) >> 2] | 0);
    $265 = $labelInfo + 655376 + (($256 | 1) << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($246 + 2 << 2) >> 2] | 0);
    $268 = $245 << 2;
    $269 = $labelInfo + 131084 + ($268 << 2) | 0;
    $273 = HEAP32[$labelInfo + 1310736 + ($246 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$269 >> 2] | 0) > ($273 | 0)) HEAP32[$269 >> 2] = $273;
    $276 = $labelInfo + 131084 + (($268 | 1) << 2) | 0;
    $280 = HEAP32[$labelInfo + 1310736 + ($246 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) < ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $labelInfo + 131084 + (($268 | 2) << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($246 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($268 | 3) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($246 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$225 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $299 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $302 = $i$6 << 1;
    $303 = $labelInfo + 655376 + ($302 << 3) | 0;
    HEAPF64[$303 >> 3] = +HEAPF64[$303 >> 3] / +(HEAP32[$299 >> 2] | 0);
    $309 = $labelInfo + 655376 + (($302 | 1) << 3) | 0;
    HEAPF64[$309 >> 3] = +HEAPF64[$309 >> 3] / +(HEAP32[$299 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $109 = 0, $11 = 0, $114 = 0, $117 = 0, $132 = 0, $134 = 0, $136 = 0, $140 = 0, $144 = 0, $147 = 0, $149 = 0, $153 = 0, $157 = 0, $161 = 0, $166 = 0, $168 = 0, $17 = 0, $172 = 0, $176 = 0, $180 = 0, $186 = 0, $189 = 0, $191 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $203 = 0, $206 = 0, $211 = 0, $232 = 0, $234 = 0, $24 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $3 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $34 = 0, $44 = 0, $45 = 0, $48 = 0, $50 = 0, $54 = 0, $58 = 0, $64 = 0, $65 = 0, $68 = 0, $69 = 0, $70 = 0, $73 = 0, $76 = 0, $91 = 0, $93 = 0, $95 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $20 = $xsize << 1;
 $24 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $28 = HEAPU8[$pnt$1 >> 0] | 0;
   $34 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($28 & 248) + 12 + ($28 << 5 & 224) + ($34 >>> 3 & 24) + ($34 << 2 & 248) | 0) > ($10 | 0)) {
    $44 = $pnt2$3 + ($24 << 1) | 0;
    $45 = HEAP16[$44 >> 1] | 0;
    if ($45 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $45;
     $48 = ($45 << 16 >> 16) * 7 | 0;
     $50 = $labelInfo + 1310736 + ($48 + -7 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1;
     $54 = $labelInfo + 1310736 + ($48 + -6 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $i$2;
     $58 = $labelInfo + 1310736 + ($48 + -5 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($48 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $64 = HEAP16[$44 + 2 >> 1] | 0;
    $65 = $64 << 16 >> 16;
    $68 = HEAP16[$44 + -2 >> 1] | 0;
    $69 = $68 << 16 >> 16;
    $70 = $68 << 16 >> 16 > 0;
    if ($64 << 16 >> 16 <= 0) {
     if ($70) {
      HEAP16[$pnt2$3 >> 1] = $68;
      $166 = $69 * 7 | 0;
      $168 = $labelInfo + 1310736 + ($166 + -7 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + 1;
      $172 = $labelInfo + 1310736 + ($166 + -6 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $i$2;
      $176 = $labelInfo + 1310736 + ($166 + -5 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $j$0;
      $180 = $labelInfo + 1310736 + ($166 + -3 << 2) | 0;
      if ((HEAP32[$180 >> 2] | 0) < ($i$2 | 0)) HEAP32[$180 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($166 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $186 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($186 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $186;
      $189 = ($186 << 16 >> 16) * 7 | 0;
      $191 = $labelInfo + 1310736 + ($189 + -7 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + 1;
      $195 = $labelInfo + 1310736 + ($189 + -6 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $i$2;
      $199 = $labelInfo + 1310736 + ($189 + -5 << 2) | 0;
      HEAP32[$199 >> 2] = (HEAP32[$199 >> 2] | 0) + $j$0;
      $203 = $labelInfo + 1310736 + ($189 + -3 << 2) | 0;
      if ((HEAP32[$203 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$203 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $206 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $206;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $206 << 16 >> 16;
      $211 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($211 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($211 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($211 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($211 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $206;
      break;
     }
    }
    if ($70) {
     $73 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
     $76 = HEAP32[$labelInfo + 1179664 + ($69 + -1 << 2) >> 2] | 0;
     L35 : do if (($73 | 0) > ($76 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $76;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $91 = $76;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($73 | 0)) HEAP32[$wk$0 >> 2] = $76;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $73;
      if (($73 | 0) < ($76 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $91 = $73;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($76 | 0)) HEAP32[$wk$1 >> 2] = $73;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $91 = $73;
     } while (0);
     $93 = ($91 << 16 >> 16) * 7 | 0;
     $95 = $labelInfo + 1310736 + ($93 + -7 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 1;
     $99 = $labelInfo + 1310736 + ($93 + -6 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $i$2;
     $103 = $labelInfo + 1310736 + ($93 + -5 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($93 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $109 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($109 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $64;
     $147 = $65 * 7 | 0;
     $149 = $labelInfo + 1310736 + ($147 + -7 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
     $153 = $labelInfo + 1310736 + ($147 + -6 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $i$2;
     $157 = $labelInfo + 1310736 + ($147 + -5 << 2) | 0;
     HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $j$0;
     $161 = $labelInfo + 1310736 + ($147 + -4 << 2) | 0;
     if ((HEAP32[$161 >> 2] | 0) > ($i$2 | 0)) HEAP32[$161 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($147 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $114 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
    $117 = HEAP32[$labelInfo + 1179664 + (($109 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($114 | 0) > ($117 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $117;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $132 = $117;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($114 | 0)) HEAP32[$wk$2 >> 2] = $117;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $114;
     if (($114 | 0) < ($117 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $132 = $114;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($117 | 0)) HEAP32[$wk$3 >> 2] = $114;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $132 = $114;
    } while (0);
    $134 = ($132 << 16 >> 16) * 7 | 0;
    $136 = $labelInfo + 1310736 + ($134 + -7 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
    $140 = $labelInfo + 1310736 + ($134 + -6 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $i$2;
    $144 = $labelInfo + 1310736 + ($134 + -5 << 2) | 0;
    HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $20 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $234 = HEAP32[$wk$4 >> 2] | 0;
   if (($234 | 0) == ($i$3 | 0)) {
    $240 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $240 = HEAP32[$labelInfo + 1179664 + ($234 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $240;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $243 = $labelInfo + 8 | 0;
  $244 = $j$1$lcssa + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $250 = $244;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($250 | 0)) {
     $i$5 = 0;
     break;
    }
    $251 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($251 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($251 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $250 = HEAP32[$243 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $263 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $i$5 * 7 | 0;
    $267 = $labelInfo + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $labelInfo + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $labelInfo + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $labelInfo + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $labelInfo + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$labelInfo + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $labelInfo + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$labelInfo + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $320 = $i$6 << 1;
    $321 = $labelInfo + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $labelInfo + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $109 = 0, $11 = 0, $114 = 0, $117 = 0, $132 = 0, $134 = 0, $136 = 0, $140 = 0, $144 = 0, $147 = 0, $149 = 0, $153 = 0, $157 = 0, $161 = 0, $166 = 0, $168 = 0, $17 = 0, $172 = 0, $176 = 0, $180 = 0, $186 = 0, $189 = 0, $191 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $203 = 0, $206 = 0, $211 = 0, $232 = 0, $234 = 0, $24 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $3 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $34 = 0, $44 = 0, $45 = 0, $48 = 0, $50 = 0, $54 = 0, $58 = 0, $64 = 0, $65 = 0, $68 = 0, $69 = 0, $70 = 0, $73 = 0, $76 = 0, $91 = 0, $93 = 0, $95 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $20 = $xsize << 1;
 $24 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $28 = HEAPU8[$pnt$1 >> 0] | 0;
   $34 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($28 & 248) + 12 + ($28 << 5 & 224) + ($34 >>> 3 & 24) + ($34 << 2 & 248) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $44 = $pnt2$3 + ($24 << 1) | 0;
    $45 = HEAP16[$44 >> 1] | 0;
    if ($45 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $45;
     $48 = ($45 << 16 >> 16) * 7 | 0;
     $50 = $labelInfo + 1310736 + ($48 + -7 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1;
     $54 = $labelInfo + 1310736 + ($48 + -6 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $i$2;
     $58 = $labelInfo + 1310736 + ($48 + -5 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($48 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $64 = HEAP16[$44 + 2 >> 1] | 0;
    $65 = $64 << 16 >> 16;
    $68 = HEAP16[$44 + -2 >> 1] | 0;
    $69 = $68 << 16 >> 16;
    $70 = $68 << 16 >> 16 > 0;
    if ($64 << 16 >> 16 <= 0) {
     if ($70) {
      HEAP16[$pnt2$3 >> 1] = $68;
      $166 = $69 * 7 | 0;
      $168 = $labelInfo + 1310736 + ($166 + -7 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + 1;
      $172 = $labelInfo + 1310736 + ($166 + -6 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $i$2;
      $176 = $labelInfo + 1310736 + ($166 + -5 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $j$0;
      $180 = $labelInfo + 1310736 + ($166 + -3 << 2) | 0;
      if ((HEAP32[$180 >> 2] | 0) < ($i$2 | 0)) HEAP32[$180 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($166 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $186 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($186 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $186;
      $189 = ($186 << 16 >> 16) * 7 | 0;
      $191 = $labelInfo + 1310736 + ($189 + -7 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + 1;
      $195 = $labelInfo + 1310736 + ($189 + -6 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $i$2;
      $199 = $labelInfo + 1310736 + ($189 + -5 << 2) | 0;
      HEAP32[$199 >> 2] = (HEAP32[$199 >> 2] | 0) + $j$0;
      $203 = $labelInfo + 1310736 + ($189 + -3 << 2) | 0;
      if ((HEAP32[$203 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$203 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $206 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $206;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $206 << 16 >> 16;
      $211 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($211 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($211 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($211 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($211 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $206;
      break;
     }
    }
    if ($70) {
     $73 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
     $76 = HEAP32[$labelInfo + 1179664 + ($69 + -1 << 2) >> 2] | 0;
     L36 : do if (($73 | 0) > ($76 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $76;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $91 = $76;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($73 | 0)) HEAP32[$wk$0 >> 2] = $76;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $73;
      if (($73 | 0) < ($76 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $91 = $73;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($76 | 0)) HEAP32[$wk$1 >> 2] = $73;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $91 = $73;
     } while (0);
     $93 = ($91 << 16 >> 16) * 7 | 0;
     $95 = $labelInfo + 1310736 + ($93 + -7 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 1;
     $99 = $labelInfo + 1310736 + ($93 + -6 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $i$2;
     $103 = $labelInfo + 1310736 + ($93 + -5 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($93 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $109 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($109 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $64;
     $147 = $65 * 7 | 0;
     $149 = $labelInfo + 1310736 + ($147 + -7 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
     $153 = $labelInfo + 1310736 + ($147 + -6 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $i$2;
     $157 = $labelInfo + 1310736 + ($147 + -5 << 2) | 0;
     HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $j$0;
     $161 = $labelInfo + 1310736 + ($147 + -4 << 2) | 0;
     if ((HEAP32[$161 >> 2] | 0) > ($i$2 | 0)) HEAP32[$161 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($147 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $114 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
    $117 = HEAP32[$labelInfo + 1179664 + (($109 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($114 | 0) > ($117 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $117;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $132 = $117;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($114 | 0)) HEAP32[$wk$2 >> 2] = $117;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $114;
     if (($114 | 0) < ($117 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $132 = $114;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($117 | 0)) HEAP32[$wk$3 >> 2] = $114;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $132 = $114;
    } while (0);
    $134 = ($132 << 16 >> 16) * 7 | 0;
    $136 = $labelInfo + 1310736 + ($134 + -7 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
    $140 = $labelInfo + 1310736 + ($134 + -6 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $i$2;
    $144 = $labelInfo + 1310736 + ($134 + -5 << 2) | 0;
    HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $20 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $234 = HEAP32[$wk$4 >> 2] | 0;
   if (($234 | 0) == ($i$3 | 0)) {
    $240 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $240 = HEAP32[$labelInfo + 1179664 + ($234 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $240;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $243 = $labelInfo + 8 | 0;
  $244 = $j$1$lcssa + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $250 = $244;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($250 | 0)) {
     $i$5 = 0;
     break;
    }
    $251 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($251 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($251 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $250 = HEAP32[$243 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $263 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $i$5 * 7 | 0;
    $267 = $labelInfo + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $labelInfo + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $labelInfo + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $labelInfo + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $labelInfo + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$labelInfo + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $labelInfo + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$labelInfo + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $320 = $i$6 << 1;
    $321 = $labelInfo + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $labelInfo + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $109 = 0, $11 = 0, $114 = 0, $117 = 0, $132 = 0, $134 = 0, $136 = 0, $140 = 0, $144 = 0, $147 = 0, $149 = 0, $153 = 0, $157 = 0, $161 = 0, $166 = 0, $168 = 0, $17 = 0, $172 = 0, $176 = 0, $180 = 0, $186 = 0, $189 = 0, $191 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $203 = 0, $206 = 0, $211 = 0, $232 = 0, $234 = 0, $24 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $3 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $34 = 0, $44 = 0, $45 = 0, $48 = 0, $50 = 0, $54 = 0, $58 = 0, $64 = 0, $65 = 0, $68 = 0, $69 = 0, $70 = 0, $73 = 0, $76 = 0, $91 = 0, $93 = 0, $95 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $20 = $xsize << 1;
 $24 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $28 = HEAPU8[$pnt$1 >> 0] | 0;
   $34 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($28 & 248) + 10 + ($28 << 5 & 224) + ($34 >>> 3 & 28) + ($34 << 3 & 248) | 0) > ($10 | 0)) {
    $44 = $pnt2$3 + ($24 << 1) | 0;
    $45 = HEAP16[$44 >> 1] | 0;
    if ($45 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $45;
     $48 = ($45 << 16 >> 16) * 7 | 0;
     $50 = $labelInfo + 1310736 + ($48 + -7 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1;
     $54 = $labelInfo + 1310736 + ($48 + -6 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $i$2;
     $58 = $labelInfo + 1310736 + ($48 + -5 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($48 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $64 = HEAP16[$44 + 2 >> 1] | 0;
    $65 = $64 << 16 >> 16;
    $68 = HEAP16[$44 + -2 >> 1] | 0;
    $69 = $68 << 16 >> 16;
    $70 = $68 << 16 >> 16 > 0;
    if ($64 << 16 >> 16 <= 0) {
     if ($70) {
      HEAP16[$pnt2$3 >> 1] = $68;
      $166 = $69 * 7 | 0;
      $168 = $labelInfo + 1310736 + ($166 + -7 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + 1;
      $172 = $labelInfo + 1310736 + ($166 + -6 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $i$2;
      $176 = $labelInfo + 1310736 + ($166 + -5 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $j$0;
      $180 = $labelInfo + 1310736 + ($166 + -3 << 2) | 0;
      if ((HEAP32[$180 >> 2] | 0) < ($i$2 | 0)) HEAP32[$180 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($166 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $186 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($186 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $186;
      $189 = ($186 << 16 >> 16) * 7 | 0;
      $191 = $labelInfo + 1310736 + ($189 + -7 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + 1;
      $195 = $labelInfo + 1310736 + ($189 + -6 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $i$2;
      $199 = $labelInfo + 1310736 + ($189 + -5 << 2) | 0;
      HEAP32[$199 >> 2] = (HEAP32[$199 >> 2] | 0) + $j$0;
      $203 = $labelInfo + 1310736 + ($189 + -3 << 2) | 0;
      if ((HEAP32[$203 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$203 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $206 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $206;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $206 << 16 >> 16;
      $211 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($211 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($211 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($211 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($211 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $206;
      break;
     }
    }
    if ($70) {
     $73 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
     $76 = HEAP32[$labelInfo + 1179664 + ($69 + -1 << 2) >> 2] | 0;
     L35 : do if (($73 | 0) > ($76 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $76;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $91 = $76;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($73 | 0)) HEAP32[$wk$0 >> 2] = $76;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $73;
      if (($73 | 0) < ($76 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $91 = $73;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($76 | 0)) HEAP32[$wk$1 >> 2] = $73;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $91 = $73;
     } while (0);
     $93 = ($91 << 16 >> 16) * 7 | 0;
     $95 = $labelInfo + 1310736 + ($93 + -7 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 1;
     $99 = $labelInfo + 1310736 + ($93 + -6 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $i$2;
     $103 = $labelInfo + 1310736 + ($93 + -5 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($93 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $109 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($109 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $64;
     $147 = $65 * 7 | 0;
     $149 = $labelInfo + 1310736 + ($147 + -7 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
     $153 = $labelInfo + 1310736 + ($147 + -6 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $i$2;
     $157 = $labelInfo + 1310736 + ($147 + -5 << 2) | 0;
     HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $j$0;
     $161 = $labelInfo + 1310736 + ($147 + -4 << 2) | 0;
     if ((HEAP32[$161 >> 2] | 0) > ($i$2 | 0)) HEAP32[$161 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($147 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $114 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
    $117 = HEAP32[$labelInfo + 1179664 + (($109 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($114 | 0) > ($117 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $117;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $132 = $117;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($114 | 0)) HEAP32[$wk$2 >> 2] = $117;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $114;
     if (($114 | 0) < ($117 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $132 = $114;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($117 | 0)) HEAP32[$wk$3 >> 2] = $114;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $132 = $114;
    } while (0);
    $134 = ($132 << 16 >> 16) * 7 | 0;
    $136 = $labelInfo + 1310736 + ($134 + -7 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
    $140 = $labelInfo + 1310736 + ($134 + -6 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $i$2;
    $144 = $labelInfo + 1310736 + ($134 + -5 << 2) | 0;
    HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $20 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $234 = HEAP32[$wk$4 >> 2] | 0;
   if (($234 | 0) == ($i$3 | 0)) {
    $240 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $240 = HEAP32[$labelInfo + 1179664 + ($234 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $240;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $243 = $labelInfo + 8 | 0;
  $244 = $j$1$lcssa + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $250 = $244;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($250 | 0)) {
     $i$5 = 0;
     break;
    }
    $251 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($251 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($251 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $250 = HEAP32[$243 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $263 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $i$5 * 7 | 0;
    $267 = $labelInfo + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $labelInfo + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $labelInfo + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $labelInfo + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $labelInfo + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$labelInfo + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $labelInfo + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$labelInfo + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $320 = $i$6 << 1;
    $321 = $labelInfo + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $labelInfo + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $109 = 0, $11 = 0, $114 = 0, $117 = 0, $132 = 0, $134 = 0, $136 = 0, $140 = 0, $144 = 0, $147 = 0, $149 = 0, $153 = 0, $157 = 0, $161 = 0, $166 = 0, $168 = 0, $17 = 0, $172 = 0, $176 = 0, $180 = 0, $186 = 0, $189 = 0, $191 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $203 = 0, $206 = 0, $211 = 0, $232 = 0, $234 = 0, $24 = 0, $240 = 0, $243 = 0, $244 = 0, $250 = 0, $251 = 0, $263 = 0, $264 = 0, $267 = 0, $274 = 0, $275 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $3 = 0, $301 = 0, $305 = 0, $308 = 0, $312 = 0, $317 = 0, $320 = 0, $321 = 0, $327 = 0, $34 = 0, $44 = 0, $45 = 0, $48 = 0, $50 = 0, $54 = 0, $58 = 0, $64 = 0, $65 = 0, $68 = 0, $69 = 0, $70 = 0, $73 = 0, $76 = 0, $91 = 0, $93 = 0, $95 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $20 = $xsize << 1;
 $24 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $28 = HEAPU8[$pnt$1 >> 0] | 0;
   $34 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($28 & 248) + 10 + ($28 << 5 & 224) + ($34 >>> 3 & 28) + ($34 << 3 & 248) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $44 = $pnt2$3 + ($24 << 1) | 0;
    $45 = HEAP16[$44 >> 1] | 0;
    if ($45 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $45;
     $48 = ($45 << 16 >> 16) * 7 | 0;
     $50 = $labelInfo + 1310736 + ($48 + -7 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1;
     $54 = $labelInfo + 1310736 + ($48 + -6 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $i$2;
     $58 = $labelInfo + 1310736 + ($48 + -5 << 2) | 0;
     HEAP32[$58 >> 2] = (HEAP32[$58 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($48 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $64 = HEAP16[$44 + 2 >> 1] | 0;
    $65 = $64 << 16 >> 16;
    $68 = HEAP16[$44 + -2 >> 1] | 0;
    $69 = $68 << 16 >> 16;
    $70 = $68 << 16 >> 16 > 0;
    if ($64 << 16 >> 16 <= 0) {
     if ($70) {
      HEAP16[$pnt2$3 >> 1] = $68;
      $166 = $69 * 7 | 0;
      $168 = $labelInfo + 1310736 + ($166 + -7 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + 1;
      $172 = $labelInfo + 1310736 + ($166 + -6 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $i$2;
      $176 = $labelInfo + 1310736 + ($166 + -5 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $j$0;
      $180 = $labelInfo + 1310736 + ($166 + -3 << 2) | 0;
      if ((HEAP32[$180 >> 2] | 0) < ($i$2 | 0)) HEAP32[$180 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($166 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $186 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($186 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $186;
      $189 = ($186 << 16 >> 16) * 7 | 0;
      $191 = $labelInfo + 1310736 + ($189 + -7 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + 1;
      $195 = $labelInfo + 1310736 + ($189 + -6 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $i$2;
      $199 = $labelInfo + 1310736 + ($189 + -5 << 2) | 0;
      HEAP32[$199 >> 2] = (HEAP32[$199 >> 2] | 0) + $j$0;
      $203 = $labelInfo + 1310736 + ($189 + -3 << 2) | 0;
      if ((HEAP32[$203 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$203 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $206 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $206;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $206 << 16 >> 16;
      $211 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($211 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($211 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($211 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($211 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($211 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $206;
      break;
     }
    }
    if ($70) {
     $73 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
     $76 = HEAP32[$labelInfo + 1179664 + ($69 + -1 << 2) >> 2] | 0;
     L36 : do if (($73 | 0) > ($76 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $76;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $91 = $76;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($73 | 0)) HEAP32[$wk$0 >> 2] = $76;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $73;
      if (($73 | 0) < ($76 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $91 = $73;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($76 | 0)) HEAP32[$wk$1 >> 2] = $73;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $91 = $73;
     } while (0);
     $93 = ($91 << 16 >> 16) * 7 | 0;
     $95 = $labelInfo + 1310736 + ($93 + -7 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + 1;
     $99 = $labelInfo + 1310736 + ($93 + -6 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $i$2;
     $103 = $labelInfo + 1310736 + ($93 + -5 << 2) | 0;
     HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($93 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $109 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($109 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $64;
     $147 = $65 * 7 | 0;
     $149 = $labelInfo + 1310736 + ($147 + -7 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
     $153 = $labelInfo + 1310736 + ($147 + -6 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $i$2;
     $157 = $labelInfo + 1310736 + ($147 + -5 << 2) | 0;
     HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $j$0;
     $161 = $labelInfo + 1310736 + ($147 + -4 << 2) | 0;
     if ((HEAP32[$161 >> 2] | 0) > ($i$2 | 0)) HEAP32[$161 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($147 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $114 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
    $117 = HEAP32[$labelInfo + 1179664 + (($109 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($114 | 0) > ($117 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $117;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $132 = $117;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($114 | 0)) HEAP32[$wk$2 >> 2] = $117;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $114;
     if (($114 | 0) < ($117 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $132 = $114;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($117 | 0)) HEAP32[$wk$3 >> 2] = $114;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $132 = $114;
    } while (0);
    $134 = ($132 << 16 >> 16) * 7 | 0;
    $136 = $labelInfo + 1310736 + ($134 + -7 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
    $140 = $labelInfo + 1310736 + ($134 + -6 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $i$2;
    $144 = $labelInfo + 1310736 + ($134 + -5 << 2) | 0;
    HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $20 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $232 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $234 = HEAP32[$wk$4 >> 2] | 0;
   if (($234 | 0) == ($i$3 | 0)) {
    $240 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $240 = HEAP32[$labelInfo + 1179664 + ($234 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $240;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $243 = $labelInfo + 8 | 0;
  $244 = $j$1$lcssa + -1 | 0;
  HEAP32[$243 >> 2] = $244;
  if (!$244) $$0 = 0; else {
   _memset($232 | 0, 0, $244 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $244 << 4 | 0) | 0;
   $250 = $244;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($250 | 0)) {
     $i$5 = 0;
     break;
    }
    $251 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($251 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($251 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($251 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($251 | 3) << 2) >> 2] = 0;
    $250 = HEAP32[$243 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $263 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $264 = $i$5 * 7 | 0;
    $267 = $labelInfo + 12 + ($263 << 2) | 0;
    HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($264 << 2) >> 2] | 0);
    $274 = $263 << 1;
    $275 = $labelInfo + 655376 + ($274 << 3) | 0;
    HEAPF64[$275 >> 3] = +HEAPF64[$275 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 1 << 2) >> 2] | 0);
    $283 = $labelInfo + 655376 + (($274 | 1) << 3) | 0;
    HEAPF64[$283 >> 3] = +HEAPF64[$283 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($264 + 2 << 2) >> 2] | 0);
    $286 = $263 << 2;
    $287 = $labelInfo + 131084 + ($286 << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($264 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($286 | 1) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($264 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $301 = $labelInfo + 131084 + (($286 | 2) << 2) | 0;
    $305 = HEAP32[$labelInfo + 1310736 + ($264 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$301 >> 2] | 0) > ($305 | 0)) HEAP32[$301 >> 2] = $305;
    $308 = $labelInfo + 131084 + (($286 | 3) << 2) | 0;
    $312 = HEAP32[$labelInfo + 1310736 + ($264 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$308 >> 2] | 0) < ($312 | 0)) HEAP32[$308 >> 2] = $312;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$243 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $317 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $320 = $i$6 << 1;
    $321 = $labelInfo + 655376 + ($320 << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $327 = $labelInfo + 655376 + (($320 | 1) << 3) | 0;
    HEAPF64[$327 >> 3] = +HEAPF64[$327 >> 3] / +(HEAP32[$317 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $105 = 0, $11 = 0, $110 = 0, $113 = 0, $128 = 0, $130 = 0, $132 = 0, $136 = 0, $140 = 0, $143 = 0, $145 = 0, $149 = 0, $153 = 0, $157 = 0, $162 = 0, $164 = 0, $168 = 0, $17 = 0, $172 = 0, $176 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $207 = 0, $228 = 0, $230 = 0, $236 = 0, $239 = 0, $24 = 0, $240 = 0, $246 = 0, $247 = 0, $259 = 0, $260 = 0, $263 = 0, $270 = 0, $271 = 0, $279 = 0, $28 = 0, $282 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $3 = 0, $301 = 0, $304 = 0, $308 = 0, $313 = 0, $316 = 0, $317 = 0, $323 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $50 = 0, $54 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $72 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $20 = $xsize << 1;
 $24 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $28 = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($28 & 240) + 24 + ($28 << 4 & 240) + ((HEAPU8[$pnt$1 + 1 >> 0] | 0) & 240) | 0) > ($10 | 0)) {
    $40 = $pnt2$3 + ($24 << 1) | 0;
    $41 = HEAP16[$40 >> 1] | 0;
    if ($41 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $41;
     $44 = ($41 << 16 >> 16) * 7 | 0;
     $46 = $labelInfo + 1310736 + ($44 + -7 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + 1;
     $50 = $labelInfo + 1310736 + ($44 + -6 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $i$2;
     $54 = $labelInfo + 1310736 + ($44 + -5 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($44 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $60 = HEAP16[$40 + 2 >> 1] | 0;
    $61 = $60 << 16 >> 16;
    $64 = HEAP16[$40 + -2 >> 1] | 0;
    $65 = $64 << 16 >> 16;
    $66 = $64 << 16 >> 16 > 0;
    if ($60 << 16 >> 16 <= 0) {
     if ($66) {
      HEAP16[$pnt2$3 >> 1] = $64;
      $162 = $65 * 7 | 0;
      $164 = $labelInfo + 1310736 + ($162 + -7 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 1;
      $168 = $labelInfo + 1310736 + ($162 + -6 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $i$2;
      $172 = $labelInfo + 1310736 + ($162 + -5 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $j$0;
      $176 = $labelInfo + 1310736 + ($162 + -3 << 2) | 0;
      if ((HEAP32[$176 >> 2] | 0) < ($i$2 | 0)) HEAP32[$176 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($162 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $182 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $labelInfo + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $labelInfo + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $i$2;
      $195 = $labelInfo + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $j$0;
      $199 = $labelInfo + 1310736 + ($185 + -3 << 2) | 0;
      if ((HEAP32[$199 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$199 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $202 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $202;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($207 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $202;
      break;
     }
    }
    if ($66) {
     $69 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
     $72 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
     L35 : do if (($69 | 0) > ($72 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $72;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $87 = $72;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($69 | 0)) HEAP32[$wk$0 >> 2] = $72;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $69;
      if (($69 | 0) < ($72 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $87 = $69;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$1 >> 2] = $69;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $87 = $69;
     } while (0);
     $89 = ($87 << 16 >> 16) * 7 | 0;
     $91 = $labelInfo + 1310736 + ($89 + -7 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 1;
     $95 = $labelInfo + 1310736 + ($89 + -6 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $i$2;
     $99 = $labelInfo + 1310736 + ($89 + -5 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($89 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $105 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($105 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $60;
     $143 = $61 * 7 | 0;
     $145 = $labelInfo + 1310736 + ($143 + -7 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $labelInfo + 1310736 + ($143 + -6 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $i$2;
     $153 = $labelInfo + 1310736 + ($143 + -5 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $j$0;
     $157 = $labelInfo + 1310736 + ($143 + -4 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($i$2 | 0)) HEAP32[$157 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($143 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $110 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
    $113 = HEAP32[$labelInfo + 1179664 + (($105 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($110 | 0) > ($113 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $113;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $128 = $113;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($110 | 0)) HEAP32[$wk$2 >> 2] = $113;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $110;
     if (($110 | 0) < ($113 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $128 = $110;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$3 >> 2] = $110;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $128 = $110;
    } while (0);
    $130 = ($128 << 16 >> 16) * 7 | 0;
    $132 = $labelInfo + 1310736 + ($130 + -7 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
    $136 = $labelInfo + 1310736 + ($130 + -6 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $i$2;
    $140 = $labelInfo + 1310736 + ($130 + -5 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $20 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $228 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $230 = HEAP32[$wk$4 >> 2] | 0;
   if (($230 | 0) == ($i$3 | 0)) {
    $236 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $236 = HEAP32[$labelInfo + 1179664 + ($230 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $236;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $239 = $labelInfo + 8 | 0;
  $240 = $j$1$lcssa + -1 | 0;
  HEAP32[$239 >> 2] = $240;
  if (!$240) $$0 = 0; else {
   _memset($228 | 0, 0, $240 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $240 << 4 | 0) | 0;
   $246 = $240;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($246 | 0)) {
     $i$5 = 0;
     break;
    }
    $247 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($247 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($247 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($247 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($247 | 3) << 2) >> 2] = 0;
    $246 = HEAP32[$239 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $259 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $260 = $i$5 * 7 | 0;
    $263 = $labelInfo + 12 + ($259 << 2) | 0;
    HEAP32[$263 >> 2] = (HEAP32[$263 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($260 << 2) >> 2] | 0);
    $270 = $259 << 1;
    $271 = $labelInfo + 655376 + ($270 << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($260 + 1 << 2) >> 2] | 0);
    $279 = $labelInfo + 655376 + (($270 | 1) << 3) | 0;
    HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($260 + 2 << 2) >> 2] | 0);
    $282 = $259 << 2;
    $283 = $labelInfo + 131084 + ($282 << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($260 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($282 | 1) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($260 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $labelInfo + 131084 + (($282 | 2) << 2) | 0;
    $301 = HEAP32[$labelInfo + 1310736 + ($260 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) > ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $304 = $labelInfo + 131084 + (($282 | 3) << 2) | 0;
    $308 = HEAP32[$labelInfo + 1310736 + ($260 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$304 >> 2] | 0) < ($308 | 0)) HEAP32[$304 >> 2] = $308;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$239 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $313 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $316 = $i$6 << 1;
    $317 = $labelInfo + 655376 + ($316 << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $323 = $labelInfo + 655376 + (($316 | 1) << 3) | 0;
    HEAPF64[$323 >> 3] = +HEAPF64[$323 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $105 = 0, $11 = 0, $110 = 0, $113 = 0, $128 = 0, $130 = 0, $132 = 0, $136 = 0, $140 = 0, $143 = 0, $145 = 0, $149 = 0, $153 = 0, $157 = 0, $162 = 0, $164 = 0, $168 = 0, $17 = 0, $172 = 0, $176 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $207 = 0, $228 = 0, $230 = 0, $236 = 0, $239 = 0, $24 = 0, $240 = 0, $246 = 0, $247 = 0, $259 = 0, $260 = 0, $263 = 0, $270 = 0, $271 = 0, $279 = 0, $28 = 0, $282 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $3 = 0, $301 = 0, $304 = 0, $308 = 0, $313 = 0, $316 = 0, $317 = 0, $323 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $50 = 0, $54 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $72 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $20 = $xsize << 1;
 $24 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $28 = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($28 & 240) + 24 + ($28 << 4 & 240) + ((HEAPU8[$pnt$1 + 1 >> 0] | 0) & 240) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $40 = $pnt2$3 + ($24 << 1) | 0;
    $41 = HEAP16[$40 >> 1] | 0;
    if ($41 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $41;
     $44 = ($41 << 16 >> 16) * 7 | 0;
     $46 = $labelInfo + 1310736 + ($44 + -7 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + 1;
     $50 = $labelInfo + 1310736 + ($44 + -6 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $i$2;
     $54 = $labelInfo + 1310736 + ($44 + -5 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($44 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $60 = HEAP16[$40 + 2 >> 1] | 0;
    $61 = $60 << 16 >> 16;
    $64 = HEAP16[$40 + -2 >> 1] | 0;
    $65 = $64 << 16 >> 16;
    $66 = $64 << 16 >> 16 > 0;
    if ($60 << 16 >> 16 <= 0) {
     if ($66) {
      HEAP16[$pnt2$3 >> 1] = $64;
      $162 = $65 * 7 | 0;
      $164 = $labelInfo + 1310736 + ($162 + -7 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 1;
      $168 = $labelInfo + 1310736 + ($162 + -6 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $i$2;
      $172 = $labelInfo + 1310736 + ($162 + -5 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $j$0;
      $176 = $labelInfo + 1310736 + ($162 + -3 << 2) | 0;
      if ((HEAP32[$176 >> 2] | 0) < ($i$2 | 0)) HEAP32[$176 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($162 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $182 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $labelInfo + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $labelInfo + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $i$2;
      $195 = $labelInfo + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $j$0;
      $199 = $labelInfo + 1310736 + ($185 + -3 << 2) | 0;
      if ((HEAP32[$199 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$199 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $202 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $202;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($207 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $202;
      break;
     }
    }
    if ($66) {
     $69 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
     $72 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
     L36 : do if (($69 | 0) > ($72 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $72;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $87 = $72;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($69 | 0)) HEAP32[$wk$0 >> 2] = $72;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $69;
      if (($69 | 0) < ($72 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $87 = $69;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$1 >> 2] = $69;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $87 = $69;
     } while (0);
     $89 = ($87 << 16 >> 16) * 7 | 0;
     $91 = $labelInfo + 1310736 + ($89 + -7 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 1;
     $95 = $labelInfo + 1310736 + ($89 + -6 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $i$2;
     $99 = $labelInfo + 1310736 + ($89 + -5 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($89 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $105 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($105 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $60;
     $143 = $61 * 7 | 0;
     $145 = $labelInfo + 1310736 + ($143 + -7 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $labelInfo + 1310736 + ($143 + -6 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $i$2;
     $153 = $labelInfo + 1310736 + ($143 + -5 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $j$0;
     $157 = $labelInfo + 1310736 + ($143 + -4 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($i$2 | 0)) HEAP32[$157 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($143 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $110 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
    $113 = HEAP32[$labelInfo + 1179664 + (($105 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($110 | 0) > ($113 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $113;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $128 = $113;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($110 | 0)) HEAP32[$wk$2 >> 2] = $113;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $110;
     if (($110 | 0) < ($113 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $128 = $110;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$3 >> 2] = $110;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $128 = $110;
    } while (0);
    $130 = ($128 << 16 >> 16) * 7 | 0;
    $132 = $labelInfo + 1310736 + ($130 + -7 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
    $136 = $labelInfo + 1310736 + ($130 + -6 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $i$2;
    $140 = $labelInfo + 1310736 + ($130 + -5 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $20 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $228 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $230 = HEAP32[$wk$4 >> 2] | 0;
   if (($230 | 0) == ($i$3 | 0)) {
    $236 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $236 = HEAP32[$labelInfo + 1179664 + ($230 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $236;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $239 = $labelInfo + 8 | 0;
  $240 = $j$1$lcssa + -1 | 0;
  HEAP32[$239 >> 2] = $240;
  if (!$240) $$0 = 0; else {
   _memset($228 | 0, 0, $240 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $240 << 4 | 0) | 0;
   $246 = $240;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($246 | 0)) {
     $i$5 = 0;
     break;
    }
    $247 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($247 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($247 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($247 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($247 | 3) << 2) >> 2] = 0;
    $246 = HEAP32[$239 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $259 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $260 = $i$5 * 7 | 0;
    $263 = $labelInfo + 12 + ($259 << 2) | 0;
    HEAP32[$263 >> 2] = (HEAP32[$263 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($260 << 2) >> 2] | 0);
    $270 = $259 << 1;
    $271 = $labelInfo + 655376 + ($270 << 3) | 0;
    HEAPF64[$271 >> 3] = +HEAPF64[$271 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($260 + 1 << 2) >> 2] | 0);
    $279 = $labelInfo + 655376 + (($270 | 1) << 3) | 0;
    HEAPF64[$279 >> 3] = +HEAPF64[$279 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($260 + 2 << 2) >> 2] | 0);
    $282 = $259 << 2;
    $283 = $labelInfo + 131084 + ($282 << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($260 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) > ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($282 | 1) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($260 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) < ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $labelInfo + 131084 + (($282 | 2) << 2) | 0;
    $301 = HEAP32[$labelInfo + 1310736 + ($260 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) > ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $304 = $labelInfo + 131084 + (($282 | 3) << 2) | 0;
    $308 = HEAP32[$labelInfo + 1310736 + ($260 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$304 >> 2] | 0) < ($308 | 0)) HEAP32[$304 >> 2] = $308;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$239 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $313 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $316 = $i$6 << 1;
    $317 = $labelInfo + 655376 + ($316 << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $323 = $labelInfo + 655376 + (($316 | 1) << 3) | 0;
    HEAPF64[$323 >> 3] = +HEAPF64[$323 >> 3] / +(HEAP32[$313 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $105 = 0, $110 = 0, $113 = 0, $128 = 0, $130 = 0, $132 = 0, $136 = 0, $140 = 0, $143 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $16 = 0, $162 = 0, $164 = 0, $168 = 0, $172 = 0, $176 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $199 = 0, $20 = 0, $202 = 0, $207 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $30 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $50 = 0, $54 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $72 = 0, $8 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $95 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $24 = HEAPU8[$pnt$1 >> 0] | 0;
   $30 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($24 & 248) + 12 + ($24 << 5 & 224) + ($30 >>> 3 & 24) + ($30 << 2 & 248) | 0) > ($8 | 0)) {
    $40 = $pnt2$3 + ($20 << 1) | 0;
    $41 = HEAP16[$40 >> 1] | 0;
    if ($41 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $41;
     $44 = ($41 << 16 >> 16) * 7 | 0;
     $46 = $labelInfo + 1310736 + ($44 + -7 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + 1;
     $50 = $labelInfo + 1310736 + ($44 + -6 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $i$2;
     $54 = $labelInfo + 1310736 + ($44 + -5 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($44 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $60 = HEAP16[$40 + 2 >> 1] | 0;
    $61 = $60 << 16 >> 16;
    $64 = HEAP16[$40 + -2 >> 1] | 0;
    $65 = $64 << 16 >> 16;
    $66 = $64 << 16 >> 16 > 0;
    if ($60 << 16 >> 16 <= 0) {
     if ($66) {
      HEAP16[$pnt2$3 >> 1] = $64;
      $162 = $65 * 7 | 0;
      $164 = $labelInfo + 1310736 + ($162 + -7 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 1;
      $168 = $labelInfo + 1310736 + ($162 + -6 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $i$2;
      $172 = $labelInfo + 1310736 + ($162 + -5 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $j$0;
      $176 = $labelInfo + 1310736 + ($162 + -3 << 2) | 0;
      if ((HEAP32[$176 >> 2] | 0) < ($i$2 | 0)) HEAP32[$176 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($162 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $182 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $labelInfo + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $labelInfo + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $i$2;
      $195 = $labelInfo + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $j$0;
      $199 = $labelInfo + 1310736 + ($185 + -3 << 2) | 0;
      if ((HEAP32[$199 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$199 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $202 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $202;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($207 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $202;
      break;
     }
    }
    if ($66) {
     $69 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
     $72 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
     L35 : do if (($69 | 0) > ($72 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $72;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $87 = $72;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($69 | 0)) HEAP32[$wk$0 >> 2] = $72;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $69;
      if (($69 | 0) < ($72 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $87 = $69;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$1 >> 2] = $69;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $87 = $69;
     } while (0);
     $89 = ($87 << 16 >> 16) * 7 | 0;
     $91 = $labelInfo + 1310736 + ($89 + -7 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 1;
     $95 = $labelInfo + 1310736 + ($89 + -6 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $i$2;
     $99 = $labelInfo + 1310736 + ($89 + -5 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($89 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $105 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($105 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $60;
     $143 = $61 * 7 | 0;
     $145 = $labelInfo + 1310736 + ($143 + -7 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $labelInfo + 1310736 + ($143 + -6 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $i$2;
     $153 = $labelInfo + 1310736 + ($143 + -5 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $j$0;
     $157 = $labelInfo + 1310736 + ($143 + -4 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($i$2 | 0)) HEAP32[$157 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($143 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $110 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
    $113 = HEAP32[$labelInfo + 1179664 + (($105 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($110 | 0) > ($113 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $113;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $128 = $113;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($110 | 0)) HEAP32[$wk$2 >> 2] = $113;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $110;
     if (($110 | 0) < ($113 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $128 = $110;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$3 >> 2] = $110;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $128 = $110;
    } while (0);
    $130 = ($128 << 16 >> 16) * 7 | 0;
    $132 = $labelInfo + 1310736 + ($130 + -7 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
    $136 = $labelInfo + 1310736 + ($130 + -6 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $i$2;
    $140 = $labelInfo + 1310736 + ($130 + -5 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $229 = HEAP32[$wk$4 >> 2] | 0;
   if (($229 | 0) == ($i$3 | 0)) {
    $235 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $235 = HEAP32[$labelInfo + 1179664 + ($229 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $235;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $238 = $labelInfo + 8 | 0;
  $239 = $j$1$lcssa + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $245 = $239;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($245 | 0)) {
     $i$5 = 0;
     break;
    }
    $246 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($246 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($246 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $245 = HEAP32[$238 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $258 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $i$5 * 7 | 0;
    $262 = $labelInfo + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $labelInfo + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $labelInfo + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $labelInfo + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$labelInfo + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $labelInfo + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$labelInfo + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $labelInfo + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$labelInfo + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $labelInfo + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$labelInfo + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $315 = $i$6 << 1;
    $316 = $labelInfo + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $labelInfo + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $105 = 0, $110 = 0, $113 = 0, $128 = 0, $130 = 0, $132 = 0, $136 = 0, $140 = 0, $143 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $16 = 0, $162 = 0, $164 = 0, $168 = 0, $172 = 0, $176 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $199 = 0, $20 = 0, $202 = 0, $207 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $30 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $50 = 0, $54 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $72 = 0, $8 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $95 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $24 = HEAPU8[$pnt$1 >> 0] | 0;
   $30 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($24 & 248) + 12 + ($24 << 5 & 224) + ($30 >>> 3 & 24) + ($30 << 2 & 248) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $40 = $pnt2$3 + ($20 << 1) | 0;
    $41 = HEAP16[$40 >> 1] | 0;
    if ($41 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $41;
     $44 = ($41 << 16 >> 16) * 7 | 0;
     $46 = $labelInfo + 1310736 + ($44 + -7 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + 1;
     $50 = $labelInfo + 1310736 + ($44 + -6 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $i$2;
     $54 = $labelInfo + 1310736 + ($44 + -5 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($44 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $60 = HEAP16[$40 + 2 >> 1] | 0;
    $61 = $60 << 16 >> 16;
    $64 = HEAP16[$40 + -2 >> 1] | 0;
    $65 = $64 << 16 >> 16;
    $66 = $64 << 16 >> 16 > 0;
    if ($60 << 16 >> 16 <= 0) {
     if ($66) {
      HEAP16[$pnt2$3 >> 1] = $64;
      $162 = $65 * 7 | 0;
      $164 = $labelInfo + 1310736 + ($162 + -7 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 1;
      $168 = $labelInfo + 1310736 + ($162 + -6 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $i$2;
      $172 = $labelInfo + 1310736 + ($162 + -5 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $j$0;
      $176 = $labelInfo + 1310736 + ($162 + -3 << 2) | 0;
      if ((HEAP32[$176 >> 2] | 0) < ($i$2 | 0)) HEAP32[$176 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($162 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $182 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $labelInfo + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $labelInfo + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $i$2;
      $195 = $labelInfo + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $j$0;
      $199 = $labelInfo + 1310736 + ($185 + -3 << 2) | 0;
      if ((HEAP32[$199 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$199 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $202 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $202;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($207 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $202;
      break;
     }
    }
    if ($66) {
     $69 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
     $72 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
     L36 : do if (($69 | 0) > ($72 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $72;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $87 = $72;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($69 | 0)) HEAP32[$wk$0 >> 2] = $72;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $69;
      if (($69 | 0) < ($72 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $87 = $69;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$1 >> 2] = $69;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $87 = $69;
     } while (0);
     $89 = ($87 << 16 >> 16) * 7 | 0;
     $91 = $labelInfo + 1310736 + ($89 + -7 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 1;
     $95 = $labelInfo + 1310736 + ($89 + -6 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $i$2;
     $99 = $labelInfo + 1310736 + ($89 + -5 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($89 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $105 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($105 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $60;
     $143 = $61 * 7 | 0;
     $145 = $labelInfo + 1310736 + ($143 + -7 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $labelInfo + 1310736 + ($143 + -6 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $i$2;
     $153 = $labelInfo + 1310736 + ($143 + -5 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $j$0;
     $157 = $labelInfo + 1310736 + ($143 + -4 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($i$2 | 0)) HEAP32[$157 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($143 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $110 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
    $113 = HEAP32[$labelInfo + 1179664 + (($105 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($110 | 0) > ($113 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $113;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $128 = $113;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($110 | 0)) HEAP32[$wk$2 >> 2] = $113;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $110;
     if (($110 | 0) < ($113 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $128 = $110;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$3 >> 2] = $110;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $128 = $110;
    } while (0);
    $130 = ($128 << 16 >> 16) * 7 | 0;
    $132 = $labelInfo + 1310736 + ($130 + -7 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
    $136 = $labelInfo + 1310736 + ($130 + -6 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $i$2;
    $140 = $labelInfo + 1310736 + ($130 + -5 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $229 = HEAP32[$wk$4 >> 2] | 0;
   if (($229 | 0) == ($i$3 | 0)) {
    $235 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $235 = HEAP32[$labelInfo + 1179664 + ($229 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $235;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $238 = $labelInfo + 8 | 0;
  $239 = $j$1$lcssa + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $245 = $239;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($245 | 0)) {
     $i$5 = 0;
     break;
    }
    $246 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($246 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($246 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $245 = HEAP32[$238 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $258 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $i$5 * 7 | 0;
    $262 = $labelInfo + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $labelInfo + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $labelInfo + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $labelInfo + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$labelInfo + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $labelInfo + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$labelInfo + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $labelInfo + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$labelInfo + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $labelInfo + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$labelInfo + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $315 = $i$6 << 1;
    $316 = $labelInfo + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $labelInfo + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $105 = 0, $110 = 0, $113 = 0, $128 = 0, $130 = 0, $132 = 0, $136 = 0, $140 = 0, $143 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $16 = 0, $162 = 0, $164 = 0, $168 = 0, $172 = 0, $176 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $199 = 0, $20 = 0, $202 = 0, $207 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $30 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $50 = 0, $54 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $72 = 0, $8 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $95 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $24 = HEAPU8[$pnt$1 >> 0] | 0;
   $30 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($24 & 248) + 10 + ($24 << 5 & 224) + ($30 >>> 3 & 28) + ($30 << 3 & 248) | 0) > ($8 | 0)) {
    $40 = $pnt2$3 + ($20 << 1) | 0;
    $41 = HEAP16[$40 >> 1] | 0;
    if ($41 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $41;
     $44 = ($41 << 16 >> 16) * 7 | 0;
     $46 = $labelInfo + 1310736 + ($44 + -7 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + 1;
     $50 = $labelInfo + 1310736 + ($44 + -6 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $i$2;
     $54 = $labelInfo + 1310736 + ($44 + -5 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($44 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $60 = HEAP16[$40 + 2 >> 1] | 0;
    $61 = $60 << 16 >> 16;
    $64 = HEAP16[$40 + -2 >> 1] | 0;
    $65 = $64 << 16 >> 16;
    $66 = $64 << 16 >> 16 > 0;
    if ($60 << 16 >> 16 <= 0) {
     if ($66) {
      HEAP16[$pnt2$3 >> 1] = $64;
      $162 = $65 * 7 | 0;
      $164 = $labelInfo + 1310736 + ($162 + -7 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 1;
      $168 = $labelInfo + 1310736 + ($162 + -6 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $i$2;
      $172 = $labelInfo + 1310736 + ($162 + -5 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $j$0;
      $176 = $labelInfo + 1310736 + ($162 + -3 << 2) | 0;
      if ((HEAP32[$176 >> 2] | 0) < ($i$2 | 0)) HEAP32[$176 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($162 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $182 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $labelInfo + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $labelInfo + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $i$2;
      $195 = $labelInfo + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $j$0;
      $199 = $labelInfo + 1310736 + ($185 + -3 << 2) | 0;
      if ((HEAP32[$199 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$199 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $202 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $202;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($207 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $202;
      break;
     }
    }
    if ($66) {
     $69 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
     $72 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
     L35 : do if (($69 | 0) > ($72 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $72;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $87 = $72;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($69 | 0)) HEAP32[$wk$0 >> 2] = $72;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $69;
      if (($69 | 0) < ($72 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $87 = $69;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$1 >> 2] = $69;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $87 = $69;
     } while (0);
     $89 = ($87 << 16 >> 16) * 7 | 0;
     $91 = $labelInfo + 1310736 + ($89 + -7 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 1;
     $95 = $labelInfo + 1310736 + ($89 + -6 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $i$2;
     $99 = $labelInfo + 1310736 + ($89 + -5 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($89 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $105 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($105 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $60;
     $143 = $61 * 7 | 0;
     $145 = $labelInfo + 1310736 + ($143 + -7 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $labelInfo + 1310736 + ($143 + -6 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $i$2;
     $153 = $labelInfo + 1310736 + ($143 + -5 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $j$0;
     $157 = $labelInfo + 1310736 + ($143 + -4 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($i$2 | 0)) HEAP32[$157 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($143 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $110 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
    $113 = HEAP32[$labelInfo + 1179664 + (($105 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($110 | 0) > ($113 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $113;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $128 = $113;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($110 | 0)) HEAP32[$wk$2 >> 2] = $113;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $110;
     if (($110 | 0) < ($113 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $128 = $110;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$3 >> 2] = $110;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $128 = $110;
    } while (0);
    $130 = ($128 << 16 >> 16) * 7 | 0;
    $132 = $labelInfo + 1310736 + ($130 + -7 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
    $136 = $labelInfo + 1310736 + ($130 + -6 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $i$2;
    $140 = $labelInfo + 1310736 + ($130 + -5 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $229 = HEAP32[$wk$4 >> 2] | 0;
   if (($229 | 0) == ($i$3 | 0)) {
    $235 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $235 = HEAP32[$labelInfo + 1179664 + ($229 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $235;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $238 = $labelInfo + 8 | 0;
  $239 = $j$1$lcssa + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $245 = $239;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($245 | 0)) {
     $i$5 = 0;
     break;
    }
    $246 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($246 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($246 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $245 = HEAP32[$238 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $258 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $i$5 * 7 | 0;
    $262 = $labelInfo + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $labelInfo + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $labelInfo + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $labelInfo + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$labelInfo + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $labelInfo + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$labelInfo + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $labelInfo + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$labelInfo + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $labelInfo + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$labelInfo + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $315 = $i$6 << 1;
    $316 = $labelInfo + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $labelInfo + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $105 = 0, $110 = 0, $113 = 0, $128 = 0, $130 = 0, $132 = 0, $136 = 0, $140 = 0, $143 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $16 = 0, $162 = 0, $164 = 0, $168 = 0, $172 = 0, $176 = 0, $182 = 0, $185 = 0, $187 = 0, $191 = 0, $195 = 0, $199 = 0, $20 = 0, $202 = 0, $207 = 0, $227 = 0, $229 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $30 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $50 = 0, $54 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $72 = 0, $8 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $95 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $24 = HEAPU8[$pnt$1 >> 0] | 0;
   $30 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($24 & 248) + 10 + ($24 << 5 & 224) + ($30 >>> 3 & 28) + ($30 << 3 & 248) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $40 = $pnt2$3 + ($20 << 1) | 0;
    $41 = HEAP16[$40 >> 1] | 0;
    if ($41 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $41;
     $44 = ($41 << 16 >> 16) * 7 | 0;
     $46 = $labelInfo + 1310736 + ($44 + -7 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + 1;
     $50 = $labelInfo + 1310736 + ($44 + -6 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $i$2;
     $54 = $labelInfo + 1310736 + ($44 + -5 << 2) | 0;
     HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($44 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $60 = HEAP16[$40 + 2 >> 1] | 0;
    $61 = $60 << 16 >> 16;
    $64 = HEAP16[$40 + -2 >> 1] | 0;
    $65 = $64 << 16 >> 16;
    $66 = $64 << 16 >> 16 > 0;
    if ($60 << 16 >> 16 <= 0) {
     if ($66) {
      HEAP16[$pnt2$3 >> 1] = $64;
      $162 = $65 * 7 | 0;
      $164 = $labelInfo + 1310736 + ($162 + -7 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + 1;
      $168 = $labelInfo + 1310736 + ($162 + -6 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $i$2;
      $172 = $labelInfo + 1310736 + ($162 + -5 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + $j$0;
      $176 = $labelInfo + 1310736 + ($162 + -3 << 2) | 0;
      if ((HEAP32[$176 >> 2] | 0) < ($i$2 | 0)) HEAP32[$176 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($162 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $182 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($182 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $182;
      $185 = ($182 << 16 >> 16) * 7 | 0;
      $187 = $labelInfo + 1310736 + ($185 + -7 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + 1;
      $191 = $labelInfo + 1310736 + ($185 + -6 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $i$2;
      $195 = $labelInfo + 1310736 + ($185 + -5 << 2) | 0;
      HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) + $j$0;
      $199 = $labelInfo + 1310736 + ($185 + -3 << 2) | 0;
      if ((HEAP32[$199 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$199 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $202 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $202;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $202 << 16 >> 16;
      $207 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($207 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($207 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($207 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($207 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $202;
      break;
     }
    }
    if ($66) {
     $69 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
     $72 = HEAP32[$labelInfo + 1179664 + ($65 + -1 << 2) >> 2] | 0;
     L36 : do if (($69 | 0) > ($72 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $72;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $87 = $72;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($69 | 0)) HEAP32[$wk$0 >> 2] = $72;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $69;
      if (($69 | 0) < ($72 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $87 = $69;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($72 | 0)) HEAP32[$wk$1 >> 2] = $69;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $87 = $69;
     } while (0);
     $89 = ($87 << 16 >> 16) * 7 | 0;
     $91 = $labelInfo + 1310736 + ($89 + -7 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 1;
     $95 = $labelInfo + 1310736 + ($89 + -6 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $i$2;
     $99 = $labelInfo + 1310736 + ($89 + -5 << 2) | 0;
     HEAP32[$99 >> 2] = (HEAP32[$99 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($89 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $105 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($105 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $60;
     $143 = $61 * 7 | 0;
     $145 = $labelInfo + 1310736 + ($143 + -7 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
     $149 = $labelInfo + 1310736 + ($143 + -6 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $i$2;
     $153 = $labelInfo + 1310736 + ($143 + -5 << 2) | 0;
     HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $j$0;
     $157 = $labelInfo + 1310736 + ($143 + -4 << 2) | 0;
     if ((HEAP32[$157 >> 2] | 0) > ($i$2 | 0)) HEAP32[$157 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($143 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $110 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
    $113 = HEAP32[$labelInfo + 1179664 + (($105 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($110 | 0) > ($113 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $113;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $128 = $113;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($110 | 0)) HEAP32[$wk$2 >> 2] = $113;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $110;
     if (($110 | 0) < ($113 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $128 = $110;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($113 | 0)) HEAP32[$wk$3 >> 2] = $110;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $128 = $110;
    } while (0);
    $130 = ($128 << 16 >> 16) * 7 | 0;
    $132 = $labelInfo + 1310736 + ($130 + -7 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + 1;
    $136 = $labelInfo + 1310736 + ($130 + -6 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $i$2;
    $140 = $labelInfo + 1310736 + ($130 + -5 << 2) | 0;
    HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $229 = HEAP32[$wk$4 >> 2] | 0;
   if (($229 | 0) == ($i$3 | 0)) {
    $235 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $235 = HEAP32[$labelInfo + 1179664 + ($229 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $235;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $238 = $labelInfo + 8 | 0;
  $239 = $j$1$lcssa + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $245 = $239;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($245 | 0)) {
     $i$5 = 0;
     break;
    }
    $246 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($246 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($246 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $245 = HEAP32[$238 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $258 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $i$5 * 7 | 0;
    $262 = $labelInfo + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $labelInfo + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $labelInfo + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $labelInfo + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$labelInfo + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $labelInfo + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$labelInfo + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $labelInfo + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$labelInfo + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $labelInfo + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$labelInfo + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $315 = $i$6 << 1;
    $316 = $labelInfo + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $labelInfo + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $108 = 0, $11 = 0, $111 = 0, $126 = 0, $128 = 0, $130 = 0, $134 = 0, $138 = 0, $141 = 0, $143 = 0, $147 = 0, $151 = 0, $155 = 0, $160 = 0, $162 = 0, $166 = 0, $17 = 0, $170 = 0, $174 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $197 = 0, $2 = 0, $200 = 0, $205 = 0, $226 = 0, $228 = 0, $23 = 0, $234 = 0, $237 = 0, $238 = 0, $24 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $3 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $48 = 0, $52 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $70 = 0, $85 = 0, $87 = 0, $89 = 0, $93 = 0, $97 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $23 = 0 - $0 | 0;
 $24 = $xsize * 3 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize * 6 | 0) + 6) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($10 | 0)) {
    $38 = $pnt2$3 + ($23 << 1) | 0;
    $39 = HEAP16[$38 >> 1] | 0;
    if ($39 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $39;
     $42 = ($39 << 16 >> 16) * 7 | 0;
     $44 = $labelInfo + 1310736 + ($42 + -7 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 1;
     $48 = $labelInfo + 1310736 + ($42 + -6 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $i$2;
     $52 = $labelInfo + 1310736 + ($42 + -5 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($42 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $58 = HEAP16[$38 + 2 >> 1] | 0;
    $59 = $58 << 16 >> 16;
    $62 = HEAP16[$38 + -2 >> 1] | 0;
    $63 = $62 << 16 >> 16;
    $64 = $62 << 16 >> 16 > 0;
    if ($58 << 16 >> 16 <= 0) {
     if ($64) {
      HEAP16[$pnt2$3 >> 1] = $62;
      $160 = $63 * 7 | 0;
      $162 = $labelInfo + 1310736 + ($160 + -7 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 1;
      $166 = $labelInfo + 1310736 + ($160 + -6 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $i$2;
      $170 = $labelInfo + 1310736 + ($160 + -5 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $j$0;
      $174 = $labelInfo + 1310736 + ($160 + -3 << 2) | 0;
      if ((HEAP32[$174 >> 2] | 0) < ($i$2 | 0)) HEAP32[$174 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($160 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $180 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $labelInfo + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $labelInfo + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $i$2;
      $193 = $labelInfo + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $j$0;
      $197 = $labelInfo + 1310736 + ($183 + -3 << 2) | 0;
      if ((HEAP32[$197 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$197 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $200 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $200;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($205 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $200;
      break;
     }
    }
    if ($64) {
     $67 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
     $70 = HEAP32[$labelInfo + 1179664 + ($63 + -1 << 2) >> 2] | 0;
     L35 : do if (($67 | 0) > ($70 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $70;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $85 = $70;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($67 | 0)) HEAP32[$wk$0 >> 2] = $70;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $67;
      if (($67 | 0) < ($70 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $85 = $67;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($70 | 0)) HEAP32[$wk$1 >> 2] = $67;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $85 = $67;
     } while (0);
     $87 = ($85 << 16 >> 16) * 7 | 0;
     $89 = $labelInfo + 1310736 + ($87 + -7 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + 1;
     $93 = $labelInfo + 1310736 + ($87 + -6 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $i$2;
     $97 = $labelInfo + 1310736 + ($87 + -5 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($87 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $103 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($103 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $58;
     $141 = $59 * 7 | 0;
     $143 = $labelInfo + 1310736 + ($141 + -7 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + 1;
     $147 = $labelInfo + 1310736 + ($141 + -6 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $i$2;
     $151 = $labelInfo + 1310736 + ($141 + -5 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $j$0;
     $155 = $labelInfo + 1310736 + ($141 + -4 << 2) | 0;
     if ((HEAP32[$155 >> 2] | 0) > ($i$2 | 0)) HEAP32[$155 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($141 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
    $111 = HEAP32[$labelInfo + 1179664 + (($103 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($108 | 0) > ($111 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $111;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $126 = $111;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($108 | 0)) HEAP32[$wk$2 >> 2] = $111;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $108;
     if (($108 | 0) < ($111 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $126 = $108;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($111 | 0)) HEAP32[$wk$3 >> 2] = $108;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $126 = $108;
    } while (0);
    $128 = ($126 << 16 >> 16) * 7 | 0;
    $130 = $labelInfo + 1310736 + ($128 + -7 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
    $134 = $labelInfo + 1310736 + ($128 + -6 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $i$2;
    $138 = $labelInfo + 1310736 + ($128 + -5 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 6 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $24 + 12 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $228 = HEAP32[$wk$4 >> 2] | 0;
   if (($228 | 0) == ($i$3 | 0)) {
    $234 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $234 = HEAP32[$labelInfo + 1179664 + ($228 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $234;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $237 = $labelInfo + 8 | 0;
  $238 = $j$1$lcssa + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $244 = $238;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($244 | 0)) {
     $i$5 = 0;
     break;
    }
    $245 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($245 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($245 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $244 = HEAP32[$237 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $257 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $i$5 * 7 | 0;
    $261 = $labelInfo + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $labelInfo + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $labelInfo + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $labelInfo + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $labelInfo + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$labelInfo + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $314 = $i$6 << 1;
    $315 = $labelInfo + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $labelInfo + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $108 = 0, $11 = 0, $111 = 0, $126 = 0, $128 = 0, $130 = 0, $134 = 0, $138 = 0, $141 = 0, $143 = 0, $147 = 0, $151 = 0, $155 = 0, $160 = 0, $162 = 0, $166 = 0, $17 = 0, $170 = 0, $174 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $197 = 0, $2 = 0, $200 = 0, $205 = 0, $226 = 0, $228 = 0, $23 = 0, $234 = 0, $237 = 0, $238 = 0, $24 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $3 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $48 = 0, $52 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $70 = 0, $85 = 0, $87 = 0, $89 = 0, $93 = 0, $97 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $23 = 0 - $0 | 0;
 $24 = $xsize * 3 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize * 6 | 0) + 6) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $38 = $pnt2$3 + ($23 << 1) | 0;
    $39 = HEAP16[$38 >> 1] | 0;
    if ($39 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $39;
     $42 = ($39 << 16 >> 16) * 7 | 0;
     $44 = $labelInfo + 1310736 + ($42 + -7 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 1;
     $48 = $labelInfo + 1310736 + ($42 + -6 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $i$2;
     $52 = $labelInfo + 1310736 + ($42 + -5 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($42 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $58 = HEAP16[$38 + 2 >> 1] | 0;
    $59 = $58 << 16 >> 16;
    $62 = HEAP16[$38 + -2 >> 1] | 0;
    $63 = $62 << 16 >> 16;
    $64 = $62 << 16 >> 16 > 0;
    if ($58 << 16 >> 16 <= 0) {
     if ($64) {
      HEAP16[$pnt2$3 >> 1] = $62;
      $160 = $63 * 7 | 0;
      $162 = $labelInfo + 1310736 + ($160 + -7 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 1;
      $166 = $labelInfo + 1310736 + ($160 + -6 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $i$2;
      $170 = $labelInfo + 1310736 + ($160 + -5 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $j$0;
      $174 = $labelInfo + 1310736 + ($160 + -3 << 2) | 0;
      if ((HEAP32[$174 >> 2] | 0) < ($i$2 | 0)) HEAP32[$174 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($160 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $180 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $labelInfo + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $labelInfo + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $i$2;
      $193 = $labelInfo + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $j$0;
      $197 = $labelInfo + 1310736 + ($183 + -3 << 2) | 0;
      if ((HEAP32[$197 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$197 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $200 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $200;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($205 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $200;
      break;
     }
    }
    if ($64) {
     $67 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
     $70 = HEAP32[$labelInfo + 1179664 + ($63 + -1 << 2) >> 2] | 0;
     L36 : do if (($67 | 0) > ($70 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $70;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $85 = $70;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($67 | 0)) HEAP32[$wk$0 >> 2] = $70;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $67;
      if (($67 | 0) < ($70 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $85 = $67;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($70 | 0)) HEAP32[$wk$1 >> 2] = $67;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $85 = $67;
     } while (0);
     $87 = ($85 << 16 >> 16) * 7 | 0;
     $89 = $labelInfo + 1310736 + ($87 + -7 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + 1;
     $93 = $labelInfo + 1310736 + ($87 + -6 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $i$2;
     $97 = $labelInfo + 1310736 + ($87 + -5 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($87 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $103 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($103 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $58;
     $141 = $59 * 7 | 0;
     $143 = $labelInfo + 1310736 + ($141 + -7 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + 1;
     $147 = $labelInfo + 1310736 + ($141 + -6 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $i$2;
     $151 = $labelInfo + 1310736 + ($141 + -5 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $j$0;
     $155 = $labelInfo + 1310736 + ($141 + -4 << 2) | 0;
     if ((HEAP32[$155 >> 2] | 0) > ($i$2 | 0)) HEAP32[$155 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($141 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
    $111 = HEAP32[$labelInfo + 1179664 + (($103 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($108 | 0) > ($111 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $111;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $126 = $111;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($108 | 0)) HEAP32[$wk$2 >> 2] = $111;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $108;
     if (($108 | 0) < ($111 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $126 = $108;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($111 | 0)) HEAP32[$wk$3 >> 2] = $108;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $126 = $108;
    } while (0);
    $128 = ($126 << 16 >> 16) * 7 | 0;
    $130 = $labelInfo + 1310736 + ($128 + -7 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
    $134 = $labelInfo + 1310736 + ($128 + -6 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $i$2;
    $138 = $labelInfo + 1310736 + ($128 + -5 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 6 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $24 + 12 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $228 = HEAP32[$wk$4 >> 2] | 0;
   if (($228 | 0) == ($i$3 | 0)) {
    $234 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $234 = HEAP32[$labelInfo + 1179664 + ($228 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $234;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $237 = $labelInfo + 8 | 0;
  $238 = $j$1$lcssa + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $244 = $238;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($244 | 0)) {
     $i$5 = 0;
     break;
    }
    $245 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($245 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($245 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $244 = HEAP32[$237 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $257 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $i$5 * 7 | 0;
    $261 = $labelInfo + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $labelInfo + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $labelInfo + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $labelInfo + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $labelInfo + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$labelInfo + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $314 = $i$6 << 1;
    $315 = $labelInfo + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $labelInfo + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $104 = 0, $109 = 0, $11 = 0, $112 = 0, $127 = 0, $129 = 0, $131 = 0, $135 = 0, $139 = 0, $142 = 0, $144 = 0, $148 = 0, $152 = 0, $156 = 0, $161 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $181 = 0, $184 = 0, $186 = 0, $190 = 0, $194 = 0, $198 = 0, $2 = 0, $201 = 0, $206 = 0, $227 = 0, $229 = 0, $23 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $3 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $49 = 0, $53 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $68 = 0, $71 = 0, $86 = 0, $88 = 0, $90 = 0, $94 = 0, $98 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $23 = 0 - $0 | 0;
 $24 = $xsize << 2;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($10 | 0)) {
    $39 = $pnt2$3 + ($23 << 1) | 0;
    $40 = HEAP16[$39 >> 1] | 0;
    if ($40 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $40;
     $43 = ($40 << 16 >> 16) * 7 | 0;
     $45 = $labelInfo + 1310736 + ($43 + -7 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1;
     $49 = $labelInfo + 1310736 + ($43 + -6 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $i$2;
     $53 = $labelInfo + 1310736 + ($43 + -5 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($43 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $59 = HEAP16[$39 + 2 >> 1] | 0;
    $60 = $59 << 16 >> 16;
    $63 = HEAP16[$39 + -2 >> 1] | 0;
    $64 = $63 << 16 >> 16;
    $65 = $63 << 16 >> 16 > 0;
    if ($59 << 16 >> 16 <= 0) {
     if ($65) {
      HEAP16[$pnt2$3 >> 1] = $63;
      $161 = $64 * 7 | 0;
      $163 = $labelInfo + 1310736 + ($161 + -7 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 1;
      $167 = $labelInfo + 1310736 + ($161 + -6 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $i$2;
      $171 = $labelInfo + 1310736 + ($161 + -5 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $j$0;
      $175 = $labelInfo + 1310736 + ($161 + -3 << 2) | 0;
      if ((HEAP32[$175 >> 2] | 0) < ($i$2 | 0)) HEAP32[$175 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($161 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $181 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($181 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $181;
      $184 = ($181 << 16 >> 16) * 7 | 0;
      $186 = $labelInfo + 1310736 + ($184 + -7 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + 1;
      $190 = $labelInfo + 1310736 + ($184 + -6 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $i$2;
      $194 = $labelInfo + 1310736 + ($184 + -5 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $j$0;
      $198 = $labelInfo + 1310736 + ($184 + -3 << 2) | 0;
      if ((HEAP32[$198 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$198 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $201 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $201;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $201 << 16 >> 16;
      $206 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($206 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($206 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($206 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($206 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $201;
      break;
     }
    }
    if ($65) {
     $68 = HEAP32[$labelInfo + 1179664 + ($60 + -1 << 2) >> 2] | 0;
     $71 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
     L35 : do if (($68 | 0) > ($71 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $71;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $86 = $71;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($68 | 0)) HEAP32[$wk$0 >> 2] = $71;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $68;
      if (($68 | 0) < ($71 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $86 = $68;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($71 | 0)) HEAP32[$wk$1 >> 2] = $68;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $86 = $68;
     } while (0);
     $88 = ($86 << 16 >> 16) * 7 | 0;
     $90 = $labelInfo + 1310736 + ($88 + -7 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + 1;
     $94 = $labelInfo + 1310736 + ($88 + -6 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $i$2;
     $98 = $labelInfo + 1310736 + ($88 + -5 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($88 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $104 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($104 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $59;
     $142 = $60 * 7 | 0;
     $144 = $labelInfo + 1310736 + ($142 + -7 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + 1;
     $148 = $labelInfo + 1310736 + ($142 + -6 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $i$2;
     $152 = $labelInfo + 1310736 + ($142 + -5 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $j$0;
     $156 = $labelInfo + 1310736 + ($142 + -4 << 2) | 0;
     if ((HEAP32[$156 >> 2] | 0) > ($i$2 | 0)) HEAP32[$156 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($142 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $109 = HEAP32[$labelInfo + 1179664 + ($60 + -1 << 2) >> 2] | 0;
    $112 = HEAP32[$labelInfo + 1179664 + (($104 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($109 | 0) > ($112 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $112;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $127 = $112;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($109 | 0)) HEAP32[$wk$2 >> 2] = $112;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $109;
     if (($109 | 0) < ($112 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $127 = $109;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($112 | 0)) HEAP32[$wk$3 >> 2] = $109;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $127 = $109;
    } while (0);
    $129 = ($127 << 16 >> 16) * 7 | 0;
    $131 = $labelInfo + 1310736 + ($129 + -7 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + 1;
    $135 = $labelInfo + 1310736 + ($129 + -6 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $i$2;
    $139 = $labelInfo + 1310736 + ($129 + -5 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $24 + 16 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $229 = HEAP32[$wk$4 >> 2] | 0;
   if (($229 | 0) == ($i$3 | 0)) {
    $235 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $235 = HEAP32[$labelInfo + 1179664 + ($229 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $235;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $238 = $labelInfo + 8 | 0;
  $239 = $j$1$lcssa + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $245 = $239;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($245 | 0)) {
     $i$5 = 0;
     break;
    }
    $246 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($246 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($246 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $245 = HEAP32[$238 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $258 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $i$5 * 7 | 0;
    $262 = $labelInfo + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $labelInfo + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $labelInfo + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $labelInfo + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$labelInfo + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $labelInfo + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$labelInfo + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $labelInfo + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$labelInfo + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $labelInfo + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$labelInfo + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $315 = $i$6 << 1;
    $316 = $labelInfo + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $labelInfo + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $104 = 0, $109 = 0, $11 = 0, $112 = 0, $127 = 0, $129 = 0, $131 = 0, $135 = 0, $139 = 0, $142 = 0, $144 = 0, $148 = 0, $152 = 0, $156 = 0, $161 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $181 = 0, $184 = 0, $186 = 0, $190 = 0, $194 = 0, $198 = 0, $2 = 0, $201 = 0, $206 = 0, $227 = 0, $229 = 0, $23 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $245 = 0, $246 = 0, $258 = 0, $259 = 0, $262 = 0, $269 = 0, $270 = 0, $278 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $296 = 0, $3 = 0, $300 = 0, $303 = 0, $307 = 0, $312 = 0, $315 = 0, $316 = 0, $322 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $49 = 0, $53 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $68 = 0, $71 = 0, $86 = 0, $88 = 0, $90 = 0, $94 = 0, $98 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $23 = 0 - $0 | 0;
 $24 = $xsize << 2;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $39 = $pnt2$3 + ($23 << 1) | 0;
    $40 = HEAP16[$39 >> 1] | 0;
    if ($40 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $40;
     $43 = ($40 << 16 >> 16) * 7 | 0;
     $45 = $labelInfo + 1310736 + ($43 + -7 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1;
     $49 = $labelInfo + 1310736 + ($43 + -6 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $i$2;
     $53 = $labelInfo + 1310736 + ($43 + -5 << 2) | 0;
     HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($43 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $59 = HEAP16[$39 + 2 >> 1] | 0;
    $60 = $59 << 16 >> 16;
    $63 = HEAP16[$39 + -2 >> 1] | 0;
    $64 = $63 << 16 >> 16;
    $65 = $63 << 16 >> 16 > 0;
    if ($59 << 16 >> 16 <= 0) {
     if ($65) {
      HEAP16[$pnt2$3 >> 1] = $63;
      $161 = $64 * 7 | 0;
      $163 = $labelInfo + 1310736 + ($161 + -7 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 1;
      $167 = $labelInfo + 1310736 + ($161 + -6 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $i$2;
      $171 = $labelInfo + 1310736 + ($161 + -5 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + $j$0;
      $175 = $labelInfo + 1310736 + ($161 + -3 << 2) | 0;
      if ((HEAP32[$175 >> 2] | 0) < ($i$2 | 0)) HEAP32[$175 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($161 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $181 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($181 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $181;
      $184 = ($181 << 16 >> 16) * 7 | 0;
      $186 = $labelInfo + 1310736 + ($184 + -7 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + 1;
      $190 = $labelInfo + 1310736 + ($184 + -6 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $i$2;
      $194 = $labelInfo + 1310736 + ($184 + -5 << 2) | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + $j$0;
      $198 = $labelInfo + 1310736 + ($184 + -3 << 2) | 0;
      if ((HEAP32[$198 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$198 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $201 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $201;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $201 << 16 >> 16;
      $206 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($206 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($206 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($206 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($206 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($206 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $201;
      break;
     }
    }
    if ($65) {
     $68 = HEAP32[$labelInfo + 1179664 + ($60 + -1 << 2) >> 2] | 0;
     $71 = HEAP32[$labelInfo + 1179664 + ($64 + -1 << 2) >> 2] | 0;
     L36 : do if (($68 | 0) > ($71 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $71;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $86 = $71;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($68 | 0)) HEAP32[$wk$0 >> 2] = $71;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $68;
      if (($68 | 0) < ($71 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $86 = $68;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($71 | 0)) HEAP32[$wk$1 >> 2] = $68;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $86 = $68;
     } while (0);
     $88 = ($86 << 16 >> 16) * 7 | 0;
     $90 = $labelInfo + 1310736 + ($88 + -7 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + 1;
     $94 = $labelInfo + 1310736 + ($88 + -6 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $i$2;
     $98 = $labelInfo + 1310736 + ($88 + -5 << 2) | 0;
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($88 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $104 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($104 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $59;
     $142 = $60 * 7 | 0;
     $144 = $labelInfo + 1310736 + ($142 + -7 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + 1;
     $148 = $labelInfo + 1310736 + ($142 + -6 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $i$2;
     $152 = $labelInfo + 1310736 + ($142 + -5 << 2) | 0;
     HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $j$0;
     $156 = $labelInfo + 1310736 + ($142 + -4 << 2) | 0;
     if ((HEAP32[$156 >> 2] | 0) > ($i$2 | 0)) HEAP32[$156 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($142 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $109 = HEAP32[$labelInfo + 1179664 + ($60 + -1 << 2) >> 2] | 0;
    $112 = HEAP32[$labelInfo + 1179664 + (($104 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($109 | 0) > ($112 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $112;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $127 = $112;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($109 | 0)) HEAP32[$wk$2 >> 2] = $112;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $109;
     if (($109 | 0) < ($112 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $127 = $109;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($112 | 0)) HEAP32[$wk$3 >> 2] = $109;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $127 = $109;
    } while (0);
    $129 = ($127 << 16 >> 16) * 7 | 0;
    $131 = $labelInfo + 1310736 + ($129 + -7 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + 1;
    $135 = $labelInfo + 1310736 + ($129 + -6 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $i$2;
    $139 = $labelInfo + 1310736 + ($129 + -5 << 2) | 0;
    HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $24 + 16 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $227 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $229 = HEAP32[$wk$4 >> 2] | 0;
   if (($229 | 0) == ($i$3 | 0)) {
    $235 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $235 = HEAP32[$labelInfo + 1179664 + ($229 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $235;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $238 = $labelInfo + 8 | 0;
  $239 = $j$1$lcssa + -1 | 0;
  HEAP32[$238 >> 2] = $239;
  if (!$239) $$0 = 0; else {
   _memset($227 | 0, 0, $239 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $239 << 4 | 0) | 0;
   $245 = $239;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($245 | 0)) {
     $i$5 = 0;
     break;
    }
    $246 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($246 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($246 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($246 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($246 | 3) << 2) >> 2] = 0;
    $245 = HEAP32[$238 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $258 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $259 = $i$5 * 7 | 0;
    $262 = $labelInfo + 12 + ($258 << 2) | 0;
    HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($259 << 2) >> 2] | 0);
    $269 = $258 << 1;
    $270 = $labelInfo + 655376 + ($269 << 3) | 0;
    HEAPF64[$270 >> 3] = +HEAPF64[$270 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 1 << 2) >> 2] | 0);
    $278 = $labelInfo + 655376 + (($269 | 1) << 3) | 0;
    HEAPF64[$278 >> 3] = +HEAPF64[$278 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($259 + 2 << 2) >> 2] | 0);
    $281 = $258 << 2;
    $282 = $labelInfo + 131084 + ($281 << 2) | 0;
    $286 = HEAP32[$labelInfo + 1310736 + ($259 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $labelInfo + 131084 + (($281 | 1) << 2) | 0;
    $293 = HEAP32[$labelInfo + 1310736 + ($259 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $296 = $labelInfo + 131084 + (($281 | 2) << 2) | 0;
    $300 = HEAP32[$labelInfo + 1310736 + ($259 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$296 >> 2] | 0) > ($300 | 0)) HEAP32[$296 >> 2] = $300;
    $303 = $labelInfo + 131084 + (($281 | 3) << 2) | 0;
    $307 = HEAP32[$labelInfo + 1310736 + ($259 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$303 >> 2] | 0) < ($307 | 0)) HEAP32[$303 >> 2] = $307;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$238 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $312 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $315 = $i$6 << 1;
    $316 = $labelInfo + 655376 + ($315 << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $322 = $labelInfo + 655376 + (($315 | 1) << 3) | 0;
    HEAPF64[$322 >> 3] = +HEAPF64[$322 >> 3] / +(HEAP32[$312 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $108 = 0, $11 = 0, $111 = 0, $126 = 0, $128 = 0, $130 = 0, $134 = 0, $138 = 0, $141 = 0, $143 = 0, $147 = 0, $151 = 0, $155 = 0, $160 = 0, $162 = 0, $166 = 0, $17 = 0, $170 = 0, $174 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $197 = 0, $2 = 0, $200 = 0, $205 = 0, $226 = 0, $228 = 0, $23 = 0, $234 = 0, $237 = 0, $238 = 0, $24 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $3 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $48 = 0, $52 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $70 = 0, $85 = 0, $87 = 0, $89 = 0, $93 = 0, $97 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $23 = 0 - $0 | 0;
 $24 = $xsize << 2;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($10 | 0)) {
    $38 = $pnt2$3 + ($23 << 1) | 0;
    $39 = HEAP16[$38 >> 1] | 0;
    if ($39 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $39;
     $42 = ($39 << 16 >> 16) * 7 | 0;
     $44 = $labelInfo + 1310736 + ($42 + -7 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 1;
     $48 = $labelInfo + 1310736 + ($42 + -6 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $i$2;
     $52 = $labelInfo + 1310736 + ($42 + -5 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($42 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $58 = HEAP16[$38 + 2 >> 1] | 0;
    $59 = $58 << 16 >> 16;
    $62 = HEAP16[$38 + -2 >> 1] | 0;
    $63 = $62 << 16 >> 16;
    $64 = $62 << 16 >> 16 > 0;
    if ($58 << 16 >> 16 <= 0) {
     if ($64) {
      HEAP16[$pnt2$3 >> 1] = $62;
      $160 = $63 * 7 | 0;
      $162 = $labelInfo + 1310736 + ($160 + -7 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 1;
      $166 = $labelInfo + 1310736 + ($160 + -6 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $i$2;
      $170 = $labelInfo + 1310736 + ($160 + -5 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $j$0;
      $174 = $labelInfo + 1310736 + ($160 + -3 << 2) | 0;
      if ((HEAP32[$174 >> 2] | 0) < ($i$2 | 0)) HEAP32[$174 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($160 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $180 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $labelInfo + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $labelInfo + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $i$2;
      $193 = $labelInfo + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $j$0;
      $197 = $labelInfo + 1310736 + ($183 + -3 << 2) | 0;
      if ((HEAP32[$197 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$197 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $200 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $200;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($205 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $200;
      break;
     }
    }
    if ($64) {
     $67 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
     $70 = HEAP32[$labelInfo + 1179664 + ($63 + -1 << 2) >> 2] | 0;
     L35 : do if (($67 | 0) > ($70 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $70;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $85 = $70;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($67 | 0)) HEAP32[$wk$0 >> 2] = $70;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $67;
      if (($67 | 0) < ($70 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $85 = $67;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($70 | 0)) HEAP32[$wk$1 >> 2] = $67;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $85 = $67;
     } while (0);
     $87 = ($85 << 16 >> 16) * 7 | 0;
     $89 = $labelInfo + 1310736 + ($87 + -7 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + 1;
     $93 = $labelInfo + 1310736 + ($87 + -6 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $i$2;
     $97 = $labelInfo + 1310736 + ($87 + -5 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($87 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $103 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($103 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $58;
     $141 = $59 * 7 | 0;
     $143 = $labelInfo + 1310736 + ($141 + -7 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + 1;
     $147 = $labelInfo + 1310736 + ($141 + -6 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $i$2;
     $151 = $labelInfo + 1310736 + ($141 + -5 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $j$0;
     $155 = $labelInfo + 1310736 + ($141 + -4 << 2) | 0;
     if ((HEAP32[$155 >> 2] | 0) > ($i$2 | 0)) HEAP32[$155 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($141 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
    $111 = HEAP32[$labelInfo + 1179664 + (($103 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($108 | 0) > ($111 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $111;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $126 = $111;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($108 | 0)) HEAP32[$wk$2 >> 2] = $111;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $108;
     if (($108 | 0) < ($111 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $126 = $108;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($111 | 0)) HEAP32[$wk$3 >> 2] = $108;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $126 = $108;
    } while (0);
    $128 = ($126 << 16 >> 16) * 7 | 0;
    $130 = $labelInfo + 1310736 + ($128 + -7 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
    $134 = $labelInfo + 1310736 + ($128 + -6 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $i$2;
    $138 = $labelInfo + 1310736 + ($128 + -5 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $24 + 16 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $228 = HEAP32[$wk$4 >> 2] | 0;
   if (($228 | 0) == ($i$3 | 0)) {
    $234 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $234 = HEAP32[$labelInfo + 1179664 + ($228 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $234;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $237 = $labelInfo + 8 | 0;
  $238 = $j$1$lcssa + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $244 = $238;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($244 | 0)) {
     $i$5 = 0;
     break;
    }
    $245 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($245 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($245 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $244 = HEAP32[$237 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $257 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $i$5 * 7 | 0;
    $261 = $labelInfo + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $labelInfo + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $labelInfo + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $labelInfo + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $labelInfo + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$labelInfo + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $314 = $i$6 << 1;
    $315 = $labelInfo + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $labelInfo + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $108 = 0, $11 = 0, $111 = 0, $126 = 0, $128 = 0, $130 = 0, $134 = 0, $138 = 0, $141 = 0, $143 = 0, $147 = 0, $151 = 0, $155 = 0, $160 = 0, $162 = 0, $166 = 0, $17 = 0, $170 = 0, $174 = 0, $180 = 0, $183 = 0, $185 = 0, $189 = 0, $193 = 0, $197 = 0, $2 = 0, $200 = 0, $205 = 0, $226 = 0, $228 = 0, $23 = 0, $234 = 0, $237 = 0, $238 = 0, $24 = 0, $244 = 0, $245 = 0, $257 = 0, $258 = 0, $261 = 0, $268 = 0, $269 = 0, $277 = 0, $280 = 0, $281 = 0, $285 = 0, $288 = 0, $292 = 0, $295 = 0, $299 = 0, $3 = 0, $302 = 0, $306 = 0, $311 = 0, $314 = 0, $315 = 0, $321 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $48 = 0, $52 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $70 = 0, $85 = 0, $87 = 0, $89 = 0, $93 = 0, $97 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $labelingThresh * 3 | 0;
 $11 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($11 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $17 = $labelInfo + 1179664 | 0;
 $23 = 0 - $0 | 0;
 $24 = $xsize << 2;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($11 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($10 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $38 = $pnt2$3 + ($23 << 1) | 0;
    $39 = HEAP16[$38 >> 1] | 0;
    if ($39 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $39;
     $42 = ($39 << 16 >> 16) * 7 | 0;
     $44 = $labelInfo + 1310736 + ($42 + -7 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 1;
     $48 = $labelInfo + 1310736 + ($42 + -6 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $i$2;
     $52 = $labelInfo + 1310736 + ($42 + -5 << 2) | 0;
     HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($42 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $58 = HEAP16[$38 + 2 >> 1] | 0;
    $59 = $58 << 16 >> 16;
    $62 = HEAP16[$38 + -2 >> 1] | 0;
    $63 = $62 << 16 >> 16;
    $64 = $62 << 16 >> 16 > 0;
    if ($58 << 16 >> 16 <= 0) {
     if ($64) {
      HEAP16[$pnt2$3 >> 1] = $62;
      $160 = $63 * 7 | 0;
      $162 = $labelInfo + 1310736 + ($160 + -7 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + 1;
      $166 = $labelInfo + 1310736 + ($160 + -6 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $i$2;
      $170 = $labelInfo + 1310736 + ($160 + -5 << 2) | 0;
      HEAP32[$170 >> 2] = (HEAP32[$170 >> 2] | 0) + $j$0;
      $174 = $labelInfo + 1310736 + ($160 + -3 << 2) | 0;
      if ((HEAP32[$174 >> 2] | 0) < ($i$2 | 0)) HEAP32[$174 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($160 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $180 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($180 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $180;
      $183 = ($180 << 16 >> 16) * 7 | 0;
      $185 = $labelInfo + 1310736 + ($183 + -7 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + 1;
      $189 = $labelInfo + 1310736 + ($183 + -6 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $i$2;
      $193 = $labelInfo + 1310736 + ($183 + -5 << 2) | 0;
      HEAP32[$193 >> 2] = (HEAP32[$193 >> 2] | 0) + $j$0;
      $197 = $labelInfo + 1310736 + ($183 + -3 << 2) | 0;
      if ((HEAP32[$197 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$197 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $200 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $200;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $200 << 16 >> 16;
      $205 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($205 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($205 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($205 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($205 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $200;
      break;
     }
    }
    if ($64) {
     $67 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
     $70 = HEAP32[$labelInfo + 1179664 + ($63 + -1 << 2) >> 2] | 0;
     L36 : do if (($67 | 0) > ($70 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $70;
      $k$0 = 0;
      $wk$0 = $17;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $85 = $70;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($67 | 0)) HEAP32[$wk$0 >> 2] = $70;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $67;
      if (($67 | 0) < ($70 | 0)) {
       $k$1 = 0;
       $wk$1 = $17;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $85 = $67;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($70 | 0)) HEAP32[$wk$1 >> 2] = $67;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $85 = $67;
     } while (0);
     $87 = ($85 << 16 >> 16) * 7 | 0;
     $89 = $labelInfo + 1310736 + ($87 + -7 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + 1;
     $93 = $labelInfo + 1310736 + ($87 + -6 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $i$2;
     $97 = $labelInfo + 1310736 + ($87 + -5 << 2) | 0;
     HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($87 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $103 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($103 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $58;
     $141 = $59 * 7 | 0;
     $143 = $labelInfo + 1310736 + ($141 + -7 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + 1;
     $147 = $labelInfo + 1310736 + ($141 + -6 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $i$2;
     $151 = $labelInfo + 1310736 + ($141 + -5 << 2) | 0;
     HEAP32[$151 >> 2] = (HEAP32[$151 >> 2] | 0) + $j$0;
     $155 = $labelInfo + 1310736 + ($141 + -4 << 2) | 0;
     if ((HEAP32[$155 >> 2] | 0) > ($i$2 | 0)) HEAP32[$155 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($141 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $108 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
    $111 = HEAP32[$labelInfo + 1179664 + (($103 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($108 | 0) > ($111 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $111;
     $k$2 = 0;
     $wk$2 = $17;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $126 = $111;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($108 | 0)) HEAP32[$wk$2 >> 2] = $111;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $108;
     if (($108 | 0) < ($111 | 0)) {
      $k$3 = 0;
      $wk$3 = $17;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $126 = $108;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($111 | 0)) HEAP32[$wk$3 >> 2] = $108;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $126 = $108;
    } while (0);
    $128 = ($126 << 16 >> 16) * 7 | 0;
    $130 = $labelInfo + 1310736 + ($128 + -7 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
    $134 = $labelInfo + 1310736 + ($128 + -6 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $i$2;
    $138 = $labelInfo + 1310736 + ($128 + -5 << 2) | 0;
    HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $24 + 16 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $226 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $17;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $228 = HEAP32[$wk$4 >> 2] | 0;
   if (($228 | 0) == ($i$3 | 0)) {
    $234 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $234 = HEAP32[$labelInfo + 1179664 + ($228 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $234;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $237 = $labelInfo + 8 | 0;
  $238 = $j$1$lcssa + -1 | 0;
  HEAP32[$237 >> 2] = $238;
  if (!$238) $$0 = 0; else {
   _memset($226 | 0, 0, $238 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $238 << 4 | 0) | 0;
   $244 = $238;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($244 | 0)) {
     $i$5 = 0;
     break;
    }
    $245 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($245 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($245 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($245 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($245 | 3) << 2) >> 2] = 0;
    $244 = HEAP32[$237 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $257 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $258 = $i$5 * 7 | 0;
    $261 = $labelInfo + 12 + ($257 << 2) | 0;
    HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($258 << 2) >> 2] | 0);
    $268 = $257 << 1;
    $269 = $labelInfo + 655376 + ($268 << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 1 << 2) >> 2] | 0);
    $277 = $labelInfo + 655376 + (($268 | 1) << 3) | 0;
    HEAPF64[$277 >> 3] = +HEAPF64[$277 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($258 + 2 << 2) >> 2] | 0);
    $280 = $257 << 2;
    $281 = $labelInfo + 131084 + ($280 << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($258 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($280 | 1) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($258 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $295 = $labelInfo + 131084 + (($280 | 2) << 2) | 0;
    $299 = HEAP32[$labelInfo + 1310736 + ($258 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$295 >> 2] | 0) > ($299 | 0)) HEAP32[$295 >> 2] = $299;
    $302 = $labelInfo + 131084 + (($280 | 3) << 2) | 0;
    $306 = HEAP32[$labelInfo + 1310736 + ($258 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$302 >> 2] | 0) < ($306 | 0)) HEAP32[$302 >> 2] = $306;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$237 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $311 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $314 = $i$6 << 1;
    $315 = $labelInfo + 655376 + ($314 << 3) | 0;
    HEAPF64[$315 >> 3] = +HEAPF64[$315 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $321 = $labelInfo + 655376 + (($314 | 1) << 3) | 0;
    HEAPF64[$321 >> 3] = +HEAPF64[$321 >> 3] / +(HEAP32[$311 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $101 = 0, $106 = 0, $109 = 0, $124 = 0, $126 = 0, $128 = 0, $132 = 0, $136 = 0, $139 = 0, $141 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $168 = 0, $172 = 0, $178 = 0, $181 = 0, $183 = 0, $187 = 0, $191 = 0, $195 = 0, $198 = 0, $20 = 0, $203 = 0, $223 = 0, $225 = 0, $231 = 0, $234 = 0, $235 = 0, $24 = 0, $241 = 0, $242 = 0, $254 = 0, $255 = 0, $258 = 0, $265 = 0, $266 = 0, $274 = 0, $277 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $308 = 0, $311 = 0, $312 = 0, $318 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $46 = 0, $50 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $68 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $91 = 0, $95 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $24 = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($24 & 240) + 24 + ($24 << 4 & 240) + ((HEAPU8[$pnt$1 + 1 >> 0] | 0) & 240) | 0) > ($8 | 0)) {
    $36 = $pnt2$3 + ($20 << 1) | 0;
    $37 = HEAP16[$36 >> 1] | 0;
    if ($37 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $37;
     $40 = ($37 << 16 >> 16) * 7 | 0;
     $42 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
     $46 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $i$2;
     $50 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($40 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $56 = HEAP16[$36 + 2 >> 1] | 0;
    $57 = $56 << 16 >> 16;
    $60 = HEAP16[$36 + -2 >> 1] | 0;
    $61 = $60 << 16 >> 16;
    $62 = $60 << 16 >> 16 > 0;
    if ($56 << 16 >> 16 <= 0) {
     if ($62) {
      HEAP16[$pnt2$3 >> 1] = $60;
      $158 = $61 * 7 | 0;
      $160 = $labelInfo + 1310736 + ($158 + -7 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + 1;
      $164 = $labelInfo + 1310736 + ($158 + -6 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $i$2;
      $168 = $labelInfo + 1310736 + ($158 + -5 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $j$0;
      $172 = $labelInfo + 1310736 + ($158 + -3 << 2) | 0;
      if ((HEAP32[$172 >> 2] | 0) < ($i$2 | 0)) HEAP32[$172 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($158 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $178 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($178 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $178;
      $181 = ($178 << 16 >> 16) * 7 | 0;
      $183 = $labelInfo + 1310736 + ($181 + -7 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + 1;
      $187 = $labelInfo + 1310736 + ($181 + -6 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $i$2;
      $191 = $labelInfo + 1310736 + ($181 + -5 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $j$0;
      $195 = $labelInfo + 1310736 + ($181 + -3 << 2) | 0;
      if ((HEAP32[$195 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$195 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $198 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $198;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $198 << 16 >> 16;
      $203 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($203 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($203 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($203 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($203 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($203 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($203 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($203 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $198;
      break;
     }
    }
    if ($62) {
     $65 = HEAP32[$labelInfo + 1179664 + ($57 + -1 << 2) >> 2] | 0;
     $68 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
     L35 : do if (($65 | 0) > ($68 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $68;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $83 = $68;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($65 | 0)) HEAP32[$wk$0 >> 2] = $68;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $65;
      if (($65 | 0) < ($68 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $83 = $65;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($68 | 0)) HEAP32[$wk$1 >> 2] = $65;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $83 = $65;
     } while (0);
     $85 = ($83 << 16 >> 16) * 7 | 0;
     $87 = $labelInfo + 1310736 + ($85 + -7 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 1;
     $91 = $labelInfo + 1310736 + ($85 + -6 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $i$2;
     $95 = $labelInfo + 1310736 + ($85 + -5 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($85 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $101 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($101 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $56;
     $139 = $57 * 7 | 0;
     $141 = $labelInfo + 1310736 + ($139 + -7 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + 1;
     $145 = $labelInfo + 1310736 + ($139 + -6 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $i$2;
     $149 = $labelInfo + 1310736 + ($139 + -5 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $j$0;
     $153 = $labelInfo + 1310736 + ($139 + -4 << 2) | 0;
     if ((HEAP32[$153 >> 2] | 0) > ($i$2 | 0)) HEAP32[$153 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($139 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $106 = HEAP32[$labelInfo + 1179664 + ($57 + -1 << 2) >> 2] | 0;
    $109 = HEAP32[$labelInfo + 1179664 + (($101 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($106 | 0) > ($109 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $109;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $124 = $109;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($106 | 0)) HEAP32[$wk$2 >> 2] = $109;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $106;
     if (($106 | 0) < ($109 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $124 = $106;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($109 | 0)) HEAP32[$wk$3 >> 2] = $106;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $124 = $106;
    } while (0);
    $126 = ($124 << 16 >> 16) * 7 | 0;
    $128 = $labelInfo + 1310736 + ($126 + -7 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + 1;
    $132 = $labelInfo + 1310736 + ($126 + -6 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $i$2;
    $136 = $labelInfo + 1310736 + ($126 + -5 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $223 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $225 = HEAP32[$wk$4 >> 2] | 0;
   if (($225 | 0) == ($i$3 | 0)) {
    $231 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $231 = HEAP32[$labelInfo + 1179664 + ($225 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $231;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $234 = $labelInfo + 8 | 0;
  $235 = $j$1$lcssa + -1 | 0;
  HEAP32[$234 >> 2] = $235;
  if (!$235) $$0 = 0; else {
   _memset($223 | 0, 0, $235 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $235 << 4 | 0) | 0;
   $241 = $235;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($241 | 0)) {
     $i$5 = 0;
     break;
    }
    $242 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($242 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($242 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($242 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($242 | 3) << 2) >> 2] = 0;
    $241 = HEAP32[$234 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $254 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $255 = $i$5 * 7 | 0;
    $258 = $labelInfo + 12 + ($254 << 2) | 0;
    HEAP32[$258 >> 2] = (HEAP32[$258 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($255 << 2) >> 2] | 0);
    $265 = $254 << 1;
    $266 = $labelInfo + 655376 + ($265 << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($255 + 1 << 2) >> 2] | 0);
    $274 = $labelInfo + 655376 + (($265 | 1) << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($255 + 2 << 2) >> 2] | 0);
    $277 = $254 << 2;
    $278 = $labelInfo + 131084 + ($277 << 2) | 0;
    $282 = HEAP32[$labelInfo + 1310736 + ($255 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) > ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $labelInfo + 131084 + (($277 | 1) << 2) | 0;
    $289 = HEAP32[$labelInfo + 1310736 + ($255 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) < ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $labelInfo + 131084 + (($277 | 2) << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($255 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $labelInfo + 131084 + (($277 | 3) << 2) | 0;
    $303 = HEAP32[$labelInfo + 1310736 + ($255 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$234 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $308 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $311 = $i$6 << 1;
    $312 = $labelInfo + 655376 + ($311 << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $318 = $labelInfo + 655376 + (($311 | 1) << 3) | 0;
    HEAPF64[$318 >> 3] = +HEAPF64[$318 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $101 = 0, $106 = 0, $109 = 0, $124 = 0, $126 = 0, $128 = 0, $132 = 0, $136 = 0, $139 = 0, $141 = 0, $145 = 0, $149 = 0, $15 = 0, $153 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $168 = 0, $172 = 0, $178 = 0, $181 = 0, $183 = 0, $187 = 0, $191 = 0, $195 = 0, $198 = 0, $20 = 0, $203 = 0, $223 = 0, $225 = 0, $231 = 0, $234 = 0, $235 = 0, $24 = 0, $241 = 0, $242 = 0, $254 = 0, $255 = 0, $258 = 0, $265 = 0, $266 = 0, $274 = 0, $277 = 0, $278 = 0, $282 = 0, $285 = 0, $289 = 0, $292 = 0, $296 = 0, $299 = 0, $303 = 0, $308 = 0, $311 = 0, $312 = 0, $318 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $46 = 0, $50 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $68 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $91 = 0, $95 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 1) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   $24 = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($24 & 240) + 24 + ($24 << 4 & 240) + ((HEAPU8[$pnt$1 + 1 >> 0] | 0) & 240) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $36 = $pnt2$3 + ($20 << 1) | 0;
    $37 = HEAP16[$36 >> 1] | 0;
    if ($37 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $37;
     $40 = ($37 << 16 >> 16) * 7 | 0;
     $42 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
     $46 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
     HEAP32[$46 >> 2] = (HEAP32[$46 >> 2] | 0) + $i$2;
     $50 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
     HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($40 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $56 = HEAP16[$36 + 2 >> 1] | 0;
    $57 = $56 << 16 >> 16;
    $60 = HEAP16[$36 + -2 >> 1] | 0;
    $61 = $60 << 16 >> 16;
    $62 = $60 << 16 >> 16 > 0;
    if ($56 << 16 >> 16 <= 0) {
     if ($62) {
      HEAP16[$pnt2$3 >> 1] = $60;
      $158 = $61 * 7 | 0;
      $160 = $labelInfo + 1310736 + ($158 + -7 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + 1;
      $164 = $labelInfo + 1310736 + ($158 + -6 << 2) | 0;
      HEAP32[$164 >> 2] = (HEAP32[$164 >> 2] | 0) + $i$2;
      $168 = $labelInfo + 1310736 + ($158 + -5 << 2) | 0;
      HEAP32[$168 >> 2] = (HEAP32[$168 >> 2] | 0) + $j$0;
      $172 = $labelInfo + 1310736 + ($158 + -3 << 2) | 0;
      if ((HEAP32[$172 >> 2] | 0) < ($i$2 | 0)) HEAP32[$172 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($158 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $178 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($178 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $178;
      $181 = ($178 << 16 >> 16) * 7 | 0;
      $183 = $labelInfo + 1310736 + ($181 + -7 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + 1;
      $187 = $labelInfo + 1310736 + ($181 + -6 << 2) | 0;
      HEAP32[$187 >> 2] = (HEAP32[$187 >> 2] | 0) + $i$2;
      $191 = $labelInfo + 1310736 + ($181 + -5 << 2) | 0;
      HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $j$0;
      $195 = $labelInfo + 1310736 + ($181 + -3 << 2) | 0;
      if ((HEAP32[$195 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$195 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $198 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $198;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $198 << 16 >> 16;
      $203 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($203 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($203 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($203 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($203 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($203 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($203 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($203 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $198;
      break;
     }
    }
    if ($62) {
     $65 = HEAP32[$labelInfo + 1179664 + ($57 + -1 << 2) >> 2] | 0;
     $68 = HEAP32[$labelInfo + 1179664 + ($61 + -1 << 2) >> 2] | 0;
     L36 : do if (($65 | 0) > ($68 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $68;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $83 = $68;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($65 | 0)) HEAP32[$wk$0 >> 2] = $68;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $65;
      if (($65 | 0) < ($68 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $83 = $65;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($68 | 0)) HEAP32[$wk$1 >> 2] = $65;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $83 = $65;
     } while (0);
     $85 = ($83 << 16 >> 16) * 7 | 0;
     $87 = $labelInfo + 1310736 + ($85 + -7 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 1;
     $91 = $labelInfo + 1310736 + ($85 + -6 << 2) | 0;
     HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + $i$2;
     $95 = $labelInfo + 1310736 + ($85 + -5 << 2) | 0;
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($85 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $101 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($101 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $56;
     $139 = $57 * 7 | 0;
     $141 = $labelInfo + 1310736 + ($139 + -7 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + 1;
     $145 = $labelInfo + 1310736 + ($139 + -6 << 2) | 0;
     HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + $i$2;
     $149 = $labelInfo + 1310736 + ($139 + -5 << 2) | 0;
     HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + $j$0;
     $153 = $labelInfo + 1310736 + ($139 + -4 << 2) | 0;
     if ((HEAP32[$153 >> 2] | 0) > ($i$2 | 0)) HEAP32[$153 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($139 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $106 = HEAP32[$labelInfo + 1179664 + ($57 + -1 << 2) >> 2] | 0;
    $109 = HEAP32[$labelInfo + 1179664 + (($101 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($106 | 0) > ($109 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $109;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $124 = $109;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($106 | 0)) HEAP32[$wk$2 >> 2] = $109;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $106;
     if (($106 | 0) < ($109 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $124 = $106;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($109 | 0)) HEAP32[$wk$3 >> 2] = $106;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $124 = $106;
    } while (0);
    $126 = ($124 << 16 >> 16) * 7 | 0;
    $128 = $labelInfo + 1310736 + ($126 + -7 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + 1;
    $132 = $labelInfo + 1310736 + ($126 + -6 << 2) | 0;
    HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + $i$2;
    $136 = $labelInfo + 1310736 + ($126 + -5 << 2) | 0;
    HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $223 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $225 = HEAP32[$wk$4 >> 2] | 0;
   if (($225 | 0) == ($i$3 | 0)) {
    $231 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $231 = HEAP32[$labelInfo + 1179664 + ($225 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $231;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $234 = $labelInfo + 8 | 0;
  $235 = $j$1$lcssa + -1 | 0;
  HEAP32[$234 >> 2] = $235;
  if (!$235) $$0 = 0; else {
   _memset($223 | 0, 0, $235 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $235 << 4 | 0) | 0;
   $241 = $235;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($241 | 0)) {
     $i$5 = 0;
     break;
    }
    $242 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($242 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($242 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($242 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($242 | 3) << 2) >> 2] = 0;
    $241 = HEAP32[$234 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $254 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $255 = $i$5 * 7 | 0;
    $258 = $labelInfo + 12 + ($254 << 2) | 0;
    HEAP32[$258 >> 2] = (HEAP32[$258 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($255 << 2) >> 2] | 0);
    $265 = $254 << 1;
    $266 = $labelInfo + 655376 + ($265 << 3) | 0;
    HEAPF64[$266 >> 3] = +HEAPF64[$266 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($255 + 1 << 2) >> 2] | 0);
    $274 = $labelInfo + 655376 + (($265 | 1) << 3) | 0;
    HEAPF64[$274 >> 3] = +HEAPF64[$274 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($255 + 2 << 2) >> 2] | 0);
    $277 = $254 << 2;
    $278 = $labelInfo + 131084 + ($277 << 2) | 0;
    $282 = HEAP32[$labelInfo + 1310736 + ($255 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) > ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $labelInfo + 131084 + (($277 | 1) << 2) | 0;
    $289 = HEAP32[$labelInfo + 1310736 + ($255 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) < ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $labelInfo + 131084 + (($277 | 2) << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($255 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) > ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $299 = $labelInfo + 131084 + (($277 | 3) << 2) | 0;
    $303 = HEAP32[$labelInfo + 1310736 + ($255 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$299 >> 2] | 0) < ($303 | 0)) HEAP32[$299 >> 2] = $303;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$234 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $308 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $311 = $i$6 << 1;
    $312 = $labelInfo + 655376 + ($311 << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $318 = $labelInfo + 655376 + (($311 | 1) << 3) | 0;
    HEAPF64[$318 >> 3] = +HEAPF64[$318 >> 3] / +(HEAP32[$308 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $100 = 0, $105 = 0, $108 = 0, $123 = 0, $125 = 0, $127 = 0, $131 = 0, $135 = 0, $138 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $152 = 0, $157 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $171 = 0, $177 = 0, $180 = 0, $182 = 0, $186 = 0, $190 = 0, $194 = 0, $197 = 0, $20 = 0, $202 = 0, $222 = 0, $224 = 0, $230 = 0, $233 = 0, $234 = 0, $240 = 0, $241 = 0, $253 = 0, $254 = 0, $257 = 0, $264 = 0, $265 = 0, $273 = 0, $276 = 0, $277 = 0, $281 = 0, $284 = 0, $288 = 0, $291 = 0, $295 = 0, $298 = 0, $302 = 0, $307 = 0, $310 = 0, $311 = 0, $317 = 0, $35 = 0, $36 = 0, $39 = 0, $41 = 0, $45 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $9 = 0, $90 = 0, $94 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 2) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($8 | 0)) {
    $35 = $pnt2$3 + ($20 << 1) | 0;
    $36 = HEAP16[$35 >> 1] | 0;
    if ($36 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $36;
     $39 = ($36 << 16 >> 16) * 7 | 0;
     $41 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
     HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1;
     $45 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + $i$2;
     $49 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($39 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $55 = HEAP16[$35 + 2 >> 1] | 0;
    $56 = $55 << 16 >> 16;
    $59 = HEAP16[$35 + -2 >> 1] | 0;
    $60 = $59 << 16 >> 16;
    $61 = $59 << 16 >> 16 > 0;
    if ($55 << 16 >> 16 <= 0) {
     if ($61) {
      HEAP16[$pnt2$3 >> 1] = $59;
      $157 = $60 * 7 | 0;
      $159 = $labelInfo + 1310736 + ($157 + -7 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + 1;
      $163 = $labelInfo + 1310736 + ($157 + -6 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $i$2;
      $167 = $labelInfo + 1310736 + ($157 + -5 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $j$0;
      $171 = $labelInfo + 1310736 + ($157 + -3 << 2) | 0;
      if ((HEAP32[$171 >> 2] | 0) < ($i$2 | 0)) HEAP32[$171 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($157 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $177 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($177 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $177;
      $180 = ($177 << 16 >> 16) * 7 | 0;
      $182 = $labelInfo + 1310736 + ($180 + -7 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + 1;
      $186 = $labelInfo + 1310736 + ($180 + -6 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + $i$2;
      $190 = $labelInfo + 1310736 + ($180 + -5 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $j$0;
      $194 = $labelInfo + 1310736 + ($180 + -3 << 2) | 0;
      if ((HEAP32[$194 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$194 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $197 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $197;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $197 << 16 >> 16;
      $202 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($202 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($202 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($202 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($202 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($202 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($202 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($202 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $197;
      break;
     }
    }
    if ($61) {
     $64 = HEAP32[$labelInfo + 1179664 + ($56 + -1 << 2) >> 2] | 0;
     $67 = HEAP32[$labelInfo + 1179664 + ($60 + -1 << 2) >> 2] | 0;
     L35 : do if (($64 | 0) > ($67 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $67;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $82 = $67;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($64 | 0)) HEAP32[$wk$0 >> 2] = $67;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $64;
      if (($64 | 0) < ($67 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $82 = $64;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($67 | 0)) HEAP32[$wk$1 >> 2] = $64;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $82 = $64;
     } while (0);
     $84 = ($82 << 16 >> 16) * 7 | 0;
     $86 = $labelInfo + 1310736 + ($84 + -7 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + 1;
     $90 = $labelInfo + 1310736 + ($84 + -6 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $i$2;
     $94 = $labelInfo + 1310736 + ($84 + -5 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($84 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $100 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($100 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $55;
     $138 = $56 * 7 | 0;
     $140 = $labelInfo + 1310736 + ($138 + -7 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + 1;
     $144 = $labelInfo + 1310736 + ($138 + -6 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $i$2;
     $148 = $labelInfo + 1310736 + ($138 + -5 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $j$0;
     $152 = $labelInfo + 1310736 + ($138 + -4 << 2) | 0;
     if ((HEAP32[$152 >> 2] | 0) > ($i$2 | 0)) HEAP32[$152 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($138 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $105 = HEAP32[$labelInfo + 1179664 + ($56 + -1 << 2) >> 2] | 0;
    $108 = HEAP32[$labelInfo + 1179664 + (($100 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($105 | 0) > ($108 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $108;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $123 = $108;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($105 | 0)) HEAP32[$wk$2 >> 2] = $108;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $105;
     if (($105 | 0) < ($108 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $123 = $105;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($108 | 0)) HEAP32[$wk$3 >> 2] = $105;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $123 = $105;
    } while (0);
    $125 = ($123 << 16 >> 16) * 7 | 0;
    $127 = $labelInfo + 1310736 + ($125 + -7 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + 1;
    $131 = $labelInfo + 1310736 + ($125 + -6 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $i$2;
    $135 = $labelInfo + 1310736 + ($125 + -5 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $222 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $224 = HEAP32[$wk$4 >> 2] | 0;
   if (($224 | 0) == ($i$3 | 0)) {
    $230 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $230 = HEAP32[$labelInfo + 1179664 + ($224 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $230;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $233 = $labelInfo + 8 | 0;
  $234 = $j$1$lcssa + -1 | 0;
  HEAP32[$233 >> 2] = $234;
  if (!$234) $$0 = 0; else {
   _memset($222 | 0, 0, $234 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $234 << 4 | 0) | 0;
   $240 = $234;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($240 | 0)) {
     $i$5 = 0;
     break;
    }
    $241 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($241 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($241 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($241 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($241 | 3) << 2) >> 2] = 0;
    $240 = HEAP32[$233 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $253 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $254 = $i$5 * 7 | 0;
    $257 = $labelInfo + 12 + ($253 << 2) | 0;
    HEAP32[$257 >> 2] = (HEAP32[$257 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($254 << 2) >> 2] | 0);
    $264 = $253 << 1;
    $265 = $labelInfo + 655376 + ($264 << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($254 + 1 << 2) >> 2] | 0);
    $273 = $labelInfo + 655376 + (($264 | 1) << 3) | 0;
    HEAPF64[$273 >> 3] = +HEAPF64[$273 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($254 + 2 << 2) >> 2] | 0);
    $276 = $253 << 2;
    $277 = $labelInfo + 131084 + ($276 << 2) | 0;
    $281 = HEAP32[$labelInfo + 1310736 + ($254 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$277 >> 2] | 0) > ($281 | 0)) HEAP32[$277 >> 2] = $281;
    $284 = $labelInfo + 131084 + (($276 | 1) << 2) | 0;
    $288 = HEAP32[$labelInfo + 1310736 + ($254 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$284 >> 2] | 0) < ($288 | 0)) HEAP32[$284 >> 2] = $288;
    $291 = $labelInfo + 131084 + (($276 | 2) << 2) | 0;
    $295 = HEAP32[$labelInfo + 1310736 + ($254 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$291 >> 2] | 0) > ($295 | 0)) HEAP32[$291 >> 2] = $295;
    $298 = $labelInfo + 131084 + (($276 | 3) << 2) | 0;
    $302 = HEAP32[$labelInfo + 1310736 + ($254 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$298 >> 2] | 0) < ($302 | 0)) HEAP32[$298 >> 2] = $302;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$233 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $307 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $310 = $i$6 << 1;
    $311 = $labelInfo + 655376 + ($310 << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $317 = $labelInfo + 655376 + (($310 | 1) << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $100 = 0, $105 = 0, $108 = 0, $123 = 0, $125 = 0, $127 = 0, $131 = 0, $135 = 0, $138 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $152 = 0, $157 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $171 = 0, $177 = 0, $180 = 0, $182 = 0, $186 = 0, $190 = 0, $194 = 0, $197 = 0, $20 = 0, $202 = 0, $222 = 0, $224 = 0, $230 = 0, $233 = 0, $234 = 0, $240 = 0, $241 = 0, $253 = 0, $254 = 0, $257 = 0, $264 = 0, $265 = 0, $273 = 0, $276 = 0, $277 = 0, $281 = 0, $284 = 0, $288 = 0, $291 = 0, $295 = 0, $298 = 0, $302 = 0, $307 = 0, $310 = 0, $311 = 0, $317 = 0, $35 = 0, $36 = 0, $39 = 0, $41 = 0, $45 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $9 = 0, $90 = 0, $94 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 2) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $35 = $pnt2$3 + ($20 << 1) | 0;
    $36 = HEAP16[$35 >> 1] | 0;
    if ($36 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $36;
     $39 = ($36 << 16 >> 16) * 7 | 0;
     $41 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
     HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1;
     $45 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
     HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + $i$2;
     $49 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($39 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $55 = HEAP16[$35 + 2 >> 1] | 0;
    $56 = $55 << 16 >> 16;
    $59 = HEAP16[$35 + -2 >> 1] | 0;
    $60 = $59 << 16 >> 16;
    $61 = $59 << 16 >> 16 > 0;
    if ($55 << 16 >> 16 <= 0) {
     if ($61) {
      HEAP16[$pnt2$3 >> 1] = $59;
      $157 = $60 * 7 | 0;
      $159 = $labelInfo + 1310736 + ($157 + -7 << 2) | 0;
      HEAP32[$159 >> 2] = (HEAP32[$159 >> 2] | 0) + 1;
      $163 = $labelInfo + 1310736 + ($157 + -6 << 2) | 0;
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $i$2;
      $167 = $labelInfo + 1310736 + ($157 + -5 << 2) | 0;
      HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + $j$0;
      $171 = $labelInfo + 1310736 + ($157 + -3 << 2) | 0;
      if ((HEAP32[$171 >> 2] | 0) < ($i$2 | 0)) HEAP32[$171 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($157 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $177 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($177 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $177;
      $180 = ($177 << 16 >> 16) * 7 | 0;
      $182 = $labelInfo + 1310736 + ($180 + -7 << 2) | 0;
      HEAP32[$182 >> 2] = (HEAP32[$182 >> 2] | 0) + 1;
      $186 = $labelInfo + 1310736 + ($180 + -6 << 2) | 0;
      HEAP32[$186 >> 2] = (HEAP32[$186 >> 2] | 0) + $i$2;
      $190 = $labelInfo + 1310736 + ($180 + -5 << 2) | 0;
      HEAP32[$190 >> 2] = (HEAP32[$190 >> 2] | 0) + $j$0;
      $194 = $labelInfo + 1310736 + ($180 + -3 << 2) | 0;
      if ((HEAP32[$194 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$194 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $197 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $197;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $197 << 16 >> 16;
      $202 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($202 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($202 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($202 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($202 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($202 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($202 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($202 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $197;
      break;
     }
    }
    if ($61) {
     $64 = HEAP32[$labelInfo + 1179664 + ($56 + -1 << 2) >> 2] | 0;
     $67 = HEAP32[$labelInfo + 1179664 + ($60 + -1 << 2) >> 2] | 0;
     L36 : do if (($64 | 0) > ($67 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $67;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $82 = $67;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($64 | 0)) HEAP32[$wk$0 >> 2] = $67;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $64;
      if (($64 | 0) < ($67 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $82 = $64;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($67 | 0)) HEAP32[$wk$1 >> 2] = $64;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $82 = $64;
     } while (0);
     $84 = ($82 << 16 >> 16) * 7 | 0;
     $86 = $labelInfo + 1310736 + ($84 + -7 << 2) | 0;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + 1;
     $90 = $labelInfo + 1310736 + ($84 + -6 << 2) | 0;
     HEAP32[$90 >> 2] = (HEAP32[$90 >> 2] | 0) + $i$2;
     $94 = $labelInfo + 1310736 + ($84 + -5 << 2) | 0;
     HEAP32[$94 >> 2] = (HEAP32[$94 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($84 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $100 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($100 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $55;
     $138 = $56 * 7 | 0;
     $140 = $labelInfo + 1310736 + ($138 + -7 << 2) | 0;
     HEAP32[$140 >> 2] = (HEAP32[$140 >> 2] | 0) + 1;
     $144 = $labelInfo + 1310736 + ($138 + -6 << 2) | 0;
     HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + $i$2;
     $148 = $labelInfo + 1310736 + ($138 + -5 << 2) | 0;
     HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $j$0;
     $152 = $labelInfo + 1310736 + ($138 + -4 << 2) | 0;
     if ((HEAP32[$152 >> 2] | 0) > ($i$2 | 0)) HEAP32[$152 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($138 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $105 = HEAP32[$labelInfo + 1179664 + ($56 + -1 << 2) >> 2] | 0;
    $108 = HEAP32[$labelInfo + 1179664 + (($100 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($105 | 0) > ($108 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $108;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $123 = $108;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($105 | 0)) HEAP32[$wk$2 >> 2] = $108;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $105;
     if (($105 | 0) < ($108 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $123 = $105;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($108 | 0)) HEAP32[$wk$3 >> 2] = $105;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $123 = $105;
    } while (0);
    $125 = ($123 << 16 >> 16) * 7 | 0;
    $127 = $labelInfo + 1310736 + ($125 + -7 << 2) | 0;
    HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + 1;
    $131 = $labelInfo + 1310736 + ($125 + -6 << 2) | 0;
    HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + $i$2;
    $135 = $labelInfo + 1310736 + ($125 + -5 << 2) | 0;
    HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $222 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $224 = HEAP32[$wk$4 >> 2] | 0;
   if (($224 | 0) == ($i$3 | 0)) {
    $230 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $230 = HEAP32[$labelInfo + 1179664 + ($224 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $230;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $233 = $labelInfo + 8 | 0;
  $234 = $j$1$lcssa + -1 | 0;
  HEAP32[$233 >> 2] = $234;
  if (!$234) $$0 = 0; else {
   _memset($222 | 0, 0, $234 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $234 << 4 | 0) | 0;
   $240 = $234;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($240 | 0)) {
     $i$5 = 0;
     break;
    }
    $241 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($241 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($241 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($241 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($241 | 3) << 2) >> 2] = 0;
    $240 = HEAP32[$233 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $253 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $254 = $i$5 * 7 | 0;
    $257 = $labelInfo + 12 + ($253 << 2) | 0;
    HEAP32[$257 >> 2] = (HEAP32[$257 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($254 << 2) >> 2] | 0);
    $264 = $253 << 1;
    $265 = $labelInfo + 655376 + ($264 << 3) | 0;
    HEAPF64[$265 >> 3] = +HEAPF64[$265 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($254 + 1 << 2) >> 2] | 0);
    $273 = $labelInfo + 655376 + (($264 | 1) << 3) | 0;
    HEAPF64[$273 >> 3] = +HEAPF64[$273 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($254 + 2 << 2) >> 2] | 0);
    $276 = $253 << 2;
    $277 = $labelInfo + 131084 + ($276 << 2) | 0;
    $281 = HEAP32[$labelInfo + 1310736 + ($254 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$277 >> 2] | 0) > ($281 | 0)) HEAP32[$277 >> 2] = $281;
    $284 = $labelInfo + 131084 + (($276 | 1) << 2) | 0;
    $288 = HEAP32[$labelInfo + 1310736 + ($254 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$284 >> 2] | 0) < ($288 | 0)) HEAP32[$284 >> 2] = $288;
    $291 = $labelInfo + 131084 + (($276 | 2) << 2) | 0;
    $295 = HEAP32[$labelInfo + 1310736 + ($254 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$291 >> 2] | 0) > ($295 | 0)) HEAP32[$291 >> 2] = $295;
    $298 = $labelInfo + 131084 + (($276 | 3) << 2) | 0;
    $302 = HEAP32[$labelInfo + 1310736 + ($254 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$298 >> 2] | 0) < ($302 | 0)) HEAP32[$298 >> 2] = $302;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$233 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $307 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $310 = $i$6 << 1;
    $311 = $labelInfo + 655376 + ($310 << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $317 = $labelInfo + 655376 + (($310 | 1) << 3) | 0;
    HEAPF64[$317 >> 3] = +HEAPF64[$317 >> 3] / +(HEAP32[$307 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $104 = 0, $107 = 0, $122 = 0, $124 = 0, $126 = 0, $130 = 0, $134 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $158 = 0, $16 = 0, $162 = 0, $166 = 0, $170 = 0, $176 = 0, $179 = 0, $181 = 0, $185 = 0, $189 = 0, $193 = 0, $196 = 0, $20 = 0, $201 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $306 = 0, $309 = 0, $310 = 0, $316 = 0, $34 = 0, $35 = 0, $38 = 0, $40 = 0, $44 = 0, $48 = 0, $54 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $89 = 0, $9 = 0, $93 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 * 3 | 0) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($8 | 0)) {
    $34 = $pnt2$3 + ($20 << 1) | 0;
    $35 = HEAP16[$34 >> 1] | 0;
    if ($35 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $35;
     $38 = ($35 << 16 >> 16) * 7 | 0;
     $40 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 1;
     $44 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $i$2;
     $48 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($38 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $54 = HEAP16[$34 + 2 >> 1] | 0;
    $55 = $54 << 16 >> 16;
    $58 = HEAP16[$34 + -2 >> 1] | 0;
    $59 = $58 << 16 >> 16;
    $60 = $58 << 16 >> 16 > 0;
    if ($54 << 16 >> 16 <= 0) {
     if ($60) {
      HEAP16[$pnt2$3 >> 1] = $58;
      $156 = $59 * 7 | 0;
      $158 = $labelInfo + 1310736 + ($156 + -7 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + 1;
      $162 = $labelInfo + 1310736 + ($156 + -6 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $i$2;
      $166 = $labelInfo + 1310736 + ($156 + -5 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $j$0;
      $170 = $labelInfo + 1310736 + ($156 + -3 << 2) | 0;
      if ((HEAP32[$170 >> 2] | 0) < ($i$2 | 0)) HEAP32[$170 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($156 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $176 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($176 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $176;
      $179 = ($176 << 16 >> 16) * 7 | 0;
      $181 = $labelInfo + 1310736 + ($179 + -7 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + 1;
      $185 = $labelInfo + 1310736 + ($179 + -6 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $i$2;
      $189 = $labelInfo + 1310736 + ($179 + -5 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $j$0;
      $193 = $labelInfo + 1310736 + ($179 + -3 << 2) | 0;
      if ((HEAP32[$193 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$193 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $196 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $196;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $196 << 16 >> 16;
      $201 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($201 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($201 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($201 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($201 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $196;
      break;
     }
    }
    if ($60) {
     $63 = HEAP32[$labelInfo + 1179664 + ($55 + -1 << 2) >> 2] | 0;
     $66 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
     L35 : do if (($63 | 0) > ($66 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $66;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $81 = $66;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($63 | 0)) HEAP32[$wk$0 >> 2] = $66;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $63;
      if (($63 | 0) < ($66 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $81 = $63;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($66 | 0)) HEAP32[$wk$1 >> 2] = $63;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $81 = $63;
     } while (0);
     $83 = ($81 << 16 >> 16) * 7 | 0;
     $85 = $labelInfo + 1310736 + ($83 + -7 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
     $89 = $labelInfo + 1310736 + ($83 + -6 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $i$2;
     $93 = $labelInfo + 1310736 + ($83 + -5 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($83 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $99 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($99 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $54;
     $137 = $55 * 7 | 0;
     $139 = $labelInfo + 1310736 + ($137 + -7 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
     $143 = $labelInfo + 1310736 + ($137 + -6 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $i$2;
     $147 = $labelInfo + 1310736 + ($137 + -5 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $j$0;
     $151 = $labelInfo + 1310736 + ($137 + -4 << 2) | 0;
     if ((HEAP32[$151 >> 2] | 0) > ($i$2 | 0)) HEAP32[$151 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($137 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $104 = HEAP32[$labelInfo + 1179664 + ($55 + -1 << 2) >> 2] | 0;
    $107 = HEAP32[$labelInfo + 1179664 + (($99 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($104 | 0) > ($107 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $107;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $122 = $107;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($104 | 0)) HEAP32[$wk$2 >> 2] = $107;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $104;
     if (($104 | 0) < ($107 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $122 = $104;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($107 | 0)) HEAP32[$wk$3 >> 2] = $104;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $122 = $104;
    } while (0);
    $124 = ($122 << 16 >> 16) * 7 | 0;
    $126 = $labelInfo + 1310736 + ($124 + -7 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + 1;
    $130 = $labelInfo + 1310736 + ($124 + -6 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $i$2;
    $134 = $labelInfo + 1310736 + ($124 + -5 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 3 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 6 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $223 = HEAP32[$wk$4 >> 2] | 0;
   if (($223 | 0) == ($i$3 | 0)) {
    $229 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $229 = HEAP32[$labelInfo + 1179664 + ($223 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $229;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $232 = $labelInfo + 8 | 0;
  $233 = $j$1$lcssa + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $239 = $233;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($239 | 0)) {
     $i$5 = 0;
     break;
    }
    $240 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($240 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($240 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $239 = HEAP32[$232 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $252 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $i$5 * 7 | 0;
    $256 = $labelInfo + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $labelInfo + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $labelInfo + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $labelInfo + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$labelInfo + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $labelInfo + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $labelInfo + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$labelInfo + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $309 = $i$6 << 1;
    $310 = $labelInfo + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $labelInfo + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $104 = 0, $107 = 0, $122 = 0, $124 = 0, $126 = 0, $130 = 0, $134 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $158 = 0, $16 = 0, $162 = 0, $166 = 0, $170 = 0, $176 = 0, $179 = 0, $181 = 0, $185 = 0, $189 = 0, $193 = 0, $196 = 0, $20 = 0, $201 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $306 = 0, $309 = 0, $310 = 0, $316 = 0, $34 = 0, $35 = 0, $38 = 0, $40 = 0, $44 = 0, $48 = 0, $54 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $89 = 0, $9 = 0, $93 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 * 3 | 0) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $34 = $pnt2$3 + ($20 << 1) | 0;
    $35 = HEAP16[$34 >> 1] | 0;
    if ($35 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $35;
     $38 = ($35 << 16 >> 16) * 7 | 0;
     $40 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 1;
     $44 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $i$2;
     $48 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($38 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $54 = HEAP16[$34 + 2 >> 1] | 0;
    $55 = $54 << 16 >> 16;
    $58 = HEAP16[$34 + -2 >> 1] | 0;
    $59 = $58 << 16 >> 16;
    $60 = $58 << 16 >> 16 > 0;
    if ($54 << 16 >> 16 <= 0) {
     if ($60) {
      HEAP16[$pnt2$3 >> 1] = $58;
      $156 = $59 * 7 | 0;
      $158 = $labelInfo + 1310736 + ($156 + -7 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + 1;
      $162 = $labelInfo + 1310736 + ($156 + -6 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $i$2;
      $166 = $labelInfo + 1310736 + ($156 + -5 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $j$0;
      $170 = $labelInfo + 1310736 + ($156 + -3 << 2) | 0;
      if ((HEAP32[$170 >> 2] | 0) < ($i$2 | 0)) HEAP32[$170 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($156 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $176 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($176 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $176;
      $179 = ($176 << 16 >> 16) * 7 | 0;
      $181 = $labelInfo + 1310736 + ($179 + -7 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + 1;
      $185 = $labelInfo + 1310736 + ($179 + -6 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $i$2;
      $189 = $labelInfo + 1310736 + ($179 + -5 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $j$0;
      $193 = $labelInfo + 1310736 + ($179 + -3 << 2) | 0;
      if ((HEAP32[$193 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$193 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $196 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $196;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $196 << 16 >> 16;
      $201 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($201 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($201 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($201 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($201 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $196;
      break;
     }
    }
    if ($60) {
     $63 = HEAP32[$labelInfo + 1179664 + ($55 + -1 << 2) >> 2] | 0;
     $66 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
     L36 : do if (($63 | 0) > ($66 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $66;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $81 = $66;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($63 | 0)) HEAP32[$wk$0 >> 2] = $66;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $63;
      if (($63 | 0) < ($66 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $81 = $63;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($66 | 0)) HEAP32[$wk$1 >> 2] = $63;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $81 = $63;
     } while (0);
     $83 = ($81 << 16 >> 16) * 7 | 0;
     $85 = $labelInfo + 1310736 + ($83 + -7 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
     $89 = $labelInfo + 1310736 + ($83 + -6 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $i$2;
     $93 = $labelInfo + 1310736 + ($83 + -5 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($83 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $99 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($99 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $54;
     $137 = $55 * 7 | 0;
     $139 = $labelInfo + 1310736 + ($137 + -7 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
     $143 = $labelInfo + 1310736 + ($137 + -6 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $i$2;
     $147 = $labelInfo + 1310736 + ($137 + -5 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $j$0;
     $151 = $labelInfo + 1310736 + ($137 + -4 << 2) | 0;
     if ((HEAP32[$151 >> 2] | 0) > ($i$2 | 0)) HEAP32[$151 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($137 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $104 = HEAP32[$labelInfo + 1179664 + ($55 + -1 << 2) >> 2] | 0;
    $107 = HEAP32[$labelInfo + 1179664 + (($99 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($104 | 0) > ($107 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $107;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $122 = $107;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($104 | 0)) HEAP32[$wk$2 >> 2] = $107;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $104;
     if (($104 | 0) < ($107 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $122 = $104;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($107 | 0)) HEAP32[$wk$3 >> 2] = $104;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $122 = $104;
    } while (0);
    $124 = ($122 << 16 >> 16) * 7 | 0;
    $126 = $labelInfo + 1310736 + ($124 + -7 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + 1;
    $130 = $labelInfo + 1310736 + ($124 + -6 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $i$2;
    $134 = $labelInfo + 1310736 + ($124 + -5 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 3 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 6 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $223 = HEAP32[$wk$4 >> 2] | 0;
   if (($223 | 0) == ($i$3 | 0)) {
    $229 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $229 = HEAP32[$labelInfo + 1179664 + ($223 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $229;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $232 = $labelInfo + 8 | 0;
  $233 = $j$1$lcssa + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $239 = $233;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($239 | 0)) {
     $i$5 = 0;
     break;
    }
    $240 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($240 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($240 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $239 = HEAP32[$232 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $252 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $i$5 * 7 | 0;
    $256 = $labelInfo + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $labelInfo + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $labelInfo + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $labelInfo + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$labelInfo + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $labelInfo + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $labelInfo + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$labelInfo + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $309 = $i$6 << 1;
    $310 = $labelInfo + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $labelInfo + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $104 = 0, $107 = 0, $122 = 0, $124 = 0, $126 = 0, $130 = 0, $134 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $158 = 0, $16 = 0, $162 = 0, $166 = 0, $170 = 0, $176 = 0, $179 = 0, $181 = 0, $185 = 0, $189 = 0, $193 = 0, $196 = 0, $20 = 0, $201 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $306 = 0, $309 = 0, $310 = 0, $316 = 0, $34 = 0, $35 = 0, $38 = 0, $40 = 0, $44 = 0, $48 = 0, $54 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $89 = 0, $9 = 0, $93 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 2) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($8 | 0)) {
    $34 = $pnt2$3 + ($20 << 1) | 0;
    $35 = HEAP16[$34 >> 1] | 0;
    if ($35 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $35;
     $38 = ($35 << 16 >> 16) * 7 | 0;
     $40 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 1;
     $44 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $i$2;
     $48 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($38 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $54 = HEAP16[$34 + 2 >> 1] | 0;
    $55 = $54 << 16 >> 16;
    $58 = HEAP16[$34 + -2 >> 1] | 0;
    $59 = $58 << 16 >> 16;
    $60 = $58 << 16 >> 16 > 0;
    if ($54 << 16 >> 16 <= 0) {
     if ($60) {
      HEAP16[$pnt2$3 >> 1] = $58;
      $156 = $59 * 7 | 0;
      $158 = $labelInfo + 1310736 + ($156 + -7 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + 1;
      $162 = $labelInfo + 1310736 + ($156 + -6 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $i$2;
      $166 = $labelInfo + 1310736 + ($156 + -5 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $j$0;
      $170 = $labelInfo + 1310736 + ($156 + -3 << 2) | 0;
      if ((HEAP32[$170 >> 2] | 0) < ($i$2 | 0)) HEAP32[$170 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($156 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $176 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($176 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $176;
      $179 = ($176 << 16 >> 16) * 7 | 0;
      $181 = $labelInfo + 1310736 + ($179 + -7 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + 1;
      $185 = $labelInfo + 1310736 + ($179 + -6 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $i$2;
      $189 = $labelInfo + 1310736 + ($179 + -5 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $j$0;
      $193 = $labelInfo + 1310736 + ($179 + -3 << 2) | 0;
      if ((HEAP32[$193 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$193 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $196 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $196;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $196 << 16 >> 16;
      $201 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($201 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($201 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($201 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($201 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $196;
      break;
     }
    }
    if ($60) {
     $63 = HEAP32[$labelInfo + 1179664 + ($55 + -1 << 2) >> 2] | 0;
     $66 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
     L35 : do if (($63 | 0) > ($66 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $66;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $81 = $66;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($63 | 0)) HEAP32[$wk$0 >> 2] = $66;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $63;
      if (($63 | 0) < ($66 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $81 = $63;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($66 | 0)) HEAP32[$wk$1 >> 2] = $63;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $81 = $63;
     } while (0);
     $83 = ($81 << 16 >> 16) * 7 | 0;
     $85 = $labelInfo + 1310736 + ($83 + -7 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
     $89 = $labelInfo + 1310736 + ($83 + -6 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $i$2;
     $93 = $labelInfo + 1310736 + ($83 + -5 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($83 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $99 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($99 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $54;
     $137 = $55 * 7 | 0;
     $139 = $labelInfo + 1310736 + ($137 + -7 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
     $143 = $labelInfo + 1310736 + ($137 + -6 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $i$2;
     $147 = $labelInfo + 1310736 + ($137 + -5 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $j$0;
     $151 = $labelInfo + 1310736 + ($137 + -4 << 2) | 0;
     if ((HEAP32[$151 >> 2] | 0) > ($i$2 | 0)) HEAP32[$151 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($137 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $104 = HEAP32[$labelInfo + 1179664 + ($55 + -1 << 2) >> 2] | 0;
    $107 = HEAP32[$labelInfo + 1179664 + (($99 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($104 | 0) > ($107 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $107;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $122 = $107;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($104 | 0)) HEAP32[$wk$2 >> 2] = $107;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $104;
     if (($104 | 0) < ($107 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $122 = $104;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($107 | 0)) HEAP32[$wk$3 >> 2] = $104;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $122 = $104;
    } while (0);
    $124 = ($122 << 16 >> 16) * 7 | 0;
    $126 = $labelInfo + 1310736 + ($124 + -7 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + 1;
    $130 = $labelInfo + 1310736 + ($124 + -6 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $i$2;
    $134 = $labelInfo + 1310736 + ($124 + -5 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $223 = HEAP32[$wk$4 >> 2] | 0;
   if (($223 | 0) == ($i$3 | 0)) {
    $229 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $229 = HEAP32[$labelInfo + 1179664 + ($223 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $229;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $232 = $labelInfo + 8 | 0;
  $233 = $j$1$lcssa + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $239 = $233;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($239 | 0)) {
     $i$5 = 0;
     break;
    }
    $240 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($240 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($240 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $239 = HEAP32[$232 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $252 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $i$5 * 7 | 0;
    $256 = $labelInfo + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $labelInfo + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $labelInfo + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $labelInfo + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$labelInfo + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $labelInfo + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $labelInfo + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$labelInfo + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $309 = $i$6 << 1;
    $310 = $labelInfo + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $labelInfo + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $104 = 0, $107 = 0, $122 = 0, $124 = 0, $126 = 0, $130 = 0, $134 = 0, $137 = 0, $139 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $158 = 0, $16 = 0, $162 = 0, $166 = 0, $170 = 0, $176 = 0, $179 = 0, $181 = 0, $185 = 0, $189 = 0, $193 = 0, $196 = 0, $20 = 0, $201 = 0, $221 = 0, $223 = 0, $229 = 0, $232 = 0, $233 = 0, $239 = 0, $240 = 0, $252 = 0, $253 = 0, $256 = 0, $263 = 0, $264 = 0, $272 = 0, $275 = 0, $276 = 0, $280 = 0, $283 = 0, $287 = 0, $290 = 0, $294 = 0, $297 = 0, $301 = 0, $306 = 0, $309 = 0, $310 = 0, $316 = 0, $34 = 0, $35 = 0, $38 = 0, $40 = 0, $44 = 0, $48 = 0, $54 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $89 = 0, $9 = 0, $93 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $labelingThresh * 3 | 0;
 $9 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $15 = $labelInfo + 1179664 | 0;
 $16 = $xsize + 1 | 0;
 $20 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($16 << 2) | 0;
 $pnt2$2 = $0 + ($16 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($9 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($8 | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $34 = $pnt2$3 + ($20 << 1) | 0;
    $35 = HEAP16[$34 >> 1] | 0;
    if ($35 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $35;
     $38 = ($35 << 16 >> 16) * 7 | 0;
     $40 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 1;
     $44 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $i$2;
     $48 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
     HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($38 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $54 = HEAP16[$34 + 2 >> 1] | 0;
    $55 = $54 << 16 >> 16;
    $58 = HEAP16[$34 + -2 >> 1] | 0;
    $59 = $58 << 16 >> 16;
    $60 = $58 << 16 >> 16 > 0;
    if ($54 << 16 >> 16 <= 0) {
     if ($60) {
      HEAP16[$pnt2$3 >> 1] = $58;
      $156 = $59 * 7 | 0;
      $158 = $labelInfo + 1310736 + ($156 + -7 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + 1;
      $162 = $labelInfo + 1310736 + ($156 + -6 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $i$2;
      $166 = $labelInfo + 1310736 + ($156 + -5 << 2) | 0;
      HEAP32[$166 >> 2] = (HEAP32[$166 >> 2] | 0) + $j$0;
      $170 = $labelInfo + 1310736 + ($156 + -3 << 2) | 0;
      if ((HEAP32[$170 >> 2] | 0) < ($i$2 | 0)) HEAP32[$170 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($156 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $176 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($176 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $176;
      $179 = ($176 << 16 >> 16) * 7 | 0;
      $181 = $labelInfo + 1310736 + ($179 + -7 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + 1;
      $185 = $labelInfo + 1310736 + ($179 + -6 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $i$2;
      $189 = $labelInfo + 1310736 + ($179 + -5 << 2) | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + $j$0;
      $193 = $labelInfo + 1310736 + ($179 + -3 << 2) | 0;
      if ((HEAP32[$193 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$193 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $196 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $196;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $196 << 16 >> 16;
      $201 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($201 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($201 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($201 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($201 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($201 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $196;
      break;
     }
    }
    if ($60) {
     $63 = HEAP32[$labelInfo + 1179664 + ($55 + -1 << 2) >> 2] | 0;
     $66 = HEAP32[$labelInfo + 1179664 + ($59 + -1 << 2) >> 2] | 0;
     L36 : do if (($63 | 0) > ($66 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $66;
      $k$0 = 0;
      $wk$0 = $15;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $81 = $66;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($63 | 0)) HEAP32[$wk$0 >> 2] = $66;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $63;
      if (($63 | 0) < ($66 | 0)) {
       $k$1 = 0;
       $wk$1 = $15;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $81 = $63;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($66 | 0)) HEAP32[$wk$1 >> 2] = $63;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $81 = $63;
     } while (0);
     $83 = ($81 << 16 >> 16) * 7 | 0;
     $85 = $labelInfo + 1310736 + ($83 + -7 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
     $89 = $labelInfo + 1310736 + ($83 + -6 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $i$2;
     $93 = $labelInfo + 1310736 + ($83 + -5 << 2) | 0;
     HEAP32[$93 >> 2] = (HEAP32[$93 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($83 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $99 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($99 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $54;
     $137 = $55 * 7 | 0;
     $139 = $labelInfo + 1310736 + ($137 + -7 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + 1;
     $143 = $labelInfo + 1310736 + ($137 + -6 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $i$2;
     $147 = $labelInfo + 1310736 + ($137 + -5 << 2) | 0;
     HEAP32[$147 >> 2] = (HEAP32[$147 >> 2] | 0) + $j$0;
     $151 = $labelInfo + 1310736 + ($137 + -4 << 2) | 0;
     if ((HEAP32[$151 >> 2] | 0) > ($i$2 | 0)) HEAP32[$151 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($137 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $104 = HEAP32[$labelInfo + 1179664 + ($55 + -1 << 2) >> 2] | 0;
    $107 = HEAP32[$labelInfo + 1179664 + (($99 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($104 | 0) > ($107 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $107;
     $k$2 = 0;
     $wk$2 = $15;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $122 = $107;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($104 | 0)) HEAP32[$wk$2 >> 2] = $107;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $104;
     if (($104 | 0) < ($107 | 0)) {
      $k$3 = 0;
      $wk$3 = $15;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $122 = $104;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($107 | 0)) HEAP32[$wk$3 >> 2] = $104;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $122 = $104;
    } while (0);
    $124 = ($122 << 16 >> 16) * 7 | 0;
    $126 = $labelInfo + 1310736 + ($124 + -7 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + 1;
    $130 = $labelInfo + 1310736 + ($124 + -6 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $i$2;
    $134 = $labelInfo + 1310736 + ($124 + -5 << 2) | 0;
    HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $221 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $15;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $223 = HEAP32[$wk$4 >> 2] | 0;
   if (($223 | 0) == ($i$3 | 0)) {
    $229 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $229 = HEAP32[$labelInfo + 1179664 + ($223 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $229;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $232 = $labelInfo + 8 | 0;
  $233 = $j$1$lcssa + -1 | 0;
  HEAP32[$232 >> 2] = $233;
  if (!$233) $$0 = 0; else {
   _memset($221 | 0, 0, $233 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $233 << 4 | 0) | 0;
   $239 = $233;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($239 | 0)) {
     $i$5 = 0;
     break;
    }
    $240 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($240 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($240 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($240 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($240 | 3) << 2) >> 2] = 0;
    $239 = HEAP32[$232 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $252 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $253 = $i$5 * 7 | 0;
    $256 = $labelInfo + 12 + ($252 << 2) | 0;
    HEAP32[$256 >> 2] = (HEAP32[$256 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($253 << 2) >> 2] | 0);
    $263 = $252 << 1;
    $264 = $labelInfo + 655376 + ($263 << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 1 << 2) >> 2] | 0);
    $272 = $labelInfo + 655376 + (($263 | 1) << 3) | 0;
    HEAPF64[$272 >> 3] = +HEAPF64[$272 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($253 + 2 << 2) >> 2] | 0);
    $275 = $252 << 2;
    $276 = $labelInfo + 131084 + ($275 << 2) | 0;
    $280 = HEAP32[$labelInfo + 1310736 + ($253 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$276 >> 2] | 0) > ($280 | 0)) HEAP32[$276 >> 2] = $280;
    $283 = $labelInfo + 131084 + (($275 | 1) << 2) | 0;
    $287 = HEAP32[$labelInfo + 1310736 + ($253 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$283 >> 2] | 0) < ($287 | 0)) HEAP32[$283 >> 2] = $287;
    $290 = $labelInfo + 131084 + (($275 | 2) << 2) | 0;
    $294 = HEAP32[$labelInfo + 1310736 + ($253 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$290 >> 2] | 0) > ($294 | 0)) HEAP32[$290 >> 2] = $294;
    $297 = $labelInfo + 131084 + (($275 | 3) << 2) | 0;
    $301 = HEAP32[$labelInfo + 1310736 + ($253 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$297 >> 2] | 0) < ($301 | 0)) HEAP32[$297 >> 2] = $301;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$232 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $306 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $309 = $i$6 << 1;
    $310 = $labelInfo + 655376 + ($309 << 3) | 0;
    HEAPF64[$310 >> 3] = +HEAPF64[$310 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $316 = $labelInfo + 655376 + (($309 | 1) << 3) | 0;
    HEAPF64[$316 >> 3] = +HEAPF64[$316 >> 3] / +(HEAP32[$306 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $103 = 0, $118 = 0, $120 = 0, $122 = 0, $126 = 0, $130 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $152 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $166 = 0, $172 = 0, $175 = 0, $177 = 0, $181 = 0, $185 = 0, $189 = 0, $19 = 0, $192 = 0, $197 = 0, $2 = 0, $218 = 0, $220 = 0, $226 = 0, $229 = 0, $23 = 0, $230 = 0, $236 = 0, $237 = 0, $249 = 0, $250 = 0, $253 = 0, $260 = 0, $261 = 0, $269 = 0, $272 = 0, $273 = 0, $277 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $3 = 0, $30 = 0, $303 = 0, $306 = 0, $307 = 0, $31 = 0, $313 = 0, $34 = 0, $36 = 0, $40 = 0, $44 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $62 = 0, $77 = 0, $79 = 0, $81 = 0, $85 = 0, $89 = 0, $95 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $19 = $xsize << 1;
 $23 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $30 = $pnt2$3 + ($23 << 1) | 0;
    $31 = HEAP16[$30 >> 1] | 0;
    if ($31 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $31;
     $34 = ($31 << 16 >> 16) * 7 | 0;
     $36 = $labelInfo + 1310736 + ($34 + -7 << 2) | 0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1;
     $40 = $labelInfo + 1310736 + ($34 + -6 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $i$2;
     $44 = $labelInfo + 1310736 + ($34 + -5 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($34 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $50 = HEAP16[$30 + 2 >> 1] | 0;
    $51 = $50 << 16 >> 16;
    $54 = HEAP16[$30 + -2 >> 1] | 0;
    $55 = $54 << 16 >> 16;
    $56 = $54 << 16 >> 16 > 0;
    if ($50 << 16 >> 16 <= 0) {
     if ($56) {
      HEAP16[$pnt2$3 >> 1] = $54;
      $152 = $55 * 7 | 0;
      $154 = $labelInfo + 1310736 + ($152 + -7 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
      $158 = $labelInfo + 1310736 + ($152 + -6 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $i$2;
      $162 = $labelInfo + 1310736 + ($152 + -5 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $j$0;
      $166 = $labelInfo + 1310736 + ($152 + -3 << 2) | 0;
      if ((HEAP32[$166 >> 2] | 0) < ($i$2 | 0)) HEAP32[$166 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($152 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $172 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($172 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $172;
      $175 = ($172 << 16 >> 16) * 7 | 0;
      $177 = $labelInfo + 1310736 + ($175 + -7 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + 1;
      $181 = $labelInfo + 1310736 + ($175 + -6 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + $i$2;
      $185 = $labelInfo + 1310736 + ($175 + -5 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $j$0;
      $189 = $labelInfo + 1310736 + ($175 + -3 << 2) | 0;
      if ((HEAP32[$189 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$189 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $192 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $192;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $192 << 16 >> 16;
      $197 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($197 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($197 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($197 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($197 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($197 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($197 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($197 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $192;
      break;
     }
    }
    if ($56) {
     $59 = HEAP32[$labelInfo + 1179664 + ($51 + -1 << 2) >> 2] | 0;
     $62 = HEAP32[$labelInfo + 1179664 + ($55 + -1 << 2) >> 2] | 0;
     L35 : do if (($59 | 0) > ($62 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $62;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $77 = $62;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($59 | 0)) HEAP32[$wk$0 >> 2] = $62;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $59;
      if (($59 | 0) < ($62 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $77 = $59;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($62 | 0)) HEAP32[$wk$1 >> 2] = $59;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $77 = $59;
     } while (0);
     $79 = ($77 << 16 >> 16) * 7 | 0;
     $81 = $labelInfo + 1310736 + ($79 + -7 << 2) | 0;
     HEAP32[$81 >> 2] = (HEAP32[$81 >> 2] | 0) + 1;
     $85 = $labelInfo + 1310736 + ($79 + -6 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + $i$2;
     $89 = $labelInfo + 1310736 + ($79 + -5 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($79 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $95 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($95 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $50;
     $133 = $51 * 7 | 0;
     $135 = $labelInfo + 1310736 + ($133 + -7 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
     $139 = $labelInfo + 1310736 + ($133 + -6 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $i$2;
     $143 = $labelInfo + 1310736 + ($133 + -5 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $j$0;
     $147 = $labelInfo + 1310736 + ($133 + -4 << 2) | 0;
     if ((HEAP32[$147 >> 2] | 0) > ($i$2 | 0)) HEAP32[$147 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($133 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $100 = HEAP32[$labelInfo + 1179664 + ($51 + -1 << 2) >> 2] | 0;
    $103 = HEAP32[$labelInfo + 1179664 + (($95 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($100 | 0) > ($103 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $103;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $118 = $103;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($100 | 0)) HEAP32[$wk$2 >> 2] = $103;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $100;
     if (($100 | 0) < ($103 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $118 = $100;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($103 | 0)) HEAP32[$wk$3 >> 2] = $100;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $118 = $100;
    } while (0);
    $120 = ($118 << 16 >> 16) * 7 | 0;
    $122 = $labelInfo + 1310736 + ($120 + -7 << 2) | 0;
    HEAP32[$122 >> 2] = (HEAP32[$122 >> 2] | 0) + 1;
    $126 = $labelInfo + 1310736 + ($120 + -6 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + $i$2;
    $130 = $labelInfo + 1310736 + ($120 + -5 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $19 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $218 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $220 = HEAP32[$wk$4 >> 2] | 0;
   if (($220 | 0) == ($i$3 | 0)) {
    $226 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $226 = HEAP32[$labelInfo + 1179664 + ($220 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $226;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $229 = $labelInfo + 8 | 0;
  $230 = $j$1$lcssa + -1 | 0;
  HEAP32[$229 >> 2] = $230;
  if (!$230) $$0 = 0; else {
   _memset($218 | 0, 0, $230 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $230 << 4 | 0) | 0;
   $236 = $230;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($236 | 0)) {
     $i$5 = 0;
     break;
    }
    $237 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($237 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($237 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($237 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($237 | 3) << 2) >> 2] = 0;
    $236 = HEAP32[$229 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $249 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $250 = $i$5 * 7 | 0;
    $253 = $labelInfo + 12 + ($249 << 2) | 0;
    HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($250 << 2) >> 2] | 0);
    $260 = $249 << 1;
    $261 = $labelInfo + 655376 + ($260 << 3) | 0;
    HEAPF64[$261 >> 3] = +HEAPF64[$261 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($250 + 1 << 2) >> 2] | 0);
    $269 = $labelInfo + 655376 + (($260 | 1) << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($250 + 2 << 2) >> 2] | 0);
    $272 = $249 << 2;
    $273 = $labelInfo + 131084 + ($272 << 2) | 0;
    $277 = HEAP32[$labelInfo + 1310736 + ($250 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) > ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $labelInfo + 131084 + (($272 | 1) << 2) | 0;
    $284 = HEAP32[$labelInfo + 1310736 + ($250 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) < ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $labelInfo + 131084 + (($272 | 2) << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($250 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($272 | 3) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($250 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$229 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $303 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $306 = $i$6 << 1;
    $307 = $labelInfo + 655376 + ($306 << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $313 = $labelInfo + 655376 + (($306 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $103 = 0, $118 = 0, $120 = 0, $122 = 0, $126 = 0, $130 = 0, $133 = 0, $135 = 0, $139 = 0, $143 = 0, $147 = 0, $152 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $166 = 0, $172 = 0, $175 = 0, $177 = 0, $181 = 0, $185 = 0, $189 = 0, $19 = 0, $192 = 0, $197 = 0, $2 = 0, $218 = 0, $220 = 0, $226 = 0, $229 = 0, $23 = 0, $230 = 0, $236 = 0, $237 = 0, $249 = 0, $250 = 0, $253 = 0, $260 = 0, $261 = 0, $269 = 0, $272 = 0, $273 = 0, $277 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $294 = 0, $298 = 0, $3 = 0, $30 = 0, $303 = 0, $306 = 0, $307 = 0, $31 = 0, $313 = 0, $34 = 0, $36 = 0, $40 = 0, $44 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $62 = 0, $77 = 0, $79 = 0, $81 = 0, $85 = 0, $89 = 0, $95 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $19 = $xsize << 1;
 $23 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $30 = $pnt2$3 + ($23 << 1) | 0;
    $31 = HEAP16[$30 >> 1] | 0;
    if ($31 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $31;
     $34 = ($31 << 16 >> 16) * 7 | 0;
     $36 = $labelInfo + 1310736 + ($34 + -7 << 2) | 0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1;
     $40 = $labelInfo + 1310736 + ($34 + -6 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $i$2;
     $44 = $labelInfo + 1310736 + ($34 + -5 << 2) | 0;
     HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($34 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $50 = HEAP16[$30 + 2 >> 1] | 0;
    $51 = $50 << 16 >> 16;
    $54 = HEAP16[$30 + -2 >> 1] | 0;
    $55 = $54 << 16 >> 16;
    $56 = $54 << 16 >> 16 > 0;
    if ($50 << 16 >> 16 <= 0) {
     if ($56) {
      HEAP16[$pnt2$3 >> 1] = $54;
      $152 = $55 * 7 | 0;
      $154 = $labelInfo + 1310736 + ($152 + -7 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 1;
      $158 = $labelInfo + 1310736 + ($152 + -6 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $i$2;
      $162 = $labelInfo + 1310736 + ($152 + -5 << 2) | 0;
      HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + $j$0;
      $166 = $labelInfo + 1310736 + ($152 + -3 << 2) | 0;
      if ((HEAP32[$166 >> 2] | 0) < ($i$2 | 0)) HEAP32[$166 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($152 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $172 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($172 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $172;
      $175 = ($172 << 16 >> 16) * 7 | 0;
      $177 = $labelInfo + 1310736 + ($175 + -7 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + 1;
      $181 = $labelInfo + 1310736 + ($175 + -6 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + $i$2;
      $185 = $labelInfo + 1310736 + ($175 + -5 << 2) | 0;
      HEAP32[$185 >> 2] = (HEAP32[$185 >> 2] | 0) + $j$0;
      $189 = $labelInfo + 1310736 + ($175 + -3 << 2) | 0;
      if ((HEAP32[$189 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$189 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $192 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $192;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $192 << 16 >> 16;
      $197 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($197 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($197 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($197 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($197 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($197 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($197 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($197 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $192;
      break;
     }
    }
    if ($56) {
     $59 = HEAP32[$labelInfo + 1179664 + ($51 + -1 << 2) >> 2] | 0;
     $62 = HEAP32[$labelInfo + 1179664 + ($55 + -1 << 2) >> 2] | 0;
     L36 : do if (($59 | 0) > ($62 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $62;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $77 = $62;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($59 | 0)) HEAP32[$wk$0 >> 2] = $62;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $59;
      if (($59 | 0) < ($62 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $77 = $59;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($62 | 0)) HEAP32[$wk$1 >> 2] = $59;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $77 = $59;
     } while (0);
     $79 = ($77 << 16 >> 16) * 7 | 0;
     $81 = $labelInfo + 1310736 + ($79 + -7 << 2) | 0;
     HEAP32[$81 >> 2] = (HEAP32[$81 >> 2] | 0) + 1;
     $85 = $labelInfo + 1310736 + ($79 + -6 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + $i$2;
     $89 = $labelInfo + 1310736 + ($79 + -5 << 2) | 0;
     HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($79 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $95 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($95 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $50;
     $133 = $51 * 7 | 0;
     $135 = $labelInfo + 1310736 + ($133 + -7 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + 1;
     $139 = $labelInfo + 1310736 + ($133 + -6 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $i$2;
     $143 = $labelInfo + 1310736 + ($133 + -5 << 2) | 0;
     HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + $j$0;
     $147 = $labelInfo + 1310736 + ($133 + -4 << 2) | 0;
     if ((HEAP32[$147 >> 2] | 0) > ($i$2 | 0)) HEAP32[$147 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($133 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $100 = HEAP32[$labelInfo + 1179664 + ($51 + -1 << 2) >> 2] | 0;
    $103 = HEAP32[$labelInfo + 1179664 + (($95 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($100 | 0) > ($103 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $103;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $118 = $103;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($100 | 0)) HEAP32[$wk$2 >> 2] = $103;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $100;
     if (($100 | 0) < ($103 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $118 = $100;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($103 | 0)) HEAP32[$wk$3 >> 2] = $100;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $118 = $100;
    } while (0);
    $120 = ($118 << 16 >> 16) * 7 | 0;
    $122 = $labelInfo + 1310736 + ($120 + -7 << 2) | 0;
    HEAP32[$122 >> 2] = (HEAP32[$122 >> 2] | 0) + 1;
    $126 = $labelInfo + 1310736 + ($120 + -6 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + $i$2;
    $130 = $labelInfo + 1310736 + ($120 + -5 << 2) | 0;
    HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $19 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $218 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $220 = HEAP32[$wk$4 >> 2] | 0;
   if (($220 | 0) == ($i$3 | 0)) {
    $226 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $226 = HEAP32[$labelInfo + 1179664 + ($220 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $226;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $229 = $labelInfo + 8 | 0;
  $230 = $j$1$lcssa + -1 | 0;
  HEAP32[$229 >> 2] = $230;
  if (!$230) $$0 = 0; else {
   _memset($218 | 0, 0, $230 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $230 << 4 | 0) | 0;
   $236 = $230;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($236 | 0)) {
     $i$5 = 0;
     break;
    }
    $237 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($237 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($237 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($237 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($237 | 3) << 2) >> 2] = 0;
    $236 = HEAP32[$229 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $249 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $250 = $i$5 * 7 | 0;
    $253 = $labelInfo + 12 + ($249 << 2) | 0;
    HEAP32[$253 >> 2] = (HEAP32[$253 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($250 << 2) >> 2] | 0);
    $260 = $249 << 1;
    $261 = $labelInfo + 655376 + ($260 << 3) | 0;
    HEAPF64[$261 >> 3] = +HEAPF64[$261 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($250 + 1 << 2) >> 2] | 0);
    $269 = $labelInfo + 655376 + (($260 | 1) << 3) | 0;
    HEAPF64[$269 >> 3] = +HEAPF64[$269 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($250 + 2 << 2) >> 2] | 0);
    $272 = $249 << 2;
    $273 = $labelInfo + 131084 + ($272 << 2) | 0;
    $277 = HEAP32[$labelInfo + 1310736 + ($250 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) > ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $labelInfo + 131084 + (($272 | 1) << 2) | 0;
    $284 = HEAP32[$labelInfo + 1310736 + ($250 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) < ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $labelInfo + 131084 + (($272 | 2) << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($250 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) > ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $294 = $labelInfo + 131084 + (($272 | 3) << 2) | 0;
    $298 = HEAP32[$labelInfo + 1310736 + ($250 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$294 >> 2] | 0) < ($298 | 0)) HEAP32[$294 >> 2] = $298;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$229 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $303 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $306 = $i$6 << 1;
    $307 = $labelInfo + 655376 + ($306 << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $313 = $labelInfo + 655376 + (($306 | 1) << 3) | 0;
    HEAPF64[$313 >> 3] = +HEAPF64[$313 >> 3] / +(HEAP32[$303 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $117 = 0, $119 = 0, $121 = 0, $125 = 0, $129 = 0, $132 = 0, $134 = 0, $138 = 0, $142 = 0, $146 = 0, $151 = 0, $153 = 0, $157 = 0, $16 = 0, $161 = 0, $165 = 0, $171 = 0, $174 = 0, $176 = 0, $180 = 0, $184 = 0, $188 = 0, $19 = 0, $191 = 0, $196 = 0, $2 = 0, $217 = 0, $219 = 0, $225 = 0, $228 = 0, $229 = 0, $23 = 0, $235 = 0, $236 = 0, $248 = 0, $249 = 0, $252 = 0, $259 = 0, $260 = 0, $268 = 0, $271 = 0, $272 = 0, $276 = 0, $279 = 0, $283 = 0, $286 = 0, $29 = 0, $290 = 0, $293 = 0, $297 = 0, $3 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $312 = 0, $33 = 0, $35 = 0, $39 = 0, $43 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $76 = 0, $78 = 0, $80 = 0, $84 = 0, $88 = 0, $94 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $19 = $xsize << 1;
 $23 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $29 = $pnt2$3 + ($23 << 1) | 0;
    $30 = HEAP16[$29 >> 1] | 0;
    if ($30 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $30;
     $33 = ($30 << 16 >> 16) * 7 | 0;
     $35 = $labelInfo + 1310736 + ($33 + -7 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 1;
     $39 = $labelInfo + 1310736 + ($33 + -6 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $i$2;
     $43 = $labelInfo + 1310736 + ($33 + -5 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($33 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $49 = HEAP16[$29 + 2 >> 1] | 0;
    $50 = $49 << 16 >> 16;
    $53 = HEAP16[$29 + -2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $55 = $53 << 16 >> 16 > 0;
    if ($49 << 16 >> 16 <= 0) {
     if ($55) {
      HEAP16[$pnt2$3 >> 1] = $53;
      $151 = $54 * 7 | 0;
      $153 = $labelInfo + 1310736 + ($151 + -7 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $labelInfo + 1310736 + ($151 + -6 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $i$2;
      $161 = $labelInfo + 1310736 + ($151 + -5 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $j$0;
      $165 = $labelInfo + 1310736 + ($151 + -3 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($i$2 | 0)) HEAP32[$165 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($151 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $171 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($171 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $171;
      $174 = ($171 << 16 >> 16) * 7 | 0;
      $176 = $labelInfo + 1310736 + ($174 + -7 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1;
      $180 = $labelInfo + 1310736 + ($174 + -6 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $i$2;
      $184 = $labelInfo + 1310736 + ($174 + -5 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $j$0;
      $188 = $labelInfo + 1310736 + ($174 + -3 << 2) | 0;
      if ((HEAP32[$188 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$188 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $191 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $191;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $191 << 16 >> 16;
      $196 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($196 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($196 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($196 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($196 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $191;
      break;
     }
    }
    if ($55) {
     $58 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
     $61 = HEAP32[$labelInfo + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     L35 : do if (($58 | 0) > ($61 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $61;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $76 = $61;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($58 | 0)) HEAP32[$wk$0 >> 2] = $61;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $58;
      if (($58 | 0) < ($61 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $76 = $58;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($61 | 0)) HEAP32[$wk$1 >> 2] = $58;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $76 = $58;
     } while (0);
     $78 = ($76 << 16 >> 16) * 7 | 0;
     $80 = $labelInfo + 1310736 + ($78 + -7 << 2) | 0;
     HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 1;
     $84 = $labelInfo + 1310736 + ($78 + -6 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + $i$2;
     $88 = $labelInfo + 1310736 + ($78 + -5 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($78 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $94 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($94 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $49;
     $132 = $50 * 7 | 0;
     $134 = $labelInfo + 1310736 + ($132 + -7 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
     $138 = $labelInfo + 1310736 + ($132 + -6 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $i$2;
     $142 = $labelInfo + 1310736 + ($132 + -5 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $j$0;
     $146 = $labelInfo + 1310736 + ($132 + -4 << 2) | 0;
     if ((HEAP32[$146 >> 2] | 0) > ($i$2 | 0)) HEAP32[$146 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($132 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $99 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
    $102 = HEAP32[$labelInfo + 1179664 + (($94 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($99 | 0) > ($102 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $102;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $117 = $102;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($99 | 0)) HEAP32[$wk$2 >> 2] = $102;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $99;
     if (($99 | 0) < ($102 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $117 = $99;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($102 | 0)) HEAP32[$wk$3 >> 2] = $99;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $117 = $99;
    } while (0);
    $119 = ($117 << 16 >> 16) * 7 | 0;
    $121 = $labelInfo + 1310736 + ($119 + -7 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + 1;
    $125 = $labelInfo + 1310736 + ($119 + -6 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $i$2;
    $129 = $labelInfo + 1310736 + ($119 + -5 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $19 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $217 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $219 = HEAP32[$wk$4 >> 2] | 0;
   if (($219 | 0) == ($i$3 | 0)) {
    $225 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $225 = HEAP32[$labelInfo + 1179664 + ($219 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $225;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $228 = $labelInfo + 8 | 0;
  $229 = $j$1$lcssa + -1 | 0;
  HEAP32[$228 >> 2] = $229;
  if (!$229) $$0 = 0; else {
   _memset($217 | 0, 0, $229 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $229 << 4 | 0) | 0;
   $235 = $229;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($235 | 0)) {
     $i$5 = 0;
     break;
    }
    $236 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($236 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($236 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($236 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($236 | 3) << 2) >> 2] = 0;
    $235 = HEAP32[$228 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $248 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $249 = $i$5 * 7 | 0;
    $252 = $labelInfo + 12 + ($248 << 2) | 0;
    HEAP32[$252 >> 2] = (HEAP32[$252 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($249 << 2) >> 2] | 0);
    $259 = $248 << 1;
    $260 = $labelInfo + 655376 + ($259 << 3) | 0;
    HEAPF64[$260 >> 3] = +HEAPF64[$260 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($249 + 1 << 2) >> 2] | 0);
    $268 = $labelInfo + 655376 + (($259 | 1) << 3) | 0;
    HEAPF64[$268 >> 3] = +HEAPF64[$268 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($249 + 2 << 2) >> 2] | 0);
    $271 = $248 << 2;
    $272 = $labelInfo + 131084 + ($271 << 2) | 0;
    $276 = HEAP32[$labelInfo + 1310736 + ($249 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$272 >> 2] | 0) > ($276 | 0)) HEAP32[$272 >> 2] = $276;
    $279 = $labelInfo + 131084 + (($271 | 1) << 2) | 0;
    $283 = HEAP32[$labelInfo + 1310736 + ($249 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$279 >> 2] | 0) < ($283 | 0)) HEAP32[$279 >> 2] = $283;
    $286 = $labelInfo + 131084 + (($271 | 2) << 2) | 0;
    $290 = HEAP32[$labelInfo + 1310736 + ($249 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $labelInfo + 131084 + (($271 | 3) << 2) | 0;
    $297 = HEAP32[$labelInfo + 1310736 + ($249 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$228 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $302 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $305 = $i$6 << 1;
    $306 = $labelInfo + 655376 + ($305 << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $312 = $labelInfo + 655376 + (($305 | 1) << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $117 = 0, $119 = 0, $121 = 0, $125 = 0, $129 = 0, $132 = 0, $134 = 0, $138 = 0, $142 = 0, $146 = 0, $151 = 0, $153 = 0, $157 = 0, $16 = 0, $161 = 0, $165 = 0, $171 = 0, $174 = 0, $176 = 0, $180 = 0, $184 = 0, $188 = 0, $19 = 0, $191 = 0, $196 = 0, $2 = 0, $217 = 0, $219 = 0, $225 = 0, $228 = 0, $229 = 0, $23 = 0, $235 = 0, $236 = 0, $248 = 0, $249 = 0, $252 = 0, $259 = 0, $260 = 0, $268 = 0, $271 = 0, $272 = 0, $276 = 0, $279 = 0, $283 = 0, $286 = 0, $29 = 0, $290 = 0, $293 = 0, $297 = 0, $3 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $312 = 0, $33 = 0, $35 = 0, $39 = 0, $43 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $76 = 0, $78 = 0, $80 = 0, $84 = 0, $88 = 0, $94 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $19 = $xsize << 1;
 $23 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $29 = $pnt2$3 + ($23 << 1) | 0;
    $30 = HEAP16[$29 >> 1] | 0;
    if ($30 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $30;
     $33 = ($30 << 16 >> 16) * 7 | 0;
     $35 = $labelInfo + 1310736 + ($33 + -7 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + 1;
     $39 = $labelInfo + 1310736 + ($33 + -6 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $i$2;
     $43 = $labelInfo + 1310736 + ($33 + -5 << 2) | 0;
     HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($33 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $49 = HEAP16[$29 + 2 >> 1] | 0;
    $50 = $49 << 16 >> 16;
    $53 = HEAP16[$29 + -2 >> 1] | 0;
    $54 = $53 << 16 >> 16;
    $55 = $53 << 16 >> 16 > 0;
    if ($49 << 16 >> 16 <= 0) {
     if ($55) {
      HEAP16[$pnt2$3 >> 1] = $53;
      $151 = $54 * 7 | 0;
      $153 = $labelInfo + 1310736 + ($151 + -7 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + 1;
      $157 = $labelInfo + 1310736 + ($151 + -6 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $i$2;
      $161 = $labelInfo + 1310736 + ($151 + -5 << 2) | 0;
      HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + $j$0;
      $165 = $labelInfo + 1310736 + ($151 + -3 << 2) | 0;
      if ((HEAP32[$165 >> 2] | 0) < ($i$2 | 0)) HEAP32[$165 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($151 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $171 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($171 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $171;
      $174 = ($171 << 16 >> 16) * 7 | 0;
      $176 = $labelInfo + 1310736 + ($174 + -7 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1;
      $180 = $labelInfo + 1310736 + ($174 + -6 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $i$2;
      $184 = $labelInfo + 1310736 + ($174 + -5 << 2) | 0;
      HEAP32[$184 >> 2] = (HEAP32[$184 >> 2] | 0) + $j$0;
      $188 = $labelInfo + 1310736 + ($174 + -3 << 2) | 0;
      if ((HEAP32[$188 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$188 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $191 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $191;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $191 << 16 >> 16;
      $196 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($196 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($196 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($196 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($196 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($196 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $191;
      break;
     }
    }
    if ($55) {
     $58 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
     $61 = HEAP32[$labelInfo + 1179664 + ($54 + -1 << 2) >> 2] | 0;
     L36 : do if (($58 | 0) > ($61 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $61;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $76 = $61;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($58 | 0)) HEAP32[$wk$0 >> 2] = $61;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $58;
      if (($58 | 0) < ($61 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $76 = $58;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($61 | 0)) HEAP32[$wk$1 >> 2] = $58;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $76 = $58;
     } while (0);
     $78 = ($76 << 16 >> 16) * 7 | 0;
     $80 = $labelInfo + 1310736 + ($78 + -7 << 2) | 0;
     HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 1;
     $84 = $labelInfo + 1310736 + ($78 + -6 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + $i$2;
     $88 = $labelInfo + 1310736 + ($78 + -5 << 2) | 0;
     HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($78 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $94 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($94 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $49;
     $132 = $50 * 7 | 0;
     $134 = $labelInfo + 1310736 + ($132 + -7 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + 1;
     $138 = $labelInfo + 1310736 + ($132 + -6 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $i$2;
     $142 = $labelInfo + 1310736 + ($132 + -5 << 2) | 0;
     HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $j$0;
     $146 = $labelInfo + 1310736 + ($132 + -4 << 2) | 0;
     if ((HEAP32[$146 >> 2] | 0) > ($i$2 | 0)) HEAP32[$146 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($132 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $99 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
    $102 = HEAP32[$labelInfo + 1179664 + (($94 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($99 | 0) > ($102 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $102;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $117 = $102;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($99 | 0)) HEAP32[$wk$2 >> 2] = $102;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $99;
     if (($99 | 0) < ($102 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $117 = $99;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($102 | 0)) HEAP32[$wk$3 >> 2] = $99;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $117 = $99;
    } while (0);
    $119 = ($117 << 16 >> 16) * 7 | 0;
    $121 = $labelInfo + 1310736 + ($119 + -7 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + 1;
    $125 = $labelInfo + 1310736 + ($119 + -6 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $i$2;
    $129 = $labelInfo + 1310736 + ($119 + -5 << 2) | 0;
    HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $19 + 8 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $217 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $219 = HEAP32[$wk$4 >> 2] | 0;
   if (($219 | 0) == ($i$3 | 0)) {
    $225 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $225 = HEAP32[$labelInfo + 1179664 + ($219 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $225;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $228 = $labelInfo + 8 | 0;
  $229 = $j$1$lcssa + -1 | 0;
  HEAP32[$228 >> 2] = $229;
  if (!$229) $$0 = 0; else {
   _memset($217 | 0, 0, $229 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $229 << 4 | 0) | 0;
   $235 = $229;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($235 | 0)) {
     $i$5 = 0;
     break;
    }
    $236 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($236 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($236 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($236 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($236 | 3) << 2) >> 2] = 0;
    $235 = HEAP32[$228 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $248 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $249 = $i$5 * 7 | 0;
    $252 = $labelInfo + 12 + ($248 << 2) | 0;
    HEAP32[$252 >> 2] = (HEAP32[$252 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($249 << 2) >> 2] | 0);
    $259 = $248 << 1;
    $260 = $labelInfo + 655376 + ($259 << 3) | 0;
    HEAPF64[$260 >> 3] = +HEAPF64[$260 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($249 + 1 << 2) >> 2] | 0);
    $268 = $labelInfo + 655376 + (($259 | 1) << 3) | 0;
    HEAPF64[$268 >> 3] = +HEAPF64[$268 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($249 + 2 << 2) >> 2] | 0);
    $271 = $248 << 2;
    $272 = $labelInfo + 131084 + ($271 << 2) | 0;
    $276 = HEAP32[$labelInfo + 1310736 + ($249 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$272 >> 2] | 0) > ($276 | 0)) HEAP32[$272 >> 2] = $276;
    $279 = $labelInfo + 131084 + (($271 | 1) << 2) | 0;
    $283 = HEAP32[$labelInfo + 1310736 + ($249 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$279 >> 2] | 0) < ($283 | 0)) HEAP32[$279 >> 2] = $283;
    $286 = $labelInfo + 131084 + (($271 | 2) << 2) | 0;
    $290 = HEAP32[$labelInfo + 1310736 + ($249 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$286 >> 2] | 0) > ($290 | 0)) HEAP32[$286 >> 2] = $290;
    $293 = $labelInfo + 131084 + (($271 | 3) << 2) | 0;
    $297 = HEAP32[$labelInfo + 1310736 + ($249 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$293 >> 2] | 0) < ($297 | 0)) HEAP32[$293 >> 2] = $297;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$228 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $302 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $305 = $i$6 << 1;
    $306 = $labelInfo + 655376 + ($305 << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $312 = $labelInfo + 655376 + (($305 | 1) << 3) | 0;
    HEAPF64[$312 >> 3] = +HEAPF64[$312 >> 3] / +(HEAP32[$302 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $116 = 0, $118 = 0, $120 = 0, $124 = 0, $128 = 0, $131 = 0, $133 = 0, $137 = 0, $141 = 0, $145 = 0, $150 = 0, $152 = 0, $156 = 0, $16 = 0, $160 = 0, $164 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $187 = 0, $190 = 0, $195 = 0, $2 = 0, $216 = 0, $218 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $234 = 0, $235 = 0, $247 = 0, $248 = 0, $251 = 0, $258 = 0, $259 = 0, $267 = 0, $270 = 0, $271 = 0, $275 = 0, $278 = 0, $28 = 0, $282 = 0, $285 = 0, $289 = 0, $29 = 0, $292 = 0, $296 = 0, $3 = 0, $301 = 0, $304 = 0, $305 = 0, $311 = 0, $32 = 0, $34 = 0, $38 = 0, $42 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $60 = 0, $75 = 0, $77 = 0, $79 = 0, $83 = 0, $87 = 0, $93 = 0, $98 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $22 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 1) + 2) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $28 = $pnt2$3 + ($22 << 1) | 0;
    $29 = HEAP16[$28 >> 1] | 0;
    if ($29 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $29;
     $32 = ($29 << 16 >> 16) * 7 | 0;
     $34 = $labelInfo + 1310736 + ($32 + -7 << 2) | 0;
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 1;
     $38 = $labelInfo + 1310736 + ($32 + -6 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + $i$2;
     $42 = $labelInfo + 1310736 + ($32 + -5 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($32 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $48 = HEAP16[$28 + 2 >> 1] | 0;
    $49 = $48 << 16 >> 16;
    $52 = HEAP16[$28 + -2 >> 1] | 0;
    $53 = $52 << 16 >> 16;
    $54 = $52 << 16 >> 16 > 0;
    if ($48 << 16 >> 16 <= 0) {
     if ($54) {
      HEAP16[$pnt2$3 >> 1] = $52;
      $150 = $53 * 7 | 0;
      $152 = $labelInfo + 1310736 + ($150 + -7 << 2) | 0;
      HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
      $156 = $labelInfo + 1310736 + ($150 + -6 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $i$2;
      $160 = $labelInfo + 1310736 + ($150 + -5 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $j$0;
      $164 = $labelInfo + 1310736 + ($150 + -3 << 2) | 0;
      if ((HEAP32[$164 >> 2] | 0) < ($i$2 | 0)) HEAP32[$164 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($150 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $170 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $labelInfo + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $labelInfo + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $i$2;
      $183 = $labelInfo + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $j$0;
      $187 = $labelInfo + 1310736 + ($173 + -3 << 2) | 0;
      if ((HEAP32[$187 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$187 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $190 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $190;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($195 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $190;
      break;
     }
    }
    if ($54) {
     $57 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
     $60 = HEAP32[$labelInfo + 1179664 + ($53 + -1 << 2) >> 2] | 0;
     L36 : do if (($57 | 0) > ($60 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $60;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $75 = $60;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($57 | 0)) HEAP32[$wk$0 >> 2] = $60;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $57;
      if (($57 | 0) < ($60 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $75 = $57;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($60 | 0)) HEAP32[$wk$1 >> 2] = $57;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $75 = $57;
     } while (0);
     $77 = ($75 << 16 >> 16) * 7 | 0;
     $79 = $labelInfo + 1310736 + ($77 + -7 << 2) | 0;
     HEAP32[$79 >> 2] = (HEAP32[$79 >> 2] | 0) + 1;
     $83 = $labelInfo + 1310736 + ($77 + -6 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + $i$2;
     $87 = $labelInfo + 1310736 + ($77 + -5 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($77 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $93 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($93 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $48;
     $131 = $49 * 7 | 0;
     $133 = $labelInfo + 1310736 + ($131 + -7 << 2) | 0;
     HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
     $137 = $labelInfo + 1310736 + ($131 + -6 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $i$2;
     $141 = $labelInfo + 1310736 + ($131 + -5 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $j$0;
     $145 = $labelInfo + 1310736 + ($131 + -4 << 2) | 0;
     if ((HEAP32[$145 >> 2] | 0) > ($i$2 | 0)) HEAP32[$145 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($131 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $98 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
    $101 = HEAP32[$labelInfo + 1179664 + (($93 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($98 | 0) > ($101 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $101;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $116 = $101;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($98 | 0)) HEAP32[$wk$2 >> 2] = $101;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $98;
     if (($98 | 0) < ($101 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $116 = $98;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($101 | 0)) HEAP32[$wk$3 >> 2] = $98;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $116 = $98;
    } while (0);
    $118 = ($116 << 16 >> 16) * 7 | 0;
    $120 = $labelInfo + 1310736 + ($118 + -7 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + 1;
    $124 = $labelInfo + 1310736 + ($118 + -6 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $i$2;
    $128 = $labelInfo + 1310736 + ($118 + -5 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $xsize + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $216 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $218 = HEAP32[$wk$4 >> 2] | 0;
   if (($218 | 0) == ($i$3 | 0)) {
    $224 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $224 = HEAP32[$labelInfo + 1179664 + ($218 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $224;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $227 = $labelInfo + 8 | 0;
  $228 = $j$1$lcssa + -1 | 0;
  HEAP32[$227 >> 2] = $228;
  if (!$228) $$0 = 0; else {
   _memset($216 | 0, 0, $228 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $228 << 4 | 0) | 0;
   $234 = $228;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($234 | 0)) {
     $i$5 = 0;
     break;
    }
    $235 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($235 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($235 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($235 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($235 | 3) << 2) >> 2] = 0;
    $234 = HEAP32[$227 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $247 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $248 = $i$5 * 7 | 0;
    $251 = $labelInfo + 12 + ($247 << 2) | 0;
    HEAP32[$251 >> 2] = (HEAP32[$251 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($248 << 2) >> 2] | 0);
    $258 = $247 << 1;
    $259 = $labelInfo + 655376 + ($258 << 3) | 0;
    HEAPF64[$259 >> 3] = +HEAPF64[$259 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($248 + 1 << 2) >> 2] | 0);
    $267 = $labelInfo + 655376 + (($258 | 1) << 3) | 0;
    HEAPF64[$267 >> 3] = +HEAPF64[$267 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($248 + 2 << 2) >> 2] | 0);
    $270 = $247 << 2;
    $271 = $labelInfo + 131084 + ($270 << 2) | 0;
    $275 = HEAP32[$labelInfo + 1310736 + ($248 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$271 >> 2] | 0) > ($275 | 0)) HEAP32[$271 >> 2] = $275;
    $278 = $labelInfo + 131084 + (($270 | 1) << 2) | 0;
    $282 = HEAP32[$labelInfo + 1310736 + ($248 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) < ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $labelInfo + 131084 + (($270 | 2) << 2) | 0;
    $289 = HEAP32[$labelInfo + 1310736 + ($248 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) > ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $labelInfo + 131084 + (($270 | 3) << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($248 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) < ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$227 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $301 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $304 = $i$6 << 1;
    $305 = $labelInfo + 655376 + ($304 << 3) | 0;
    HEAPF64[$305 >> 3] = +HEAPF64[$305 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $311 = $labelInfo + 655376 + (($304 | 1) << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}
function _arLabelingSubDWIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $116 = 0, $118 = 0, $120 = 0, $124 = 0, $128 = 0, $131 = 0, $133 = 0, $137 = 0, $141 = 0, $145 = 0, $150 = 0, $152 = 0, $156 = 0, $16 = 0, $160 = 0, $164 = 0, $170 = 0, $173 = 0, $175 = 0, $179 = 0, $183 = 0, $187 = 0, $190 = 0, $195 = 0, $2 = 0, $216 = 0, $218 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $234 = 0, $235 = 0, $247 = 0, $248 = 0, $251 = 0, $258 = 0, $259 = 0, $267 = 0, $270 = 0, $271 = 0, $275 = 0, $278 = 0, $28 = 0, $282 = 0, $285 = 0, $289 = 0, $29 = 0, $292 = 0, $296 = 0, $3 = 0, $301 = 0, $304 = 0, $305 = 0, $311 = 0, $32 = 0, $34 = 0, $38 = 0, $42 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $60 = 0, $75 = 0, $77 = 0, $79 = 0, $83 = 0, $87 = 0, $93 = 0, $98 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = ($xsize | 0) / 2 | 0;
 $1 = ($ysize | 0) / 2 | 0;
 $2 = HEAP32[$labelInfo >> 2] | 0;
 $3 = $1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $2;
 $pnt2$0 = $2 + ((Math_imul($3, $0) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $10 = $0 + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $2;
 $pnt2$1 = $2 + ($10 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($0 << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($0 << 1) | 0;
 }
 $16 = $labelInfo + 1179664 | 0;
 $22 = 0 - $0 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 1) + 2) | 0;
 $pnt2$2 = $2 + ($0 + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($3 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($10 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $28 = $pnt2$3 + ($22 << 1) | 0;
    $29 = HEAP16[$28 >> 1] | 0;
    if ($29 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $29;
     $32 = ($29 << 16 >> 16) * 7 | 0;
     $34 = $labelInfo + 1310736 + ($32 + -7 << 2) | 0;
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 1;
     $38 = $labelInfo + 1310736 + ($32 + -6 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + $i$2;
     $42 = $labelInfo + 1310736 + ($32 + -5 << 2) | 0;
     HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($32 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $48 = HEAP16[$28 + 2 >> 1] | 0;
    $49 = $48 << 16 >> 16;
    $52 = HEAP16[$28 + -2 >> 1] | 0;
    $53 = $52 << 16 >> 16;
    $54 = $52 << 16 >> 16 > 0;
    if ($48 << 16 >> 16 <= 0) {
     if ($54) {
      HEAP16[$pnt2$3 >> 1] = $52;
      $150 = $53 * 7 | 0;
      $152 = $labelInfo + 1310736 + ($150 + -7 << 2) | 0;
      HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + 1;
      $156 = $labelInfo + 1310736 + ($150 + -6 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $i$2;
      $160 = $labelInfo + 1310736 + ($150 + -5 << 2) | 0;
      HEAP32[$160 >> 2] = (HEAP32[$160 >> 2] | 0) + $j$0;
      $164 = $labelInfo + 1310736 + ($150 + -3 << 2) | 0;
      if ((HEAP32[$164 >> 2] | 0) < ($i$2 | 0)) HEAP32[$164 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($150 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $170 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($170 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $170;
      $173 = ($170 << 16 >> 16) * 7 | 0;
      $175 = $labelInfo + 1310736 + ($173 + -7 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
      $179 = $labelInfo + 1310736 + ($173 + -6 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $i$2;
      $183 = $labelInfo + 1310736 + ($173 + -5 << 2) | 0;
      HEAP32[$183 >> 2] = (HEAP32[$183 >> 2] | 0) + $j$0;
      $187 = $labelInfo + 1310736 + ($173 + -3 << 2) | 0;
      if ((HEAP32[$187 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$187 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $190 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $190;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $190 << 16 >> 16;
      $195 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($195 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($195 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($195 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($195 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $190;
      break;
     }
    }
    if ($54) {
     $57 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
     $60 = HEAP32[$labelInfo + 1179664 + ($53 + -1 << 2) >> 2] | 0;
     L35 : do if (($57 | 0) > ($60 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $60;
      $k$0 = 0;
      $wk$0 = $16;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $75 = $60;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($57 | 0)) HEAP32[$wk$0 >> 2] = $60;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $57;
      if (($57 | 0) < ($60 | 0)) {
       $k$1 = 0;
       $wk$1 = $16;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $75 = $57;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($60 | 0)) HEAP32[$wk$1 >> 2] = $57;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $75 = $57;
     } while (0);
     $77 = ($75 << 16 >> 16) * 7 | 0;
     $79 = $labelInfo + 1310736 + ($77 + -7 << 2) | 0;
     HEAP32[$79 >> 2] = (HEAP32[$79 >> 2] | 0) + 1;
     $83 = $labelInfo + 1310736 + ($77 + -6 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + $i$2;
     $87 = $labelInfo + 1310736 + ($77 + -5 << 2) | 0;
     HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($77 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $93 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($93 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $48;
     $131 = $49 * 7 | 0;
     $133 = $labelInfo + 1310736 + ($131 + -7 << 2) | 0;
     HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + 1;
     $137 = $labelInfo + 1310736 + ($131 + -6 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $i$2;
     $141 = $labelInfo + 1310736 + ($131 + -5 << 2) | 0;
     HEAP32[$141 >> 2] = (HEAP32[$141 >> 2] | 0) + $j$0;
     $145 = $labelInfo + 1310736 + ($131 + -4 << 2) | 0;
     if ((HEAP32[$145 >> 2] | 0) > ($i$2 | 0)) HEAP32[$145 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($131 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $98 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
    $101 = HEAP32[$labelInfo + 1179664 + (($93 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($98 | 0) > ($101 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $101;
     $k$2 = 0;
     $wk$2 = $16;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $116 = $101;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($98 | 0)) HEAP32[$wk$2 >> 2] = $101;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $98;
     if (($98 | 0) < ($101 | 0)) {
      $k$3 = 0;
      $wk$3 = $16;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $116 = $98;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($101 | 0)) HEAP32[$wk$3 >> 2] = $98;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $116 = $98;
    } while (0);
    $118 = ($116 << 16 >> 16) * 7 | 0;
    $120 = $labelInfo + 1310736 + ($118 + -7 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + 1;
    $124 = $labelInfo + 1310736 + ($118 + -6 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $i$2;
    $128 = $labelInfo + 1310736 + ($118 + -5 << 2) | 0;
    HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + $xsize + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $216 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $16;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $218 = HEAP32[$wk$4 >> 2] | 0;
   if (($218 | 0) == ($i$3 | 0)) {
    $224 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $224 = HEAP32[$labelInfo + 1179664 + ($218 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $224;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $227 = $labelInfo + 8 | 0;
  $228 = $j$1$lcssa + -1 | 0;
  HEAP32[$227 >> 2] = $228;
  if (!$228) $$0 = 0; else {
   _memset($216 | 0, 0, $228 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $228 << 4 | 0) | 0;
   $234 = $228;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($234 | 0)) {
     $i$5 = 0;
     break;
    }
    $235 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($235 << 2) >> 2] = $0;
    HEAP32[$labelInfo + 131084 + (($235 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($235 | 2) << 2) >> 2] = $1;
    HEAP32[$labelInfo + 131084 + (($235 | 3) << 2) >> 2] = 0;
    $234 = HEAP32[$227 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $247 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $248 = $i$5 * 7 | 0;
    $251 = $labelInfo + 12 + ($247 << 2) | 0;
    HEAP32[$251 >> 2] = (HEAP32[$251 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($248 << 2) >> 2] | 0);
    $258 = $247 << 1;
    $259 = $labelInfo + 655376 + ($258 << 3) | 0;
    HEAPF64[$259 >> 3] = +HEAPF64[$259 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($248 + 1 << 2) >> 2] | 0);
    $267 = $labelInfo + 655376 + (($258 | 1) << 3) | 0;
    HEAPF64[$267 >> 3] = +HEAPF64[$267 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($248 + 2 << 2) >> 2] | 0);
    $270 = $247 << 2;
    $271 = $labelInfo + 131084 + ($270 << 2) | 0;
    $275 = HEAP32[$labelInfo + 1310736 + ($248 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$271 >> 2] | 0) > ($275 | 0)) HEAP32[$271 >> 2] = $275;
    $278 = $labelInfo + 131084 + (($270 | 1) << 2) | 0;
    $282 = HEAP32[$labelInfo + 1310736 + ($248 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$278 >> 2] | 0) < ($282 | 0)) HEAP32[$278 >> 2] = $282;
    $285 = $labelInfo + 131084 + (($270 | 2) << 2) | 0;
    $289 = HEAP32[$labelInfo + 1310736 + ($248 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$285 >> 2] | 0) > ($289 | 0)) HEAP32[$285 >> 2] = $289;
    $292 = $labelInfo + 131084 + (($270 | 3) << 2) | 0;
    $296 = HEAP32[$labelInfo + 1310736 + ($248 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$292 >> 2] | 0) < ($296 | 0)) HEAP32[$292 >> 2] = $296;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$227 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $301 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $304 = $i$6 << 1;
    $305 = $labelInfo + 655376 + ($304 << 3) | 0;
    HEAPF64[$305 >> 3] = +HEAPF64[$305 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $311 = $labelInfo + 655376 + (($304 | 1) << 3) | 0;
    HEAPF64[$311 >> 3] = +HEAPF64[$311 >> 3] / +(HEAP32[$301 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $114 = 0, $116 = 0, $118 = 0, $122 = 0, $126 = 0, $129 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $148 = 0, $15 = 0, $150 = 0, $154 = 0, $158 = 0, $162 = 0, $168 = 0, $171 = 0, $173 = 0, $177 = 0, $181 = 0, $185 = 0, $188 = 0, $19 = 0, $193 = 0, $213 = 0, $215 = 0, $221 = 0, $224 = 0, $225 = 0, $231 = 0, $232 = 0, $244 = 0, $245 = 0, $248 = 0, $255 = 0, $256 = 0, $26 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $272 = 0, $275 = 0, $279 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $298 = 0, $30 = 0, $301 = 0, $302 = 0, $308 = 0, $32 = 0, $36 = 0, $40 = 0, $46 = 0, $47 = 0, $50 = 0, $51 = 0, $52 = 0, $55 = 0, $58 = 0, $73 = 0, $75 = 0, $77 = 0, $8 = 0, $81 = 0, $85 = 0, $91 = 0, $96 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $19 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($15 << 1) | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $26 = $pnt2$3 + ($19 << 1) | 0;
    $27 = HEAP16[$26 >> 1] | 0;
    if ($27 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $27;
     $30 = ($27 << 16 >> 16) * 7 | 0;
     $32 = $labelInfo + 1310736 + ($30 + -7 << 2) | 0;
     HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 1;
     $36 = $labelInfo + 1310736 + ($30 + -6 << 2) | 0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + $i$2;
     $40 = $labelInfo + 1310736 + ($30 + -5 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($30 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $46 = HEAP16[$26 + 2 >> 1] | 0;
    $47 = $46 << 16 >> 16;
    $50 = HEAP16[$26 + -2 >> 1] | 0;
    $51 = $50 << 16 >> 16;
    $52 = $50 << 16 >> 16 > 0;
    if ($46 << 16 >> 16 <= 0) {
     if ($52) {
      HEAP16[$pnt2$3 >> 1] = $50;
      $148 = $51 * 7 | 0;
      $150 = $labelInfo + 1310736 + ($148 + -7 << 2) | 0;
      HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
      $154 = $labelInfo + 1310736 + ($148 + -6 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $i$2;
      $158 = $labelInfo + 1310736 + ($148 + -5 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $j$0;
      $162 = $labelInfo + 1310736 + ($148 + -3 << 2) | 0;
      if ((HEAP32[$162 >> 2] | 0) < ($i$2 | 0)) HEAP32[$162 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($148 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $168 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($168 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $168;
      $171 = ($168 << 16 >> 16) * 7 | 0;
      $173 = $labelInfo + 1310736 + ($171 + -7 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + 1;
      $177 = $labelInfo + 1310736 + ($171 + -6 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + $i$2;
      $181 = $labelInfo + 1310736 + ($171 + -5 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + $j$0;
      $185 = $labelInfo + 1310736 + ($171 + -3 << 2) | 0;
      if ((HEAP32[$185 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$185 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $188 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $188;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $188 << 16 >> 16;
      $193 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($193 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($193 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($193 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($193 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($193 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($193 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($193 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $188;
      break;
     }
    }
    if ($52) {
     $55 = HEAP32[$labelInfo + 1179664 + ($47 + -1 << 2) >> 2] | 0;
     $58 = HEAP32[$labelInfo + 1179664 + ($51 + -1 << 2) >> 2] | 0;
     L35 : do if (($55 | 0) > ($58 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $58;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $73 = $58;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($55 | 0)) HEAP32[$wk$0 >> 2] = $58;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $55;
      if (($55 | 0) < ($58 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $73 = $55;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($58 | 0)) HEAP32[$wk$1 >> 2] = $55;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $73 = $55;
     } while (0);
     $75 = ($73 << 16 >> 16) * 7 | 0;
     $77 = $labelInfo + 1310736 + ($75 + -7 << 2) | 0;
     HEAP32[$77 >> 2] = (HEAP32[$77 >> 2] | 0) + 1;
     $81 = $labelInfo + 1310736 + ($75 + -6 << 2) | 0;
     HEAP32[$81 >> 2] = (HEAP32[$81 >> 2] | 0) + $i$2;
     $85 = $labelInfo + 1310736 + ($75 + -5 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($75 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $91 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($91 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $46;
     $129 = $47 * 7 | 0;
     $131 = $labelInfo + 1310736 + ($129 + -7 << 2) | 0;
     HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + 1;
     $135 = $labelInfo + 1310736 + ($129 + -6 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $i$2;
     $139 = $labelInfo + 1310736 + ($129 + -5 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $j$0;
     $143 = $labelInfo + 1310736 + ($129 + -4 << 2) | 0;
     if ((HEAP32[$143 >> 2] | 0) > ($i$2 | 0)) HEAP32[$143 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($129 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $96 = HEAP32[$labelInfo + 1179664 + ($47 + -1 << 2) >> 2] | 0;
    $99 = HEAP32[$labelInfo + 1179664 + (($91 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($96 | 0) > ($99 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $99;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $114 = $99;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($96 | 0)) HEAP32[$wk$2 >> 2] = $99;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $96;
     if (($96 | 0) < ($99 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $114 = $96;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($99 | 0)) HEAP32[$wk$3 >> 2] = $96;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $114 = $96;
    } while (0);
    $116 = ($114 << 16 >> 16) * 7 | 0;
    $118 = $labelInfo + 1310736 + ($116 + -7 << 2) | 0;
    HEAP32[$118 >> 2] = (HEAP32[$118 >> 2] | 0) + 1;
    $122 = $labelInfo + 1310736 + ($116 + -6 << 2) | 0;
    HEAP32[$122 >> 2] = (HEAP32[$122 >> 2] | 0) + $i$2;
    $126 = $labelInfo + 1310736 + ($116 + -5 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $213 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $215 = HEAP32[$wk$4 >> 2] | 0;
   if (($215 | 0) == ($i$3 | 0)) {
    $221 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $221 = HEAP32[$labelInfo + 1179664 + ($215 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $221;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $224 = $labelInfo + 8 | 0;
  $225 = $j$1$lcssa + -1 | 0;
  HEAP32[$224 >> 2] = $225;
  if (!$225) $$0 = 0; else {
   _memset($213 | 0, 0, $225 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $225 << 4 | 0) | 0;
   $231 = $225;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($231 | 0)) {
     $i$5 = 0;
     break;
    }
    $232 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($232 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($232 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($232 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($232 | 3) << 2) >> 2] = 0;
    $231 = HEAP32[$224 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $244 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $245 = $i$5 * 7 | 0;
    $248 = $labelInfo + 12 + ($244 << 2) | 0;
    HEAP32[$248 >> 2] = (HEAP32[$248 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($245 << 2) >> 2] | 0);
    $255 = $244 << 1;
    $256 = $labelInfo + 655376 + ($255 << 3) | 0;
    HEAPF64[$256 >> 3] = +HEAPF64[$256 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($245 + 1 << 2) >> 2] | 0);
    $264 = $labelInfo + 655376 + (($255 | 1) << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($245 + 2 << 2) >> 2] | 0);
    $267 = $244 << 2;
    $268 = $labelInfo + 131084 + ($267 << 2) | 0;
    $272 = HEAP32[$labelInfo + 1310736 + ($245 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$268 >> 2] | 0) > ($272 | 0)) HEAP32[$268 >> 2] = $272;
    $275 = $labelInfo + 131084 + (($267 | 1) << 2) | 0;
    $279 = HEAP32[$labelInfo + 1310736 + ($245 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$275 >> 2] | 0) < ($279 | 0)) HEAP32[$275 >> 2] = $279;
    $282 = $labelInfo + 131084 + (($267 | 2) << 2) | 0;
    $286 = HEAP32[$labelInfo + 1310736 + ($245 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $labelInfo + 131084 + (($267 | 3) << 2) | 0;
    $293 = HEAP32[$labelInfo + 1310736 + ($245 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$224 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $298 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $301 = $i$6 << 1;
    $302 = $labelInfo + 655376 + ($301 << 3) | 0;
    HEAPF64[$302 >> 3] = +HEAPF64[$302 >> 3] / +(HEAP32[$298 >> 2] | 0);
    $308 = $labelInfo + 655376 + (($301 | 1) << 3) | 0;
    HEAPF64[$308 >> 3] = +HEAPF64[$308 >> 3] / +(HEAP32[$298 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $114 = 0, $116 = 0, $118 = 0, $122 = 0, $126 = 0, $129 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $148 = 0, $15 = 0, $150 = 0, $154 = 0, $158 = 0, $162 = 0, $168 = 0, $171 = 0, $173 = 0, $177 = 0, $181 = 0, $185 = 0, $188 = 0, $19 = 0, $193 = 0, $213 = 0, $215 = 0, $221 = 0, $224 = 0, $225 = 0, $231 = 0, $232 = 0, $244 = 0, $245 = 0, $248 = 0, $255 = 0, $256 = 0, $26 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $272 = 0, $275 = 0, $279 = 0, $282 = 0, $286 = 0, $289 = 0, $293 = 0, $298 = 0, $30 = 0, $301 = 0, $302 = 0, $308 = 0, $32 = 0, $36 = 0, $40 = 0, $46 = 0, $47 = 0, $50 = 0, $51 = 0, $52 = 0, $55 = 0, $58 = 0, $73 = 0, $75 = 0, $77 = 0, $8 = 0, $81 = 0, $85 = 0, $91 = 0, $96 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $19 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($15 << 1) | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $26 = $pnt2$3 + ($19 << 1) | 0;
    $27 = HEAP16[$26 >> 1] | 0;
    if ($27 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $27;
     $30 = ($27 << 16 >> 16) * 7 | 0;
     $32 = $labelInfo + 1310736 + ($30 + -7 << 2) | 0;
     HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 1;
     $36 = $labelInfo + 1310736 + ($30 + -6 << 2) | 0;
     HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + $i$2;
     $40 = $labelInfo + 1310736 + ($30 + -5 << 2) | 0;
     HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($30 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $46 = HEAP16[$26 + 2 >> 1] | 0;
    $47 = $46 << 16 >> 16;
    $50 = HEAP16[$26 + -2 >> 1] | 0;
    $51 = $50 << 16 >> 16;
    $52 = $50 << 16 >> 16 > 0;
    if ($46 << 16 >> 16 <= 0) {
     if ($52) {
      HEAP16[$pnt2$3 >> 1] = $50;
      $148 = $51 * 7 | 0;
      $150 = $labelInfo + 1310736 + ($148 + -7 << 2) | 0;
      HEAP32[$150 >> 2] = (HEAP32[$150 >> 2] | 0) + 1;
      $154 = $labelInfo + 1310736 + ($148 + -6 << 2) | 0;
      HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + $i$2;
      $158 = $labelInfo + 1310736 + ($148 + -5 << 2) | 0;
      HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + $j$0;
      $162 = $labelInfo + 1310736 + ($148 + -3 << 2) | 0;
      if ((HEAP32[$162 >> 2] | 0) < ($i$2 | 0)) HEAP32[$162 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($148 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $168 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($168 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $168;
      $171 = ($168 << 16 >> 16) * 7 | 0;
      $173 = $labelInfo + 1310736 + ($171 + -7 << 2) | 0;
      HEAP32[$173 >> 2] = (HEAP32[$173 >> 2] | 0) + 1;
      $177 = $labelInfo + 1310736 + ($171 + -6 << 2) | 0;
      HEAP32[$177 >> 2] = (HEAP32[$177 >> 2] | 0) + $i$2;
      $181 = $labelInfo + 1310736 + ($171 + -5 << 2) | 0;
      HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + $j$0;
      $185 = $labelInfo + 1310736 + ($171 + -3 << 2) | 0;
      if ((HEAP32[$185 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$185 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $188 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $188;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $188 << 16 >> 16;
      $193 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($193 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($193 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($193 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($193 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($193 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($193 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($193 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $188;
      break;
     }
    }
    if ($52) {
     $55 = HEAP32[$labelInfo + 1179664 + ($47 + -1 << 2) >> 2] | 0;
     $58 = HEAP32[$labelInfo + 1179664 + ($51 + -1 << 2) >> 2] | 0;
     L36 : do if (($55 | 0) > ($58 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $58;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $73 = $58;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($55 | 0)) HEAP32[$wk$0 >> 2] = $58;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $55;
      if (($55 | 0) < ($58 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $73 = $55;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($58 | 0)) HEAP32[$wk$1 >> 2] = $55;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $73 = $55;
     } while (0);
     $75 = ($73 << 16 >> 16) * 7 | 0;
     $77 = $labelInfo + 1310736 + ($75 + -7 << 2) | 0;
     HEAP32[$77 >> 2] = (HEAP32[$77 >> 2] | 0) + 1;
     $81 = $labelInfo + 1310736 + ($75 + -6 << 2) | 0;
     HEAP32[$81 >> 2] = (HEAP32[$81 >> 2] | 0) + $i$2;
     $85 = $labelInfo + 1310736 + ($75 + -5 << 2) | 0;
     HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($75 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $91 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($91 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $46;
     $129 = $47 * 7 | 0;
     $131 = $labelInfo + 1310736 + ($129 + -7 << 2) | 0;
     HEAP32[$131 >> 2] = (HEAP32[$131 >> 2] | 0) + 1;
     $135 = $labelInfo + 1310736 + ($129 + -6 << 2) | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $i$2;
     $139 = $labelInfo + 1310736 + ($129 + -5 << 2) | 0;
     HEAP32[$139 >> 2] = (HEAP32[$139 >> 2] | 0) + $j$0;
     $143 = $labelInfo + 1310736 + ($129 + -4 << 2) | 0;
     if ((HEAP32[$143 >> 2] | 0) > ($i$2 | 0)) HEAP32[$143 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($129 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $96 = HEAP32[$labelInfo + 1179664 + ($47 + -1 << 2) >> 2] | 0;
    $99 = HEAP32[$labelInfo + 1179664 + (($91 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($96 | 0) > ($99 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $99;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $114 = $99;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($96 | 0)) HEAP32[$wk$2 >> 2] = $99;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $96;
     if (($96 | 0) < ($99 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $114 = $96;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($99 | 0)) HEAP32[$wk$3 >> 2] = $96;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $114 = $96;
    } while (0);
    $116 = ($114 << 16 >> 16) * 7 | 0;
    $118 = $labelInfo + 1310736 + ($116 + -7 << 2) | 0;
    HEAP32[$118 >> 2] = (HEAP32[$118 >> 2] | 0) + 1;
    $122 = $labelInfo + 1310736 + ($116 + -6 << 2) | 0;
    HEAP32[$122 >> 2] = (HEAP32[$122 >> 2] | 0) + $i$2;
    $126 = $labelInfo + 1310736 + ($116 + -5 << 2) | 0;
    HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $213 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $215 = HEAP32[$wk$4 >> 2] | 0;
   if (($215 | 0) == ($i$3 | 0)) {
    $221 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $221 = HEAP32[$labelInfo + 1179664 + ($215 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $221;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $224 = $labelInfo + 8 | 0;
  $225 = $j$1$lcssa + -1 | 0;
  HEAP32[$224 >> 2] = $225;
  if (!$225) $$0 = 0; else {
   _memset($213 | 0, 0, $225 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $225 << 4 | 0) | 0;
   $231 = $225;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($231 | 0)) {
     $i$5 = 0;
     break;
    }
    $232 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($232 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($232 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($232 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($232 | 3) << 2) >> 2] = 0;
    $231 = HEAP32[$224 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $244 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $245 = $i$5 * 7 | 0;
    $248 = $labelInfo + 12 + ($244 << 2) | 0;
    HEAP32[$248 >> 2] = (HEAP32[$248 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($245 << 2) >> 2] | 0);
    $255 = $244 << 1;
    $256 = $labelInfo + 655376 + ($255 << 3) | 0;
    HEAPF64[$256 >> 3] = +HEAPF64[$256 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($245 + 1 << 2) >> 2] | 0);
    $264 = $labelInfo + 655376 + (($255 | 1) << 3) | 0;
    HEAPF64[$264 >> 3] = +HEAPF64[$264 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($245 + 2 << 2) >> 2] | 0);
    $267 = $244 << 2;
    $268 = $labelInfo + 131084 + ($267 << 2) | 0;
    $272 = HEAP32[$labelInfo + 1310736 + ($245 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$268 >> 2] | 0) > ($272 | 0)) HEAP32[$268 >> 2] = $272;
    $275 = $labelInfo + 131084 + (($267 | 1) << 2) | 0;
    $279 = HEAP32[$labelInfo + 1310736 + ($245 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$275 >> 2] | 0) < ($279 | 0)) HEAP32[$275 >> 2] = $279;
    $282 = $labelInfo + 131084 + (($267 | 2) << 2) | 0;
    $286 = HEAP32[$labelInfo + 1310736 + ($245 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$282 >> 2] | 0) > ($286 | 0)) HEAP32[$282 >> 2] = $286;
    $289 = $labelInfo + 131084 + (($267 | 3) << 2) | 0;
    $293 = HEAP32[$labelInfo + 1310736 + ($245 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$289 >> 2] | 0) < ($293 | 0)) HEAP32[$289 >> 2] = $293;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$224 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $298 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $301 = $i$6 << 1;
    $302 = $labelInfo + 655376 + ($301 << 3) | 0;
    HEAPF64[$302 >> 3] = +HEAPF64[$302 >> 3] / +(HEAP32[$298 >> 2] | 0);
    $308 = $labelInfo + 655376 + (($301 | 1) << 3) | 0;
    HEAPF64[$308 >> 3] = +HEAPF64[$308 >> 3] / +(HEAP32[$298 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $113 = 0, $115 = 0, $117 = 0, $121 = 0, $125 = 0, $128 = 0, $130 = 0, $134 = 0, $138 = 0, $14 = 0, $142 = 0, $147 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $161 = 0, $167 = 0, $170 = 0, $172 = 0, $176 = 0, $180 = 0, $184 = 0, $187 = 0, $19 = 0, $192 = 0, $212 = 0, $214 = 0, $220 = 0, $223 = 0, $224 = 0, $230 = 0, $231 = 0, $243 = 0, $244 = 0, $247 = 0, $25 = 0, $254 = 0, $255 = 0, $26 = 0, $263 = 0, $266 = 0, $267 = 0, $271 = 0, $274 = 0, $278 = 0, $281 = 0, $285 = 0, $288 = 0, $29 = 0, $292 = 0, $297 = 0, $300 = 0, $301 = 0, $307 = 0, $31 = 0, $35 = 0, $39 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $57 = 0, $72 = 0, $74 = 0, $76 = 0, $8 = 0, $80 = 0, $84 = 0, $90 = 0, $95 = 0, $98 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $19 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($15 << 1) | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $25 = $pnt2$3 + ($19 << 1) | 0;
    $26 = HEAP16[$25 >> 1] | 0;
    if ($26 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $26;
     $29 = ($26 << 16 >> 16) * 7 | 0;
     $31 = $labelInfo + 1310736 + ($29 + -7 << 2) | 0;
     HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1;
     $35 = $labelInfo + 1310736 + ($29 + -6 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + $i$2;
     $39 = $labelInfo + 1310736 + ($29 + -5 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($29 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $45 = HEAP16[$25 + 2 >> 1] | 0;
    $46 = $45 << 16 >> 16;
    $49 = HEAP16[$25 + -2 >> 1] | 0;
    $50 = $49 << 16 >> 16;
    $51 = $49 << 16 >> 16 > 0;
    if ($45 << 16 >> 16 <= 0) {
     if ($51) {
      HEAP16[$pnt2$3 >> 1] = $49;
      $147 = $50 * 7 | 0;
      $149 = $labelInfo + 1310736 + ($147 + -7 << 2) | 0;
      HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
      $153 = $labelInfo + 1310736 + ($147 + -6 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $i$2;
      $157 = $labelInfo + 1310736 + ($147 + -5 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $j$0;
      $161 = $labelInfo + 1310736 + ($147 + -3 << 2) | 0;
      if ((HEAP32[$161 >> 2] | 0) < ($i$2 | 0)) HEAP32[$161 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($147 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $167 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($167 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $167;
      $170 = ($167 << 16 >> 16) * 7 | 0;
      $172 = $labelInfo + 1310736 + ($170 + -7 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $labelInfo + 1310736 + ($170 + -6 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $i$2;
      $180 = $labelInfo + 1310736 + ($170 + -5 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $j$0;
      $184 = $labelInfo + 1310736 + ($170 + -3 << 2) | 0;
      if ((HEAP32[$184 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$184 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $187 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $187;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $187 << 16 >> 16;
      $192 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($192 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($192 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($192 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($192 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $187;
      break;
     }
    }
    if ($51) {
     $54 = HEAP32[$labelInfo + 1179664 + ($46 + -1 << 2) >> 2] | 0;
     $57 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
     L35 : do if (($54 | 0) > ($57 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $57;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $72 = $57;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($54 | 0)) HEAP32[$wk$0 >> 2] = $57;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $54;
      if (($54 | 0) < ($57 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $72 = $54;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($57 | 0)) HEAP32[$wk$1 >> 2] = $54;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $72 = $54;
     } while (0);
     $74 = ($72 << 16 >> 16) * 7 | 0;
     $76 = $labelInfo + 1310736 + ($74 + -7 << 2) | 0;
     HEAP32[$76 >> 2] = (HEAP32[$76 >> 2] | 0) + 1;
     $80 = $labelInfo + 1310736 + ($74 + -6 << 2) | 0;
     HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + $i$2;
     $84 = $labelInfo + 1310736 + ($74 + -5 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($74 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $90 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($90 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $45;
     $128 = $46 * 7 | 0;
     $130 = $labelInfo + 1310736 + ($128 + -7 << 2) | 0;
     HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
     $134 = $labelInfo + 1310736 + ($128 + -6 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $i$2;
     $138 = $labelInfo + 1310736 + ($128 + -5 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $j$0;
     $142 = $labelInfo + 1310736 + ($128 + -4 << 2) | 0;
     if ((HEAP32[$142 >> 2] | 0) > ($i$2 | 0)) HEAP32[$142 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($128 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $95 = HEAP32[$labelInfo + 1179664 + ($46 + -1 << 2) >> 2] | 0;
    $98 = HEAP32[$labelInfo + 1179664 + (($90 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($95 | 0) > ($98 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $98;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $113 = $98;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($95 | 0)) HEAP32[$wk$2 >> 2] = $98;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $95;
     if (($95 | 0) < ($98 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $113 = $95;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($98 | 0)) HEAP32[$wk$3 >> 2] = $95;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $113 = $95;
    } while (0);
    $115 = ($113 << 16 >> 16) * 7 | 0;
    $117 = $labelInfo + 1310736 + ($115 + -7 << 2) | 0;
    HEAP32[$117 >> 2] = (HEAP32[$117 >> 2] | 0) + 1;
    $121 = $labelInfo + 1310736 + ($115 + -6 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + $i$2;
    $125 = $labelInfo + 1310736 + ($115 + -5 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $212 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $214 = HEAP32[$wk$4 >> 2] | 0;
   if (($214 | 0) == ($i$3 | 0)) {
    $220 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $220 = HEAP32[$labelInfo + 1179664 + ($214 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $220;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $223 = $labelInfo + 8 | 0;
  $224 = $j$1$lcssa + -1 | 0;
  HEAP32[$223 >> 2] = $224;
  if (!$224) $$0 = 0; else {
   _memset($212 | 0, 0, $224 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $224 << 4 | 0) | 0;
   $230 = $224;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($230 | 0)) {
     $i$5 = 0;
     break;
    }
    $231 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($231 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($231 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($231 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($231 | 3) << 2) >> 2] = 0;
    $230 = HEAP32[$223 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $243 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $244 = $i$5 * 7 | 0;
    $247 = $labelInfo + 12 + ($243 << 2) | 0;
    HEAP32[$247 >> 2] = (HEAP32[$247 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($244 << 2) >> 2] | 0);
    $254 = $243 << 1;
    $255 = $labelInfo + 655376 + ($254 << 3) | 0;
    HEAPF64[$255 >> 3] = +HEAPF64[$255 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($244 + 1 << 2) >> 2] | 0);
    $263 = $labelInfo + 655376 + (($254 | 1) << 3) | 0;
    HEAPF64[$263 >> 3] = +HEAPF64[$263 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($244 + 2 << 2) >> 2] | 0);
    $266 = $243 << 2;
    $267 = $labelInfo + 131084 + ($266 << 2) | 0;
    $271 = HEAP32[$labelInfo + 1310736 + ($244 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$267 >> 2] | 0) > ($271 | 0)) HEAP32[$267 >> 2] = $271;
    $274 = $labelInfo + 131084 + (($266 | 1) << 2) | 0;
    $278 = HEAP32[$labelInfo + 1310736 + ($244 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$274 >> 2] | 0) < ($278 | 0)) HEAP32[$274 >> 2] = $278;
    $281 = $labelInfo + 131084 + (($266 | 2) << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($244 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($266 | 3) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($244 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$223 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $297 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $300 = $i$6 << 1;
    $301 = $labelInfo + 655376 + ($300 << 3) | 0;
    HEAPF64[$301 >> 3] = +HEAPF64[$301 >> 3] / +(HEAP32[$297 >> 2] | 0);
    $307 = $labelInfo + 655376 + (($300 | 1) << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$297 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $113 = 0, $115 = 0, $117 = 0, $121 = 0, $125 = 0, $128 = 0, $130 = 0, $134 = 0, $138 = 0, $14 = 0, $142 = 0, $147 = 0, $149 = 0, $15 = 0, $153 = 0, $157 = 0, $161 = 0, $167 = 0, $170 = 0, $172 = 0, $176 = 0, $180 = 0, $184 = 0, $187 = 0, $19 = 0, $192 = 0, $212 = 0, $214 = 0, $220 = 0, $223 = 0, $224 = 0, $230 = 0, $231 = 0, $243 = 0, $244 = 0, $247 = 0, $25 = 0, $254 = 0, $255 = 0, $26 = 0, $263 = 0, $266 = 0, $267 = 0, $271 = 0, $274 = 0, $278 = 0, $281 = 0, $285 = 0, $288 = 0, $29 = 0, $292 = 0, $297 = 0, $300 = 0, $301 = 0, $307 = 0, $31 = 0, $35 = 0, $39 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $57 = 0, $72 = 0, $74 = 0, $76 = 0, $8 = 0, $80 = 0, $84 = 0, $90 = 0, $95 = 0, $98 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $19 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($15 << 1) | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $25 = $pnt2$3 + ($19 << 1) | 0;
    $26 = HEAP16[$25 >> 1] | 0;
    if ($26 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $26;
     $29 = ($26 << 16 >> 16) * 7 | 0;
     $31 = $labelInfo + 1310736 + ($29 + -7 << 2) | 0;
     HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 1;
     $35 = $labelInfo + 1310736 + ($29 + -6 << 2) | 0;
     HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + $i$2;
     $39 = $labelInfo + 1310736 + ($29 + -5 << 2) | 0;
     HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($29 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $45 = HEAP16[$25 + 2 >> 1] | 0;
    $46 = $45 << 16 >> 16;
    $49 = HEAP16[$25 + -2 >> 1] | 0;
    $50 = $49 << 16 >> 16;
    $51 = $49 << 16 >> 16 > 0;
    if ($45 << 16 >> 16 <= 0) {
     if ($51) {
      HEAP16[$pnt2$3 >> 1] = $49;
      $147 = $50 * 7 | 0;
      $149 = $labelInfo + 1310736 + ($147 + -7 << 2) | 0;
      HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + 1;
      $153 = $labelInfo + 1310736 + ($147 + -6 << 2) | 0;
      HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + $i$2;
      $157 = $labelInfo + 1310736 + ($147 + -5 << 2) | 0;
      HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + $j$0;
      $161 = $labelInfo + 1310736 + ($147 + -3 << 2) | 0;
      if ((HEAP32[$161 >> 2] | 0) < ($i$2 | 0)) HEAP32[$161 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($147 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $167 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($167 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $167;
      $170 = ($167 << 16 >> 16) * 7 | 0;
      $172 = $labelInfo + 1310736 + ($170 + -7 << 2) | 0;
      HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + 1;
      $176 = $labelInfo + 1310736 + ($170 + -6 << 2) | 0;
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + $i$2;
      $180 = $labelInfo + 1310736 + ($170 + -5 << 2) | 0;
      HEAP32[$180 >> 2] = (HEAP32[$180 >> 2] | 0) + $j$0;
      $184 = $labelInfo + 1310736 + ($170 + -3 << 2) | 0;
      if ((HEAP32[$184 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$184 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $187 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $187;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $187 << 16 >> 16;
      $192 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($192 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($192 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($192 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($192 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($192 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $187;
      break;
     }
    }
    if ($51) {
     $54 = HEAP32[$labelInfo + 1179664 + ($46 + -1 << 2) >> 2] | 0;
     $57 = HEAP32[$labelInfo + 1179664 + ($50 + -1 << 2) >> 2] | 0;
     L36 : do if (($54 | 0) > ($57 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $57;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $72 = $57;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($54 | 0)) HEAP32[$wk$0 >> 2] = $57;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $54;
      if (($54 | 0) < ($57 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $72 = $54;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($57 | 0)) HEAP32[$wk$1 >> 2] = $54;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $72 = $54;
     } while (0);
     $74 = ($72 << 16 >> 16) * 7 | 0;
     $76 = $labelInfo + 1310736 + ($74 + -7 << 2) | 0;
     HEAP32[$76 >> 2] = (HEAP32[$76 >> 2] | 0) + 1;
     $80 = $labelInfo + 1310736 + ($74 + -6 << 2) | 0;
     HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + $i$2;
     $84 = $labelInfo + 1310736 + ($74 + -5 << 2) | 0;
     HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($74 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $90 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($90 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $45;
     $128 = $46 * 7 | 0;
     $130 = $labelInfo + 1310736 + ($128 + -7 << 2) | 0;
     HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1;
     $134 = $labelInfo + 1310736 + ($128 + -6 << 2) | 0;
     HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) + $i$2;
     $138 = $labelInfo + 1310736 + ($128 + -5 << 2) | 0;
     HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) + $j$0;
     $142 = $labelInfo + 1310736 + ($128 + -4 << 2) | 0;
     if ((HEAP32[$142 >> 2] | 0) > ($i$2 | 0)) HEAP32[$142 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($128 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $95 = HEAP32[$labelInfo + 1179664 + ($46 + -1 << 2) >> 2] | 0;
    $98 = HEAP32[$labelInfo + 1179664 + (($90 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($95 | 0) > ($98 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $98;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $113 = $98;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($95 | 0)) HEAP32[$wk$2 >> 2] = $98;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $95;
     if (($95 | 0) < ($98 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $113 = $95;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($98 | 0)) HEAP32[$wk$3 >> 2] = $95;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $113 = $95;
    } while (0);
    $115 = ($113 << 16 >> 16) * 7 | 0;
    $117 = $labelInfo + 1310736 + ($115 + -7 << 2) | 0;
    HEAP32[$117 >> 2] = (HEAP32[$117 >> 2] | 0) + 1;
    $121 = $labelInfo + 1310736 + ($115 + -6 << 2) | 0;
    HEAP32[$121 >> 2] = (HEAP32[$121 >> 2] | 0) + $i$2;
    $125 = $labelInfo + 1310736 + ($115 + -5 << 2) | 0;
    HEAP32[$125 >> 2] = (HEAP32[$125 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 4 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $212 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $214 = HEAP32[$wk$4 >> 2] | 0;
   if (($214 | 0) == ($i$3 | 0)) {
    $220 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $220 = HEAP32[$labelInfo + 1179664 + ($214 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $220;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $223 = $labelInfo + 8 | 0;
  $224 = $j$1$lcssa + -1 | 0;
  HEAP32[$223 >> 2] = $224;
  if (!$224) $$0 = 0; else {
   _memset($212 | 0, 0, $224 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $224 << 4 | 0) | 0;
   $230 = $224;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($230 | 0)) {
     $i$5 = 0;
     break;
    }
    $231 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($231 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($231 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($231 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($231 | 3) << 2) >> 2] = 0;
    $230 = HEAP32[$223 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $243 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $244 = $i$5 * 7 | 0;
    $247 = $labelInfo + 12 + ($243 << 2) | 0;
    HEAP32[$247 >> 2] = (HEAP32[$247 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($244 << 2) >> 2] | 0);
    $254 = $243 << 1;
    $255 = $labelInfo + 655376 + ($254 << 3) | 0;
    HEAPF64[$255 >> 3] = +HEAPF64[$255 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($244 + 1 << 2) >> 2] | 0);
    $263 = $labelInfo + 655376 + (($254 | 1) << 3) | 0;
    HEAPF64[$263 >> 3] = +HEAPF64[$263 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($244 + 2 << 2) >> 2] | 0);
    $266 = $243 << 2;
    $267 = $labelInfo + 131084 + ($266 << 2) | 0;
    $271 = HEAP32[$labelInfo + 1310736 + ($244 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$267 >> 2] | 0) > ($271 | 0)) HEAP32[$267 >> 2] = $271;
    $274 = $labelInfo + 131084 + (($266 | 1) << 2) | 0;
    $278 = HEAP32[$labelInfo + 1310736 + ($244 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$274 >> 2] | 0) < ($278 | 0)) HEAP32[$274 >> 2] = $278;
    $281 = $labelInfo + 131084 + (($266 | 2) << 2) | 0;
    $285 = HEAP32[$labelInfo + 1310736 + ($244 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$281 >> 2] | 0) > ($285 | 0)) HEAP32[$281 >> 2] = $285;
    $288 = $labelInfo + 131084 + (($266 | 3) << 2) | 0;
    $292 = HEAP32[$labelInfo + 1310736 + ($244 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$288 >> 2] | 0) < ($292 | 0)) HEAP32[$288 >> 2] = $292;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$223 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $297 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $300 = $i$6 << 1;
    $301 = $labelInfo + 655376 + ($300 << 3) | 0;
    HEAPF64[$301 >> 3] = +HEAPF64[$301 >> 3] / +(HEAP32[$297 >> 2] | 0);
    $307 = $labelInfo + 655376 + (($300 | 1) << 3) | 0;
    HEAPF64[$307 >> 3] = +HEAPF64[$307 >> 3] / +(HEAP32[$297 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDWRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $112 = 0, $114 = 0, $116 = 0, $120 = 0, $124 = 0, $127 = 0, $129 = 0, $133 = 0, $137 = 0, $14 = 0, $141 = 0, $146 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $160 = 0, $166 = 0, $169 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $191 = 0, $211 = 0, $213 = 0, $219 = 0, $222 = 0, $223 = 0, $229 = 0, $230 = 0, $24 = 0, $242 = 0, $243 = 0, $246 = 0, $25 = 0, $253 = 0, $254 = 0, $262 = 0, $265 = 0, $266 = 0, $270 = 0, $273 = 0, $277 = 0, $28 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $296 = 0, $299 = 0, $30 = 0, $300 = 0, $306 = 0, $34 = 0, $38 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $56 = 0, $71 = 0, $73 = 0, $75 = 0, $79 = 0, $8 = 0, $83 = 0, $89 = 0, $94 = 0, $97 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $18 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + $15 | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $24 = $pnt2$3 + ($18 << 1) | 0;
    $25 = HEAP16[$24 >> 1] | 0;
    if ($25 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $25;
     $28 = ($25 << 16 >> 16) * 7 | 0;
     $30 = $labelInfo + 1310736 + ($28 + -7 << 2) | 0;
     HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
     $34 = $labelInfo + 1310736 + ($28 + -6 << 2) | 0;
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + $i$2;
     $38 = $labelInfo + 1310736 + ($28 + -5 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($28 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $44 = HEAP16[$24 + 2 >> 1] | 0;
    $45 = $44 << 16 >> 16;
    $48 = HEAP16[$24 + -2 >> 1] | 0;
    $49 = $48 << 16 >> 16;
    $50 = $48 << 16 >> 16 > 0;
    if ($44 << 16 >> 16 <= 0) {
     if ($50) {
      HEAP16[$pnt2$3 >> 1] = $48;
      $146 = $49 * 7 | 0;
      $148 = $labelInfo + 1310736 + ($146 + -7 << 2) | 0;
      HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
      $152 = $labelInfo + 1310736 + ($146 + -6 << 2) | 0;
      HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $i$2;
      $156 = $labelInfo + 1310736 + ($146 + -5 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $j$0;
      $160 = $labelInfo + 1310736 + ($146 + -3 << 2) | 0;
      if ((HEAP32[$160 >> 2] | 0) < ($i$2 | 0)) HEAP32[$160 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($146 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $166 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($166 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $166;
      $169 = ($166 << 16 >> 16) * 7 | 0;
      $171 = $labelInfo + 1310736 + ($169 + -7 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + 1;
      $175 = $labelInfo + 1310736 + ($169 + -6 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $i$2;
      $179 = $labelInfo + 1310736 + ($169 + -5 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $j$0;
      $183 = $labelInfo + 1310736 + ($169 + -3 << 2) | 0;
      if ((HEAP32[$183 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$183 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $186 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $186;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $186 << 16 >> 16;
      $191 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($191 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($191 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($191 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($191 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($191 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($191 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($191 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $186;
      break;
     }
    }
    if ($50) {
     $53 = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
     $56 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
     L35 : do if (($53 | 0) > ($56 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $56;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $71 = $56;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($53 | 0)) HEAP32[$wk$0 >> 2] = $56;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $53;
      if (($53 | 0) < ($56 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $71 = $53;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($56 | 0)) HEAP32[$wk$1 >> 2] = $53;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $71 = $53;
     } while (0);
     $73 = ($71 << 16 >> 16) * 7 | 0;
     $75 = $labelInfo + 1310736 + ($73 + -7 << 2) | 0;
     HEAP32[$75 >> 2] = (HEAP32[$75 >> 2] | 0) + 1;
     $79 = $labelInfo + 1310736 + ($73 + -6 << 2) | 0;
     HEAP32[$79 >> 2] = (HEAP32[$79 >> 2] | 0) + $i$2;
     $83 = $labelInfo + 1310736 + ($73 + -5 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($73 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $89 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($89 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $44;
     $127 = $45 * 7 | 0;
     $129 = $labelInfo + 1310736 + ($127 + -7 << 2) | 0;
     HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 1;
     $133 = $labelInfo + 1310736 + ($127 + -6 << 2) | 0;
     HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $i$2;
     $137 = $labelInfo + 1310736 + ($127 + -5 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $j$0;
     $141 = $labelInfo + 1310736 + ($127 + -4 << 2) | 0;
     if ((HEAP32[$141 >> 2] | 0) > ($i$2 | 0)) HEAP32[$141 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($127 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $94 = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $97 = HEAP32[$labelInfo + 1179664 + (($89 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($94 | 0) > ($97 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $97;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $112 = $97;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($94 | 0)) HEAP32[$wk$2 >> 2] = $97;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $94;
     if (($94 | 0) < ($97 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $112 = $94;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($97 | 0)) HEAP32[$wk$3 >> 2] = $94;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $112 = $94;
    } while (0);
    $114 = ($112 << 16 >> 16) * 7 | 0;
    $116 = $labelInfo + 1310736 + ($114 + -7 << 2) | 0;
    HEAP32[$116 >> 2] = (HEAP32[$116 >> 2] | 0) + 1;
    $120 = $labelInfo + 1310736 + ($114 + -6 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + $i$2;
    $124 = $labelInfo + 1310736 + ($114 + -5 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 2 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $211 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $213 = HEAP32[$wk$4 >> 2] | 0;
   if (($213 | 0) == ($i$3 | 0)) {
    $219 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $219 = HEAP32[$labelInfo + 1179664 + ($213 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $219;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $222 = $labelInfo + 8 | 0;
  $223 = $j$1$lcssa + -1 | 0;
  HEAP32[$222 >> 2] = $223;
  if (!$223) $$0 = 0; else {
   _memset($211 | 0, 0, $223 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $223 << 4 | 0) | 0;
   $229 = $223;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($229 | 0)) {
     $i$5 = 0;
     break;
    }
    $230 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($230 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($230 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($230 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($230 | 3) << 2) >> 2] = 0;
    $229 = HEAP32[$222 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $242 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $243 = $i$5 * 7 | 0;
    $246 = $labelInfo + 12 + ($242 << 2) | 0;
    HEAP32[$246 >> 2] = (HEAP32[$246 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($243 << 2) >> 2] | 0);
    $253 = $242 << 1;
    $254 = $labelInfo + 655376 + ($253 << 3) | 0;
    HEAPF64[$254 >> 3] = +HEAPF64[$254 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($243 + 1 << 2) >> 2] | 0);
    $262 = $labelInfo + 655376 + (($253 | 1) << 3) | 0;
    HEAPF64[$262 >> 3] = +HEAPF64[$262 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($243 + 2 << 2) >> 2] | 0);
    $265 = $242 << 2;
    $266 = $labelInfo + 131084 + ($265 << 2) | 0;
    $270 = HEAP32[$labelInfo + 1310736 + ($243 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$266 >> 2] | 0) > ($270 | 0)) HEAP32[$266 >> 2] = $270;
    $273 = $labelInfo + 131084 + (($265 | 1) << 2) | 0;
    $277 = HEAP32[$labelInfo + 1310736 + ($243 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) < ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $labelInfo + 131084 + (($265 | 2) << 2) | 0;
    $284 = HEAP32[$labelInfo + 1310736 + ($243 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) > ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $labelInfo + 131084 + (($265 | 3) << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($243 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) < ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$222 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $296 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $299 = $i$6 << 1;
    $300 = $labelInfo + 655376 + ($299 << 3) | 0;
    HEAPF64[$300 >> 3] = +HEAPF64[$300 >> 3] / +(HEAP32[$296 >> 2] | 0);
    $306 = $labelInfo + 655376 + (($299 | 1) << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$296 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLabelingSubDBRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $112 = 0, $114 = 0, $116 = 0, $120 = 0, $124 = 0, $127 = 0, $129 = 0, $133 = 0, $137 = 0, $14 = 0, $141 = 0, $146 = 0, $148 = 0, $15 = 0, $152 = 0, $156 = 0, $160 = 0, $166 = 0, $169 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $191 = 0, $211 = 0, $213 = 0, $219 = 0, $222 = 0, $223 = 0, $229 = 0, $230 = 0, $24 = 0, $242 = 0, $243 = 0, $246 = 0, $25 = 0, $253 = 0, $254 = 0, $262 = 0, $265 = 0, $266 = 0, $270 = 0, $273 = 0, $277 = 0, $28 = 0, $280 = 0, $284 = 0, $287 = 0, $291 = 0, $296 = 0, $299 = 0, $30 = 0, $300 = 0, $306 = 0, $34 = 0, $38 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $56 = 0, $71 = 0, $73 = 0, $75 = 0, $79 = 0, $8 = 0, $83 = 0, $89 = 0, $94 = 0, $97 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $j$0 = 0, $j$1 = 0, $j$1$lcssa = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt$1$lcssa = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt2$3$lcssa = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$0$lcssa = 0, $wk_max$1 = 0, $wk_max$1$lcssa = 0, $wk_max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $1 = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($1, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $14 = $labelInfo + 1179664 | 0;
 $15 = $xsize + 1 | 0;
 $18 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + $15 | 0;
 $pnt2$2 = $0 + ($15 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($1 | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   $wk_max$0$lcssa = $wk_max$0;
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($8 | 0)) {
    $pnt$1$lcssa = $pnt$1;
    $pnt2$3$lcssa = $pnt2$3;
    $wk_max$1$lcssa = $wk_max$1;
    break;
   }
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$2 = $wk_max$1;
   } else {
    $24 = $pnt2$3 + ($18 << 1) | 0;
    $25 = HEAP16[$24 >> 1] | 0;
    if ($25 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $25;
     $28 = ($25 << 16 >> 16) * 7 | 0;
     $30 = $labelInfo + 1310736 + ($28 + -7 << 2) | 0;
     HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
     $34 = $labelInfo + 1310736 + ($28 + -6 << 2) | 0;
     HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + $i$2;
     $38 = $labelInfo + 1310736 + ($28 + -5 << 2) | 0;
     HEAP32[$38 >> 2] = (HEAP32[$38 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($28 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $44 = HEAP16[$24 + 2 >> 1] | 0;
    $45 = $44 << 16 >> 16;
    $48 = HEAP16[$24 + -2 >> 1] | 0;
    $49 = $48 << 16 >> 16;
    $50 = $48 << 16 >> 16 > 0;
    if ($44 << 16 >> 16 <= 0) {
     if ($50) {
      HEAP16[$pnt2$3 >> 1] = $48;
      $146 = $49 * 7 | 0;
      $148 = $labelInfo + 1310736 + ($146 + -7 << 2) | 0;
      HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
      $152 = $labelInfo + 1310736 + ($146 + -6 << 2) | 0;
      HEAP32[$152 >> 2] = (HEAP32[$152 >> 2] | 0) + $i$2;
      $156 = $labelInfo + 1310736 + ($146 + -5 << 2) | 0;
      HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + $j$0;
      $160 = $labelInfo + 1310736 + ($146 + -3 << 2) | 0;
      if ((HEAP32[$160 >> 2] | 0) < ($i$2 | 0)) HEAP32[$160 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($146 + -1 << 2) >> 2] = $j$0;
      $wk_max$2 = $wk_max$1;
      break;
     }
     $166 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
     if ($166 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $166;
      $169 = ($166 << 16 >> 16) * 7 | 0;
      $171 = $labelInfo + 1310736 + ($169 + -7 << 2) | 0;
      HEAP32[$171 >> 2] = (HEAP32[$171 >> 2] | 0) + 1;
      $175 = $labelInfo + 1310736 + ($169 + -6 << 2) | 0;
      HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + $i$2;
      $179 = $labelInfo + 1310736 + ($169 + -5 << 2) | 0;
      HEAP32[$179 >> 2] = (HEAP32[$179 >> 2] | 0) + $j$0;
      $183 = $labelInfo + 1310736 + ($169 + -3 << 2) | 0;
      if ((HEAP32[$183 >> 2] | 0) >= ($i$2 | 0)) {
       $wk_max$2 = $wk_max$1;
       break;
      }
      HEAP32[$183 >> 2] = $i$2;
      $wk_max$2 = $wk_max$1;
      break;
     } else {
      $186 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 51;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $186;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $186 << 16 >> 16;
      $191 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($191 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($191 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($191 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($191 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($191 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($191 + 5 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($191 + 6 << 2) >> 2] = $j$0;
      $wk_max$2 = $186;
      break;
     }
    }
    if ($50) {
     $53 = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
     $56 = HEAP32[$labelInfo + 1179664 + ($49 + -1 << 2) >> 2] | 0;
     L36 : do if (($53 | 0) > ($56 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $56;
      $k$0 = 0;
      $wk$0 = $14;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $71 = $56;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($53 | 0)) HEAP32[$wk$0 >> 2] = $56;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $53;
      if (($53 | 0) < ($56 | 0)) {
       $k$1 = 0;
       $wk$1 = $14;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $71 = $53;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($56 | 0)) HEAP32[$wk$1 >> 2] = $53;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $71 = $53;
     } while (0);
     $73 = ($71 << 16 >> 16) * 7 | 0;
     $75 = $labelInfo + 1310736 + ($73 + -7 << 2) | 0;
     HEAP32[$75 >> 2] = (HEAP32[$75 >> 2] | 0) + 1;
     $79 = $labelInfo + 1310736 + ($73 + -6 << 2) | 0;
     HEAP32[$79 >> 2] = (HEAP32[$79 >> 2] | 0) + $i$2;
     $83 = $labelInfo + 1310736 + ($73 + -5 << 2) | 0;
     HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($73 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $89 = HEAP16[$pnt2$3 + -2 >> 1] | 0;
    if ($89 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $44;
     $127 = $45 * 7 | 0;
     $129 = $labelInfo + 1310736 + ($127 + -7 << 2) | 0;
     HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 1;
     $133 = $labelInfo + 1310736 + ($127 + -6 << 2) | 0;
     HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + $i$2;
     $137 = $labelInfo + 1310736 + ($127 + -5 << 2) | 0;
     HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + $j$0;
     $141 = $labelInfo + 1310736 + ($127 + -4 << 2) | 0;
     if ((HEAP32[$141 >> 2] | 0) > ($i$2 | 0)) HEAP32[$141 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($127 + -1 << 2) >> 2] = $j$0;
     $wk_max$2 = $wk_max$1;
     break;
    }
    $94 = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $97 = HEAP32[$labelInfo + 1179664 + (($89 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($94 | 0) > ($97 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $97;
     $k$2 = 0;
     $wk$2 = $14;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $112 = $97;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($94 | 0)) HEAP32[$wk$2 >> 2] = $97;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $94;
     if (($94 | 0) < ($97 | 0)) {
      $k$3 = 0;
      $wk$3 = $14;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $112 = $94;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($97 | 0)) HEAP32[$wk$3 >> 2] = $94;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $112 = $94;
    } while (0);
    $114 = ($112 << 16 >> 16) * 7 | 0;
    $116 = $labelInfo + 1310736 + ($114 + -7 << 2) | 0;
    HEAP32[$116 >> 2] = (HEAP32[$116 >> 2] | 0) + 1;
    $120 = $labelInfo + 1310736 + ($114 + -6 << 2) | 0;
    HEAP32[$120 >> 2] = (HEAP32[$120 >> 2] | 0) + $i$2;
    $124 = $labelInfo + 1310736 + ($114 + -5 << 2) | 0;
    HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + $j$0;
    $wk_max$2 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$2;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1$lcssa + 2 | 0;
  $pnt2$2 = $pnt2$3$lcssa + 4 | 0;
  $wk_max$0 = $wk_max$1$lcssa;
 }
 L77 : do if ((label | 0) == 51) {
  _arLog(3, 2924, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 56) {
  $211 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $14;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0$lcssa | 0)) {
    $j$1$lcssa = $j$1;
    break;
   }
   $213 = HEAP32[$wk$4 >> 2] | 0;
   if (($213 | 0) == ($i$3 | 0)) {
    $219 = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $219 = HEAP32[$labelInfo + 1179664 + ($213 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $219;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $222 = $labelInfo + 8 | 0;
  $223 = $j$1$lcssa + -1 | 0;
  HEAP32[$222 >> 2] = $223;
  if (!$223) $$0 = 0; else {
   _memset($211 | 0, 0, $223 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $223 << 4 | 0) | 0;
   $229 = $223;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($229 | 0)) {
     $i$5 = 0;
     break;
    }
    $230 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($230 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($230 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($230 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($230 | 3) << 2) >> 2] = 0;
    $229 = HEAP32[$222 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0$lcssa | 0)) {
     $i$6 = 0;
     break;
    }
    $242 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $243 = $i$5 * 7 | 0;
    $246 = $labelInfo + 12 + ($242 << 2) | 0;
    HEAP32[$246 >> 2] = (HEAP32[$246 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($243 << 2) >> 2] | 0);
    $253 = $242 << 1;
    $254 = $labelInfo + 655376 + ($253 << 3) | 0;
    HEAPF64[$254 >> 3] = +HEAPF64[$254 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($243 + 1 << 2) >> 2] | 0);
    $262 = $labelInfo + 655376 + (($253 | 1) << 3) | 0;
    HEAPF64[$262 >> 3] = +HEAPF64[$262 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($243 + 2 << 2) >> 2] | 0);
    $265 = $242 << 2;
    $266 = $labelInfo + 131084 + ($265 << 2) | 0;
    $270 = HEAP32[$labelInfo + 1310736 + ($243 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$266 >> 2] | 0) > ($270 | 0)) HEAP32[$266 >> 2] = $270;
    $273 = $labelInfo + 131084 + (($265 | 1) << 2) | 0;
    $277 = HEAP32[$labelInfo + 1310736 + ($243 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$273 >> 2] | 0) < ($277 | 0)) HEAP32[$273 >> 2] = $277;
    $280 = $labelInfo + 131084 + (($265 | 2) << 2) | 0;
    $284 = HEAP32[$labelInfo + 1310736 + ($243 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$280 >> 2] | 0) > ($284 | 0)) HEAP32[$280 >> 2] = $284;
    $287 = $labelInfo + 131084 + (($265 | 3) << 2) | 0;
    $291 = HEAP32[$labelInfo + 1310736 + ($243 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$287 >> 2] | 0) < ($291 | 0)) HEAP32[$287 >> 2] = $291;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$222 >> 2] | 0)) {
     $$0 = 0;
     break L77;
    }
    $296 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $299 = $i$6 << 1;
    $300 = $labelInfo + 655376 + ($299 << 3) | 0;
    HEAPF64[$300 >> 3] = +HEAPF64[$300 >> 3] / +(HEAP32[$296 >> 2] | 0);
    $306 = $labelInfo + 655376 + (($299 | 1) << 3) | 0;
    HEAPF64[$306 >> 3] = +HEAPF64[$306 >> 3] / +(HEAP32[$296 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i11 = 0, $$0$i$i$i22 = 0, $$0$i$i$i8 = 0, $$3 = 0, $$lcssa = 0, $$lcssa145 = 0, $$pre = 0, $0 = 0, $1 = 0, $101 = 0, $102 = 0, $104 = 0, $107 = 0, $110 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $127 = 0, $134 = 0, $136 = 0, $137 = 0, $14 = 0, $140 = 0, $142 = 0, $145 = 0, $15 = 0, $151 = 0, $16 = 0, $161 = 0, $163 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $196 = 0, $198 = 0, $2 = 0, $20 = 0, $200 = 0, $205 = 0, $207 = 0, $208 = 0, $21 = 0, $211 = 0, $213 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $38 = 0, $47 = 0, $49 = 0, $50 = 0, $52 = 0, $55 = 0, $58 = 0, $66 = 0, $67 = 0, $71 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $99 = 0, $__i$0$i$i = 0, $__v$i$i21 = 0, $args = 0, $k$0 = 0, $k1$0 = 0, $k2$0 = 0, $t$0 = 0, $t$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i21 = sp + 60 | 0;
 $args = sp;
 $0 = sp + 48 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 12 | 0;
 do if (($last - $first | 0) > 1) if ((HEAP8[$first >> 0] | 0) == 73) {
  $9 = $db + 61 | 0;
  $$pre = $db + 36 | 0;
  L4 : do if (HEAP8[$9 >> 0] | 0) {
   $12 = HEAP32[$$pre >> 2] | 0;
   $14 = HEAP32[$12 + -16 >> 2] | 0;
   $15 = $12 + -12 | 0;
   while (1) {
    $16 = HEAP32[$15 >> 2] | 0;
    if (($16 | 0) == ($14 | 0)) break L4;
    $18 = $16 + -16 | 0;
    HEAP32[$15 >> 2] = $18;
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($18);
   }
  } while (0);
  HEAP32[$args >> 2] = 0;
  HEAP32[$args + 4 >> 2] = 0;
  HEAP32[$args + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($args, 15293, 1);
  $20 = $db + 4 | 0;
  $21 = $db + 12 | 0;
  $22 = $__v$i$i21 + 8 | 0;
  $23 = $__v$i$i21 + 8 | 0;
  $24 = $args + 4 | 0;
  $25 = $0 + 8 | 0;
  $26 = $0 + 1 | 0;
  $27 = $0 + 4 | 0;
  $28 = $db + 32 | 0;
  $29 = $db + 40 | 0;
  $30 = $db + 44 | 0;
  $31 = $__v$i$i21 + 8 | 0;
  $t$0 = $first + 1 | 0;
  L10 : while (1) {
   if ((HEAP8[$t$0 >> 0] | 0) == 69) {
    $t$0$lcssa = $t$0;
    label = 48;
    break;
   }
   do if (HEAP8[$9 >> 0] | 0) {
    $36 = HEAP32[$21 >> 2] | 0;
    $37 = HEAP32[$$pre >> 2] | 0;
    $38 = HEAP32[$29 >> 2] | 0;
    if ($37 >>> 0 < $38 >>> 0) {
     HEAP32[$37 >> 2] = 0;
     HEAP32[$37 + 4 >> 2] = 0;
     HEAP32[$37 + 8 >> 2] = 0;
     HEAP32[$37 + 12 >> 2] = $36;
     HEAP32[$$pre >> 2] = (HEAP32[$$pre >> 2] | 0) + 16;
     break;
    }
    $47 = HEAP32[$28 >> 2] | 0;
    $49 = $37 - $47 >> 4;
    $50 = $49 + 1 | 0;
    if ($50 >>> 0 > 268435455) {
     label = 13;
     break L10;
    }
    $52 = $38 - $47 | 0;
    if ($52 >> 4 >>> 0 < 134217727) {
     $55 = $52 >> 3;
     $$0$i$i$i = $55 >>> 0 < $50 >>> 0 ? $50 : $55;
    } else $$0$i$i$i = 268435455;
    __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v$i$i21, $$0$i$i$i, $49, $30);
    $58 = HEAP32[$31 >> 2] | 0;
    HEAP32[$58 >> 2] = 0;
    HEAP32[$58 + 4 >> 2] = 0;
    HEAP32[$58 + 8 >> 2] = 0;
    HEAP32[$58 + 12 >> 2] = $36;
    HEAP32[$31 >> 2] = $58 + 16;
    __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($28, $__v$i$i21);
    __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i21);
   } while (0);
   $66 = ((HEAP32[$20 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   $67 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
   $71 = ((HEAP32[$20 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   L23 : do if (HEAP8[$9 >> 0] | 0) {
    $74 = HEAP32[$$pre >> 2] | 0;
    $75 = $74 + -16 | 0;
    $76 = $74;
    while (1) {
     if (($76 | 0) == ($75 | 0)) break L23;
     $78 = $76 + -16 | 0;
     HEAP32[$$pre >> 2] = $78;
     __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($78);
     $76 = HEAP32[$$pre >> 2] | 0;
    }
   } while (0);
   if (($67 | 0) == ($t$0 | 0) | ($67 | 0) == ($last | 0)) {
    label = 62;
    break;
   }
   L30 : do if (!(HEAP8[$9 >> 0] | 0)) $k2$0 = $66; else {
    $83 = HEAP32[$$pre >> 2] | 0;
    $84 = $83 + -16 | 0;
    $85 = HEAP32[$21 >> 2] | 0;
    $86 = $83 + -12 | 0;
    $87 = HEAP32[$86 >> 2] | 0;
    $89 = HEAP32[$83 + -8 >> 2] | 0;
    $91 = $89;
    if ($87 >>> 0 < $89 >>> 0) {
     HEAP32[$87 >> 2] = 0;
     HEAP32[$87 + 4 >> 2] = 0;
     HEAP32[$87 + 8 >> 2] = 0;
     HEAP32[$87 + 12 >> 2] = $85;
     HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + 16;
     $k$0 = $66;
    } else {
     $99 = HEAP32[$84 >> 2] | 0;
     $101 = $87 - $99 >> 4;
     $102 = $101 + 1 | 0;
     if ($102 >>> 0 > 268435455) {
      $$lcssa = $84;
      label = 26;
      break L10;
     }
     $104 = $91 - $99 | 0;
     if ($104 >> 4 >>> 0 < 134217727) {
      $107 = $104 >> 3;
      $$0$i$i$i8 = $107 >>> 0 < $102 >>> 0 ? $102 : $107;
     } else $$0$i$i$i8 = 268435455;
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i21, $$0$i$i$i8, $101, $83 + -4 | 0);
     $110 = HEAP32[$22 >> 2] | 0;
     HEAP32[$110 >> 2] = 0;
     HEAP32[$110 + 4 >> 2] = 0;
     HEAP32[$110 + 8 >> 2] = 0;
     HEAP32[$110 + 12 >> 2] = $85;
     HEAP32[$22 >> 2] = $110 + 16;
     __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84, $__v$i$i21);
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i21);
     $k$0 = $66;
    }
    while (1) {
     if ($k$0 >>> 0 >= $71 >>> 0) {
      $k2$0 = $66;
      break L30;
     }
     $118 = HEAP32[(HEAP32[$$pre >> 2] | 0) + -12 >> 2] | 0;
     $119 = $118 + -16 | 0;
     $120 = HEAP32[$db >> 2] | 0;
     $121 = $120 + ($k$0 * 24 | 0) | 0;
     $122 = $118 + -12 | 0;
     $123 = HEAP32[$122 >> 2] | 0;
     $125 = HEAP32[$118 + -8 >> 2] | 0;
     $127 = $125;
     if (($123 | 0) == ($125 | 0)) {
      $134 = HEAP32[$119 >> 2] | 0;
      $136 = ($123 - $134 | 0) / 24 | 0;
      $137 = $136 + 1 | 0;
      if ($137 >>> 0 > 178956970) {
       $$lcssa145 = $119;
       label = 34;
       break L10;
      }
      $140 = ($127 - $134 | 0) / 24 | 0;
      if ($140 >>> 0 < 89478485) {
       $142 = $140 << 1;
       $$0$i$i$i11 = $142 >>> 0 < $137 >>> 0 ? $137 : $142;
      } else $$0$i$i$i11 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i21, $$0$i$i$i11, $136, $118 + -4 | 0);
      $145 = HEAP32[$23 >> 2] | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($145, $121);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($145 + 12 | 0, $120 + ($k$0 * 24 | 0) + 12 | 0);
      HEAP32[$23 >> 2] = $145 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($119, $__v$i$i21);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i21);
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($123, $121);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($123 + 12 | 0, $120 + ($k$0 * 24 | 0) + 12 | 0);
      HEAP32[$122 >> 2] = (HEAP32[$122 >> 2] | 0) + 24;
     }
     $k$0 = $k$0 + 1 | 0;
    }
   } while (0);
   while (1) {
    if ($k2$0 >>> 0 >= $71 >>> 0) {
     $k1$0 = $71;
     break;
    }
    $151 = HEAP8[$args >> 0] | 0;
    if ((($151 & 1) == 0 ? ($151 & 255) >>> 1 : HEAP32[$24 >> 2] | 0) >>> 0 > 1) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($args, 15295) | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0, (HEAP32[$db >> 2] | 0) + ($k2$0 * 24 | 0) | 0);
    $161 = HEAP8[$0 >> 0] | 0;
    $163 = ($161 & 1) == 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($args, $163 ? $26 : HEAP32[$25 >> 2] | 0, $163 ? ($161 & 255) >>> 1 : HEAP32[$27 >> 2] | 0) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
    $k2$0 = $k2$0 + 1 | 0;
   }
   while (1) {
    if (($k1$0 | 0) == ($66 | 0)) {
     $t$0 = $67;
     continue L10;
    }
    $172 = HEAP32[$20 >> 2] | 0;
    $173 = $172 + -24 | 0;
    $174 = $172;
    while (1) {
     if (($174 | 0) == ($173 | 0)) break;
     $176 = $174 + -24 | 0;
     HEAP32[$20 >> 2] = $176;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($176);
     $174 = HEAP32[$20 >> 2] | 0;
    }
    $k1$0 = $k1$0 + -1 | 0;
   }
  }
  if ((label | 0) == 13) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($28); else if ((label | 0) == 26) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa); else if ((label | 0) == 34) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa145); else if ((label | 0) == 48) {
   $178 = $t$0$lcssa + 1 | 0;
   $179 = HEAP8[$args >> 0] | 0;
   $181 = ($179 & 1) == 0;
   if ((HEAP8[($181 ? $args + 1 | 0 : HEAP32[$args + 8 >> 2] | 0) + ($181 ? ($179 & 255) >>> 1 : HEAP32[$24 >> 2] | 0) + -1 >> 0] | 0) == 62) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($args, 15298) | 0; else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($args, 14708) | 0;
   HEAP32[$2 >> 2] = HEAP32[$args >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$args + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$args + 8 >> 2];
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$args + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
   $196 = HEAP32[$20 >> 2] | 0;
   $198 = HEAP32[$db + 8 >> 2] | 0;
   $200 = $198;
   if ($196 >>> 0 < $198 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($196, $1);
    HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 24;
   } else {
    $205 = HEAP32[$db >> 2] | 0;
    $207 = ($196 - $205 | 0) / 24 | 0;
    $208 = $207 + 1 | 0;
    if ($208 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $211 = ($200 - $205 | 0) / 24 | 0;
    if ($211 >>> 0 < 89478485) {
     $213 = $211 << 1;
     $$0$i$i$i22 = $213 >>> 0 < $208 >>> 0 ? $208 : $213;
    } else $$0$i$i$i22 = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i21, $$0$i$i$i22, $207, $db + 12 | 0);
    $216 = $__v$i$i21 + 8 | 0;
    $217 = HEAP32[$216 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($217, $1);
    HEAP32[$216 >> 2] = $217 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i21);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i21);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
   $$3 = $178;
   break;
  } else if ((label | 0) == 62) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
   $$3 = $first;
   break;
  }
 } else $$3 = $first; else $$3 = $first; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $104 = 0, $105 = 0, $113 = 0, $114 = 0, $12 = 0, $122 = 0, $130 = 0, $135 = 0, $136 = 0, $139 = 0, $141 = 0, $143 = 0, $15 = 0, $158 = 0, $16 = 0, $163 = 0, $165 = 0, $168 = 0, $171 = 0, $174 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $203 = 0, $208 = 0, $211 = 0, $212 = 0, $218 = 0, $23 = 0, $233 = 0, $236 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $249 = 0, $25 = 0, $254 = 0, $255 = 0, $258 = 0, $260 = 0, $263 = 0, $268 = 0, $27 = 0, $274 = 0, $278 = 0, $279 = 0, $297 = 0, $299 = 0, $306 = 0, $307 = 0, $308 = 0, $316 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $55 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $73 = 0, $74 = 0, $8 = 0, $83 = 0, $88 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0;
 if (!$mem) return;
 $1 = $mem + -8 | 0;
 $2 = HEAP32[4184] | 0;
 if ($1 >>> 0 < $2 >>> 0) _abort();
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) _abort();
 $8 = $5 & -8;
 $9 = $1 + $8 | 0;
 do if (!($5 & 1)) {
  $12 = HEAP32[$1 >> 2] | 0;
  if (!$6) return;
  $15 = $1 + (0 - $12) | 0;
  $16 = $12 + $8 | 0;
  if ($15 >>> 0 < $2 >>> 0) _abort();
  if (($15 | 0) == (HEAP32[4185] | 0)) {
   $104 = $9 + 4 | 0;
   $105 = HEAP32[$104 >> 2] | 0;
   if (($105 & 3 | 0) != 3) {
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
   HEAP32[4182] = $16;
   HEAP32[$104 >> 2] = $105 & -2;
   HEAP32[$15 + 4 >> 2] = $16 | 1;
   HEAP32[$15 + $16 >> 2] = $16;
   return;
  }
  $20 = $12 >>> 3;
  if ($12 >>> 0 < 256) {
   $23 = HEAP32[$15 + 8 >> 2] | 0;
   $25 = HEAP32[$15 + 12 >> 2] | 0;
   $27 = 16760 + ($20 << 1 << 2) | 0;
   if (($23 | 0) != ($27 | 0)) {
    if ($23 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$23 + 12 >> 2] | 0) != ($15 | 0)) _abort();
   }
   if (($25 | 0) == ($23 | 0)) {
    HEAP32[4180] = HEAP32[4180] & ~(1 << $20);
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
   if (($25 | 0) == ($27 | 0)) $$pre$phi43Z2D = $25 + 8 | 0; else {
    if ($25 >>> 0 < $2 >>> 0) _abort();
    $40 = $25 + 8 | 0;
    if ((HEAP32[$40 >> 2] | 0) == ($15 | 0)) $$pre$phi43Z2D = $40; else _abort();
   }
   HEAP32[$23 + 12 >> 2] = $25;
   HEAP32[$$pre$phi43Z2D >> 2] = $23;
   $p$1 = $15;
   $psize$1 = $16;
   break;
  }
  $45 = HEAP32[$15 + 24 >> 2] | 0;
  $47 = HEAP32[$15 + 12 >> 2] | 0;
  do if (($47 | 0) == ($15 | 0)) {
   $58 = $15 + 16 | 0;
   $59 = $58 + 4 | 0;
   $60 = HEAP32[$59 >> 2] | 0;
   if (!$60) {
    $62 = HEAP32[$58 >> 2] | 0;
    if (!$62) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $62;
     $RP$1 = $58;
    }
   } else {
    $R$1 = $60;
    $RP$1 = $59;
   }
   while (1) {
    $64 = $R$1 + 20 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    if ($65 | 0) {
     $R$1 = $65;
     $RP$1 = $64;
     continue;
    }
    $67 = $R$1 + 16 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    if (!$68) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $68;
     $RP$1 = $67;
    }
   }
   if ($RP$1$lcssa >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $50 = HEAP32[$15 + 8 >> 2] | 0;
   if ($50 >>> 0 < $2 >>> 0) _abort();
   $52 = $50 + 12 | 0;
   if ((HEAP32[$52 >> 2] | 0) != ($15 | 0)) _abort();
   $55 = $47 + 8 | 0;
   if ((HEAP32[$55 >> 2] | 0) == ($15 | 0)) {
    HEAP32[$52 >> 2] = $47;
    HEAP32[$55 >> 2] = $50;
    $R$3 = $47;
    break;
   } else _abort();
  } while (0);
  if (!$45) {
   $p$1 = $15;
   $psize$1 = $16;
  } else {
   $73 = HEAP32[$15 + 28 >> 2] | 0;
   $74 = 17024 + ($73 << 2) | 0;
   if (($15 | 0) == (HEAP32[$74 >> 2] | 0)) {
    HEAP32[$74 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[4181] = HEAP32[4181] & ~(1 << $73);
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
   } else {
    if ($45 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
    $83 = $45 + 16 | 0;
    if ((HEAP32[$83 >> 2] | 0) == ($15 | 0)) HEAP32[$83 >> 2] = $R$3; else HEAP32[$45 + 20 >> 2] = $R$3;
    if (!$R$3) {
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
   }
   $88 = HEAP32[4184] | 0;
   if ($R$3 >>> 0 < $88 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $45;
   $91 = $15 + 16 | 0;
   $92 = HEAP32[$91 >> 2] | 0;
   do if ($92 | 0) if ($92 >>> 0 < $88 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $92;
    HEAP32[$92 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $98 = HEAP32[$91 + 4 >> 2] | 0;
   if (!$98) {
    $p$1 = $15;
    $psize$1 = $16;
   } else if ($98 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $98;
    HEAP32[$98 + 24 >> 2] = $R$3;
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
  }
 } else {
  $p$1 = $1;
  $psize$1 = $8;
 } while (0);
 if ($p$1 >>> 0 >= $9 >>> 0) _abort();
 $113 = $9 + 4 | 0;
 $114 = HEAP32[$113 >> 2] | 0;
 if (!($114 & 1)) _abort();
 if (!($114 & 2)) {
  if (($9 | 0) == (HEAP32[4186] | 0)) {
   $122 = (HEAP32[4183] | 0) + $psize$1 | 0;
   HEAP32[4183] = $122;
   HEAP32[4186] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $122 | 1;
   if (($p$1 | 0) != (HEAP32[4185] | 0)) return;
   HEAP32[4185] = 0;
   HEAP32[4182] = 0;
   return;
  }
  if (($9 | 0) == (HEAP32[4185] | 0)) {
   $130 = (HEAP32[4182] | 0) + $psize$1 | 0;
   HEAP32[4182] = $130;
   HEAP32[4185] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $130 | 1;
   HEAP32[$p$1 + $130 >> 2] = $130;
   return;
  }
  $135 = ($114 & -8) + $psize$1 | 0;
  $136 = $114 >>> 3;
  do if ($114 >>> 0 < 256) {
   $139 = HEAP32[$9 + 8 >> 2] | 0;
   $141 = HEAP32[$9 + 12 >> 2] | 0;
   $143 = 16760 + ($136 << 1 << 2) | 0;
   if (($139 | 0) != ($143 | 0)) {
    if ($139 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
    if ((HEAP32[$139 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($141 | 0) == ($139 | 0)) {
    HEAP32[4180] = HEAP32[4180] & ~(1 << $136);
    break;
   }
   if (($141 | 0) == ($143 | 0)) $$pre$phi41Z2D = $141 + 8 | 0; else {
    if ($141 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
    $158 = $141 + 8 | 0;
    if ((HEAP32[$158 >> 2] | 0) == ($9 | 0)) $$pre$phi41Z2D = $158; else _abort();
   }
   HEAP32[$139 + 12 >> 2] = $141;
   HEAP32[$$pre$phi41Z2D >> 2] = $139;
  } else {
   $163 = HEAP32[$9 + 24 >> 2] | 0;
   $165 = HEAP32[$9 + 12 >> 2] | 0;
   do if (($165 | 0) == ($9 | 0)) {
    $177 = $9 + 16 | 0;
    $178 = $177 + 4 | 0;
    $179 = HEAP32[$178 >> 2] | 0;
    if (!$179) {
     $181 = HEAP32[$177 >> 2] | 0;
     if (!$181) {
      $R8$3 = 0;
      break;
     } else {
      $R8$1 = $181;
      $RP10$1 = $177;
     }
    } else {
     $R8$1 = $179;
     $RP10$1 = $178;
    }
    while (1) {
     $183 = $R8$1 + 20 | 0;
     $184 = HEAP32[$183 >> 2] | 0;
     if ($184 | 0) {
      $R8$1 = $184;
      $RP10$1 = $183;
      continue;
     }
     $186 = $R8$1 + 16 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if (!$187) {
      $R8$1$lcssa = $R8$1;
      $RP10$1$lcssa = $RP10$1;
      break;
     } else {
      $R8$1 = $187;
      $RP10$1 = $186;
     }
    }
    if ($RP10$1$lcssa >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
     HEAP32[$RP10$1$lcssa >> 2] = 0;
     $R8$3 = $R8$1$lcssa;
     break;
    }
   } else {
    $168 = HEAP32[$9 + 8 >> 2] | 0;
    if ($168 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
    $171 = $168 + 12 | 0;
    if ((HEAP32[$171 >> 2] | 0) != ($9 | 0)) _abort();
    $174 = $165 + 8 | 0;
    if ((HEAP32[$174 >> 2] | 0) == ($9 | 0)) {
     HEAP32[$171 >> 2] = $165;
     HEAP32[$174 >> 2] = $168;
     $R8$3 = $165;
     break;
    } else _abort();
   } while (0);
   if ($163 | 0) {
    $193 = HEAP32[$9 + 28 >> 2] | 0;
    $194 = 17024 + ($193 << 2) | 0;
    if (($9 | 0) == (HEAP32[$194 >> 2] | 0)) {
     HEAP32[$194 >> 2] = $R8$3;
     if (!$R8$3) {
      HEAP32[4181] = HEAP32[4181] & ~(1 << $193);
      break;
     }
    } else {
     if ($163 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
     $203 = $163 + 16 | 0;
     if ((HEAP32[$203 >> 2] | 0) == ($9 | 0)) HEAP32[$203 >> 2] = $R8$3; else HEAP32[$163 + 20 >> 2] = $R8$3;
     if (!$R8$3) break;
    }
    $208 = HEAP32[4184] | 0;
    if ($R8$3 >>> 0 < $208 >>> 0) _abort();
    HEAP32[$R8$3 + 24 >> 2] = $163;
    $211 = $9 + 16 | 0;
    $212 = HEAP32[$211 >> 2] | 0;
    do if ($212 | 0) if ($212 >>> 0 < $208 >>> 0) _abort(); else {
     HEAP32[$R8$3 + 16 >> 2] = $212;
     HEAP32[$212 + 24 >> 2] = $R8$3;
     break;
    } while (0);
    $218 = HEAP32[$211 + 4 >> 2] | 0;
    if ($218 | 0) if ($218 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
     HEAP32[$R8$3 + 20 >> 2] = $218;
     HEAP32[$218 + 24 >> 2] = $R8$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $135 | 1;
  HEAP32[$p$1 + $135 >> 2] = $135;
  if (($p$1 | 0) == (HEAP32[4185] | 0)) {
   HEAP32[4182] = $135;
   return;
  } else $psize$2 = $135;
 } else {
  HEAP32[$113 >> 2] = $114 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$p$1 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $236 = 16760 + ($233 << 1 << 2) | 0;
  $237 = HEAP32[4180] | 0;
  $238 = 1 << $233;
  if (!($237 & $238)) {
   HEAP32[4180] = $237 | $238;
   $$pre$phiZ2D = $236 + 8 | 0;
   $F18$0 = $236;
  } else {
   $242 = $236 + 8 | 0;
   $243 = HEAP32[$242 >> 2] | 0;
   if ($243 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $242;
    $F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F18$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F18$0;
  HEAP32[$p$1 + 12 >> 2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 if (!$249) $I20$0 = 0; else if ($psize$2 >>> 0 > 16777215) $I20$0 = 31; else {
  $254 = ($249 + 1048320 | 0) >>> 16 & 8;
  $255 = $249 << $254;
  $258 = ($255 + 520192 | 0) >>> 16 & 4;
  $260 = $255 << $258;
  $263 = ($260 + 245760 | 0) >>> 16 & 2;
  $268 = 14 - ($258 | $254 | $263) + ($260 << $263 >>> 15) | 0;
  $I20$0 = $psize$2 >>> ($268 + 7 | 0) & 1 | $268 << 1;
 }
 $274 = 17024 + ($I20$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I20$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $278 = HEAP32[4181] | 0;
 $279 = 1 << $I20$0;
 do if (!($278 & $279)) {
  HEAP32[4181] = $278 | $279;
  HEAP32[$274 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $274;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } else {
  $K21$0 = $psize$2 << (($I20$0 | 0) == 31 ? 0 : 25 - ($I20$0 >>> 1) | 0);
  $T$0 = HEAP32[$274 >> 2] | 0;
  while (1) {
   if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
    $T$0$lcssa = $T$0;
    label = 130;
    break;
   }
   $297 = $T$0 + 16 + ($K21$0 >>> 31 << 2) | 0;
   $299 = HEAP32[$297 >> 2] | 0;
   if (!$299) {
    $$lcssa = $297;
    $T$0$lcssa48 = $T$0;
    label = 127;
    break;
   } else {
    $K21$0 = $K21$0 << 1;
    $T$0 = $299;
   }
  }
  if ((label | 0) == 127) if ($$lcssa >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
   HEAP32[$$lcssa >> 2] = $p$1;
   HEAP32[$p$1 + 24 >> 2] = $T$0$lcssa48;
   HEAP32[$p$1 + 12 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $p$1;
   break;
  } else if ((label | 0) == 130) {
   $306 = $T$0$lcssa + 8 | 0;
   $307 = HEAP32[$306 >> 2] | 0;
   $308 = HEAP32[4184] | 0;
   if ($307 >>> 0 >= $308 >>> 0 & $T$0$lcssa >>> 0 >= $308 >>> 0) {
    HEAP32[$307 + 12 >> 2] = $p$1;
    HEAP32[$306 >> 2] = $p$1;
    HEAP32[$p$1 + 8 >> 2] = $307;
    HEAP32[$p$1 + 12 >> 2] = $T$0$lcssa;
    HEAP32[$p$1 + 24 >> 2] = 0;
    break;
   } else _abort();
  }
 } while (0);
 $316 = (HEAP32[4188] | 0) + -1 | 0;
 HEAP32[4188] = $316;
 if (!$316) $sp$0$in$i = 17176; else return;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[4188] = -1;
 return;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $100 = 0, $101 = 0, $108 = 0, $120 = 0, $121 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $135 = 0, $136 = 0, $144 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $156 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $185 = 0, $186 = 0, $187 = 0, $195 = 0, $201 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $222 = 0, $223 = 0, $224 = 0, $239 = 0, $25 = 0, $250 = 0, $259 = 0, $261 = 0, $271 = 0, $272 = 0, $279 = 0, $281 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $47 = 0, $5 = 0, $51 = 0, $6 = 0, $65 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$1 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0;
 L1 : do if ($base >>> 0 > 36) {
  $5 = ___errno_location() | 0;
  HEAP32[$5 >> 2] = 22;
  $286 = 0;
  $287 = 0;
 } else {
  $3 = $f + 4 | 0;
  $4 = $f + 100 | 0;
  do {
   $6 = HEAP32[$3 >> 2] | 0;
   if ($6 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $6 + 1;
    $13 = HEAPU8[$6 >> 0] | 0;
   } else $13 = ___shgetc($f) | 0;
  } while ((_isspace($13) | 0) != 0);
  $$lcssa113 = $13;
  L11 : do switch ($$lcssa113 | 0) {
  case 43:
  case 45:
   {
    $17 = (($$lcssa113 | 0) == 45) << 31 >> 31;
    $18 = HEAP32[$3 >> 2] | 0;
    if ($18 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $18 + 1;
     $c$0 = HEAPU8[$18 >> 0] | 0;
     $neg$0 = $17;
     break L11;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $neg$0 = $17;
     break L11;
    }
    break;
   }
  default:
   {
    $c$0 = $$lcssa113;
    $neg$0 = 0;
   }
  } while (0);
  $25 = ($base | 0) == 0;
  do if (($base | 16 | 0) == 16 & ($c$0 | 0) == 48) {
   $29 = HEAP32[$3 >> 2] | 0;
   if ($29 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $29 + 1;
    $37 = HEAPU8[$29 >> 0] | 0;
   } else $37 = ___shgetc($f) | 0;
   if (($37 | 32 | 0) != 120) if ($25) {
    $$116 = 8;
    $c$117 = $37;
    label = 46;
    break;
   } else {
    $$1 = $base;
    $c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3 >> 2] | 0;
   if ($39 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $39 + 1;
    $47 = HEAPU8[$39 >> 0] | 0;
   } else $47 = ___shgetc($f) | 0;
   if ((HEAPU8[11128 + $47 >> 0] | 0) > 15) {
    $51 = (HEAP32[$4 >> 2] | 0) == 0;
    if (!$51) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    if (!$pok) {
     ___shlim($f, 0);
     $286 = 0;
     $287 = 0;
     break L1;
    }
    if ($51) {
     $286 = 0;
     $287 = 0;
     break L1;
    }
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    $286 = 0;
    $287 = 0;
    break L1;
   } else {
    $$116 = 16;
    $c$117 = $47;
    label = 46;
   }
  } else {
   $$base14 = $25 ? 10 : $base;
   if ((HEAPU8[11128 + $c$0 >> 0] | 0) >>> 0 < $$base14 >>> 0) {
    $$1 = $$base14;
    $c$1 = $c$0;
    label = 32;
   } else {
    if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    ___shlim($f, 0);
    $65 = ___errno_location() | 0;
    HEAP32[$65 >> 2] = 22;
    $286 = 0;
    $287 = 0;
    break L1;
   }
  } while (0);
  if ((label | 0) == 32) if (($$1 | 0) == 10) {
   $67 = $c$1 + -48 | 0;
   if ($67 >>> 0 < 10) {
    $71 = $67;
    $x$070 = 0;
    while (1) {
     $70 = ($x$070 * 10 | 0) + $71 | 0;
     $72 = HEAP32[$3 >> 2] | 0;
     if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $72 + 1;
      $c$2$be = HEAPU8[$72 >> 0] | 0;
     } else $c$2$be = ___shgetc($f) | 0;
     $71 = $c$2$be + -48 | 0;
     if (!($71 >>> 0 < 10 & $70 >>> 0 < 429496729)) {
      $$lcssa112 = $70;
      $c$2$be$lcssa = $c$2$be;
      break;
     } else $x$070 = $70;
    }
    $288 = $$lcssa112;
    $289 = 0;
    $c$2$lcssa = $c$2$be$lcssa;
   } else {
    $288 = 0;
    $289 = 0;
    $c$2$lcssa = $c$1;
   }
   $83 = $c$2$lcssa + -48 | 0;
   if ($83 >>> 0 < 10) {
    $85 = $288;
    $86 = $289;
    $89 = $83;
    $c$359 = $c$2$lcssa;
    while (1) {
     $87 = ___muldi3($85 | 0, $86 | 0, 10, 0) | 0;
     $88 = tempRet0;
     $91 = (($89 | 0) < 0) << 31 >> 31;
     $93 = ~$91;
     if ($88 >>> 0 > $93 >>> 0 | ($88 | 0) == ($93 | 0) & $87 >>> 0 > ~$89 >>> 0) {
      $$lcssa = $89;
      $290 = $85;
      $291 = $86;
      $c$3$lcssa = $c$359;
      break;
     }
     $99 = _i64Add($87 | 0, $88 | 0, $89 | 0, $91 | 0) | 0;
     $100 = tempRet0;
     $101 = HEAP32[$3 >> 2] | 0;
     if ($101 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $101 + 1;
      $c$3$be = HEAPU8[$101 >> 0] | 0;
     } else $c$3$be = ___shgetc($f) | 0;
     $108 = $c$3$be + -48 | 0;
     if ($108 >>> 0 < 10 & ($100 >>> 0 < 429496729 | ($100 | 0) == 429496729 & $99 >>> 0 < 2576980378)) {
      $85 = $99;
      $86 = $100;
      $89 = $108;
      $c$359 = $c$3$be;
     } else {
      $$lcssa = $108;
      $290 = $99;
      $291 = $100;
      $c$3$lcssa = $c$3$be;
      break;
     }
    }
    if ($$lcssa >>> 0 > 9) {
     $259 = $291;
     $261 = $290;
     $neg$1 = $neg$0;
    } else {
     $$115 = 10;
     $292 = $290;
     $293 = $291;
     $c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $259 = $289;
    $261 = $288;
    $neg$1 = $neg$0;
   }
  } else {
   $$116 = $$1;
   $c$117 = $c$1;
   label = 46;
  }
  L63 : do if ((label | 0) == 46) {
   if (!($$116 + -1 & $$116)) {
    $128 = HEAP8[11384 + (($$116 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $130 = HEAP8[11128 + $c$117 >> 0] | 0;
    $131 = $130 & 255;
    if ($131 >>> 0 < $$116 >>> 0) {
     $135 = $131;
     $x$136 = 0;
     while (1) {
      $134 = $135 | $x$136 << $128;
      $136 = HEAP32[$3 >> 2] | 0;
      if ($136 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $136 + 1;
       $c$4$be = HEAPU8[$136 >> 0] | 0;
      } else $c$4$be = ___shgetc($f) | 0;
      $144 = HEAP8[11128 + $c$4$be >> 0] | 0;
      $135 = $144 & 255;
      if (!($134 >>> 0 < 134217728 & $135 >>> 0 < $$116 >>> 0)) {
       $$lcssa108 = $134;
       $$lcssa109 = $144;
       $c$4$be$lcssa = $c$4$be;
       break;
      } else $x$136 = $134;
     }
     $152 = $$lcssa109;
     $154 = 0;
     $156 = $$lcssa108;
     $c$4$lcssa = $c$4$be$lcssa;
    } else {
     $152 = $130;
     $154 = 0;
     $156 = 0;
     $c$4$lcssa = $c$117;
    }
    $149 = _bitshift64Lshr(-1, -1, $128 | 0) | 0;
    $150 = tempRet0;
    if (($152 & 255) >>> 0 >= $$116 >>> 0 | ($154 >>> 0 > $150 >>> 0 | ($154 | 0) == ($150 | 0) & $156 >>> 0 > $149 >>> 0)) {
     $$115 = $$116;
     $292 = $156;
     $293 = $154;
     $c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $161 = $156;
     $162 = $154;
     $166 = $152;
    }
    while (1) {
     $163 = _bitshift64Shl($161 | 0, $162 | 0, $128 | 0) | 0;
     $164 = tempRet0;
     $167 = $166 & 255 | $163;
     $168 = HEAP32[$3 >> 2] | 0;
     if ($168 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $168 + 1;
      $c$5$be = HEAPU8[$168 >> 0] | 0;
     } else $c$5$be = ___shgetc($f) | 0;
     $166 = HEAP8[11128 + $c$5$be >> 0] | 0;
     if (($166 & 255) >>> 0 >= $$116 >>> 0 | ($164 >>> 0 > $150 >>> 0 | ($164 | 0) == ($150 | 0) & $167 >>> 0 > $149 >>> 0)) {
      $$115 = $$116;
      $292 = $167;
      $293 = $164;
      $c$8 = $c$5$be;
      label = 72;
      break L63;
     } else {
      $161 = $167;
      $162 = $164;
     }
    }
   }
   $120 = HEAP8[11128 + $c$117 >> 0] | 0;
   $121 = $120 & 255;
   if ($121 >>> 0 < $$116 >>> 0) {
    $186 = $121;
    $x$254 = 0;
    while (1) {
     $185 = $186 + (Math_imul($x$254, $$116) | 0) | 0;
     $187 = HEAP32[$3 >> 2] | 0;
     if ($187 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $187 + 1;
      $c$6$be = HEAPU8[$187 >> 0] | 0;
     } else $c$6$be = ___shgetc($f) | 0;
     $195 = HEAP8[11128 + $c$6$be >> 0] | 0;
     $186 = $195 & 255;
     if (!($185 >>> 0 < 119304647 & $186 >>> 0 < $$116 >>> 0)) {
      $$lcssa110 = $185;
      $$lcssa111 = $195;
      $c$6$be$lcssa = $c$6$be;
      break;
     } else $x$254 = $185;
    }
    $201 = $$lcssa111;
    $294 = $$lcssa110;
    $295 = 0;
    $c$6$lcssa = $c$6$be$lcssa;
   } else {
    $201 = $120;
    $294 = 0;
    $295 = 0;
    $c$6$lcssa = $c$117;
   }
   if (($201 & 255) >>> 0 < $$116 >>> 0) {
    $203 = ___udivdi3(-1, -1, $$116 | 0, 0) | 0;
    $204 = tempRet0;
    $205 = $295;
    $207 = $294;
    $215 = $201;
    $c$742 = $c$6$lcssa;
    while (1) {
     if ($205 >>> 0 > $204 >>> 0 | ($205 | 0) == ($204 | 0) & $207 >>> 0 > $203 >>> 0) {
      $$115 = $$116;
      $292 = $207;
      $293 = $205;
      $c$8 = $c$742;
      label = 72;
      break L63;
     }
     $212 = ___muldi3($207 | 0, $205 | 0, $$116 | 0, 0) | 0;
     $213 = tempRet0;
     $214 = $215 & 255;
     if ($213 >>> 0 > 4294967295 | ($213 | 0) == -1 & $212 >>> 0 > ~$214 >>> 0) {
      $$115 = $$116;
      $292 = $207;
      $293 = $205;
      $c$8 = $c$742;
      label = 72;
      break L63;
     }
     $222 = _i64Add($214 | 0, 0, $212 | 0, $213 | 0) | 0;
     $223 = tempRet0;
     $224 = HEAP32[$3 >> 2] | 0;
     if ($224 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $224 + 1;
      $c$7$be = HEAPU8[$224 >> 0] | 0;
     } else $c$7$be = ___shgetc($f) | 0;
     $215 = HEAP8[11128 + $c$7$be >> 0] | 0;
     if (($215 & 255) >>> 0 >= $$116 >>> 0) {
      $$115 = $$116;
      $292 = $222;
      $293 = $223;
      $c$8 = $c$7$be;
      label = 72;
      break;
     } else {
      $205 = $223;
      $207 = $222;
      $c$742 = $c$7$be;
     }
    }
   } else {
    $$115 = $$116;
    $292 = $294;
    $293 = $295;
    $c$8 = $c$6$lcssa;
    label = 72;
   }
  } while (0);
  if ((label | 0) == 72) if ((HEAPU8[11128 + $c$8 >> 0] | 0) >>> 0 < $$115 >>> 0) {
   do {
    $239 = HEAP32[$3 >> 2] | 0;
    if ($239 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $239 + 1;
     $c$9$be = HEAPU8[$239 >> 0] | 0;
    } else $c$9$be = ___shgetc($f) | 0;
   } while ((HEAPU8[11128 + $c$9$be >> 0] | 0) >>> 0 < $$115 >>> 0);
   $250 = ___errno_location() | 0;
   HEAP32[$250 >> 2] = 34;
   $259 = $1;
   $261 = $0;
   $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0;
  } else {
   $259 = $293;
   $261 = $292;
   $neg$1 = $neg$0;
  }
  if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
  if (!($259 >>> 0 < $1 >>> 0 | ($259 | 0) == ($1 | 0) & $261 >>> 0 < $0 >>> 0)) {
   if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
    $271 = ___errno_location() | 0;
    HEAP32[$271 >> 2] = 34;
    $272 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
    $286 = tempRet0;
    $287 = $272;
    break;
   }
   if ($259 >>> 0 > $1 >>> 0 | ($259 | 0) == ($1 | 0) & $261 >>> 0 > $0 >>> 0) {
    $279 = ___errno_location() | 0;
    HEAP32[$279 >> 2] = 34;
    $286 = $1;
    $287 = $0;
    break;
   }
  }
  $281 = (($neg$1 | 0) < 0) << 31 >> 31;
  $284 = _i64Subtract($261 ^ $neg$1 | 0, $259 ^ $281 | 0, $neg$1 | 0, $281 | 0) | 0;
  $286 = tempRet0;
  $287 = $284;
 } while (0);
 tempRet0 = $286;
 return $287 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i11 = 0, $$0$i$i$i17 = 0, $$0$i$i$i9 = 0, $$1 = 0, $$lcssa70 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $105 = 0, $109 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $120 = 0, $121 = 0, $123 = 0, $129 = 0, $131 = 0, $132 = 0, $135 = 0, $137 = 0, $140 = 0, $145 = 0, $147 = 0, $15 = 0, $154 = 0, $155 = 0, $163 = 0, $164 = 0, $166 = 0, $168 = 0, $173 = 0, $175 = 0, $176 = 0, $179 = 0, $18 = 0, $181 = 0, $184 = 0, $185 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $46 = 0, $48 = 0, $51 = 0, $56 = 0, $58 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $79 = 0, $82 = 0, $83 = 0, $90 = 0, $99 = 0, $__begin$sroa$0$0 = 0, $__begin3$sroa$0$0 = 0, $__i$0$i$i$i = 0, $__p$0$i$i = 0, $__p$0$ph$i$i = 0, $__v$i$i15 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $sub$0 = 0, $sub$0$lcssa69 = 0, $t1$0 = 0, $t1$0$lcssa68 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i15 = sp + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 $4 = $first;
 L1 : do if (($last - $4 | 0) > 1) if ((HEAP8[$first >> 0] | 0) == 84) {
  $10 = HEAP8[$first + 1 >> 0] | 0;
  if ($10 << 24 >> 24 == 95) {
   $15 = HEAP32[$db + 36 >> 2] | 0;
   if ((HEAP32[$db + 32 >> 2] | 0) == ($15 | 0)) {
    $$1 = $first;
    break;
   }
   $18 = HEAP32[$15 + -16 >> 2] | 0;
   if (($18 | 0) == (HEAP32[$15 + -12 >> 2] | 0)) {
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP8[$0 >> 0] = 4;
    $56 = $0 + 1 | 0;
    HEAP8[$56 >> 0] = 84;
    HEAP8[$56 + 1 >> 0] = 95;
    HEAP8[$0 + 3 >> 0] = 0;
    $58 = $0 + 12 | 0;
    HEAP32[$58 >> 2] = 0;
    HEAP32[$58 + 4 >> 2] = 0;
    HEAP32[$58 + 8 >> 2] = 0;
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$58 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $61 = $db + 4 | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    $64 = HEAP32[$db + 8 >> 2] | 0;
    $66 = $64;
    if ($62 >>> 0 < $64 >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($62, $0);
     HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 24;
    } else {
     $71 = HEAP32[$db >> 2] | 0;
     $73 = ($62 - $71 | 0) / 24 | 0;
     $74 = $73 + 1 | 0;
     if ($74 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
     $77 = ($66 - $71 | 0) / 24 | 0;
     if ($77 >>> 0 < 89478485) {
      $79 = $77 << 1;
      $$0$i$i$i11 = $79 >>> 0 < $74 >>> 0 ? $74 : $79;
     } else $$0$i$i$i11 = 178956970;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i15, $$0$i$i$i11, $73, $db + 12 | 0);
     $82 = $__v$i$i15 + 8 | 0;
     $83 = HEAP32[$82 >> 2] | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($83, $0);
     HEAP32[$82 >> 2] = $83 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i15);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i15);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
    HEAP8[$db + 62 >> 0] = 1;
    $$1 = $first + 2 | 0;
    break;
   } else {
    $24 = HEAP32[$18 + 4 >> 2] | 0;
    $25 = $db + 4 | 0;
    $26 = $db + 8 | 0;
    $27 = $db + 12 | 0;
    $28 = $__v$i$i15 + 8 | 0;
    $__begin$sroa$0$0 = HEAP32[$18 >> 2] | 0;
    while (1) {
     if (($__begin$sroa$0$0 | 0) == ($24 | 0)) {
      label = 8;
      break;
     }
     $31 = HEAP32[$25 >> 2] | 0;
     $32 = HEAP32[$26 >> 2] | 0;
     $34 = $32;
     if (($31 | 0) == ($32 | 0)) {
      $40 = HEAP32[$db >> 2] | 0;
      $42 = ($31 - $40 | 0) / 24 | 0;
      $43 = $42 + 1 | 0;
      if ($43 >>> 0 > 178956970) {
       label = 12;
       break;
      }
      $46 = ($34 - $40 | 0) / 24 | 0;
      if ($46 >>> 0 < 89478485) {
       $48 = $46 << 1;
       $$0$i$i$i9 = $48 >>> 0 < $43 >>> 0 ? $43 : $48;
      } else $$0$i$i$i9 = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i15, $$0$i$i$i9, $42, $27);
      $51 = HEAP32[$28 >> 2] | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($51, $__begin$sroa$0$0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($51 + 12 | 0, $__begin$sroa$0$0 + 12 | 0);
      HEAP32[$28 >> 2] = $51 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i15);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i15);
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($31, $__begin$sroa$0$0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($31 + 12 | 0, $__begin$sroa$0$0 + 12 | 0);
      HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 24;
     }
     $__begin$sroa$0$0 = $__begin$sroa$0$0 + 24 | 0;
    }
    if ((label | 0) == 8) {
     $$1 = $first + 2 | 0;
     break;
    } else if ((label | 0) == 12) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
   }
  }
  $isdigittmp = ($10 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $sub$0 = $isdigittmp;
   $t1$0 = $first + 2 | 0;
   while (1) {
    if (($t1$0 | 0) == ($last | 0)) {
     $$1 = $first;
     break L1;
    }
    $90 = HEAP8[$t1$0 >> 0] | 0;
    $isdigittmp6 = ($90 << 24 >> 24) + -48 | 0;
    if ($isdigittmp6 >>> 0 >= 10) {
     $$lcssa70 = $90;
     $sub$0$lcssa69 = $sub$0;
     $t1$0$lcssa68 = $t1$0;
     break;
    }
    $sub$0 = $isdigittmp6 + ($sub$0 * 10 | 0) | 0;
    $t1$0 = $t1$0 + 1 | 0;
   }
   if ($$lcssa70 << 24 >> 24 == 95) {
    $99 = HEAP32[$db + 36 >> 2] | 0;
    if ((HEAP32[$db + 32 >> 2] | 0) == ($99 | 0)) $$1 = $first; else {
     $101 = $sub$0$lcssa69 + 1 | 0;
     $105 = HEAP32[$99 + -16 >> 2] | 0;
     $109 = $105;
     if ($101 >>> 0 < (HEAP32[$99 + -12 >> 2] | 0) - $105 >> 4 >>> 0) {
      $113 = HEAP32[$109 + ($101 << 4) + 4 >> 2] | 0;
      $114 = $db + 4 | 0;
      $115 = $db + 8 | 0;
      $116 = $db + 12 | 0;
      $117 = $__v$i$i15 + 8 | 0;
      $__begin3$sroa$0$0 = HEAP32[$109 + ($101 << 4) >> 2] | 0;
      while (1) {
       if (($__begin3$sroa$0$0 | 0) == ($113 | 0)) {
        label = 38;
        break;
       }
       $120 = HEAP32[$114 >> 2] | 0;
       $121 = HEAP32[$115 >> 2] | 0;
       $123 = $121;
       if (($120 | 0) == ($121 | 0)) {
        $129 = HEAP32[$db >> 2] | 0;
        $131 = ($120 - $129 | 0) / 24 | 0;
        $132 = $131 + 1 | 0;
        if ($132 >>> 0 > 178956970) {
         label = 42;
         break;
        }
        $135 = ($123 - $129 | 0) / 24 | 0;
        if ($135 >>> 0 < 89478485) {
         $137 = $135 << 1;
         $$0$i$i$i17 = $137 >>> 0 < $132 >>> 0 ? $132 : $137;
        } else $$0$i$i$i17 = 178956970;
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i15, $$0$i$i$i17, $131, $116);
        $140 = HEAP32[$117 >> 2] | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($140, $__begin3$sroa$0$0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($140 + 12 | 0, $__begin3$sroa$0$0 + 12 | 0);
        HEAP32[$117 >> 2] = $140 + 24;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i15);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i15);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($120, $__begin3$sroa$0$0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($120 + 12 | 0, $__begin3$sroa$0$0 + 12 | 0);
        HEAP32[$114 >> 2] = (HEAP32[$114 >> 2] | 0) + 24;
       }
       $__begin3$sroa$0$0 = $__begin3$sroa$0$0 + 24 | 0;
      }
      if ((label | 0) == 38) {
       $$1 = $t1$0$lcssa68 + 1 | 0;
       break;
      } else if ((label | 0) == 42) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
     }
     $145 = $t1$0$lcssa68 + 1 | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$2 + 8 >> 2] = 0;
     $147 = $145 - $4 | 0;
     if ($147 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
     if ($147 >>> 0 < 11) {
      HEAP8[$2 >> 0] = $147 << 1;
      $__p$0$ph$i$i = $2 + 1 | 0;
     } else {
      $154 = $147 + 16 & -16;
      $155 = _malloc($154) | 0;
      HEAP32[$2 + 8 >> 2] = $155;
      HEAP32[$2 >> 2] = $154 | 1;
      HEAP32[$2 + 4 >> 2] = $147;
      $__p$0$ph$i$i = $155;
     }
     $$0$i$i = $first;
     $__p$0$i$i = $__p$0$ph$i$i;
     while (1) {
      if (($$0$i$i | 0) == ($145 | 0)) break;
      HEAP8[$__p$0$i$i >> 0] = HEAP8[$$0$i$i >> 0] | 0;
      $$0$i$i = $$0$i$i + 1 | 0;
      $__p$0$i$i = $__p$0$i$i + 1 | 0;
     }
     HEAP8[$__p$0$ph$i$i + $147 >> 0] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
     $163 = $db + 4 | 0;
     $164 = HEAP32[$163 >> 2] | 0;
     $166 = HEAP32[$db + 8 >> 2] | 0;
     $168 = $166;
     if ($164 >>> 0 < $166 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($164, $1);
      HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 24;
     } else {
      $173 = HEAP32[$db >> 2] | 0;
      $175 = ($164 - $173 | 0) / 24 | 0;
      $176 = $175 + 1 | 0;
      if ($176 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $179 = ($168 - $173 | 0) / 24 | 0;
      if ($179 >>> 0 < 89478485) {
       $181 = $179 << 1;
       $$0$i$i$i = $181 >>> 0 < $176 >>> 0 ? $176 : $181;
      } else $$0$i$i$i = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i15, $$0$i$i$i, $175, $db + 12 | 0);
      $184 = $__v$i$i15 + 8 | 0;
      $185 = HEAP32[$184 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($185, $1);
      HEAP32[$184 >> 2] = $185 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i15);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i15);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
     HEAP8[$db + 62 >> 0] = 1;
     $$1 = $145;
    }
   } else $$1 = $first;
  } else $$1 = $first;
 } else $$1 = $first; else $$1 = $first; while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $100 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $116 = 0, $124 = 0, $129 = 0, $130 = 0, $133 = 0, $135 = 0, $137 = 0, $15 = 0, $150 = 0, $155 = 0, $157 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $170 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $193 = 0, $198 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $208 = 0, $22 = 0, $223 = 0, $226 = 0, $227 = 0, $228 = 0, $232 = 0, $233 = 0, $239 = 0, $244 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $258 = 0, $264 = 0, $268 = 0, $269 = 0, $287 = 0, $289 = 0, $296 = 0, $297 = 0, $298 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $83 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, label = 0;
 $0 = $p + $psize | 0;
 $2 = HEAP32[$p + 4 >> 2] | 0;
 do if (!($2 & 1)) {
  $5 = HEAP32[$p >> 2] | 0;
  if (!($2 & 3)) return;
  $9 = $p + (0 - $5) | 0;
  $10 = $5 + $psize | 0;
  $11 = HEAP32[4184] | 0;
  if ($9 >>> 0 < $11 >>> 0) _abort();
  if (($9 | 0) == (HEAP32[4185] | 0)) {
   $99 = $0 + 4 | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   if (($100 & 3 | 0) != 3) {
    $$1 = $9;
    $$14 = $10;
    break;
   }
   HEAP32[4182] = $10;
   HEAP32[$99 >> 2] = $100 & -2;
   HEAP32[$9 + 4 >> 2] = $10 | 1;
   HEAP32[$9 + $10 >> 2] = $10;
   return;
  }
  $15 = $5 >>> 3;
  if ($5 >>> 0 < 256) {
   $18 = HEAP32[$9 + 8 >> 2] | 0;
   $20 = HEAP32[$9 + 12 >> 2] | 0;
   $22 = 16760 + ($15 << 1 << 2) | 0;
   if (($18 | 0) != ($22 | 0)) {
    if ($18 >>> 0 < $11 >>> 0) _abort();
    if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($20 | 0) == ($18 | 0)) {
    HEAP32[4180] = HEAP32[4180] & ~(1 << $15);
    $$1 = $9;
    $$14 = $10;
    break;
   }
   if (($20 | 0) == ($22 | 0)) $$pre$phi24Z2D = $20 + 8 | 0; else {
    if ($20 >>> 0 < $11 >>> 0) _abort();
    $35 = $20 + 8 | 0;
    if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) $$pre$phi24Z2D = $35; else _abort();
   }
   HEAP32[$18 + 12 >> 2] = $20;
   HEAP32[$$pre$phi24Z2D >> 2] = $18;
   $$1 = $9;
   $$14 = $10;
   break;
  }
  $40 = HEAP32[$9 + 24 >> 2] | 0;
  $42 = HEAP32[$9 + 12 >> 2] | 0;
  do if (($42 | 0) == ($9 | 0)) {
   $53 = $9 + 16 | 0;
   $54 = $53 + 4 | 0;
   $55 = HEAP32[$54 >> 2] | 0;
   if (!$55) {
    $57 = HEAP32[$53 >> 2] | 0;
    if (!$57) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $57;
     $RP$1 = $53;
    }
   } else {
    $R$1 = $55;
    $RP$1 = $54;
   }
   while (1) {
    $59 = $R$1 + 20 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    if ($60 | 0) {
     $R$1 = $60;
     $RP$1 = $59;
     continue;
    }
    $62 = $R$1 + 16 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    if (!$63) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $63;
     $RP$1 = $62;
    }
   }
   if ($RP$1$lcssa >>> 0 < $11 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $45 = HEAP32[$9 + 8 >> 2] | 0;
   if ($45 >>> 0 < $11 >>> 0) _abort();
   $47 = $45 + 12 | 0;
   if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) _abort();
   $50 = $42 + 8 | 0;
   if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
    HEAP32[$47 >> 2] = $42;
    HEAP32[$50 >> 2] = $45;
    $R$3 = $42;
    break;
   } else _abort();
  } while (0);
  if (!$40) {
   $$1 = $9;
   $$14 = $10;
  } else {
   $68 = HEAP32[$9 + 28 >> 2] | 0;
   $69 = 17024 + ($68 << 2) | 0;
   if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
    HEAP32[$69 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[4181] = HEAP32[4181] & ~(1 << $68);
     $$1 = $9;
     $$14 = $10;
     break;
    }
   } else {
    if ($40 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
    $78 = $40 + 16 | 0;
    if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) HEAP32[$78 >> 2] = $R$3; else HEAP32[$40 + 20 >> 2] = $R$3;
    if (!$R$3) {
     $$1 = $9;
     $$14 = $10;
     break;
    }
   }
   $83 = HEAP32[4184] | 0;
   if ($R$3 >>> 0 < $83 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $40;
   $86 = $9 + 16 | 0;
   $87 = HEAP32[$86 >> 2] | 0;
   do if ($87 | 0) if ($87 >>> 0 < $83 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $87;
    HEAP32[$87 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $93 = HEAP32[$86 + 4 >> 2] | 0;
   if (!$93) {
    $$1 = $9;
    $$14 = $10;
   } else if ($93 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $R$3;
    $$1 = $9;
    $$14 = $10;
    break;
   }
  }
 } else {
  $$1 = $p;
  $$14 = $psize;
 } while (0);
 $107 = HEAP32[4184] | 0;
 if ($0 >>> 0 < $107 >>> 0) _abort();
 $109 = $0 + 4 | 0;
 $110 = HEAP32[$109 >> 2] | 0;
 if (!($110 & 2)) {
  if (($0 | 0) == (HEAP32[4186] | 0)) {
   $116 = (HEAP32[4183] | 0) + $$14 | 0;
   HEAP32[4183] = $116;
   HEAP32[4186] = $$1;
   HEAP32[$$1 + 4 >> 2] = $116 | 1;
   if (($$1 | 0) != (HEAP32[4185] | 0)) return;
   HEAP32[4185] = 0;
   HEAP32[4182] = 0;
   return;
  }
  if (($0 | 0) == (HEAP32[4185] | 0)) {
   $124 = (HEAP32[4182] | 0) + $$14 | 0;
   HEAP32[4182] = $124;
   HEAP32[4185] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   HEAP32[$$1 + $124 >> 2] = $124;
   return;
  }
  $129 = ($110 & -8) + $$14 | 0;
  $130 = $110 >>> 3;
  do if ($110 >>> 0 < 256) {
   $133 = HEAP32[$0 + 8 >> 2] | 0;
   $135 = HEAP32[$0 + 12 >> 2] | 0;
   $137 = 16760 + ($130 << 1 << 2) | 0;
   if (($133 | 0) != ($137 | 0)) {
    if ($133 >>> 0 < $107 >>> 0) _abort();
    if ((HEAP32[$133 + 12 >> 2] | 0) != ($0 | 0)) _abort();
   }
   if (($135 | 0) == ($133 | 0)) {
    HEAP32[4180] = HEAP32[4180] & ~(1 << $130);
    break;
   }
   if (($135 | 0) == ($137 | 0)) $$pre$phi22Z2D = $135 + 8 | 0; else {
    if ($135 >>> 0 < $107 >>> 0) _abort();
    $150 = $135 + 8 | 0;
    if ((HEAP32[$150 >> 2] | 0) == ($0 | 0)) $$pre$phi22Z2D = $150; else _abort();
   }
   HEAP32[$133 + 12 >> 2] = $135;
   HEAP32[$$pre$phi22Z2D >> 2] = $133;
  } else {
   $155 = HEAP32[$0 + 24 >> 2] | 0;
   $157 = HEAP32[$0 + 12 >> 2] | 0;
   do if (($157 | 0) == ($0 | 0)) {
    $168 = $0 + 16 | 0;
    $169 = $168 + 4 | 0;
    $170 = HEAP32[$169 >> 2] | 0;
    if (!$170) {
     $172 = HEAP32[$168 >> 2] | 0;
     if (!$172) {
      $R7$3 = 0;
      break;
     } else {
      $R7$1 = $172;
      $RP9$1 = $168;
     }
    } else {
     $R7$1 = $170;
     $RP9$1 = $169;
    }
    while (1) {
     $174 = $R7$1 + 20 | 0;
     $175 = HEAP32[$174 >> 2] | 0;
     if ($175 | 0) {
      $R7$1 = $175;
      $RP9$1 = $174;
      continue;
     }
     $177 = $R7$1 + 16 | 0;
     $178 = HEAP32[$177 >> 2] | 0;
     if (!$178) {
      $R7$1$lcssa = $R7$1;
      $RP9$1$lcssa = $RP9$1;
      break;
     } else {
      $R7$1 = $178;
      $RP9$1 = $177;
     }
    }
    if ($RP9$1$lcssa >>> 0 < $107 >>> 0) _abort(); else {
     HEAP32[$RP9$1$lcssa >> 2] = 0;
     $R7$3 = $R7$1$lcssa;
     break;
    }
   } else {
    $160 = HEAP32[$0 + 8 >> 2] | 0;
    if ($160 >>> 0 < $107 >>> 0) _abort();
    $162 = $160 + 12 | 0;
    if ((HEAP32[$162 >> 2] | 0) != ($0 | 0)) _abort();
    $165 = $157 + 8 | 0;
    if ((HEAP32[$165 >> 2] | 0) == ($0 | 0)) {
     HEAP32[$162 >> 2] = $157;
     HEAP32[$165 >> 2] = $160;
     $R7$3 = $157;
     break;
    } else _abort();
   } while (0);
   if ($155 | 0) {
    $183 = HEAP32[$0 + 28 >> 2] | 0;
    $184 = 17024 + ($183 << 2) | 0;
    if (($0 | 0) == (HEAP32[$184 >> 2] | 0)) {
     HEAP32[$184 >> 2] = $R7$3;
     if (!$R7$3) {
      HEAP32[4181] = HEAP32[4181] & ~(1 << $183);
      break;
     }
    } else {
     if ($155 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
     $193 = $155 + 16 | 0;
     if ((HEAP32[$193 >> 2] | 0) == ($0 | 0)) HEAP32[$193 >> 2] = $R7$3; else HEAP32[$155 + 20 >> 2] = $R7$3;
     if (!$R7$3) break;
    }
    $198 = HEAP32[4184] | 0;
    if ($R7$3 >>> 0 < $198 >>> 0) _abort();
    HEAP32[$R7$3 + 24 >> 2] = $155;
    $201 = $0 + 16 | 0;
    $202 = HEAP32[$201 >> 2] | 0;
    do if ($202 | 0) if ($202 >>> 0 < $198 >>> 0) _abort(); else {
     HEAP32[$R7$3 + 16 >> 2] = $202;
     HEAP32[$202 + 24 >> 2] = $R7$3;
     break;
    } while (0);
    $208 = HEAP32[$201 + 4 >> 2] | 0;
    if ($208 | 0) if ($208 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$3 + 20 >> 2] = $208;
     HEAP32[$208 + 24 >> 2] = $R7$3;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $129 | 1;
  HEAP32[$$1 + $129 >> 2] = $129;
  if (($$1 | 0) == (HEAP32[4185] | 0)) {
   HEAP32[4182] = $129;
   return;
  } else $$2 = $129;
 } else {
  HEAP32[$109 >> 2] = $110 & -2;
  HEAP32[$$1 + 4 >> 2] = $$14 | 1;
  HEAP32[$$1 + $$14 >> 2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $226 = 16760 + ($223 << 1 << 2) | 0;
  $227 = HEAP32[4180] | 0;
  $228 = 1 << $223;
  if (!($227 & $228)) {
   HEAP32[4180] = $227 | $228;
   $$pre$phiZ2D = $226 + 8 | 0;
   $F17$0 = $226;
  } else {
   $232 = $226 + 8 | 0;
   $233 = HEAP32[$232 >> 2] | 0;
   if ($233 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $232;
    $F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$F17$0 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $F17$0;
  HEAP32[$$1 + 12 >> 2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 if (!$239) $I20$0 = 0; else if ($$2 >>> 0 > 16777215) $I20$0 = 31; else {
  $244 = ($239 + 1048320 | 0) >>> 16 & 8;
  $245 = $239 << $244;
  $248 = ($245 + 520192 | 0) >>> 16 & 4;
  $250 = $245 << $248;
  $253 = ($250 + 245760 | 0) >>> 16 & 2;
  $258 = 14 - ($248 | $244 | $253) + ($250 << $253 >>> 15) | 0;
  $I20$0 = $$2 >>> ($258 + 7 | 0) & 1 | $258 << 1;
 }
 $264 = 17024 + ($I20$0 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $I20$0;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $268 = HEAP32[4181] | 0;
 $269 = 1 << $I20$0;
 if (!($268 & $269)) {
  HEAP32[4181] = $268 | $269;
  HEAP32[$264 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $264;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $K21$0 = $$2 << (($I20$0 | 0) == 31 ? 0 : 25 - ($I20$0 >>> 1) | 0);
 $T$0 = HEAP32[$264 >> 2] | 0;
 while (1) {
  if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $287 = $T$0 + 16 + ($K21$0 >>> 31 << 2) | 0;
  $289 = HEAP32[$287 >> 2] | 0;
  if (!$289) {
   $$lcssa = $287;
   $T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $K21$0 << 1;
   $T$0 = $289;
  }
 }
 if ((label | 0) == 124) {
  if ($$lcssa >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
  HEAP32[$$lcssa >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $T$0$lcssa30;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } else if ((label | 0) == 127) {
  $296 = $T$0$lcssa + 8 | 0;
  $297 = HEAP32[$296 >> 2] | 0;
  $298 = HEAP32[4184] | 0;
  if (!($297 >>> 0 >= $298 >>> 0 & $T$0$lcssa >>> 0 >= $298 >>> 0)) _abort();
  HEAP32[$297 + 12 >> 2] = $$1;
  HEAP32[$296 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $297;
  HEAP32[$$1 + 12 >> 2] = $T$0$lcssa;
  HEAP32[$$1 + 24 >> 2] = 0;
  return;
 }
}

function _decode_bch($matrixCodeType, $0, $1, $recd127, $out_p) {
 $matrixCodeType = $matrixCodeType | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $recd127 = $recd127 | 0;
 $out_p = $out_p | 0;
 var $$0 = 0, $$25 = 0, $$lcssa34 = 0, $$lcssa35 = 0, $$lcssa36 = 0, $$pre$phi$lcssaZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $106 = 0, $110 = 0, $114 = 0, $118 = 0, $12 = 0, $121 = 0, $129 = 0, $130 = 0, $137 = 0, $149 = 0, $150 = 0, $153 = 0, $167 = 0, $173 = 0, $182 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $194 = 0, $199 = 0, $200 = 0, $21 = 0, $22 = 0, $28 = 0, $3 = 0, $30 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $56 = 0, $6 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $77 = 0, $78 = 0, $83 = 0, $97 = 0, $98 = 0, $99 = 0, $alpha_to$0 = 0, $count$0 = 0, $count$0$lcssa = 0, $count$1 = 0, $d = 0, $elp = 0, $i$0 = 0, $i$1 = 0, $i$10 = 0, $i$11 = 0, $i$12 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $i$8 = 0, $i$9 = 0, $index_of$0 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $l = 0, $length$0 = 0, $loc = 0, $n$0 = 0, $q$0 = 0, $q$1 = 0, $q$2 = 0, $q$3 = 0, $q$4 = 0, $q$4$lcssa = 0, $q$5 = 0, $recd$0 = 0, $recd15 = 0, $reg = 0, $s = 0, $syn_error$0 = 0, $syn_error$0$lcssa = 0, $t$0 = 0, $t$1 = 0, $u$0 = 0, $u$1 = 0, $u_lu = 0, label = 0, sp = 0, $j$1$looptemp = 0, $u$0$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $recd15 = sp + 2304 | 0;
 $elp = sp + 864 | 0;
 $d = sp + 784 | 0;
 $l = sp + 704 | 0;
 $u_lu = sp + 624 | 0;
 $s = sp + 548 | 0;
 $loc = sp + 40 | 0;
 $reg = sp;
 switch ($matrixCodeType | 0) {
 case 772:
  {
   $k$0 = 9;
   $t$0 = 1;
   label = 3;
   break;
  }
 case 1028:
  {
   $k$0 = 5;
   $t$0 = 2;
   label = 3;
   break;
  }
 case 2830:
  {
   $alpha_to$0 = 488;
   $index_of$0 = 1056;
   $k$1 = 64;
   $length$0 = 120;
   $n$0 = 127;
   $recd$0 = $recd127;
   $t$1 = 9;
   label = 6;
   break;
  }
 default:
  $$0 = -1;
 }
 L3 : do if ((label | 0) == 3) {
  $3 = $0;
  $6 = $1;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 13) {
    $alpha_to$0 = 996;
    $index_of$0 = 1568;
    $k$1 = $k$0;
    $length$0 = 13;
    $n$0 = 15;
    $recd$0 = $recd15;
    $t$1 = $t$0;
    label = 6;
    break L3;
   }
   HEAP8[$recd15 + $i$0 >> 0] = $3 & 1;
   $7 = _bitshift64Lshr($3 | 0, $6 | 0, 1) | 0;
   $3 = $7;
   $6 = tempRet0;
   $i$0 = $i$0 + 1 | 0;
  }
 } while (0);
 L8 : do if ((label | 0) == 6) {
  $10 = $t$1 << 1;
  $i$1 = 1;
  $syn_error$0 = 0;
  while (1) {
   if (($i$1 | 0) > ($10 | 0)) {
    $syn_error$0$lcssa = $syn_error$0;
    break;
   }
   $12 = $s + ($i$1 << 2) | 0;
   HEAP32[$12 >> 2] = 0;
   $22 = 0;
   $j$0 = 0;
   while (1) {
    if (($j$0 | 0) >= ($length$0 | 0)) {
     $$lcssa36 = $22;
     break;
    }
    if (!(HEAP8[$recd$0 + $j$0 >> 0] | 0)) $199 = $22; else {
     $19 = $alpha_to$0 + (((Math_imul($j$0, $i$1) | 0) % ($n$0 | 0) | 0) << 2) | 0;
     $21 = $22 ^ HEAP32[$19 >> 2];
     HEAP32[$12 >> 2] = $21;
     $199 = $21;
    }
    $22 = $199;
    $j$0 = $j$0 + 1 | 0;
   }
   HEAP32[$12 >> 2] = HEAP32[$index_of$0 + ($$lcssa36 << 2) >> 2];
   $i$1 = $i$1 + 1 | 0;
   $syn_error$0 = ($$lcssa36 | 0) == 0 ? $syn_error$0 : 1;
  }
  $28 = ($syn_error$0$lcssa | 0) != 0;
  L21 : do if ($28) {
   HEAP32[$d >> 2] = 0;
   $30 = HEAP32[$s + 4 >> 2] | 0;
   HEAP32[$d + 4 >> 2] = $30;
   HEAP32[$elp >> 2] = 0;
   HEAP32[$elp + 72 >> 2] = 1;
   $i$2 = 1;
   while (1) {
    if (($i$2 | 0) >= ($10 | 0)) break;
    HEAP32[$elp + ($i$2 << 2) >> 2] = -1;
    HEAP32[$elp + 72 + ($i$2 << 2) >> 2] = 0;
    $i$2 = $i$2 + 1 | 0;
   }
   HEAP32[$l >> 2] = 0;
   HEAP32[$l + 4 >> 2] = 0;
   HEAP32[$u_lu >> 2] = -1;
   HEAP32[$u_lu + 4 >> 2] = 0;
   $41 = $30;
   $45 = 0;
   $u$0 = 0;
   while (1) {
    $u$0$looptemp = $u$0;
    $u$0 = $u$0 + 1 | 0;
    $40 = $d + ($u$0 << 2) | 0;
    L29 : do if (($41 | 0) == -1) {
     $43 = $u$0$looptemp + 2 | 0;
     HEAP32[$l + ($43 << 2) >> 2] = $45;
     $i$3 = 0;
     while (1) {
      if (($i$3 | 0) > ($45 | 0)) {
       $$pre$phiZ2D = $43;
       $106 = $45;
       break L29;
      }
      $47 = $elp + ($u$0 * 72 | 0) + ($i$3 << 2) | 0;
      $48 = HEAP32[$47 >> 2] | 0;
      HEAP32[$elp + ($43 * 72 | 0) + ($i$3 << 2) >> 2] = $48;
      HEAP32[$47 >> 2] = HEAP32[$index_of$0 + ($48 << 2) >> 2];
      $i$3 = $i$3 + 1 | 0;
     }
    } else {
     $q$0 = $u$0$looptemp;
     while (1) {
      $56 = ($q$0 | 0) > 0;
      if ($56 & (HEAP32[$d + ($q$0 << 2) >> 2] | 0) == -1) $q$0 = $q$0 + -1 | 0; else break;
     }
     if ($56) {
      $j$1 = $q$0;
      $q$1 = $q$0;
      while (1) {
       $j$1$looptemp = $j$1;
       $j$1 = $j$1 + -1 | 0;
       if ((HEAP32[$d + ($j$1 << 2) >> 2] | 0) == -1) $q$2 = $q$1; else $q$2 = (HEAP32[$u_lu + ($q$1 << 2) >> 2] | 0) < (HEAP32[$u_lu + ($j$1 << 2) >> 2] | 0) ? $j$1 : $q$1;
       if (($j$1$looptemp | 0) <= 1) {
        $q$3 = $q$2;
        break;
       } else $q$1 = $q$2;
      }
     } else $q$3 = $q$0;
     $69 = $l + ($q$3 << 2) | 0;
     $71 = $u$0 - $q$3 | 0;
     $72 = $71 + (HEAP32[$69 >> 2] | 0) | 0;
     $73 = ($45 | 0) > ($72 | 0);
     $74 = $u$0$looptemp + 2 | 0;
     $$25 = $73 ? $45 : $72;
     HEAP32[$l + ($74 << 2) >> 2] = $73 ? $45 : $72;
     $i$4 = 0;
     while (1) {
      if (($i$4 | 0) >= ($10 | 0)) break;
      HEAP32[$elp + ($74 * 72 | 0) + ($i$4 << 2) >> 2] = 0;
      $i$4 = $i$4 + 1 | 0;
     }
     $77 = HEAP32[$69 >> 2] | 0;
     $78 = $d + ($q$3 << 2) | 0;
     $i$5 = 0;
     while (1) {
      if (($i$5 | 0) > ($77 | 0)) {
       $i$6 = 0;
       break;
      }
      $83 = HEAP32[$elp + ($q$3 * 72 | 0) + ($i$5 << 2) >> 2] | 0;
      if (($83 | 0) != -1) HEAP32[$elp + ($74 * 72 | 0) + ($71 + $i$5 << 2) >> 2] = HEAP32[$alpha_to$0 + ((($83 + $n$0 + (HEAP32[$40 >> 2] | 0) - (HEAP32[$78 >> 2] | 0) | 0) % ($n$0 | 0) | 0) << 2) >> 2];
      $i$5 = $i$5 + 1 | 0;
     }
     while (1) {
      if (($i$6 | 0) > ($45 | 0)) {
       $$pre$phiZ2D = $74;
       $106 = $$25;
       break L29;
      }
      $97 = $elp + ($u$0 * 72 | 0) + ($i$6 << 2) | 0;
      $98 = HEAP32[$97 >> 2] | 0;
      $99 = $elp + ($74 * 72 | 0) + ($i$6 << 2) | 0;
      HEAP32[$99 >> 2] = HEAP32[$99 >> 2] ^ $98;
      HEAP32[$97 >> 2] = HEAP32[$index_of$0 + ($98 << 2) >> 2];
      $i$6 = $i$6 + 1 | 0;
     }
    } while (0);
    HEAP32[$u_lu + ($$pre$phiZ2D << 2) >> 2] = $u$0 - $106;
    if (($u$0 | 0) >= ($10 | 0)) {
     $$lcssa35 = $106;
     $$pre$phi$lcssaZ2D = $$pre$phiZ2D;
     break;
    }
    $110 = HEAP32[$s + ($$pre$phiZ2D << 2) >> 2] | 0;
    if (($110 | 0) == -1) $$sink = 0; else $$sink = HEAP32[$alpha_to$0 + ($110 << 2) >> 2] | 0;
    $114 = $d + ($$pre$phiZ2D << 2) | 0;
    HEAP32[$114 >> 2] = $$sink;
    $130 = $$sink;
    $i$7 = 1;
    while (1) {
     if (($i$7 | 0) > ($106 | 0)) {
      $$lcssa34 = $130;
      break;
     }
     $118 = HEAP32[$s + ($$pre$phiZ2D - $i$7 << 2) >> 2] | 0;
     if (($118 | 0) == -1) $200 = $130; else {
      $121 = HEAP32[$elp + ($$pre$phiZ2D * 72 | 0) + ($i$7 << 2) >> 2] | 0;
      if (!$121) $200 = $130; else {
       $129 = $130 ^ HEAP32[$alpha_to$0 + ((((HEAP32[$index_of$0 + ($121 << 2) >> 2] | 0) + $118 | 0) % ($n$0 | 0) | 0) << 2) >> 2];
       HEAP32[$114 >> 2] = $129;
       $200 = $129;
      }
     }
     $130 = $200;
     $i$7 = $i$7 + 1 | 0;
    }
    $41 = HEAP32[$index_of$0 + ($$lcssa34 << 2) >> 2] | 0;
    HEAP32[$114 >> 2] = $41;
    if (($106 | 0) > ($t$1 | 0)) {
     $$lcssa35 = $106;
     $$pre$phi$lcssaZ2D = $$pre$phiZ2D;
     break;
    } else $45 = $106;
   }
   if (($$lcssa35 | 0) > ($t$1 | 0)) {
    $$0 = -1;
    break L8;
   } else $i$8 = 0;
   while (1) {
    if (($i$8 | 0) > ($$lcssa35 | 0)) {
     $i$9 = 1;
     break;
    }
    $137 = $elp + ($$pre$phi$lcssaZ2D * 72 | 0) + ($i$8 << 2) | 0;
    HEAP32[$137 >> 2] = HEAP32[$index_of$0 + (HEAP32[$137 >> 2] << 2) >> 2];
    $i$8 = $i$8 + 1 | 0;
   }
   while (1) {
    if (($i$9 | 0) > ($$lcssa35 | 0)) {
     $count$0 = 0;
     $i$10 = 1;
     break;
    }
    HEAP32[$reg + ($i$9 << 2) >> 2] = HEAP32[$elp + ($$pre$phi$lcssaZ2D * 72 | 0) + ($i$9 << 2) >> 2];
    $i$9 = $i$9 + 1 | 0;
   }
   while (1) {
    if (($n$0 | 0) < ($i$10 | 0)) {
     $count$0$lcssa = $count$0;
     break;
    } else {
     $j$2 = 1;
     $q$4 = 1;
    }
    while (1) {
     if (($j$2 | 0) > ($$lcssa35 | 0)) {
      $q$4$lcssa = $q$4;
      break;
     }
     $149 = $reg + ($j$2 << 2) | 0;
     $150 = HEAP32[$149 >> 2] | 0;
     if (($150 | 0) == -1) $q$5 = $q$4; else {
      $153 = ($150 + $j$2 | 0) % ($n$0 | 0) | 0;
      HEAP32[$149 >> 2] = $153;
      $q$5 = HEAP32[$alpha_to$0 + ($153 << 2) >> 2] ^ $q$4;
     }
     $j$2 = $j$2 + 1 | 0;
     $q$4 = $q$5;
    }
    if (!$q$4$lcssa) {
     HEAP32[$loc + ($count$0 << 2) >> 2] = $n$0 - $i$10;
     $count$1 = $count$0 + 1 | 0;
    } else $count$1 = $count$0;
    $count$0 = $count$1;
    $i$10 = $i$10 + 1 | 0;
   }
   if (($count$0$lcssa | 0) == ($$lcssa35 | 0)) $i$11 = 0; else {
    $$0 = -1;
    break L8;
   }
   while (1) {
    if (($i$11 | 0) >= ($$lcssa35 | 0)) {
     $u$1 = $$pre$phi$lcssaZ2D;
     break L21;
    }
    $167 = $recd$0 + (HEAP32[$loc + ($i$11 << 2) >> 2] | 0) | 0;
    HEAP8[$167 >> 0] = HEAPU8[$167 >> 0] ^ 1;
    $i$11 = $i$11 + 1 | 0;
   }
  } else $u$1 = 0; while (0);
  $173 = $out_p;
  HEAP32[$173 >> 2] = 0;
  HEAP32[$173 + 4 >> 2] = 0;
  $182 = 1;
  $183 = 0;
  $186 = 0;
  $187 = 0;
  $i$12 = $length$0 - $k$1 | 0;
  while (1) {
   if (($i$12 | 0) >= ($length$0 | 0)) break;
   $184 = ___muldi3(HEAPU8[$recd$0 + $i$12 >> 0] | 0, 0, $182 | 0, $183 | 0) | 0;
   $188 = _i64Add($184 | 0, tempRet0 | 0, $186 | 0, $187 | 0) | 0;
   $189 = tempRet0;
   $190 = $out_p;
   HEAP32[$190 >> 2] = $188;
   HEAP32[$190 + 4 >> 2] = $189;
   $194 = _bitshift64Shl($182 | 0, $183 | 0, 1) | 0;
   $182 = $194;
   $183 = tempRet0;
   $186 = $188;
   $187 = $189;
   $i$12 = $i$12 + 1 | 0;
  }
  if ($28) $$0 = HEAP32[$l + ($u$1 << 2) >> 2] | 0; else $$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i13 = 0, $$0$i$i$i8 = 0, $$1 = 0, $0 = 0, $1 = 0, $101 = 0, $108 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $119 = 0, $120 = 0, $126 = 0, $128 = 0, $13 = 0, $132 = 0, $14 = 0, $141 = 0, $142 = 0, $145 = 0, $146 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $155 = 0, $157 = 0, $159 = 0, $165 = 0, $167 = 0, $174 = 0, $176 = 0, $177 = 0, $179 = 0, $18 = 0, $182 = 0, $185 = 0, $186 = 0, $192 = 0, $194 = 0, $2 = 0, $22 = 0, $23 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $38 = 0, $4 = 0, $40 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $55 = 0, $58 = 0, $59 = 0, $65 = 0, $67 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $99 = 0, $__v$i$i12 = 0, $k1$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i12 = sp + 72 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 L1 : do if (($first | 0) == ($last | 0)) $$1 = $first; else switch (HEAP8[$first >> 0] | 0) {
 case 84:
  {
   $9 = $db + 4 | 0;
   $13 = ((HEAP32[$9 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   $14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   $15 = HEAP32[$9 >> 2] | 0;
   $18 = ($15 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   $22 = $15;
   if (!(($14 | 0) != ($first | 0) & ($18 | 0) == ($13 + 1 | 0))) {
    $73 = $22;
    $k1$0 = $18;
    while (1) {
     if (($k1$0 | 0) == ($13 | 0)) {
      $$1 = $first;
      break L1;
     }
     $72 = $73 + -24 | 0;
     $74 = $73;
     while (1) {
      if (($74 | 0) == ($72 | 0)) break;
      $76 = $74 + -24 | 0;
      HEAP32[$9 >> 2] = $76;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($76);
      $74 = HEAP32[$9 >> 2] | 0;
     }
     $73 = $72;
     $k1$0 = $k1$0 + -1 | 0;
    }
   }
   $23 = $db + 16 | 0;
   HEAP32[$1 >> 2] = HEAP32[$db + 12 >> 2];
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($0, $22 + -24 | 0, $1);
   $27 = $db + 20 | 0;
   $28 = HEAP32[$27 >> 2] | 0;
   $30 = HEAP32[$db + 24 >> 2] | 0;
   $32 = $30;
   if ($28 >>> 0 < $30 >>> 0) {
    HEAP32[$28 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
    HEAP32[$28 >> 2] = HEAP32[$0 >> 2];
    $38 = $0 + 4 | 0;
    HEAP32[$28 + 4 >> 2] = HEAP32[$38 >> 2];
    $40 = $0 + 8 | 0;
    HEAP32[$28 + 8 >> 2] = HEAP32[$40 >> 2];
    HEAP32[$40 >> 2] = 0;
    HEAP32[$38 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 16;
   } else {
    $47 = HEAP32[$23 >> 2] | 0;
    $49 = $28 - $47 >> 4;
    $50 = $49 + 1 | 0;
    if ($50 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($23);
    $52 = $32 - $47 | 0;
    if ($52 >> 4 >>> 0 < 134217727) {
     $55 = $52 >> 3;
     $$0$i$i$i = $55 >>> 0 < $50 >>> 0 ? $50 : $55;
    } else $$0$i$i$i = 268435455;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i12, $$0$i$i$i, $49, $db + 28 | 0);
    $58 = $__v$i$i12 + 8 | 0;
    $59 = HEAP32[$58 >> 2] | 0;
    HEAP32[$59 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
    HEAP32[$59 >> 2] = HEAP32[$0 >> 2];
    $65 = $0 + 4 | 0;
    HEAP32[$59 + 4 >> 2] = HEAP32[$65 >> 2];
    $67 = $0 + 8 | 0;
    HEAP32[$59 + 8 >> 2] = HEAP32[$67 >> 2];
    HEAP32[$67 >> 2] = 0;
    HEAP32[$65 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$58 >> 2] = $59 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($23, $__v$i$i12);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i12);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
   $$1 = $14;
   break L1;
   break;
  }
 case 68:
  {
   $78 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   if (($78 | 0) == ($first | 0)) {
    $$1 = $first;
    break L1;
   }
   $82 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($82 | 0)) {
    $$1 = $first;
    break L1;
   }
   $84 = $db + 16 | 0;
   HEAP32[$3 >> 2] = HEAP32[$db + 12 >> 2];
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($2, $82 + -24 | 0, $3);
   $88 = $db + 20 | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   $91 = HEAP32[$db + 24 >> 2] | 0;
   $93 = $91;
   if ($89 >>> 0 < $91 >>> 0) {
    HEAP32[$89 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
    HEAP32[$89 >> 2] = HEAP32[$2 >> 2];
    $99 = $2 + 4 | 0;
    HEAP32[$89 + 4 >> 2] = HEAP32[$99 >> 2];
    $101 = $2 + 8 | 0;
    HEAP32[$89 + 8 >> 2] = HEAP32[$101 >> 2];
    HEAP32[$101 >> 2] = 0;
    HEAP32[$99 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$88 >> 2] = (HEAP32[$88 >> 2] | 0) + 16;
   } else {
    $108 = HEAP32[$84 >> 2] | 0;
    $110 = $89 - $108 >> 4;
    $111 = $110 + 1 | 0;
    if ($111 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($84);
    $113 = $93 - $108 | 0;
    if ($113 >> 4 >>> 0 < 134217727) {
     $116 = $113 >> 3;
     $$0$i$i$i8 = $116 >>> 0 < $111 >>> 0 ? $111 : $116;
    } else $$0$i$i$i8 = 268435455;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i12, $$0$i$i$i8, $110, $db + 28 | 0);
    $119 = $__v$i$i12 + 8 | 0;
    $120 = HEAP32[$119 >> 2] | 0;
    HEAP32[$120 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
    HEAP32[$120 >> 2] = HEAP32[$2 >> 2];
    $126 = $2 + 4 | 0;
    HEAP32[$120 + 4 >> 2] = HEAP32[$126 >> 2];
    $128 = $2 + 8 | 0;
    HEAP32[$120 + 8 >> 2] = HEAP32[$128 >> 2];
    HEAP32[$128 >> 2] = 0;
    HEAP32[$126 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$119 >> 2] = $120 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84, $__v$i$i12);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i12);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($2);
   $$1 = $78;
   break L1;
   break;
  }
 case 83:
  {
   $132 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   if (($132 | 0) != ($first | 0)) {
    $$1 = $132;
    break L1;
   }
   if (($last - $first | 0) <= 2) {
    $$1 = $first;
    break L1;
   }
   if ((HEAP8[$first + 1 >> 0] | 0) != 116) {
    $$1 = $first;
    break L1;
   }
   $141 = $first + 2 | 0;
   $142 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($141, $last, $db) | 0;
   if (($142 | 0) == ($141 | 0)) {
    $$1 = $first;
    break L1;
   }
   $145 = $db + 4 | 0;
   $146 = HEAP32[$145 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($146 | 0)) {
    $$1 = $first;
    break L1;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($146 + -24 | 0, 0, 15693) | 0;
   $149 = $db + 16 | 0;
   $151 = (HEAP32[$145 >> 2] | 0) + -24 | 0;
   HEAP32[$5 >> 2] = HEAP32[$db + 12 >> 2];
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4, $151, $5);
   $154 = $db + 20 | 0;
   $155 = HEAP32[$154 >> 2] | 0;
   $157 = HEAP32[$db + 24 >> 2] | 0;
   $159 = $157;
   if ($155 >>> 0 < $157 >>> 0) {
    HEAP32[$155 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAP32[$155 >> 2] = HEAP32[$4 >> 2];
    $165 = $4 + 4 | 0;
    HEAP32[$155 + 4 >> 2] = HEAP32[$165 >> 2];
    $167 = $4 + 8 | 0;
    HEAP32[$155 + 8 >> 2] = HEAP32[$167 >> 2];
    HEAP32[$167 >> 2] = 0;
    HEAP32[$165 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$154 >> 2] = (HEAP32[$154 >> 2] | 0) + 16;
   } else {
    $174 = HEAP32[$149 >> 2] | 0;
    $176 = $155 - $174 >> 4;
    $177 = $176 + 1 | 0;
    if ($177 >>> 0 > 268435455) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($149);
    $179 = $159 - $174 | 0;
    if ($179 >> 4 >>> 0 < 134217727) {
     $182 = $179 >> 3;
     $$0$i$i$i13 = $182 >>> 0 < $177 >>> 0 ? $177 : $182;
    } else $$0$i$i$i13 = 268435455;
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i12, $$0$i$i$i13, $176, $db + 28 | 0);
    $185 = $__v$i$i12 + 8 | 0;
    $186 = HEAP32[$185 >> 2] | 0;
    HEAP32[$186 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAP32[$186 >> 2] = HEAP32[$4 >> 2];
    $192 = $4 + 4 | 0;
    HEAP32[$186 + 4 >> 2] = HEAP32[$192 >> 2];
    $194 = $4 + 8 | 0;
    HEAP32[$186 + 8 >> 2] = HEAP32[$194 >> 2];
    HEAP32[$194 >> 2] = 0;
    HEAP32[$192 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$185 >> 2] = $186 + 16;
    __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($149, $__v$i$i12);
    __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i12);
   }
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
   $$1 = $142;
   break L1;
   break;
  }
 default:
  {
   $$1 = $first;
   break L1;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _get_matrix_code($data, $size, $code_out_p, $dir, $cf, $matrixCodeType, $errorCorrected) {
 $data = $data | 0;
 $size = $size | 0;
 $code_out_p = $code_out_p | 0;
 $dir = $dir | 0;
 $cf = $cf | 0;
 $matrixCodeType = $matrixCodeType | 0;
 $errorCorrected = $errorCorrected | 0;
 var $$ = 0, $$0 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $113 = 0, $114 = 0, $120 = 0, $121 = 0, $122 = 0, $126 = 0, $135 = 0.0, $137 = 0, $138 = 0, $139 = 0, $142 = 0, $148 = 0, $149 = 0, $15 = 0, $152 = 0, $16 = 0, $161 = 0, $162 = 0, $166 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $34 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $58 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $76 = 0, $77 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $87 = 0, $96 = 0, $code = 0, $contrastMin$0 = 0, $contrastMin$0$lcssa = 0, $corner = 0, $dirCode = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$2$lcssa = 0, $i$2$lcssa74 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $j$3 = 0, $max$0 = 0, $max$0$lcssa = 0, $min$0 = 0, $min$0$lcssa = 0, $or$cond734 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $dirCode = sp + 24 | 0;
 $corner = sp + 8 | 0;
 $code = sp;
 L1 : do if (($size + -3 | 0) >>> 0 > 5) {
  HEAP32[$code_out_p >> 2] = -1;
  HEAP32[$dir >> 2] = 0;
  HEAPF64[$cf >> 3] = -1.0;
  $$0 = -1;
 } else {
  HEAP32[$corner >> 2] = 0;
  $1 = $size + -1 | 0;
  $2 = Math_imul($1, $size) | 0;
  HEAP32[$corner + 4 >> 2] = $2;
  $4 = Math_imul($size, $size) | 0;
  HEAP32[$corner + 8 >> 2] = $4 + -1;
  HEAP32[$corner + 12 >> 2] = $1;
  $i$0 = 0;
  $max$0 = 0;
  $min$0 = -1;
  while (1) {
   if (($i$0 | 0) == 4) {
    $max$0$lcssa = $max$0;
    $min$0$lcssa = $min$0;
    break;
   }
   $11 = HEAP8[$data + (HEAP32[$corner + ($i$0 << 2) >> 2] | 0) >> 0] | 0;
   $i$0 = $i$0 + 1 | 0;
   $max$0 = ($11 & 255) > ($max$0 & 255) ? $11 : $max$0;
   $min$0 = ($11 & 255) < ($min$0 & 255) ? $11 : $min$0;
  }
  $15 = $max$0$lcssa & 255;
  $16 = $min$0$lcssa & 255;
  if (($15 - $16 | 0) < 30) {
   HEAP32[$code_out_p >> 2] = -1;
   HEAP32[$dir >> 2] = 0;
   HEAPF64[$cf >> 3] = -1.0;
   $$0 = -2;
   break;
  }
  $20 = ($15 + $16 | 0) >>> 1;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) == 4) {
    $i$2 = 0;
    break;
   }
   HEAP8[$dirCode + $i$1 >> 0] = (HEAPU8[$data + (HEAP32[$corner + ($i$1 << 2) >> 2] | 0) >> 0] | 0) >>> 0 < $20 >>> 0 & 1;
   $i$1 = $i$1 + 1 | 0;
  }
  while (1) {
   if (($i$2 | 0) >= 4) {
    $i$2$lcssa = $i$2;
    label = 16;
    break;
   }
   $34 = $i$2 + 1 | 0;
   if ((HEAP8[$dirCode + $i$2 >> 0] | 0) != 1) {
    $i$2 = $34;
    continue;
   }
   if ((HEAP8[$dirCode + (($34 | 0) % 4 | 0) >> 0] | 0) != 1) {
    $i$2 = $34;
    continue;
   }
   if (!(HEAP8[$dirCode + (($i$2 + 2 | 0) % 4 | 0) >> 0] | 0)) {
    $i$2$lcssa74 = $i$2;
    label = 15;
    break;
   } else $i$2 = $34;
  }
  if ((label | 0) == 15) {
   HEAP32[$dir >> 2] = $i$2$lcssa74;
   $contrastMin$0 = 255;
   $i$3 = 0;
  } else if ((label | 0) == 16) if (($i$2$lcssa | 0) == 4) {
   HEAP32[$code_out_p >> 2] = -1;
   HEAP32[$dir >> 2] = 0;
   HEAPF64[$cf >> 3] = -1.0;
   $$0 = -3;
   break;
  } else {
   $contrastMin$0 = 255;
   $i$3 = 0;
  }
  while (1) {
   if (($i$3 | 0) >= ($4 | 0)) {
    $contrastMin$0$lcssa = $contrastMin$0;
    break;
   }
   $46 = $data + $i$3 | 0;
   $48 = HEAPU8[$46 >> 0] | 0;
   $49 = $48 - $20 | 0;
   $$ = ($49 | 0) < 0 ? 0 - $49 | 0 : $49;
   HEAP8[$46 >> 0] = $48 >>> 0 < $20 >>> 0 & 1;
   $contrastMin$0 = ($$ | 0) < ($contrastMin$0 | 0) ? $$ : $contrastMin$0;
   $i$3 = $i$3 + 1 | 0;
  }
  L27 : do switch (HEAP32[$dir >> 2] | 0) {
  case 0:
   {
    $176 = 0;
    $177 = 0;
    $j$0 = 0;
    while (1) {
     if (($j$0 | 0) >= ($size | 0)) {
      $137 = $176;
      $161 = $177;
      break L27;
     }
     $58 = ($j$0 | 0) == ($1 | 0);
     $59 = Math_imul($j$0, $size) | 0;
     $64 = $176;
     $65 = $177;
     $i$4 = 0;
     while (1) {
      if (($i$4 | 0) == ($size | 0)) {
       $184 = $64;
       $185 = $65;
       break;
      }
      if (!($i$4 | $j$0)) {
       $186 = $64;
       $187 = $65;
      } else if ($58 & (($i$4 | 0) == 0 | ($i$4 | 0) == ($1 | 0))) {
       $186 = $64;
       $187 = $65;
      } else {
       $66 = _bitshift64Shl($64 | 0, $65 | 0, 1) | 0;
       $186 = (HEAP8[$data + ($i$4 + $59) >> 0] | 0) != 0 | $66;
       $187 = tempRet0;
      }
      $64 = $186;
      $65 = $187;
      $i$4 = $i$4 + 1 | 0;
     }
     $176 = $184;
     $177 = $185;
     $j$0 = $j$0 + 1 | 0;
    }
    break;
   }
  case 1:
   {
    $178 = 0;
    $179 = 0;
    $i$5 = 0;
    while (1) {
     if (($i$5 | 0) >= ($size | 0)) {
      $137 = $178;
      $161 = $179;
      break L27;
     }
     $76 = ($i$5 | 0) == 0;
     $77 = ($i$5 | 0) == ($1 | 0);
     $81 = $178;
     $82 = $179;
     $j$1 = $1;
     while (1) {
      if (($j$1 | 0) <= -1) {
       $188 = $81;
       $189 = $82;
       break;
      }
      $79 = ($j$1 | 0) == ($1 | 0);
      if ($76 & $79) {
       $190 = $81;
       $191 = $82;
      } else if ($77 & ($79 | ($j$1 | 0) == 0)) {
       $190 = $81;
       $191 = $82;
      } else {
       $83 = _bitshift64Shl($81 | 0, $82 | 0, 1) | 0;
       $87 = $data + ((Math_imul($j$1, $size) | 0) + $i$5) | 0;
       $190 = (HEAP8[$87 >> 0] | 0) != 0 | $83;
       $191 = tempRet0;
      }
      $81 = $190;
      $82 = $191;
      $j$1 = $j$1 + -1 | 0;
     }
     $178 = $188;
     $179 = $189;
     $i$5 = $i$5 + 1 | 0;
    }
    break;
   }
  case 2:
   {
    $180 = 0;
    $181 = 0;
    $j$2 = $1;
    while (1) {
     if (($j$2 | 0) <= -1) {
      $137 = $180;
      $161 = $181;
      break L27;
     }
     $or$cond734 = ($j$2 | 0) == ($1 | 0) | ($j$2 | 0) == 0;
     $96 = Math_imul($j$2, $size) | 0;
     $101 = $180;
     $102 = $181;
     $i$6 = $1;
     while (1) {
      if (($i$6 | 0) <= -1) {
       $192 = $101;
       $193 = $102;
       break;
      }
      if ($or$cond734 & ($i$6 | 0) == ($1 | 0) | ($i$6 | $j$2 | 0) == 0) {
       $194 = $101;
       $195 = $102;
      } else {
       $103 = _bitshift64Shl($101 | 0, $102 | 0, 1) | 0;
       $194 = (HEAP8[$data + ($i$6 + $96) >> 0] | 0) != 0 | $103;
       $195 = tempRet0;
      }
      $101 = $194;
      $102 = $195;
      $i$6 = $i$6 + -1 | 0;
     }
     $180 = $192;
     $181 = $193;
     $j$2 = $j$2 + -1 | 0;
    }
    break;
   }
  case 3:
   {
    $182 = 0;
    $183 = 0;
    $i$7 = $1;
    while (1) {
     if (($i$7 | 0) <= -1) {
      $137 = $182;
      $161 = $183;
      break L27;
     }
     $113 = ($i$7 | 0) == ($1 | 0);
     $114 = ($i$7 | 0) == 0;
     $120 = $182;
     $121 = $183;
     $j$3 = 0;
     while (1) {
      if (($j$3 | 0) >= ($size | 0)) {
       $196 = $120;
       $197 = $121;
       break;
      }
      if ($113 & ($j$3 | 0) == 0 | ($j$3 | $i$7 | 0) == 0 | $114 & ($j$3 | 0) == ($1 | 0)) {
       $198 = $120;
       $199 = $121;
      } else {
       $122 = _bitshift64Shl($120 | 0, $121 | 0, 1) | 0;
       $126 = $data + ((Math_imul($j$3, $size) | 0) + $i$7) | 0;
       $198 = (HEAP8[$126 >> 0] | 0) != 0 | $122;
       $199 = tempRet0;
      }
      $120 = $198;
      $121 = $199;
      $j$3 = $j$3 + 1 | 0;
     }
     $182 = $196;
     $183 = $197;
     $i$7 = $i$7 + -1 | 0;
    }
    break;
   }
  default:
   {
    $137 = 0;
    $161 = 0;
   }
  } while (0);
  if (($contrastMin$0$lcssa | 0) > 30) $135 = 1.0; else $135 = +($contrastMin$0$lcssa | 0) / 30.0;
  HEAPF64[$cf >> 3] = $135;
  switch ($matrixCodeType | 0) {
  case 259:
   {
    $138 = HEAP8[3571 + $137 >> 0] | 0;
    $139 = $138 << 24 >> 24;
    $142 = $code;
    HEAP32[$142 >> 2] = $139;
    HEAP32[$142 + 4 >> 2] = (($139 | 0) < 0) << 31 >> 31;
    if ($138 << 24 >> 24 < 0) {
     HEAP32[$code_out_p >> 2] = -1;
     HEAPF64[$cf >> 3] = -1.0;
     $$0 = -4;
     break L1;
    }
    break;
   }
  case 515:
   {
    $148 = HEAP8[3443 + $137 >> 0] | 0;
    $149 = $148 << 24 >> 24;
    $152 = $code;
    HEAP32[$152 >> 2] = $149;
    HEAP32[$152 + 4 >> 2] = (($149 | 0) < 0) << 31 >> 31;
    if ($errorCorrected | 0) HEAP32[$errorCorrected >> 2] = HEAPU8[3507 + $137 >> 0];
    if ($148 << 24 >> 24 < 0) {
     HEAP32[$code_out_p >> 2] = -1;
     HEAPF64[$cf >> 3] = -1.0;
     $$0 = -4;
     break L1;
    }
    break;
   }
  case 772:
  case 1028:
   {
    $162 = _decode_bch($matrixCodeType, $137, $161, 0, $code) | 0;
    if (($162 | 0) < 0) {
     HEAP32[$code_out_p >> 2] = -1;
     HEAPF64[$cf >> 3] = -1.0;
     $$0 = -4;
     break L1;
    }
    if (($errorCorrected | 0) != 0 & ($162 | 0) > 0) HEAP32[$errorCorrected >> 2] = $162;
    break;
   }
  default:
   {
    $166 = $code;
    HEAP32[$166 >> 2] = $137;
    HEAP32[$166 + 4 >> 2] = $161;
   }
  }
  HEAP32[$code_out_p >> 2] = HEAP32[$code >> 2];
  $$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arDetectMarker2($xsize, $ysize, $labelInfo, $imageProcMode, $areaMax, $areaMin, $squareFitThresh, $markerInfo2, $marker2_num) {
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelInfo = $labelInfo | 0;
 $imageProcMode = $imageProcMode | 0;
 $areaMax = $areaMax | 0;
 $areaMin = $areaMin | 0;
 $squareFitThresh = +$squareFitThresh;
 $markerInfo2 = $markerInfo2 | 0;
 $marker2_num = $marker2_num | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$lcssa = 0, $$lcssa21 = 0, $0 = 0, $11 = 0, $113 = 0, $118 = 0, $12 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $132 = 0.0, $137 = 0.0, $139 = 0.0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $152 = 0, $157 = 0, $160 = 0, $163 = 0, $166 = 0, $169 = 0, $172 = 0, $175 = 0, $178 = 0, $184 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $57 = 0.0, $6 = 0, $64 = 0, $66 = 0, $7 = 0, $72 = 0, $8 = 0, $88 = 0, $dmax$0$i = 0, $i$0 = 0, $i$0$i = 0, $i$0$v1$0$i = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $j$0 = 0, $j$1 = 0, $j$1$in = 0, $j$2 = 0, $pm$0 = 0, $v1$0$i = 0, $v1$0$i$lcssa = 0, $vertex$sroa$12$0$i = 0, $vertex$sroa$4$0$i = 0, $vertex$sroa$8$0$i = 0, $wv1$i = 0, $wv2$i = 0, $wvnum1$i = 0, $wvnum2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $wv1$i = sp + 56 | 0;
 $wvnum1$i = sp + 48 | 0;
 $wv2$i = sp + 8 | 0;
 $wvnum2$i = sp;
 $0 = ($imageProcMode | 0) == 1;
 if ($0) {
  $$0 = ($xsize | 0) / 2 | 0;
  $$01 = ($ysize | 0) / 2 | 0;
  $$02 = ($areaMax | 0) / 4 | 0;
  $$03 = ($areaMin | 0) / 4 | 0;
 } else {
  $$0 = $xsize;
  $$01 = $ysize;
  $$02 = $areaMax;
  $$03 = $areaMin;
 }
 HEAP32[$marker2_num >> 2] = 0;
 $5 = $labelInfo + 8 | 0;
 $6 = $$0 + -2 | 0;
 $7 = $$01 + -2 | 0;
 $8 = $labelInfo + 1179664 | 0;
 $i$0 = 0;
 L4 : while (1) {
  if (($i$0 | 0) >= (HEAP32[$5 >> 2] | 0)) {
   label = 5;
   break;
  }
  $11 = $labelInfo + 12 + ($i$0 << 2) | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  L7 : do if (!(($12 | 0) < ($$03 | 0) | ($12 | 0) > ($$02 | 0))) {
   $15 = $labelInfo + 131084 + ($i$0 << 4) | 0;
   if ((HEAP32[$15 >> 2] | 0) != 1) if ((HEAP32[$labelInfo + 131084 + ($i$0 << 4) + 4 >> 2] | 0) != ($6 | 0)) if ((HEAP32[$labelInfo + 131084 + ($i$0 << 4) + 8 >> 2] | 0) != 1) if ((HEAP32[$labelInfo + 131084 + ($i$0 << 4) + 12 >> 2] | 0) != ($7 | 0)) if ((_arGetContour(HEAP32[$labelInfo >> 2] | 0, $$0, 0, $8, $i$0 + 1 | 0, $15, $markerInfo2 + ((HEAP32[$marker2_num >> 2] | 0) * 80048 | 0) | 0) | 0) >= 0) {
    $33 = HEAP32[$11 >> 2] | 0;
    $34 = HEAP32[$marker2_num >> 2] | 0;
    $35 = $markerInfo2 + ($34 * 80048 | 0) + 28 | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = $markerInfo2 + ($34 * 80048 | 0) + 40028 | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    $39 = $markerInfo2 + ($34 * 80048 | 0) + 24 | 0;
    $41 = (HEAP32[$39 >> 2] | 0) + -1 | 0;
    $dmax$0$i = 0;
    $i$0$i = 1;
    $v1$0$i = 0;
    while (1) {
     if (($i$0$i | 0) >= ($41 | 0)) {
      $v1$0$i$lcssa = $v1$0$i;
      break;
     }
     $45 = (HEAP32[$markerInfo2 + ($34 * 80048 | 0) + 28 + ($i$0$i << 2) >> 2] | 0) - $36 | 0;
     $46 = Math_imul($45, $45) | 0;
     $49 = (HEAP32[$markerInfo2 + ($34 * 80048 | 0) + 40028 + ($i$0$i << 2) >> 2] | 0) - $38 | 0;
     $51 = (Math_imul($49, $49) | 0) + $46 | 0;
     $52 = ($51 | 0) > ($dmax$0$i | 0);
     $i$0$v1$0$i = $52 ? $i$0$i : $v1$0$i;
     $dmax$0$i = $52 ? $51 : $dmax$0$i;
     $i$0$i = $i$0$i + 1 | 0;
     $v1$0$i = $i$0$v1$0$i;
    }
    $57 = +($33 | 0) / .75 * .01 * $squareFitThresh;
    HEAP32[$wvnum1$i >> 2] = 0;
    HEAP32[$wvnum2$i >> 2] = 0;
    L18 : do if ((_get_vertex($35, $37, 0, $v1$0$i$lcssa, $57, $wv1$i, $wvnum1$i) | 0) >= 0) if ((_get_vertex($35, $37, $v1$0$i$lcssa, (HEAP32[$39 >> 2] | 0) + -1 | 0, $57, $wv2$i, $wvnum2$i) | 0) >= 0) {
     $64 = HEAP32[$wvnum1$i >> 2] | 0;
     $66 = HEAP32[$wvnum2$i >> 2] | 0;
     do if (($64 | 0) == 1 & ($66 | 0) == 1) {
      $vertex$sroa$12$0$i = HEAP32[$wv2$i >> 2] | 0;
      $vertex$sroa$4$0$i = HEAP32[$wv1$i >> 2] | 0;
      $vertex$sroa$8$0$i = $v1$0$i$lcssa;
     } else {
      if (($64 | 0) > 1 & ($66 | 0) == 0) {
       $72 = ($v1$0$i$lcssa | 0) / 2 | 0;
       HEAP32[$wvnum2$i >> 2] = 0;
       HEAP32[$wvnum1$i >> 2] = 0;
       if ((_get_vertex($35, $37, 0, $72, $57, $wv1$i, $wvnum1$i) | 0) < 0) break L18;
       if ((_get_vertex($35, $37, $72, $v1$0$i$lcssa, $57, $wv2$i, $wvnum2$i) | 0) < 0) break L18;
       if (!((HEAP32[$wvnum1$i >> 2] | 0) == 1 & (HEAP32[$wvnum2$i >> 2] | 0) == 1)) break L18;
       $vertex$sroa$12$0$i = $v1$0$i$lcssa;
       $vertex$sroa$4$0$i = HEAP32[$wv1$i >> 2] | 0;
       $vertex$sroa$8$0$i = HEAP32[$wv2$i >> 2] | 0;
       break;
      }
      if (!(($64 | 0) == 0 & ($66 | 0) > 1)) break L18;
      $88 = ($v1$0$i$lcssa + -1 + (HEAP32[$39 >> 2] | 0) | 0) / 2 | 0;
      HEAP32[$wvnum2$i >> 2] = 0;
      HEAP32[$wvnum1$i >> 2] = 0;
      if ((_get_vertex($35, $37, $v1$0$i$lcssa, $88, $57, $wv1$i, $wvnum1$i) | 0) < 0) break L18;
      if ((_get_vertex($35, $37, $88, (HEAP32[$39 >> 2] | 0) + -1 | 0, $57, $wv2$i, $wvnum2$i) | 0) < 0) break L18;
      if (!((HEAP32[$wvnum1$i >> 2] | 0) == 1 & (HEAP32[$wvnum2$i >> 2] | 0) == 1)) break L18;
      $vertex$sroa$12$0$i = HEAP32[$wv2$i >> 2] | 0;
      $vertex$sroa$4$0$i = $v1$0$i$lcssa;
      $vertex$sroa$8$0$i = HEAP32[$wv1$i >> 2] | 0;
     } while (0);
     HEAP32[$markerInfo2 + ($34 * 80048 | 0) + 80028 >> 2] = 0;
     HEAP32[$markerInfo2 + ($34 * 80048 | 0) + 80032 >> 2] = $vertex$sroa$4$0$i;
     HEAP32[$markerInfo2 + ($34 * 80048 | 0) + 80036 >> 2] = $vertex$sroa$8$0$i;
     HEAP32[$markerInfo2 + ($34 * 80048 | 0) + 80040 >> 2] = $vertex$sroa$12$0$i;
     HEAP32[$markerInfo2 + ($34 * 80048 | 0) + 80044 >> 2] = (HEAP32[$39 >> 2] | 0) + -1;
     HEAP32[$markerInfo2 + ((HEAP32[$marker2_num >> 2] | 0) * 80048 | 0) >> 2] = HEAP32[$11 >> 2];
     $113 = HEAP32[$marker2_num >> 2] | 0;
     HEAPF64[$markerInfo2 + ($113 * 80048 | 0) + 8 >> 3] = +HEAPF64[$labelInfo + 655376 + ($i$0 << 4) >> 3];
     HEAPF64[$markerInfo2 + ($113 * 80048 | 0) + 16 >> 3] = +HEAPF64[$labelInfo + 655376 + ($i$0 << 4) + 8 >> 3];
     $118 = $113 + 1 | 0;
     HEAP32[$marker2_num >> 2] = $118;
     if (($118 | 0) == 60) {
      $122 = 60;
      $i$1 = 0;
      break L4;
     } else break L7;
    } while (0);
   }
  } while (0);
  $i$0 = $i$0 + 1 | 0;
 }
 if ((label | 0) == 5) {
  $122 = HEAP32[$marker2_num >> 2] | 0;
  $i$1 = 0;
 }
 L39 : while (1) {
  if (($i$1 | 0) >= ($122 | 0)) {
   $152 = $122;
   $i$2 = 0;
   break;
  }
  $123 = $i$1 + 1 | 0;
  $124 = $markerInfo2 + ($i$1 * 80048 | 0) + 8 | 0;
  $125 = $markerInfo2 + ($i$1 * 80048 | 0) + 16 | 0;
  $126 = $markerInfo2 + ($i$1 * 80048 | 0) | 0;
  $128 = $122;
  $j$0 = $123;
  while (1) {
   if (($j$0 | 0) >= ($128 | 0)) {
    $122 = $128;
    $i$1 = $123;
    continue L39;
   }
   $132 = +HEAPF64[$124 >> 3] - +HEAPF64[$markerInfo2 + ($j$0 * 80048 | 0) + 8 >> 3];
   $137 = +HEAPF64[$125 >> 3] - +HEAPF64[$markerInfo2 + ($j$0 * 80048 | 0) + 16 >> 3];
   $139 = $132 * $132 + $137 * $137;
   $140 = HEAP32[$126 >> 2] | 0;
   $141 = $markerInfo2 + ($j$0 * 80048 | 0) | 0;
   $142 = HEAP32[$141 >> 2] | 0;
   if (($140 | 0) > ($142 | 0)) {
    if ($139 < +(($140 | 0) / 4 | 0 | 0)) HEAP32[$141 >> 2] = 0;
   } else if ($139 < +(($142 | 0) / 4 | 0 | 0)) HEAP32[$126 >> 2] = 0;
   $128 = HEAP32[$marker2_num >> 2] | 0;
   $j$0 = $j$0 + 1 | 0;
  }
 }
 while (1) {
  if (($i$2 | 0) >= ($152 | 0)) {
   $$lcssa21 = $152;
   break;
  }
  if (!(HEAP32[$markerInfo2 + ($i$2 * 80048 | 0) >> 2] | 0)) {
   $157 = $152;
   $j$1$in = $i$2;
   while (1) {
    $j$1 = $j$1$in + 1 | 0;
    if (($j$1 | 0) >= ($157 | 0)) {
     $$lcssa = $157;
     break;
    }
    _memcpy($markerInfo2 + ($j$1$in * 80048 | 0) | 0, $markerInfo2 + ($j$1 * 80048 | 0) | 0, 80048) | 0;
    $157 = HEAP32[$marker2_num >> 2] | 0;
    $j$1$in = $j$1;
   }
   $160 = $$lcssa + -1 | 0;
   HEAP32[$marker2_num >> 2] = $160;
   $184 = $160;
  } else $184 = $152;
  $152 = $184;
  $i$2 = $i$2 + 1 | 0;
 }
 L61 : do if ($0) {
  $163 = $$lcssa21;
  $i$3 = 0;
  $pm$0 = $markerInfo2;
  while (1) {
   if (($i$3 | 0) >= ($163 | 0)) break L61;
   HEAP32[$pm$0 >> 2] = HEAP32[$pm$0 >> 2] << 2;
   $166 = $pm$0 + 8 | 0;
   HEAPF64[$166 >> 3] = +HEAPF64[$166 >> 3] * 2.0;
   $169 = $pm$0 + 16 | 0;
   HEAPF64[$169 >> 3] = +HEAPF64[$169 >> 3] * 2.0;
   $172 = $pm$0 + 24 | 0;
   $j$2 = 0;
   while (1) {
    if (($j$2 | 0) >= (HEAP32[$172 >> 2] | 0)) break;
    $175 = $pm$0 + 28 + ($j$2 << 2) | 0;
    HEAP32[$175 >> 2] = HEAP32[$175 >> 2] << 1;
    $178 = $pm$0 + 40028 + ($j$2 << 2) | 0;
    HEAP32[$178 >> 2] = HEAP32[$178 >> 2] << 1;
    $j$2 = $j$2 + 1 | 0;
   }
   $163 = HEAP32[$marker2_num >> 2] | 0;
   $i$3 = $i$3 + 1 | 0;
   $pm$0 = $pm$0 + 80048 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _arMultiReadConfigFile($filename, $pattHandle) {
 $filename = $filename | 0;
 $pattHandle = $pattHandle | 0;
 var $$01 = 0, $0 = 0, $108 = 0, $11 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $29 = 0, $35 = 0, $4 = 0, $46 = 0, $50 = 0, $51 = 0, $53 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $80 = 0.0, $84 = 0.0, $9 = 0, $buf = 0, $dummy = 0, $i$0 = 0, $i$0$lcssa73 = 0, $i$0$lcssa74 = 0, $i$0$lcssa75 = 0, $j$0 = 0, $j$1 = 0, $num = 0, $pattPath = 0, $patt_type$0 = 0, $patt_type$0$lcssa = 0, $patt_type$1 = 0, $t2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer41 = 0, $vararg_buffer45 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer8 = 0, $wpos3d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2528 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer59 = sp + 208 | 0;
 $vararg_buffer55 = sp + 200 | 0;
 $vararg_buffer49 = sp + 184 | 0;
 $vararg_buffer45 = sp + 176 | 0;
 $vararg_buffer41 = sp + 168 | 0;
 $vararg_buffer35 = sp + 152 | 0;
 $vararg_buffer31 = sp + 144 | 0;
 $vararg_buffer28 = sp + 136 | 0;
 $vararg_buffer24 = sp + 128 | 0;
 $vararg_buffer21 = sp + 120 | 0;
 $vararg_buffer17 = sp + 112 | 0;
 $vararg_buffer13 = sp + 104 | 0;
 $vararg_buffer11 = sp + 96 | 0;
 $vararg_buffer8 = sp + 88 | 0;
 $vararg_buffer5 = sp + 80 | 0;
 $vararg_buffer1 = sp + 72 | 0;
 $vararg_buffer = sp + 64 | 0;
 $wpos3d = sp;
 $buf = sp + 2272 | 0;
 $pattPath = sp + 224 | 0;
 $dummy = sp + 220 | 0;
 $num = sp + 216 | 0;
 $t2 = sp + 212 | 0;
 $0 = _fopen($filename, 4326) | 0;
 do if (!$0) {
  HEAP32[$vararg_buffer >> 2] = $filename;
  _arLog(3, 4328, $vararg_buffer);
  $2 = ___errno_location() | 0;
  $4 = _strerror(HEAP32[$2 >> 2] | 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 18261;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $4;
  _arLog(3, 4381, $vararg_buffer1);
  $$01 = 0;
 } else {
  _get_buff($buf, $0);
  HEAP32[$vararg_buffer5 >> 2] = $num;
  if ((_sscanf($buf, 4387, $vararg_buffer5) | 0) != 1) {
   HEAP32[$vararg_buffer8 >> 2] = $filename;
   _arLog(3, 4390, $vararg_buffer8);
   _fclose($0) | 0;
   $$01 = 0;
   break;
  }
  $7 = HEAP32[$num >> 2] | 0;
  $9 = _malloc($7 * 320 | 0) | 0;
  if (!$9) {
   _arLog(3, 4491, $vararg_buffer11);
   _exit(1);
  }
  $11 = $wpos3d + 8 | 0;
  $12 = $wpos3d + 16 | 0;
  $13 = $wpos3d + 24 | 0;
  $14 = $wpos3d + 32 | 0;
  $15 = $wpos3d + 40 | 0;
  $16 = $wpos3d + 48 | 0;
  $17 = $wpos3d + 56 | 0;
  $18 = ($pattHandle | 0) == 0;
  $20 = $7;
  $i$0 = 0;
  $patt_type$0 = 0;
  L10 : while (1) {
   if (($i$0 | 0) >= ($20 | 0)) {
    $patt_type$0$lcssa = $patt_type$0;
    label = 31;
    break;
   }
   _get_buff($buf, $0);
   $21 = $9 + ($i$0 * 320 | 0) | 0;
   $22 = $9 + ($i$0 * 320 | 0) + 312 | 0;
   HEAP32[$vararg_buffer13 >> 2] = $22;
   HEAP32[$vararg_buffer13 + 4 >> 2] = $dummy;
   if ((_sscanf($buf, 4508, $vararg_buffer13) | 0) == 1) {
    $35 = HEAP32[$22 >> 2] | 0;
    HEAP32[$21 >> 2] = ($35 & -32768 | 0) == 0 & 0 == 0 ? $35 & 32767 : 0;
    HEAP32[$9 + ($i$0 * 320 | 0) + 4 >> 2] = 1;
    $patt_type$1 = $patt_type$0 | 2;
   } else {
    if ($18) {
     label = 11;
     break;
    }
    if (!(_arUtilGetDirectoryNameFromPath($pattPath, $filename, 2048, 1) | 0)) {
     label = 13;
     break;
    }
    _strncat($pattPath, $buf, 2047 - (_strlen($pattPath) | 0) | 0) | 0;
    $29 = _arPattLoad($pattHandle, $pattPath) | 0;
    HEAP32[$21 >> 2] = $29;
    if (($29 | 0) < 0) {
     label = 15;
     break;
    }
    HEAP32[$9 + ($i$0 * 320 | 0) + 4 >> 2] = 0;
    $patt_type$1 = $patt_type$0 | 1;
   }
   _get_buff($buf, $0);
   $46 = $9 + ($i$0 * 320 | 0) + 8 | 0;
   HEAP32[$vararg_buffer28 >> 2] = $46;
   if ((_sscanf($buf, 4804, $vararg_buffer28) | 0) != 1) {
    $i$0$lcssa73 = $i$0;
    label = 19;
    break;
   }
   _get_buff($buf, $0);
   $50 = $9 + ($i$0 * 320 | 0) + 16 | 0;
   $51 = $9 + ($i$0 * 320 | 0) + 24 | 0;
   $53 = $9 + ($i$0 * 320 | 0) + 40 | 0;
   HEAP32[$vararg_buffer35 >> 2] = $50;
   HEAP32[$vararg_buffer35 + 4 >> 2] = $51;
   HEAP32[$vararg_buffer35 + 8 >> 2] = $9 + ($i$0 * 320 | 0) + 32;
   HEAP32[$vararg_buffer35 + 12 >> 2] = $53;
   if ((_sscanf($buf, 4913, $vararg_buffer35) | 0) == 4) $j$0 = 1; else {
    HEAP32[$vararg_buffer41 >> 2] = $vararg_buffer5;
    HEAP32[$vararg_buffer41 + 4 >> 2] = $t2;
    if ((_sscanf($buf, 4929, $vararg_buffer41) | 0) != 2) {
     $i$0$lcssa74 = $i$0;
     label = 23;
     break;
    }
    $j$0 = 0;
   }
   do {
    _get_buff($buf, $0);
    HEAP32[$vararg_buffer49 >> 2] = $9 + ($i$0 * 320 | 0) + 16 + ($j$0 << 5);
    HEAP32[$vararg_buffer49 + 4 >> 2] = $9 + ($i$0 * 320 | 0) + 16 + ($j$0 << 5) + 8;
    HEAP32[$vararg_buffer49 + 8 >> 2] = $9 + ($i$0 * 320 | 0) + 16 + ($j$0 << 5) + 16;
    HEAP32[$vararg_buffer49 + 12 >> 2] = $9 + ($i$0 * 320 | 0) + 16 + ($j$0 << 5) + 24;
    if ((_sscanf($buf, 4913, $vararg_buffer49) | 0) != 4) {
     $i$0$lcssa75 = $i$0;
     label = 25;
     break L10;
    }
    $j$0 = $j$0 + 1 | 0;
   } while (($j$0 | 0) < 3);
   _arUtilMatInv($50, $9 + ($i$0 * 320 | 0) + 112 | 0) | 0;
   $69 = +HEAPF64[$46 >> 3];
   $70 = $69 * -.5;
   HEAPF64[$wpos3d >> 3] = $70;
   $71 = $69 * .5;
   HEAPF64[$11 >> 3] = $71;
   HEAPF64[$12 >> 3] = $71;
   HEAPF64[$13 >> 3] = $71;
   HEAPF64[$14 >> 3] = $71;
   HEAPF64[$15 >> 3] = $70;
   HEAPF64[$16 >> 3] = $70;
   HEAPF64[$17 >> 3] = $70;
   $72 = $9 + ($i$0 * 320 | 0) + 48 | 0;
   $73 = $9 + ($i$0 * 320 | 0) + 56 | 0;
   $74 = $9 + ($i$0 * 320 | 0) + 72 | 0;
   $75 = $9 + ($i$0 * 320 | 0) + 80 | 0;
   $76 = $9 + ($i$0 * 320 | 0) + 88 | 0;
   $77 = $9 + ($i$0 * 320 | 0) + 104 | 0;
   $j$1 = 0;
   while (1) {
    if (($j$1 | 0) == 4) break;
    $80 = +HEAPF64[$wpos3d + ($j$1 << 4) >> 3];
    $84 = +HEAPF64[$wpos3d + ($j$1 << 4) + 8 >> 3];
    HEAPF64[$9 + ($i$0 * 320 | 0) + 208 + ($j$1 * 24 | 0) >> 3] = +HEAPF64[$53 >> 3] + (+HEAPF64[$50 >> 3] * $80 + +HEAPF64[$51 >> 3] * $84);
    HEAPF64[$9 + ($i$0 * 320 | 0) + 208 + ($j$1 * 24 | 0) + 8 >> 3] = +HEAPF64[$74 >> 3] + (+HEAPF64[$72 >> 3] * $80 + +HEAPF64[$73 >> 3] * $84);
    HEAPF64[$9 + ($i$0 * 320 | 0) + 208 + ($j$1 * 24 | 0) + 16 >> 3] = +HEAPF64[$77 >> 3] + (+HEAPF64[$75 >> 3] * $80 + +HEAPF64[$76 >> 3] * $84);
    $j$1 = $j$1 + 1 | 0;
   }
   $20 = HEAP32[$num >> 2] | 0;
   $i$0 = $i$0 + 1 | 0;
   $patt_type$0 = $patt_type$1;
  }
  if ((label | 0) == 11) {
   HEAP32[$vararg_buffer17 >> 2] = $filename;
   HEAP32[$vararg_buffer17 + 4 >> 2] = $buf;
   _arLog(3, 4515, $vararg_buffer17);
  } else if ((label | 0) == 13) {
   HEAP32[$vararg_buffer21 >> 2] = $filename;
   _arLog(3, 4643, $vararg_buffer21);
  } else if ((label | 0) == 15) {
   HEAP32[$vararg_buffer24 >> 2] = $filename;
   HEAP32[$vararg_buffer24 + 4 >> 2] = $pattPath;
   _arLog(3, 4727, $vararg_buffer24);
  } else if ((label | 0) == 19) {
   HEAP32[$vararg_buffer31 >> 2] = $filename;
   HEAP32[$vararg_buffer31 + 4 >> 2] = $i$0$lcssa73 + 1;
   _arLog(3, 4808, $vararg_buffer31);
  } else if ((label | 0) == 23) {
   HEAP32[$vararg_buffer45 >> 2] = $filename;
   HEAP32[$vararg_buffer45 + 4 >> 2] = $i$0$lcssa74 + 1;
   _arLog(3, 4935, $vararg_buffer45);
  } else if ((label | 0) == 25) {
   HEAP32[$vararg_buffer55 >> 2] = $filename;
   HEAP32[$vararg_buffer55 + 4 >> 2] = $i$0$lcssa75 + 1;
   _arLog(3, 4935, $vararg_buffer55);
  } else if ((label | 0) == 31) {
   _fclose($0) | 0;
   $108 = _malloc(136) | 0;
   if (!$108) {
    _arLog(3, 4491, $vararg_buffer59);
    _exit(1);
   }
   HEAP32[$108 >> 2] = $9;
   HEAP32[$108 + 4 >> 2] = HEAP32[$num >> 2];
   HEAP32[$108 + 104 >> 2] = 0;
   do if (($patt_type$0$lcssa & 3 | 0) == 3) HEAP32[$108 + 108 >> 2] = 2; else {
    $118 = $108 + 108 | 0;
    if (!($patt_type$0$lcssa & 1)) {
     HEAP32[$118 >> 2] = 1;
     break;
    } else {
     HEAP32[$118 >> 2] = 0;
     break;
    }
   } while (0);
   HEAPF64[$108 + 112 >> 3] = .5;
   HEAPF64[$108 + 120 >> 3] = .5;
   $$01 = $108;
   break;
  }
  _fclose($0) | 0;
  _free($9);
  $$01 = 0;
 } while (0);
 STACKTOP = sp;
 return $$01 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i21 = 0, $$0$i$i12 = 0, $$2 = 0, $$3 = 0, $0 = 0, $1 = 0, $101 = 0, $103 = 0, $108 = 0, $110 = 0, $111 = 0, $114 = 0, $116 = 0, $119 = 0, $120 = 0, $15 = 0, $16 = 0, $2 = 0, $22 = 0, $29 = 0, $3 = 0, $30 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $57 = 0, $59 = 0, $62 = 0, $63 = 0, $67 = 0, $72 = 0, $73 = 0, $79 = 0, $86 = 0, $87 = 0, $95 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i16 = 0, $__p$0$i$i = 0, $__p$0$i$i11 = 0, $__p$0$ph$i$i = 0, $__p$0$ph$i$i9 = 0, $__v$i$i20 = 0, $cv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i20 = sp + 104 | 0;
 $cv = sp + 72 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 60 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 L1 : do if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 102) {
  switch (HEAP8[$first + 1 >> 0] | 0) {
  case 112:
   {
    $15 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first + 2 | 0, $last, $cv) | 0;
    $16 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($15, $last) | 0;
    if (($16 | 0) == ($last | 0)) $$0 = $first; else if ((HEAP8[$16 >> 0] | 0) == 95) {
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$2 + 8 >> 2] = 0;
     $22 = $16 - $15 | 0;
     if ($22 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
     if ($22 >>> 0 < 11) {
      HEAP8[$2 >> 0] = $22 << 1;
      $__p$0$ph$i$i = $2 + 1 | 0;
     } else {
      $29 = $22 + 16 & -16;
      $30 = _malloc($29) | 0;
      HEAP32[$2 + 8 >> 2] = $30;
      HEAP32[$2 >> 2] = $29 | 1;
      HEAP32[$2 + 4 >> 2] = $22;
      $__p$0$ph$i$i = $30;
     }
     $$0$i$i = $15;
     $__p$0$i$i = $__p$0$ph$i$i;
     while (1) {
      if (($$0$i$i | 0) == ($16 | 0)) break;
      HEAP8[$__p$0$i$i >> 0] = HEAP8[$$0$i$i >> 0] | 0;
      $$0$i$i = $$0$i$i + 1 | 0;
      $__p$0$i$i = $__p$0$i$i + 1 | 0;
     }
     HEAP8[$__p$0$ph$i$i + $22 >> 0] = 0;
     $38 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2, 0, 14702) | 0;
     HEAP32[$1 >> 2] = HEAP32[$38 >> 2];
     HEAP32[$1 + 4 >> 2] = HEAP32[$38 + 4 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$38 + 8 >> 2];
     $__i$0$i$i$i = 0;
     while (1) {
      if (($__i$0$i$i$i | 0) == 3) break;
      HEAP32[$38 + ($__i$0$i$i$i << 2) >> 2] = 0;
      $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
     $41 = $db + 4 | 0;
     $42 = HEAP32[$41 >> 2] | 0;
     $44 = HEAP32[$db + 8 >> 2] | 0;
     $46 = $44;
     if ($42 >>> 0 < $44 >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($42, $0);
      HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 24;
     } else {
      $51 = HEAP32[$db >> 2] | 0;
      $53 = ($42 - $51 | 0) / 24 | 0;
      $54 = $53 + 1 | 0;
      if ($54 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      $57 = ($46 - $51 | 0) / 24 | 0;
      if ($57 >>> 0 < 89478485) {
       $59 = $57 << 1;
       $$0$i$i$i = $59 >>> 0 < $54 >>> 0 ? $54 : $59;
      } else $$0$i$i$i = 178956970;
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i20, $$0$i$i$i, $53, $db + 12 | 0);
      $62 = $__v$i$i20 + 8 | 0;
      $63 = HEAP32[$62 >> 2] | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($63, $0);
      HEAP32[$62 >> 2] = $63 + 24;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i20);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i20);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
     $$0 = $16 + 1 | 0;
    } else $$0 = $first;
    $$3 = $$0;
    break L1;
    break;
   }
  case 76:
   break;
  default:
   {
    $$3 = $first;
    break L1;
   }
  }
  $67 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first + 2 | 0, $last) | 0;
  if (($67 | 0) == ($last | 0)) $$2 = $first; else if ((HEAP8[$67 >> 0] | 0) == 112) {
   $72 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($67 + 1 | 0, $last, $cv) | 0;
   $73 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($72, $last) | 0;
   if (($73 | 0) == ($last | 0)) $$2 = $first; else if ((HEAP8[$73 >> 0] | 0) == 95) {
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    $79 = $73 - $72 | 0;
    if ($79 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($5);
    if ($79 >>> 0 < 11) {
     HEAP8[$5 >> 0] = $79 << 1;
     $__p$0$ph$i$i9 = $5 + 1 | 0;
    } else {
     $86 = $79 + 16 & -16;
     $87 = _malloc($86) | 0;
     HEAP32[$5 + 8 >> 2] = $87;
     HEAP32[$5 >> 2] = $86 | 1;
     HEAP32[$5 + 4 >> 2] = $79;
     $__p$0$ph$i$i9 = $87;
    }
    $$0$i$i12 = $72;
    $__p$0$i$i11 = $__p$0$ph$i$i9;
    while (1) {
     if (($$0$i$i12 | 0) == ($73 | 0)) break;
     HEAP8[$__p$0$i$i11 >> 0] = HEAP8[$$0$i$i12 >> 0] | 0;
     $$0$i$i12 = $$0$i$i12 + 1 | 0;
     $__p$0$i$i11 = $__p$0$i$i11 + 1 | 0;
    }
    HEAP8[$__p$0$ph$i$i9 + $79 >> 0] = 0;
    $95 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5, 0, 14702) | 0;
    HEAP32[$4 >> 2] = HEAP32[$95 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAP32[$95 + 4 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$95 + 8 >> 2];
    $__i$0$i$i$i16 = 0;
    while (1) {
     if (($__i$0$i$i$i16 | 0) == 3) break;
     HEAP32[$95 + ($__i$0$i$i$i16 << 2) >> 2] = 0;
     $__i$0$i$i$i16 = $__i$0$i$i$i16 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
    $98 = $db + 4 | 0;
    $99 = HEAP32[$98 >> 2] | 0;
    $101 = HEAP32[$db + 8 >> 2] | 0;
    $103 = $101;
    if ($99 >>> 0 < $101 >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($99, $3);
     HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + 24;
    } else {
     $108 = HEAP32[$db >> 2] | 0;
     $110 = ($99 - $108 | 0) / 24 | 0;
     $111 = $110 + 1 | 0;
     if ($111 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
     $114 = ($103 - $108 | 0) / 24 | 0;
     if ($114 >>> 0 < 89478485) {
      $116 = $114 << 1;
      $$0$i$i$i21 = $116 >>> 0 < $111 >>> 0 ? $111 : $116;
     } else $$0$i$i$i21 = 178956970;
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i20, $$0$i$i$i21, $110, $db + 12 | 0);
     $119 = $__v$i$i20 + 8 | 0;
     $120 = HEAP32[$119 >> 2] | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($120, $3);
     HEAP32[$119 >> 2] = $120 + 24;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i20);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i20);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $$2 = $73 + 1 | 0;
   } else $$2 = $first;
  } else $$2 = $first;
  $$3 = $$2;
 } else $$3 = $first; else $$3 = $first; while (0);
 STACKTOP = sp;
 return $$3 | 0;
}

function _pattern_match($pattHandle, $mode, $data, $size, $code, $dir, $cf) {
 $pattHandle = $pattHandle | 0;
 $mode = $mode | 0;
 $data = $data | 0;
 $size = $size | 0;
 $code = $code | 0;
 $dir = $dir | 0;
 $cf = $cf | 0;
 var $$0 = 0, $1 = 0, $106 = 0, $113 = 0.0, $114 = 0, $13 = 0, $19 = 0, $2 = 0, $25 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $49 = 0, $56 = 0.0, $57 = 0, $60 = 0, $62 = 0, $71 = 0, $77 = 0, $83 = 0.0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $95 = 0, $96 = 0, $ave$0 = 0, $ave$0$lcssa = 0, $ave$1 = 0, $ave$1$lcssa = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $j$0 = 0, $j$1 = 0, $k$0 = 0, $k$1 = 0, $k$1$in = 0, $k$1$lcssa = 0, $k$143 = 0, $k$2 = 0, $k$3 = 0, $k$3$in = 0, $k$3$lcssa = 0, $k$345 = 0, $l$0 = 0, $l$1 = 0, $max$0 = 0.0, $max$0$lcssa = 0.0, $max$1 = 0.0, $max$3 = 0.0, $max$4 = 0.0, $max$4$lcssa = 0.0, $max$5 = 0.0, $max$7 = 0.0, $res1$0 = 0, $res1$0$lcssa = 0, $res1$1 = 0, $res1$2 = 0, $res1$3 = 0, $res1$4 = 0, $res1$4$lcssa = 0, $res1$5 = 0, $res1$6 = 0, $res1$7 = 0, $res2$0 = 0, $res2$0$lcssa = 0, $res2$1 = 0, $res2$3 = 0, $res2$4 = 0, $res2$4$lcssa = 0, $res2$5 = 0, $res2$7 = 0, $sum$0 = 0, $sum$0$lcssa = 0, $sum$1 = 0, $sum$1$lcssa = 0, $sum$2 = 0, $sum$2$lcssa = 0, $sum$3 = 0, $sum$3$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (!$pattHandle) {
  HEAP32[$code >> 2] = 0;
  HEAP32[$dir >> 2] = 0;
  HEAPF64[$cf >> 3] = -1.0;
  $$0 = -1;
 } else switch ($mode | 0) {
 case 0:
  {
   $1 = Math_imul($size, $size) | 0;
   $2 = $1 * 3 | 0;
   $4 = _malloc($1 * 12 | 0) | 0;
   if (!$4) {
    _arLog(3, 4491, $vararg_buffer);
    _exit(1);
   } else {
    $ave$0 = 0;
    $i$0 = 0;
   }
   while (1) {
    if (($i$0 | 0) >= ($2 | 0)) {
     $ave$0$lcssa = $ave$0;
     break;
    }
    $ave$0 = ((HEAPU8[$data + $i$0 >> 0] | 0) ^ 255) + $ave$0 | 0;
    $i$0 = $i$0 + 1 | 0;
   }
   $13 = ($ave$0$lcssa | 0) / ($2 | 0) | 0;
   $i$1 = 0;
   $sum$0 = 0;
   while (1) {
    if (($i$1 | 0) >= ($2 | 0)) {
     $sum$0$lcssa = $sum$0;
     break;
    }
    $19 = ((HEAPU8[$data + $i$1 >> 0] | 0) ^ 255) - $13 | 0;
    HEAP32[$4 + ($i$1 << 2) >> 2] = $19;
    $i$1 = $i$1 + 1 | 0;
    $sum$0 = (Math_imul($19, $19) | 0) + $sum$0 | 0;
   }
   $25 = +Math_sqrt(+(+($sum$0$lcssa | 0)));
   if ($25 / (+($size | 0) * 1.7320508) < 15.0) {
    HEAP32[$code >> 2] = 0;
    HEAP32[$dir >> 2] = 0;
    HEAPF64[$cf >> 3] = -1.0;
    _free($4);
    $$0 = -2;
    break L1;
   }
   $30 = HEAP32[$pattHandle >> 2] | 0;
   $31 = $pattHandle + 8 | 0;
   $32 = $pattHandle + 12 | 0;
   $33 = $pattHandle + 16 | 0;
   $k$0 = -1;
   $l$0 = 0;
   $max$0 = 0.0;
   $res1$0 = -1;
   $res2$0 = -1;
   while (1) {
    if (($l$0 | 0) >= ($30 | 0)) {
     $max$0$lcssa = $max$0;
     $res1$0$lcssa = $res1$0;
     $res2$0$lcssa = $res2$0;
     break;
    }
    $35 = HEAP32[$31 >> 2] | 0;
    $k$1$in = $k$0;
    L22 : while (1) {
     $k$1 = $k$1$in + 1 | 0;
     switch (HEAP32[$35 + ($k$1 << 2) >> 2] | 0) {
     case 0:
      {
       $k$1$in = $k$1;
       break;
      }
     case 2:
      {
       $k$143 = $k$1;
       $max$3 = $max$0;
       $res1$3 = $res1$0;
       $res2$3 = $res2$0;
       break L22;
       break;
      }
     default:
      {
       $k$1$lcssa = $k$1;
       label = 17;
       break L22;
      }
     }
    }
    L24 : do if ((label | 0) == 17) {
     label = 0;
     $38 = $k$1$lcssa << 2;
     $j$0 = 0;
     $max$1 = $max$0;
     $res1$1 = $res1$0;
     $res2$1 = $res2$0;
     while (1) {
      if (($j$0 | 0) == 4) {
       $k$143 = $k$1$lcssa;
       $max$3 = $max$1;
       $res1$3 = $res1$1;
       $res2$3 = $res2$1;
       break L24;
      }
      $39 = $j$0 + $38 | 0;
      $i$2 = 0;
      $sum$1 = 0;
      while (1) {
       if (($i$2 | 0) >= ($2 | 0)) {
        $sum$1$lcssa = $sum$1;
        break;
       }
       $49 = (Math_imul(HEAP32[(HEAP32[(HEAP32[$32 >> 2] | 0) + ($39 << 2) >> 2] | 0) + ($i$2 << 2) >> 2] | 0, HEAP32[$4 + ($i$2 << 2) >> 2] | 0) | 0) + $sum$1 | 0;
       $i$2 = $i$2 + 1 | 0;
       $sum$1 = $49;
      }
      $56 = +($sum$1$lcssa | 0) / +HEAPF64[(HEAP32[$33 >> 2] | 0) + ($39 << 3) >> 3] / $25;
      $57 = $56 > $max$1;
      $res1$2 = $57 ? $j$0 : $res1$1;
      $j$0 = $j$0 + 1 | 0;
      $max$1 = $57 ? $56 : $max$1;
      $res1$1 = $res1$2;
      $res2$1 = $57 ? $k$1$lcssa : $res2$1;
     }
    } while (0);
    $k$0 = $k$143;
    $l$0 = $l$0 + 1 | 0;
    $max$0 = $max$3;
    $res1$0 = $res1$3;
    $res2$0 = $res2$3;
   }
   HEAP32[$dir >> 2] = $res1$0$lcssa;
   HEAP32[$code >> 2] = $res2$0$lcssa;
   HEAPF64[$cf >> 3] = $max$0$lcssa;
   _free($4);
   $$0 = 0;
   break L1;
   break;
  }
 case 1:
  {
   $60 = Math_imul($size, $size) | 0;
   $62 = _malloc($60 << 2) | 0;
   if (!$62) {
    _arLog(3, 4491, $vararg_buffer1);
    _exit(1);
   } else {
    $ave$1 = 0;
    $i$3 = 0;
   }
   while (1) {
    if (($i$3 | 0) >= ($60 | 0)) {
     $ave$1$lcssa = $ave$1;
     break;
    }
    $ave$1 = ((HEAPU8[$data + $i$3 >> 0] | 0) ^ 255) + $ave$1 | 0;
    $i$3 = $i$3 + 1 | 0;
   }
   $71 = ($ave$1$lcssa | 0) / ($60 | 0) | 0;
   $i$4 = 0;
   $sum$2 = 0;
   while (1) {
    if (($i$4 | 0) >= ($60 | 0)) {
     $sum$2$lcssa = $sum$2;
     break;
    }
    $77 = ((HEAPU8[$data + $i$4 >> 0] | 0) ^ 255) - $71 | 0;
    HEAP32[$62 + ($i$4 << 2) >> 2] = $77;
    $i$4 = $i$4 + 1 | 0;
    $sum$2 = (Math_imul($77, $77) | 0) + $sum$2 | 0;
   }
   $83 = +Math_sqrt(+(+($sum$2$lcssa | 0)));
   if ($83 / +($size | 0) < 15.0) {
    HEAP32[$code >> 2] = 0;
    HEAP32[$dir >> 2] = 0;
    HEAPF64[$cf >> 3] = -1.0;
    _free($62);
    $$0 = -2;
    break L1;
   }
   $87 = HEAP32[$pattHandle >> 2] | 0;
   $88 = $pattHandle + 8 | 0;
   $89 = $pattHandle + 20 | 0;
   $90 = $pattHandle + 24 | 0;
   $k$2 = -1;
   $l$1 = 0;
   $max$4 = 0.0;
   $res1$4 = -1;
   $res2$4 = -1;
   while (1) {
    if (($l$1 | 0) >= ($87 | 0)) {
     $max$4$lcssa = $max$4;
     $res1$4$lcssa = $res1$4;
     $res2$4$lcssa = $res2$4;
     break;
    }
    $92 = HEAP32[$88 >> 2] | 0;
    $k$3$in = $k$2;
    L52 : while (1) {
     $k$3 = $k$3$in + 1 | 0;
     switch (HEAP32[$92 + ($k$3 << 2) >> 2] | 0) {
     case 0:
      {
       $k$3$in = $k$3;
       break;
      }
     case 2:
      {
       $k$345 = $k$3;
       $max$7 = $max$4;
       $res1$7 = $res1$4;
       $res2$7 = $res2$4;
       break L52;
       break;
      }
     default:
      {
       $k$3$lcssa = $k$3;
       label = 38;
       break L52;
      }
     }
    }
    L54 : do if ((label | 0) == 38) {
     label = 0;
     $95 = $k$3$lcssa << 2;
     $j$1 = 0;
     $max$5 = $max$4;
     $res1$5 = $res1$4;
     $res2$5 = $res2$4;
     while (1) {
      if (($j$1 | 0) == 4) {
       $k$345 = $k$3$lcssa;
       $max$7 = $max$5;
       $res1$7 = $res1$5;
       $res2$7 = $res2$5;
       break L54;
      }
      $96 = $j$1 + $95 | 0;
      $i$5 = 0;
      $sum$3 = 0;
      while (1) {
       if (($i$5 | 0) >= ($60 | 0)) {
        $sum$3$lcssa = $sum$3;
        break;
       }
       $106 = (Math_imul(HEAP32[(HEAP32[(HEAP32[$89 >> 2] | 0) + ($96 << 2) >> 2] | 0) + ($i$5 << 2) >> 2] | 0, HEAP32[$62 + ($i$5 << 2) >> 2] | 0) | 0) + $sum$3 | 0;
       $i$5 = $i$5 + 1 | 0;
       $sum$3 = $106;
      }
      $113 = +($sum$3$lcssa | 0) / +HEAPF64[(HEAP32[$90 >> 2] | 0) + ($96 << 3) >> 3] / $83;
      $114 = $113 > $max$5;
      $res1$6 = $114 ? $j$1 : $res1$5;
      $j$1 = $j$1 + 1 | 0;
      $max$5 = $114 ? $113 : $max$5;
      $res1$5 = $res1$6;
      $res2$5 = $114 ? $k$3$lcssa : $res2$5;
     }
    } while (0);
    $k$2 = $k$345;
    $l$1 = $l$1 + 1 | 0;
    $max$4 = $max$7;
    $res1$4 = $res1$7;
    $res2$4 = $res2$7;
   }
   HEAP32[$dir >> 2] = $res1$4$lcssa;
   HEAP32[$code >> 2] = $res2$4$lcssa;
   HEAPF64[$cf >> 3] = $max$4$lcssa;
   _free($62);
   $$0 = 0;
   break L1;
   break;
  }
 default:
  {
   $$0 = -1;
   break L1;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _icpGetJ_U_S($J_U_S, $matXc2U, $matXw2Xc, $worldCoord) {
 $J_U_S = $J_U_S | 0;
 $matXc2U = $matXc2U | 0;
 $matXw2Xc = $matXw2Xc | 0;
 $worldCoord = $worldCoord | 0;
 var $$0 = 0, $0 = 0.0, $1 = 0.0, $100 = 0, $101 = 0, $104 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0.0, $115 = 0.0, $116 = 0.0, $12 = 0.0, $122 = 0.0, $125 = 0.0, $128 = 0.0, $129 = 0.0, $132 = 0.0, $136 = 0.0, $14 = 0.0, $141 = 0.0, $143 = 0.0, $146 = 0.0, $150 = 0.0, $155 = 0.0, $157 = 0.0, $16 = 0.0, $160 = 0.0, $164 = 0.0, $169 = 0.0, $171 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $201 = 0, $207 = 0.0, $208 = 0.0, $21 = 0.0, $22 = 0.0, $24 = 0.0, $26 = 0.0, $28 = 0.0, $29 = 0.0, $31 = 0.0, $32 = 0.0, $34 = 0.0, $4 = 0.0, $5 = 0, $52 = 0.0, $6 = 0.0, $7 = 0.0, $71 = 0.0, $79 = 0.0, $9 = 0.0, $92 = 0, $93 = 0, $96 = 0, $98 = 0, $J_T_S$i = 0, $J_U_Xc = 0, $J_Xc_S = 0, $J_Xc_T$i = 0, $i$0 = 0, $i$0$i = 0, $j$0 = 0, $j$0$i = 0, $k$0 = 0, $k$0$i = 0, $vararg_buffer = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp + 1056 | 0;
 $J_Xc_T$i = sp + 768 | 0;
 $J_T_S$i = sp + 192 | 0;
 $J_Xc_S = sp + 48 | 0;
 $J_U_Xc = sp;
 $0 = +HEAPF64[$matXw2Xc >> 3];
 $1 = +HEAPF64[$worldCoord >> 3];
 $2 = $0 * $1;
 $4 = +HEAPF64[$matXw2Xc + 8 >> 3];
 $5 = $worldCoord + 8 | 0;
 $6 = +HEAPF64[$5 >> 3];
 $7 = $4 * $6;
 $9 = +HEAPF64[$matXw2Xc + 16 >> 3];
 $11 = +HEAPF64[$worldCoord + 16 >> 3];
 $12 = $9 * $11;
 $14 = +HEAPF64[$matXw2Xc + 24 >> 3];
 $16 = +HEAPF64[$matXw2Xc + 32 >> 3];
 $18 = +HEAPF64[$matXw2Xc + 40 >> 3];
 $19 = $6 * $18;
 $21 = +HEAPF64[$matXw2Xc + 48 >> 3];
 $22 = $11 * $21;
 $24 = +HEAPF64[$matXw2Xc + 56 >> 3];
 $26 = +HEAPF64[$matXw2Xc + 64 >> 3];
 $28 = +HEAPF64[$matXw2Xc + 72 >> 3];
 $29 = $6 * $28;
 $31 = +HEAPF64[$matXw2Xc + 80 >> 3];
 $32 = $11 * $31;
 $34 = +HEAPF64[$matXw2Xc + 88 >> 3];
 HEAPF64[$J_Xc_T$i >> 3] = $2;
 HEAPF64[$J_Xc_T$i + 8 >> 3] = $0 * $6;
 HEAPF64[$J_Xc_T$i + 16 >> 3] = $0 * $11;
 HEAPF64[$J_Xc_T$i + 24 >> 3] = $1 * $4;
 HEAPF64[$J_Xc_T$i + 32 >> 3] = $7;
 HEAPF64[$J_Xc_T$i + 40 >> 3] = $11 * $4;
 HEAPF64[$J_Xc_T$i + 48 >> 3] = $1 * $9;
 HEAPF64[$J_Xc_T$i + 56 >> 3] = $6 * $9;
 HEAPF64[$J_Xc_T$i + 64 >> 3] = $12;
 HEAPF64[$J_Xc_T$i + 72 >> 3] = $0;
 HEAPF64[$J_Xc_T$i + 80 >> 3] = $4;
 HEAPF64[$J_Xc_T$i + 88 >> 3] = $9;
 $52 = $1 * $16;
 HEAPF64[$J_Xc_T$i + 96 >> 3] = $52;
 HEAPF64[$J_Xc_T$i + 104 >> 3] = $6 * $16;
 HEAPF64[$J_Xc_T$i + 112 >> 3] = $11 * $16;
 HEAPF64[$J_Xc_T$i + 120 >> 3] = $1 * $18;
 HEAPF64[$J_Xc_T$i + 128 >> 3] = $19;
 HEAPF64[$J_Xc_T$i + 136 >> 3] = $11 * $18;
 HEAPF64[$J_Xc_T$i + 144 >> 3] = $1 * $21;
 HEAPF64[$J_Xc_T$i + 152 >> 3] = $6 * $21;
 HEAPF64[$J_Xc_T$i + 160 >> 3] = $22;
 HEAPF64[$J_Xc_T$i + 168 >> 3] = $16;
 HEAPF64[$J_Xc_T$i + 176 >> 3] = $18;
 HEAPF64[$J_Xc_T$i + 184 >> 3] = $21;
 $71 = $26 * $1;
 HEAPF64[$J_Xc_T$i + 192 >> 3] = $71;
 HEAPF64[$J_Xc_T$i + 200 >> 3] = $6 * $26;
 HEAPF64[$J_Xc_T$i + 208 >> 3] = $11 * $26;
 HEAPF64[$J_Xc_T$i + 216 >> 3] = $1 * $28;
 $79 = +HEAPF64[$5 >> 3];
 HEAPF64[$J_Xc_T$i + 224 >> 3] = $28 * $79;
 HEAPF64[$J_Xc_T$i + 232 >> 3] = $11 * $28;
 HEAPF64[$J_Xc_T$i + 240 >> 3] = $1 * $31;
 HEAPF64[$J_Xc_T$i + 248 >> 3] = $79 * $31;
 HEAPF64[$J_Xc_T$i + 256 >> 3] = $32;
 HEAPF64[$J_Xc_T$i + 264 >> 3] = $26;
 HEAPF64[$J_Xc_T$i + 272 >> 3] = $28;
 HEAPF64[$J_Xc_T$i + 280 >> 3] = $31;
 $92 = $J_T_S$i + 64 | 0;
 dest = $J_T_S$i;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$92 >> 3] = -1.0;
 $93 = $J_T_S$i + 72 | 0;
 HEAP32[$93 >> 2] = 0;
 HEAP32[$93 + 4 >> 2] = 0;
 HEAP32[$93 + 8 >> 2] = 0;
 HEAP32[$93 + 12 >> 2] = 0;
 HEAP32[$93 + 16 >> 2] = 0;
 HEAP32[$93 + 20 >> 2] = 0;
 HEAP32[$93 + 24 >> 2] = 0;
 HEAP32[$93 + 28 >> 2] = 0;
 HEAPF64[$J_T_S$i + 104 >> 3] = 1.0;
 $96 = $J_T_S$i + 160 | 0;
 dest = $J_T_S$i + 112 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$96 >> 3] = 1.0;
 $98 = $J_T_S$i + 240 | 0;
 dest = $J_T_S$i + 168 | 0;
 stop = dest + 72 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$98 >> 3] = -1.0;
 $100 = $J_T_S$i + 296 | 0;
 dest = $J_T_S$i + 248 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$100 >> 3] = -1.0;
 $101 = $J_T_S$i + 304 | 0;
 HEAP32[$101 >> 2] = 0;
 HEAP32[$101 + 4 >> 2] = 0;
 HEAP32[$101 + 8 >> 2] = 0;
 HEAP32[$101 + 12 >> 2] = 0;
 HEAP32[$101 + 16 >> 2] = 0;
 HEAP32[$101 + 20 >> 2] = 0;
 HEAP32[$101 + 24 >> 2] = 0;
 HEAP32[$101 + 28 >> 2] = 0;
 HEAPF64[$J_T_S$i + 336 >> 3] = 1.0;
 $104 = $J_T_S$i + 456 | 0;
 dest = $J_T_S$i + 344 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$104 >> 3] = 1.0;
 $106 = $J_T_S$i + 512 | 0;
 dest = $J_T_S$i + 464 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$106 >> 3] = 1.0;
 $108 = $J_T_S$i + 568 | 0;
 dest = $J_T_S$i + 520 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$108 >> 3] = 1.0;
 $j$0$i = 0;
 while (1) {
  if (($j$0$i | 0) == 3) break; else $i$0$i = 0;
  while (1) {
   if (($i$0$i | 0) == 6) break;
   $109 = $J_Xc_S + ($j$0$i * 48 | 0) + ($i$0$i << 3) | 0;
   HEAPF64[$109 >> 3] = 0.0;
   $116 = 0.0;
   $k$0$i = 0;
   while (1) {
    if (($k$0$i | 0) == 12) break;
    $115 = $116 + +HEAPF64[$J_Xc_T$i + ($j$0$i * 96 | 0) + ($k$0$i << 3) >> 3] * +HEAPF64[$J_T_S$i + ($k$0$i * 48 | 0) + ($i$0$i << 3) >> 3];
    HEAPF64[$109 >> 3] = $115;
    $116 = $115;
    $k$0$i = $k$0$i + 1 | 0;
   }
   $i$0$i = $i$0$i + 1 | 0;
  }
  $j$0$i = $j$0$i + 1 | 0;
 }
 $122 = $14 + ($2 + $7 + $12);
 $125 = $24 + ($52 + $19 + $22);
 $128 = $34 + ($71 + $29 + $32);
 $129 = +HEAPF64[$matXc2U >> 3];
 $132 = +HEAPF64[$matXc2U + 8 >> 3];
 $136 = +HEAPF64[$matXc2U + 16 >> 3];
 $141 = +HEAPF64[$matXc2U + 24 >> 3] + ($122 * $129 + $125 * $132 + $128 * $136);
 $143 = +HEAPF64[$matXc2U + 32 >> 3];
 $146 = +HEAPF64[$matXc2U + 40 >> 3];
 $150 = +HEAPF64[$matXc2U + 48 >> 3];
 $155 = +HEAPF64[$matXc2U + 56 >> 3] + ($122 * $143 + $125 * $146 + $128 * $150);
 $157 = +HEAPF64[$matXc2U + 64 >> 3];
 $160 = +HEAPF64[$matXc2U + 72 >> 3];
 $164 = +HEAPF64[$matXc2U + 80 >> 3];
 $169 = +HEAPF64[$matXc2U + 88 >> 3] + ($122 * $157 + $125 * $160 + $128 * $164);
 L12 : do if ($169 == 0.0) {
  _arLog(3, 4109, $vararg_buffer);
  $$0 = -1;
 } else {
  $171 = $169 * $169;
  HEAPF64[$J_U_Xc >> 3] = ($129 * $169 - $141 * $157) / $171;
  HEAPF64[$J_U_Xc + 8 >> 3] = ($169 * $132 - $141 * $160) / $171;
  HEAPF64[$J_U_Xc + 16 >> 3] = ($169 * $136 - $141 * $164) / $171;
  HEAPF64[$J_U_Xc + 24 >> 3] = ($169 * $143 - $155 * $157) / $171;
  HEAPF64[$J_U_Xc + 32 >> 3] = ($169 * $146 - $155 * $160) / $171;
  HEAPF64[$J_U_Xc + 40 >> 3] = ($169 * $150 - $155 * $164) / $171;
  $j$0 = 0;
  while (1) {
   if (($j$0 | 0) == 2) {
    $$0 = 0;
    break L12;
   } else $i$0 = 0;
   while (1) {
    if (($i$0 | 0) == 6) break;
    $201 = $J_U_S + ($j$0 * 48 | 0) + ($i$0 << 3) | 0;
    HEAPF64[$201 >> 3] = 0.0;
    $208 = 0.0;
    $k$0 = 0;
    while (1) {
     if (($k$0 | 0) == 3) break;
     $207 = $208 + +HEAPF64[$J_U_Xc + ($j$0 * 24 | 0) + ($k$0 << 3) >> 3] * +HEAPF64[$J_Xc_S + ($k$0 * 48 | 0) + ($i$0 << 3) >> 3];
     HEAPF64[$201 >> 3] = $207;
     $208 = $207;
     $k$0 = $k$0 + 1 | 0;
    }
    $i$0 = $i$0 + 1 | 0;
   }
   $j$0 = $j$0 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i13 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $103 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $3 = 0, $32 = 0, $34 = 0, $46 = 0, $47 = 0, $51 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $7 = 0, $70 = 0, $72 = 0, $75 = 0, $76 = 0, $80 = 0, $81 = 0, $83 = 0, $85 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $97 = 0, $99 = 0, $__i$0$i$i = 0, $__i$0$i$i$i = 0, $__v$i$i12 = 0, $c$0$in = 0, $c$0$in$lcssa = 0, $isdigittmp = 0, $isdigittmp9 = 0, $n$0 = 0, $n$0$lcssa = 0, $r = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i12 = sp + 88 | 0;
 $r = sp + 64 | 0;
 $0 = sp + 76 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 16 | 0;
 $3 = sp;
 L1 : do if (($first | 0) == ($last | 0)) $$3 = $first; else {
  $isdigittmp = (HEAP8[$first >> 0] | 0) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $7 = $first + 1 | 0;
   if (($7 | 0) == ($last | 0)) $$3 = $first; else {
    $c$0$in = $7;
    $n$0 = $isdigittmp;
    while (1) {
     $isdigittmp9 = (HEAP8[$c$0$in >> 0] | 0) + -48 | 0;
     if ($isdigittmp9 >>> 0 >= 10) {
      $c$0$in$lcssa = $c$0$in;
      $n$0$lcssa = $n$0;
      break;
     }
     $10 = $c$0$in + 1 | 0;
     if (($10 | 0) == ($last | 0)) {
      $$3 = $first;
      break L1;
     }
     $c$0$in = $10;
     $n$0 = $isdigittmp9 + ($n$0 * 10 | 0) | 0;
    }
    if (($last - $c$0$in$lcssa | 0) >>> 0 < $n$0$lcssa >>> 0) $$3 = $first; else {
     HEAP32[$r >> 2] = 0;
     HEAP32[$r + 4 >> 2] = 0;
     HEAP32[$r + 8 >> 2] = 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($r, $c$0$in$lcssa, $n$0$lcssa);
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = 0;
     $18 = HEAP8[$r >> 0] | 0;
     $20 = ($18 & 1) == 0;
     $25 = $20 ? ($18 & 255) >>> 1 : HEAP32[$r + 4 >> 2] | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0, $20 ? $r + 1 | 0 : HEAP32[$r + 8 >> 2] | 0, $25 >>> 0 < 10 ? $25 : 10);
     $32 = HEAP8[$0 >> 0] | 0;
     $34 = ($32 & 1) == 0;
     if ((($34 ? ($32 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0) == 10) {
      $46 = (__ZNSt3__111char_traitsIcE7compareEPKcS3_j($34 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, 14540, 10) | 0) == 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
      if ($46) {
       HEAP32[$1 >> 2] = 0;
       $47 = _malloc(32) | 0;
       HEAP32[$1 + 8 >> 2] = $47;
       HEAP32[$1 >> 2] = 33;
       HEAP32[$1 + 4 >> 2] = 21;
       dest = $47;
       src = 14551;
       stop = dest + 21 | 0;
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
        dest = dest + 1 | 0;
        src = src + 1 | 0;
       } while ((dest | 0) < (stop | 0));
       HEAP8[$47 + 21 >> 0] = 0;
       $51 = $1 + 12 | 0;
       HEAP32[$51 >> 2] = 0;
       HEAP32[$51 + 4 >> 2] = 0;
       HEAP32[$51 + 8 >> 2] = 0;
       $__i$0$i$i$i = 0;
       while (1) {
        if (($__i$0$i$i$i | 0) == 3) break;
        HEAP32[$51 + ($__i$0$i$i$i << 2) >> 2] = 0;
        $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
       }
       $54 = $db + 4 | 0;
       $55 = HEAP32[$54 >> 2] | 0;
       $57 = HEAP32[$db + 8 >> 2] | 0;
       $59 = $57;
       if ($55 >>> 0 < $57 >>> 0) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($55, $1);
        HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + 24;
       } else {
        $64 = HEAP32[$db >> 2] | 0;
        $66 = ($55 - $64 | 0) / 24 | 0;
        $67 = $66 + 1 | 0;
        if ($67 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        $70 = ($59 - $64 | 0) / 24 | 0;
        if ($70 >>> 0 < 89478485) {
         $72 = $70 << 1;
         $$0$i$i$i = $72 >>> 0 < $67 >>> 0 ? $67 : $72;
        } else $$0$i$i$i = 178956970;
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i12, $$0$i$i$i, $66, $db + 12 | 0);
        $75 = $__v$i$i12 + 8 | 0;
        $76 = HEAP32[$75 >> 2] | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($76, $1);
        HEAP32[$75 >> 2] = $76 + 24;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i12);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i12);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      } else {
       $91 = $db;
       label = 22;
      }
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
      $91 = $db;
      label = 22;
     }
     if ((label | 0) == 22) {
      HEAP32[$3 >> 2] = HEAP32[$r >> 2];
      HEAP32[$3 + 4 >> 2] = HEAP32[$r + 4 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$r + 8 >> 2];
      $__i$0$i$i = 0;
      while (1) {
       if (($__i$0$i$i | 0) == 3) break;
       HEAP32[$r + ($__i$0$i$i << 2) >> 2] = 0;
       $__i$0$i$i = $__i$0$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($2, $3);
      $80 = $db + 4 | 0;
      $81 = HEAP32[$80 >> 2] | 0;
      $83 = HEAP32[$db + 8 >> 2] | 0;
      $85 = $83;
      if ($81 >>> 0 < $83 >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($81, $2);
       HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 24;
      } else {
       $90 = HEAP32[$91 >> 2] | 0;
       $93 = ($81 - $90 | 0) / 24 | 0;
       $94 = $93 + 1 | 0;
       if ($94 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($91);
       $97 = ($85 - $90 | 0) / 24 | 0;
       if ($97 >>> 0 < 89478485) {
        $99 = $97 << 1;
        $$0$i$i$i13 = $99 >>> 0 < $94 >>> 0 ? $94 : $99;
       } else $$0$i$i$i13 = 178956970;
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i12, $$0$i$i$i13, $93, $db + 12 | 0);
       $102 = $__v$i$i12 + 8 | 0;
       $103 = HEAP32[$102 >> 2] | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($103, $2);
       HEAP32[$102 >> 2] = $103 + 24;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($91, $__v$i$i12);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i12);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($r);
     $$3 = $c$0$in$lcssa + $n$0$lcssa | 0;
    }
   }
  } else $$3 = $first;
 } while (0);
 STACKTOP = sp;
 return $$3 | 0;
}
function _icpPointRobust($handle, $data, $initMatXw2Xc, $matXw2Xc, $err) {
 $handle = $handle | 0;
 $data = $data | 0;
 $initMatXw2Xc = $initMatXw2Xc | 0;
 $matXw2Xc = $matXw2Xc | 0;
 $err = $err | 0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa39 = 0.0, $$pn = 0.0, $$pre = 0, $0 = 0, $1 = 0, $103 = 0, $107 = 0, $11 = 0, $111 = 0, $115 = 0, $119 = 0, $123 = 0, $127 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $146 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $33 = 0, $39 = 0, $43 = 0.0, $47 = 0.0, $48 = 0, $54 = 0.0, $59 = 0.0, $61 = 0, $62 = 0.0, $65 = 0.0, $68 = 0.0, $75 = 0.0, $8 = 0, $87 = 0, $89 = 0.0, $91 = 0, $92 = 0, $98 = 0.0, $99 = 0.0, $K2$0 = 0.0, $U = 0, $dS = 0, $err0$0 = 0.0, $err1$0 = 0.0, $err1$0$lcssa = 0.0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $j$3 = 0, $k$0 = 0, $k$0$lcssa = 0, $k$1 = 0, $matXw2U = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer5 = sp + 184 | 0;
 $vararg_buffer3 = sp + 176 | 0;
 $vararg_buffer1 = sp + 168 | 0;
 $vararg_buffer = sp + 160 | 0;
 $U = sp + 144 | 0;
 $matXw2U = sp + 48 | 0;
 $dS = sp;
 $0 = $data + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (($1 | 0) < 4) $$0 = -1; else {
  $8 = ~~(+($1 | 0) * +HEAPF64[$handle + 128 >> 3]) + -1 | 0;
  $$ = ($8 | 0) < 3 ? 3 : $8;
  $11 = _malloc($1 * 96 | 0) | 0;
  if (!$11) {
   _arLog(3, 4129, $vararg_buffer);
   $$0 = -1;
   break;
  }
  $14 = _malloc($1 << 4) | 0;
  if (!$14) {
   _arLog(3, 4129, $vararg_buffer1);
   _free($11);
   $$0 = -1;
   break;
  }
  $16 = $1 << 3;
  $17 = _malloc($16) | 0;
  if (!$17) {
   _arLog(3, 4129, $vararg_buffer3);
   _free($11);
   _free($14);
   $$0 = -1;
   break;
  }
  $19 = _malloc($16) | 0;
  if (!$19) {
   _arLog(3, 4129, $vararg_buffer5);
   _free($11);
   _free($14);
   _free($17);
   $$0 = -1;
   break;
  } else $j$0 = 0;
  while (1) {
   if (($j$0 | 0) == 3) break; else $i$0 = 0;
   while (1) {
    if (($i$0 | 0) == 4) break;
    HEAPF64[$matXw2Xc + ($j$0 << 5) + ($i$0 << 3) >> 3] = +HEAPF64[$initMatXw2Xc + ($j$0 << 5) + ($i$0 << 3) >> 3];
    $i$0 = $i$0 + 1 | 0;
   }
   $j$0 = $j$0 + 1 | 0;
  }
  $21 = $data + 4 | 0;
  $22 = $U + 8 | 0;
  $23 = $19 + ($$ << 3) | 0;
  $24 = $handle + 104 | 0;
  $25 = $handle + 120 | 0;
  $26 = $handle + 112 | 0;
  $27 = $handle + 96 | 0;
  $err0$0 = 0.0;
  $i$1 = 0;
  L21 : while (1) {
   _arUtilMatMul($handle, $matXw2Xc, $matXw2U) | 0;
   $j$1 = 0;
   while (1) {
    $33 = HEAP32[$0 >> 2] | 0;
    if (($j$1 | 0) >= ($33 | 0)) {
     $$lcssa = $33;
     break;
    }
    if ((_icpGetU_from_X_by_MatX2U($U, $matXw2U, (HEAP32[$21 >> 2] | 0) + ($j$1 * 24 | 0) | 0) | 0) < 0) {
     label = 18;
     break L21;
    }
    $39 = HEAP32[$data >> 2] | 0;
    $43 = +HEAPF64[$39 + ($j$1 << 4) >> 3] - +HEAPF64[$U >> 3];
    $47 = +HEAPF64[$39 + ($j$1 << 4) + 8 >> 3] - +HEAPF64[$22 >> 3];
    $48 = $j$1 << 1;
    HEAPF64[$14 + ($48 << 3) >> 3] = $43;
    HEAPF64[$14 + (($48 | 1) << 3) >> 3] = $47;
    $54 = $43 * $43 + $47 * $47;
    HEAPF64[$19 + ($j$1 << 3) >> 3] = $54;
    HEAPF64[$17 + ($j$1 << 3) >> 3] = $54;
    $j$1 = $j$1 + 1 | 0;
   }
   _qsort($19, $$lcssa, 8, 1);
   $59 = +HEAPF64[$23 >> 3] * 4.0;
   $K2$0 = $59 < 16.0 ? 16.0 : $59;
   $61 = HEAP32[$0 >> 2] | 0;
   $62 = $K2$0 / 6.0;
   $err1$0 = 0.0;
   $j$2 = 0;
   while (1) {
    if (($j$2 | 0) >= ($61 | 0)) {
     $err1$0$lcssa = $err1$0;
     break;
    }
    $65 = +HEAPF64[$19 + ($j$2 << 3) >> 3];
    if ($65 > $K2$0) $$pn = $62; else {
     $68 = 1.0 - $65 / $K2$0;
     $$pn = $62 * (1.0 - $68 * ($68 * $68));
    }
    $err1$0 = $err1$0 + $$pn;
    $j$2 = $j$2 + 1 | 0;
   }
   $75 = $err1$0$lcssa / +($61 | 0);
   if ($75 < +HEAPF64[$24 >> 3]) {
    $$lcssa39 = $75;
    label = 41;
    break;
   }
   if (($i$1 | 0) > 0) if ($75 < +HEAPF64[$25 >> 3]) if ($75 / $err0$0 > +HEAPF64[$26 >> 3]) {
    $$lcssa39 = $75;
    label = 41;
    break;
   }
   if (($i$1 | 0) == (HEAP32[$27 >> 2] | 0)) {
    $$lcssa39 = $75;
    label = 41;
    break;
   } else {
    $87 = $61;
    $j$3 = 0;
    $k$0 = 0;
   }
   while (1) {
    if (($j$3 | 0) >= ($87 | 0)) {
     $k$0$lcssa = $k$0;
     break;
    }
    $89 = +HEAPF64[$17 + ($j$3 << 3) >> 3];
    if (!($89 <= $K2$0)) {
     $$pre = $87;
     $k$1 = $k$0;
    } else {
     $91 = $k$0 * 6 | 0;
     $92 = $11 + ($91 << 3) | 0;
     if ((_icpGetJ_U_S($92, $handle, $matXw2Xc, (HEAP32[$21 >> 2] | 0) + ($j$3 * 24 | 0) | 0) | 0) < 0) {
      label = 33;
      break L21;
     }
     $98 = 1.0 - $89 / $K2$0;
     $99 = $98 * $98;
     HEAPF64[$92 >> 3] = +HEAPF64[$92 >> 3] * $99;
     $103 = $11 + (($91 | 1) << 3) | 0;
     HEAPF64[$103 >> 3] = +HEAPF64[$103 >> 3] * $99;
     $107 = $11 + ($91 + 2 << 3) | 0;
     HEAPF64[$107 >> 3] = $99 * +HEAPF64[$107 >> 3];
     $111 = $11 + ($91 + 3 << 3) | 0;
     HEAPF64[$111 >> 3] = $99 * +HEAPF64[$111 >> 3];
     $115 = $11 + ($91 + 4 << 3) | 0;
     HEAPF64[$115 >> 3] = $99 * +HEAPF64[$115 >> 3];
     $119 = $11 + ($91 + 5 << 3) | 0;
     HEAPF64[$119 >> 3] = $99 * +HEAPF64[$119 >> 3];
     $123 = $11 + ($91 + 6 << 3) | 0;
     HEAPF64[$123 >> 3] = $99 * +HEAPF64[$123 >> 3];
     $127 = $11 + ($91 + 7 << 3) | 0;
     HEAPF64[$127 >> 3] = $99 * +HEAPF64[$127 >> 3];
     $131 = $11 + ($91 + 8 << 3) | 0;
     HEAPF64[$131 >> 3] = $99 * +HEAPF64[$131 >> 3];
     $135 = $11 + ($91 + 9 << 3) | 0;
     HEAPF64[$135 >> 3] = $99 * +HEAPF64[$135 >> 3];
     $139 = $11 + ($91 + 10 << 3) | 0;
     HEAPF64[$139 >> 3] = $99 * +HEAPF64[$139 >> 3];
     $143 = $11 + ($91 + 11 << 3) | 0;
     HEAPF64[$143 >> 3] = $99 * +HEAPF64[$143 >> 3];
     $146 = $j$3 << 1;
     HEAPF64[$14 + ($k$0 << 3) >> 3] = $99 * +HEAPF64[$14 + ($146 << 3) >> 3];
     HEAPF64[$14 + ($k$0 + 1 << 3) >> 3] = $99 * +HEAPF64[$14 + (($146 | 1) << 3) >> 3];
     $$pre = HEAP32[$0 >> 2] | 0;
     $k$1 = $k$0 + 2 | 0;
    }
    $87 = $$pre;
    $j$3 = $j$3 + 1 | 0;
    $k$0 = $k$1;
   }
   if (($k$0$lcssa | 0) < 6) {
    label = 37;
    break;
   }
   if ((_icpGetDeltaS($dS, $14, $11, $k$0$lcssa) | 0) < 0) {
    label = 39;
    break;
   }
   _icpUpdateMat($matXw2Xc, $dS) | 0;
   $err0$0 = $75;
   $i$1 = $i$1 + 1 | 0;
  }
  if ((label | 0) == 18) {
   _icpGetXw2XcCleanup_293($11, $14, $17, $19);
   $$0 = -1;
   break;
  } else if ((label | 0) == 33) {
   _icpGetXw2XcCleanup_293($11, $14, $17, $19);
   $$0 = -1;
   break;
  } else if ((label | 0) == 37) {
   _icpGetXw2XcCleanup_293($11, $14, $17, $19);
   $$0 = -1;
   break;
  } else if ((label | 0) == 39) {
   _icpGetXw2XcCleanup_293($11, $14, $17, $19);
   $$0 = -1;
   break;
  } else if ((label | 0) == 41) {
   HEAPF64[$err >> 3] = $$lcssa39;
   _free($11);
   _free($14);
   _free($17);
   _free($19);
   $$0 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $op, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $op = $op | 0;
 $db = $db | 0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $48 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $62 = 0, $65 = 0, $68 = 0, $70 = 0, $8 = 0, $80 = 0, $83 = 0, $86 = 0, $88 = 0, $98 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i14 = 0, $__i$0$i$i$i17 = 0, $__i$0$i$i$i21 = 0, $__i$0$i$i$i25 = 0, $op1 = 0, $op2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $op2 = sp + 84 | 0;
 $op1 = sp + 72 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 $6 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 L1 : do if (($6 | 0) == ($first | 0)) $$1 = $first; else {
  $8 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6, $last, $db) | 0;
  $10 = $db + 4 | 0;
  if (($8 | 0) == ($6 | 0)) {
   $110 = HEAP32[$10 >> 2] | 0;
   $111 = $110 + -24 | 0;
   $112 = $110;
   while (1) {
    if (($112 | 0) == ($111 | 0)) {
     $$1 = $first;
     break L1;
    }
    $114 = $112 + -24 | 0;
    HEAP32[$10 >> 2] = $114;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($114);
    $112 = HEAP32[$10 >> 2] | 0;
   }
  }
  $11 = HEAP32[$10 >> 2] | 0;
  if ((($11 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$1 = $first; else {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2, $11 + -24 | 0);
   $18 = HEAP32[$10 >> 2] | 0;
   $19 = $18 + -24 | 0;
   $20 = $18;
   while (1) {
    if (($20 | 0) == ($19 | 0)) break;
    $22 = $20 + -24 | 0;
    HEAP32[$10 >> 2] = $22;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
    $20 = HEAP32[$10 >> 2] | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op1, $18 + -48 | 0);
   $24 = HEAP32[$10 >> 2] | 0;
   $25 = $24 + -24 | 0;
   if (!(HEAP8[$25 >> 0] & 1)) {
    HEAP8[$25 + 1 >> 0] = 0;
    HEAP8[$25 >> 0] = 0;
   } else {
    HEAP8[HEAP32[$24 + -16 >> 2] >> 0] = 0;
    HEAP32[$24 + -20 >> 2] = 0;
   }
   $33 = HEAP8[$op >> 0] | 0;
   $35 = ($33 & 1) == 0;
   $36 = $op + 4 | 0;
   if ((($35 ? ($33 & 255) >>> 1 : HEAP32[$36 >> 2] | 0) | 0) == 1) if (!(__ZNSt3__111char_traitsIcE7compareEPKcS3_j($35 ? $op + 1 | 0 : HEAP32[$op + 8 >> 2] | 0, 14708, 1) | 0)) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($25, 40);
   __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5, 14661, $op1);
   $48 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5, 14710) | 0;
   HEAP32[$4 >> 2] = HEAP32[$48 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$48 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$48 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$48 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   $51 = HEAP8[$op >> 0] | 0;
   $53 = ($51 & 1) == 0;
   $54 = $op + 8 | 0;
   $56 = $op + 1 | 0;
   $62 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4, $53 ? $56 : HEAP32[$54 >> 2] | 0, $53 ? ($51 & 255) >>> 1 : HEAP32[$36 >> 2] | 0) | 0;
   HEAP32[$3 >> 2] = HEAP32[$62 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$62 + 4 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$62 + 8 >> 2];
   $__i$0$i$i$i14 = 0;
   while (1) {
    if (($__i$0$i$i$i14 | 0) == 3) break;
    HEAP32[$62 + ($__i$0$i$i$i14 << 2) >> 2] = 0;
    $__i$0$i$i$i14 = $__i$0$i$i$i14 + 1 | 0;
   }
   $65 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3, 14713) | 0;
   HEAP32[$2 >> 2] = HEAP32[$65 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$65 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$65 + 8 >> 2];
   $__i$0$i$i$i17 = 0;
   while (1) {
    if (($__i$0$i$i$i17 | 0) == 3) break;
    HEAP32[$65 + ($__i$0$i$i$i17 << 2) >> 2] = 0;
    $__i$0$i$i$i17 = $__i$0$i$i$i17 + 1 | 0;
   }
   $68 = HEAP8[$op2 >> 0] | 0;
   $70 = ($68 & 1) == 0;
   $80 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2, $70 ? $op2 + 1 | 0 : HEAP32[$op2 + 8 >> 2] | 0, $70 ? ($68 & 255) >>> 1 : HEAP32[$op2 + 4 >> 2] | 0) | 0;
   HEAP32[$1 >> 2] = HEAP32[$80 >> 2];
   HEAP32[$1 + 4 >> 2] = HEAP32[$80 + 4 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$80 + 8 >> 2];
   $__i$0$i$i$i21 = 0;
   while (1) {
    if (($__i$0$i$i$i21 | 0) == 3) break;
    HEAP32[$80 + ($__i$0$i$i$i21 << 2) >> 2] = 0;
    $__i$0$i$i$i21 = $__i$0$i$i$i21 + 1 | 0;
   }
   $83 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1, 14663) | 0;
   HEAP32[$0 >> 2] = HEAP32[$83 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$83 + 4 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$83 + 8 >> 2];
   $__i$0$i$i$i25 = 0;
   while (1) {
    if (($__i$0$i$i$i25 | 0) == 3) break;
    HEAP32[$83 + ($__i$0$i$i$i25 << 2) >> 2] = 0;
    $__i$0$i$i$i25 = $__i$0$i$i$i25 + 1 | 0;
   }
   $86 = HEAP8[$0 >> 0] | 0;
   $88 = ($86 & 1) == 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($25, $88 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $88 ? ($86 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
   $98 = HEAP8[$op >> 0] | 0;
   $100 = ($98 & 1) == 0;
   if ((($100 ? ($98 & 255) >>> 1 : HEAP32[$36 >> 2] | 0) | 0) == 1) if (!(__ZNSt3__111char_traitsIcE7compareEPKcS3_j($100 ? $56 : HEAP32[$54 >> 2] | 0, 14708, 1) | 0)) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($25, 41);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
   $$1 = $8;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $lit, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $lit = $lit | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i5 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $11 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $49 = 0, $52 = 0, $59 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $80 = 0, $86 = 0, $88 = 0, $92 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i$i$i = 0, $__i$0$i$i$i$i$i$i$i = 0, $__i$0$i$i1$i$i$i$i = 0, $__i$0$i$i1$i$i$i$i$i = 0, $__v$i$i4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i4 = sp + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 $3 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first, $last) | 0;
 if (($3 | 0) == ($first | 0) | ($3 | 0) == ($last | 0)) $$1 = $first; else if ((HEAP8[$3 >> 0] | 0) == 69) {
  $8 = HEAP8[$lit >> 0] | 0;
  $11 = $lit + 4 | 0;
  do if ((($8 & 1) == 0 ? ($8 & 255) >>> 1 : HEAP32[$11 >> 2] | 0) >>> 0 > 3) {
   __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($2, 14661, $lit);
   $17 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2, 14663) | 0;
   HEAP32[$1 >> 2] = HEAP32[$17 >> 2];
   HEAP32[$1 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$17 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$17 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
   $20 = $db + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   $23 = HEAP32[$db + 8 >> 2] | 0;
   $25 = $23;
   if ($21 >>> 0 < $23 >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($21, $0);
    HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 24;
   } else {
    $30 = HEAP32[$db >> 2] | 0;
    $32 = ($21 - $30 | 0) / 24 | 0;
    $33 = $32 + 1 | 0;
    if ($33 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
    $36 = ($25 - $30 | 0) / 24 | 0;
    if ($36 >>> 0 < 89478485) {
     $38 = $36 << 1;
     $$0$i$i$i = $38 >>> 0 < $33 >>> 0 ? $33 : $38;
    } else $$0$i$i$i = 178956970;
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i4, $$0$i$i$i, $32, $db + 12 | 0);
    $41 = $__v$i$i4 + 8 | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($42, $0);
    HEAP32[$41 >> 2] = $42 + 24;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i4);
    __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i4);
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
  } else {
   $44 = $db + 4 | 0;
   $45 = HEAP32[$44 >> 2] | 0;
   $47 = HEAP32[$db + 8 >> 2] | 0;
   $49 = $47;
   if ($45 >>> 0 < $47 >>> 0) {
    HEAP32[$45 >> 2] = 0;
    HEAP32[$45 + 4 >> 2] = 0;
    HEAP32[$45 + 8 >> 2] = 0;
    HEAP32[$45 + 12 >> 2] = 0;
    HEAP32[$45 + 16 >> 2] = 0;
    HEAP32[$45 + 20 >> 2] = 0;
    $__i$0$i$i$i$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i$i$i$i | 0) == 3) break;
     HEAP32[$45 + ($__i$0$i$i$i$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i$i$i$i = $__i$0$i$i$i$i$i$i + 1 | 0;
    }
    $52 = $45 + 12 | 0;
    HEAP32[$52 >> 2] = 0;
    HEAP32[$52 + 4 >> 2] = 0;
    HEAP32[$52 + 8 >> 2] = 0;
    $__i$0$i$i1$i$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i1$i$i$i$i | 0) == 3) break;
     HEAP32[$52 + ($__i$0$i$i1$i$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i1$i$i$i$i = $__i$0$i$i1$i$i$i$i + 1 | 0;
    }
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + 24;
    break;
   }
   $59 = HEAP32[$db >> 2] | 0;
   $61 = ($45 - $59 | 0) / 24 | 0;
   $62 = $61 + 1 | 0;
   if ($62 >>> 0 > 178956970) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
   $65 = ($49 - $59 | 0) / 24 | 0;
   if ($65 >>> 0 < 89478485) {
    $67 = $65 << 1;
    $$0$i$i$i5 = $67 >>> 0 < $62 >>> 0 ? $62 : $67;
   } else $$0$i$i$i5 = 178956970;
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i4, $$0$i$i$i5, $61, $db + 12 | 0);
   $70 = $__v$i$i4 + 8 | 0;
   $71 = HEAP32[$70 >> 2] | 0;
   HEAP32[$71 >> 2] = 0;
   HEAP32[$71 + 4 >> 2] = 0;
   HEAP32[$71 + 8 >> 2] = 0;
   HEAP32[$71 + 12 >> 2] = 0;
   HEAP32[$71 + 16 >> 2] = 0;
   HEAP32[$71 + 20 >> 2] = 0;
   $__i$0$i$i$i$i$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i$i$i$i$i | 0) == 3) break;
    HEAP32[$71 + ($__i$0$i$i$i$i$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i$i$i$i$i = $__i$0$i$i$i$i$i$i$i + 1 | 0;
   }
   $74 = $71 + 12 | 0;
   HEAP32[$74 >> 2] = 0;
   HEAP32[$74 + 4 >> 2] = 0;
   HEAP32[$74 + 8 >> 2] = 0;
   $__i$0$i$i1$i$i$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i1$i$i$i$i$i | 0) == 3) break;
    HEAP32[$74 + ($__i$0$i$i1$i$i$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i1$i$i$i$i$i = $__i$0$i$i1$i$i$i$i$i + 1 | 0;
   }
   HEAP32[$70 >> 2] = $71 + 24;
   __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i4);
   __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i4);
  } while (0);
  $80 = $db + 4 | 0;
  if ((HEAP8[$first >> 0] | 0) == 110) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$80 >> 2] | 0) + -24 | 0, 45);
   $$02 = $first + 1 | 0;
  } else $$02 = $first;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueERS7_E4typeESC_SC_((HEAP32[$80 >> 2] | 0) + -24 | 0, $$02, $3);
  $86 = HEAP8[$lit >> 0] | 0;
  $88 = ($86 & 1) == 0;
  $92 = $88 ? ($86 & 255) >>> 1 : HEAP32[$11 >> 2] | 0;
  if ($92 >>> 0 < 4) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$80 >> 2] | 0) + -24 | 0, $88 ? $lit + 1 | 0 : HEAP32[$lit + 8 >> 2] | 0, $92) | 0;
  $$1 = $3 + 1 | 0;
 } else $$1 = $first;
 STACKTOP = sp;
 return $$1 | 0;
}

function _arParamObserv2Ideal($dist_factor, $ox, $oy, $ix, $iy, $dist_function_version) {
 $dist_factor = $dist_factor | 0;
 $ox = +$ox;
 $oy = +$oy;
 $ix = $ix | 0;
 $iy = $iy | 0;
 $dist_function_version = $dist_function_version | 0;
 var $$0 = 0, $0 = 0.0, $10 = 0.0, $101 = 0.0, $102 = 0, $104 = 0.0, $107 = 0.0, $111 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $12 = 0.0, $132 = 0.0, $134 = 0.0, $136 = 0.0, $14 = 0.0, $140 = 0.0, $143 = 0, $151 = 0.0, $152 = 0.0, $153 = 0, $155 = 0.0, $158 = 0.0, $16 = 0.0, $162 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $18 = 0.0, $183 = 0.0, $185 = 0.0, $187 = 0.0, $191 = 0.0, $194 = 0, $2 = 0.0, $20 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $206 = 0.0, $209 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $223 = 0.0, $225 = 0.0, $227 = 0.0, $23 = 0.0, $231 = 0.0, $234 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $29 = 0.0, $34 = 0.0, $4 = 0.0, $44 = 0.0, $50 = 0.0, $6 = 0.0, $61 = 0.0, $67 = 0.0, $8 = 0.0, $86 = 0.0, $99 = 0.0, $i$0 = 0, $i14$0 = 0, $i21$0 = 0, $i5$0 = 0, $px$0 = 0.0, $px$1 = 0.0, $px12$0 = 0.0, $px12$1 = 0.0, $px19$0 = 0.0, $px19$1 = 0.0, $px3$0 = 0.0, $px3$1 = 0.0, $py$0 = 0.0, $py$1 = 0.0, $py13$0 = 0.0, $py13$1 = 0.0, $py20$0 = 0.0, $py20$1 = 0.0, $py4$0 = 0.0, $py4$1 = 0.0, $x02$0 = 0.0, $y02$0 = 0.0, $z0$0 = 0.0, $z016$0 = 0.0, $z02$0 = 0.0, $z0215$0 = 0.0, $z026$0 = 0.0, $z07$0 = 0.0;
 switch ($dist_function_version | 0) {
 case 4:
  {
   $0 = +HEAPF64[$dist_factor >> 3];
   $2 = +HEAPF64[$dist_factor + 8 >> 3];
   $4 = +HEAPF64[$dist_factor + 16 >> 3];
   $6 = +HEAPF64[$dist_factor + 24 >> 3];
   $8 = +HEAPF64[$dist_factor + 32 >> 3];
   $10 = +HEAPF64[$dist_factor + 40 >> 3];
   $12 = +HEAPF64[$dist_factor + 48 >> 3];
   $14 = +HEAPF64[$dist_factor + 56 >> 3];
   $16 = +HEAPF64[$dist_factor + 64 >> 3];
   $18 = ($ox - $12) / $8;
   $20 = ($oy - $14) / $10;
   $23 = $4 * 2.0;
   $24 = $6 * 6.0;
   $25 = $6 * 2.0;
   $26 = $4 * 6.0;
   $i$0 = 1;
   $px$0 = $18;
   $py$0 = $20;
   $x02$0 = $18 * $18;
   $y02$0 = $20 * $20;
   while (1) {
    if (!($y02$0 != 0.0 | $x02$0 != 0.0)) {
     $px$1 = 0.0;
     $py$1 = 0.0;
     break;
    }
    $29 = $y02$0 + $x02$0;
    $34 = $0 * $29 + 1.0 + $29 * ($2 * $29);
    $44 = $x02$0 * 3.0;
    $50 = $y02$0 * $44;
    $61 = $px$0 - ($6 * ($29 + $x02$0 * 2.0) + ($py$0 * ($23 * $px$0) + $px$0 * $34) - $18) / ($24 * $px$0 + ($23 * $py$0 + ($0 * ($y02$0 + $44) + 1.0 + $2 * ($y02$0 * $y02$0 + ($x02$0 * ($x02$0 * 5.0) + $50)))));
    $67 = $25 * $61;
    $86 = $py$0 - ($4 * ($y02$0 * 2.0 + $29) + $py$0 * $34 + $py$0 * $67 - $20) / ($26 * $py$0 + ($0 * ($x02$0 + $y02$0 * 3.0) + 1.0 + $2 * ($y02$0 * ($y02$0 * 5.0) + ($x02$0 * $x02$0 + $50))) + $67);
    if (($i$0 | 0) == 4) {
     $px$1 = $61;
     $py$1 = $86;
     break;
    }
    $i$0 = $i$0 + 1 | 0;
    $px$0 = $61;
    $py$0 = $86;
    $x02$0 = $61 * $61;
    $y02$0 = $86 * $86;
   }
   HEAPF64[$ix >> 3] = $12 + $8 * $px$1 / $16;
   HEAPF64[$iy >> 3] = $14 + $10 * $py$1 / $16;
   $$0 = 0;
   break;
  }
 case 3:
  {
   $99 = +HEAPF64[$dist_factor >> 3];
   $101 = ($ox - $99) / +HEAPF64[$dist_factor + 24 >> 3];
   $102 = $dist_factor + 8 | 0;
   $104 = $oy - +HEAPF64[$102 >> 3];
   $107 = +HEAPF64[$dist_factor + 32 >> 3] / 1.0e8;
   $111 = +HEAPF64[$dist_factor + 40 >> 3] / 1.0e8 / 1.0e5;
   $114 = $101 * $101 + $104 * $104;
   $115 = +Math_sqrt(+$114);
   $116 = $107 * 3.0;
   $117 = $111 * 5.0;
   $i5$0 = 1;
   $px3$0 = $101;
   $py4$0 = $104;
   $z0$0 = $115;
   $z02$0 = $114;
   while (1) {
    if (!($z0$0 != 0.0)) {
     $px3$1 = 0.0;
     $py4$1 = 0.0;
     break;
    }
    $132 = $z0$0 - ($z0$0 * (1.0 - $107 * $z02$0 - $z02$0 * ($111 * $z02$0)) - $115) / (1.0 - $116 * $z02$0 - $z02$0 * ($117 * $z02$0));
    $134 = $px3$0 * $132 / $z0$0;
    $136 = $py4$0 * $132 / $z0$0;
    if (($i5$0 | 0) == 3) {
     $px3$1 = $134;
     $py4$1 = $136;
     break;
    }
    $140 = $134 * $134 + $136 * $136;
    $i5$0 = $i5$0 + 1 | 0;
    $px3$0 = $134;
    $py4$0 = $136;
    $z0$0 = +Math_sqrt(+$140);
    $z02$0 = $140;
   }
   $143 = $dist_factor + 16 | 0;
   HEAPF64[$ix >> 3] = $px3$1 / +HEAPF64[$143 >> 3] + $99;
   HEAPF64[$iy >> 3] = $py4$1 / +HEAPF64[$143 >> 3] + +HEAPF64[$102 >> 3];
   $$0 = 0;
   break;
  }
 case 2:
  {
   $151 = +HEAPF64[$dist_factor >> 3];
   $152 = $ox - $151;
   $153 = $dist_factor + 8 | 0;
   $155 = $oy - +HEAPF64[$153 >> 3];
   $158 = +HEAPF64[$dist_factor + 24 >> 3] / 1.0e8;
   $162 = +HEAPF64[$dist_factor + 32 >> 3] / 1.0e8 / 1.0e5;
   $165 = $152 * $152 + $155 * $155;
   $166 = +Math_sqrt(+$165);
   $167 = $158 * 3.0;
   $168 = $162 * 5.0;
   $i14$0 = 1;
   $px12$0 = $152;
   $py13$0 = $155;
   $z026$0 = $165;
   $z07$0 = $166;
   while (1) {
    if (!($z07$0 != 0.0)) {
     $px12$1 = 0.0;
     $py13$1 = 0.0;
     break;
    }
    $183 = $z07$0 - ($z07$0 * (1.0 - $158 * $z026$0 - $z026$0 * ($162 * $z026$0)) - $166) / (1.0 - $167 * $z026$0 - $z026$0 * ($168 * $z026$0));
    $185 = $px12$0 * $183 / $z07$0;
    $187 = $py13$0 * $183 / $z07$0;
    if (($i14$0 | 0) == 3) {
     $px12$1 = $185;
     $py13$1 = $187;
     break;
    }
    $191 = $185 * $185 + $187 * $187;
    $i14$0 = $i14$0 + 1 | 0;
    $px12$0 = $185;
    $py13$0 = $187;
    $z026$0 = $191;
    $z07$0 = +Math_sqrt(+$191);
   }
   $194 = $dist_factor + 16 | 0;
   HEAPF64[$ix >> 3] = $px12$1 / +HEAPF64[$194 >> 3] + $151;
   HEAPF64[$iy >> 3] = $py13$1 / +HEAPF64[$194 >> 3] + +HEAPF64[$153 >> 3];
   $$0 = 0;
   break;
  }
 case 1:
  {
   $202 = +HEAPF64[$dist_factor >> 3];
   $203 = $ox - $202;
   $204 = $dist_factor + 8 | 0;
   $206 = $oy - +HEAPF64[$204 >> 3];
   $209 = +HEAPF64[$dist_factor + 24 >> 3] / 1.0e8;
   $212 = $203 * $203 + $206 * $206;
   $213 = +Math_sqrt(+$212);
   $214 = $209 * 3.0;
   $i21$0 = 1;
   $px19$0 = $203;
   $py20$0 = $206;
   $z016$0 = $213;
   $z0215$0 = $212;
   while (1) {
    if (!($z016$0 != 0.0)) {
     $px19$1 = 0.0;
     $py20$1 = 0.0;
     break;
    }
    $223 = $z016$0 - ($z016$0 * (1.0 - $209 * $z0215$0) - $213) / (1.0 - $214 * $z0215$0);
    $225 = $px19$0 * $223 / $z016$0;
    $227 = $py20$0 * $223 / $z016$0;
    if (($i21$0 | 0) == 3) {
     $px19$1 = $225;
     $py20$1 = $227;
     break;
    }
    $231 = $225 * $225 + $227 * $227;
    $i21$0 = $i21$0 + 1 | 0;
    $px19$0 = $225;
    $py20$0 = $227;
    $z016$0 = +Math_sqrt(+$231);
    $z0215$0 = $231;
   }
   $234 = $dist_factor + 16 | 0;
   HEAPF64[$ix >> 3] = $px19$1 / +HEAPF64[$234 >> 3] + $202;
   HEAPF64[$iy >> 3] = $py20$1 / +HEAPF64[$234 >> 3] + +HEAPF64[$204 >> 3];
   $$0 = 0;
   break;
  }
 default:
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($first, $last, $db, $status) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 $status = $status | 0;
 var $$0$i$i$i = 0, $$03$i = 0, $$2$i = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $32 = 0, $40 = 0, $43 = 0, $46 = 0, $48 = 0, $6 = 0, $65 = 0, $66 = 0, $82 = 0, $93 = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i5$i = 0, $__p$0$i$i$i = 0, $__p$0$ph$i$i$i = 0, $i$0$i = 0, $t$0 = 0, $t$0$i = 0, $t$0$i$lcssa = 0, $t$1$i = 0, $t$2$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 24 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 L1 : do if ($first >>> 0 < $last >>> 0) {
  L3 : do if ((HEAP8[$first >> 0] | 0) == 95) {
   $6 = $last;
   if (($6 - $first | 0) <= 3) {
    HEAP32[$status >> 2] = -2;
    break L1;
   }
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 90:
    {
     $12 = $first + 2 | 0;
     $13 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($12, $last, $db) | 0;
     if (($13 | 0) == ($12 | 0) | ($13 | 0) == ($last | 0)) $t$0 = $13; else if ((HEAP8[$13 >> 0] | 0) == 46) {
      $20 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($20 | 0)) $$03$i = $13; else {
       $22 = $20 + -24 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$2 + 8 >> 2] = 0;
       $24 = $6 - $13 | 0;
       if ($24 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
       if ($24 >>> 0 < 11) {
        HEAP8[$2 >> 0] = $24 << 1;
        $__p$0$ph$i$i$i = $2 + 1 | 0;
       } else {
        $31 = $24 + 16 & -16;
        $32 = _malloc($31) | 0;
        HEAP32[$2 + 8 >> 2] = $32;
        HEAP32[$2 >> 2] = $31 | 1;
        HEAP32[$2 + 4 >> 2] = $24;
        $__p$0$ph$i$i$i = $32;
       }
       $$0$i$i$i = $13;
       $__p$0$i$i$i = $__p$0$ph$i$i$i;
       while (1) {
        if (($$0$i$i$i | 0) == ($last | 0)) break;
        HEAP8[$__p$0$i$i$i >> 0] = HEAP8[$$0$i$i$i >> 0] | 0;
        $$0$i$i$i = $$0$i$i$i + 1 | 0;
        $__p$0$i$i$i = $__p$0$i$i$i + 1 | 0;
       }
       HEAP8[$__p$0$ph$i$i$i + $24 >> 0] = 0;
       $40 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2, 0, 14713) | 0;
       HEAP32[$1 >> 2] = HEAP32[$40 >> 2];
       HEAP32[$1 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
       HEAP32[$1 + 8 >> 2] = HEAP32[$40 + 8 >> 2];
       $__i$0$i$i$i$i = 0;
       while (1) {
        if (($__i$0$i$i$i$i | 0) == 3) break;
        HEAP32[$40 + ($__i$0$i$i$i$i << 2) >> 2] = 0;
        $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
       }
       $43 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1, 14663) | 0;
       HEAP32[$0 >> 2] = HEAP32[$43 >> 2];
       HEAP32[$0 + 4 >> 2] = HEAP32[$43 + 4 >> 2];
       HEAP32[$0 + 8 >> 2] = HEAP32[$43 + 8 >> 2];
       $__i$0$i$i$i5$i = 0;
       while (1) {
        if (($__i$0$i$i$i5$i | 0) == 3) break;
        HEAP32[$43 + ($__i$0$i$i$i5$i << 2) >> 2] = 0;
        $__i$0$i$i$i5$i = $__i$0$i$i$i5$i + 1 | 0;
       }
       $46 = HEAP8[$0 >> 0] | 0;
       $48 = ($46 & 1) == 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($22, $48 ? $0 + 1 | 0 : HEAP32[$0 + 8 >> 2] | 0, $48 ? ($46 & 255) >>> 1 : HEAP32[$0 + 4 >> 2] | 0) | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       $$03$i = $last;
      }
      $t$0 = $$03$i;
     } else $t$0 = $13;
     if (($t$0 | 0) == ($last | 0)) break L3;
     HEAP32[$status >> 2] = -2;
     break L1;
     break;
    }
   case 95:
    {
     if ((HEAP8[$first + 2 >> 0] | 0) == 95) if ((HEAP8[$first + 3 >> 0] | 0) == 90) {
      $65 = $first + 4 | 0;
      $66 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($65, $last, $db) | 0;
      if (($66 | 0) == ($65 | 0) | ($66 | 0) == ($last | 0)) {
       HEAP32[$status >> 2] = -2;
       break L1;
      }
      L43 : do if (($6 - $66 | 0) > 12) {
       $i$0$i = 0;
       $t$0$i = $66;
       while (1) {
        if (($i$0$i | 0) >= 13) {
         $t$0$i$lcssa = $t$0$i;
         break;
        }
        if ((HEAP8[$t$0$i >> 0] | 0) != (HEAP8[16190 + $i$0$i >> 0] | 0)) {
         $$2$i = $66;
         break L43;
        }
        $i$0$i = $i$0$i + 1 | 0;
        $t$0$i = $t$0$i + 1 | 0;
       }
       L49 : do if (($t$0$i$lcssa | 0) == ($last | 0)) $t$2$i = $last; else {
        if ((HEAP8[$t$0$i$lcssa >> 0] | 0) == 95) {
         $82 = $t$0$i$lcssa + 1 | 0;
         if (($82 | 0) == ($last | 0)) {
          $$2$i = $66;
          break L43;
         }
         if (((HEAP8[$82 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
          $$2$i = $66;
          break L43;
         }
         $t$1$i = $t$0$i$lcssa + 2 | 0;
        } else $t$1$i = $t$0$i$lcssa;
        while (1) {
         if (($t$1$i | 0) == ($last | 0)) {
          $t$2$i = $last;
          break L49;
         }
         if (((HEAP8[$t$1$i >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
          $t$2$i = $t$1$i;
          break L49;
         }
         $t$1$i = $t$1$i + 1 | 0;
        }
       } while (0);
       $93 = HEAP32[$db + 4 >> 2] | 0;
       if ((HEAP32[$db >> 2] | 0) == ($93 | 0)) $$2$i = $66; else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($93 + -24 | 0, 0, 16204) | 0;
        $$2$i = $t$2$i;
       }
      } else $$2$i = $66; while (0);
      if (($$2$i | 0) == ($last | 0)) break L3;
      HEAP32[$status >> 2] = -2;
      break L1;
     }
     break;
    }
   default:
    {}
   }
   HEAP32[$status >> 2] = -2;
   break L1;
  } else if ((__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0) != ($last | 0)) {
   HEAP32[$status >> 2] = -2;
   break L1;
  } while (0);
  if (!(HEAP32[$status >> 2] | 0)) if ((HEAP32[$db >> 2] | 0) == (HEAP32[$db + 4 >> 2] | 0)) HEAP32[$status >> 2] = -2;
 } else HEAP32[$status >> 2] = -2; while (0);
 STACKTOP = sp;
 return;
}

function _qsort($base, $nel, $width, $cmp) {
 $base = $base | 0;
 $nel = $nel | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 var $$0$i = 0, $$0$i29 = 0, $$01$i5$i$ph = 0, $$02$i$i = 0, $$02$i3$i = 0, $$phi$trans$insert$i = 0, $$pre1$i = 0, $$pre1$i5 = 0, $$pre1$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $110 = 0, $116 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $27 = 0, $37 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $49 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $69 = 0, $71 = 0, $76 = 0, $79 = 0, $81 = 0, $84 = 0, $88 = 0, $9 = 0, $9$phi = 0, $90 = 0, $92 = 0, $head$0$lcssa = 0, $head$033 = 0, $head$1$be = 0, $head$149 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$034 = 0, $pshift$1 = 0, $pshift$2$be = 0, $pshift$250 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $lp = sp + 8 | 0;
 $p = sp;
 $0 = Math_imul($width, $nel) | 0;
 $1 = $p;
 HEAP32[$1 >> 2] = 1;
 HEAP32[$1 + 4 >> 2] = 0;
 if ($0 | 0) {
  $6 = 0 - $width | 0;
  HEAP32[$lp + 4 >> 2] = $width;
  HEAP32[$lp >> 2] = $width;
  $11 = $width;
  $9 = $width;
  $i$0 = 2;
  while (1) {
   $10 = $9 + $width + $11 | 0;
   HEAP32[$lp + ($i$0 << 2) >> 2] = $10;
   if ($10 >>> 0 < $0 >>> 0) {
    $9$phi = $11;
    $11 = $10;
    $i$0 = $i$0 + 1 | 0;
    $9 = $9$phi;
   } else break;
  }
  $16 = $base + $0 + $6 | 0;
  $$phi$trans$insert$i = $p + 4 | 0;
  if ($16 >>> 0 > $base >>> 0) {
   $18 = $16;
   $20 = 1;
   $head$033 = $base;
   $pshift$034 = 1;
   while (1) {
    do if (($20 & 3 | 0) == 3) {
     _sift($head$033, $width, $cmp, $pshift$034, $lp);
     $$pre1$i = HEAP32[$$phi$trans$insert$i >> 2] | 0;
     $24 = $$pre1$i << 30 | (HEAP32[$p >> 2] | 0) >>> 2;
     HEAP32[$p >> 2] = $24;
     HEAP32[$$phi$trans$insert$i >> 2] = $$pre1$i >>> 2;
     $49 = $24;
     $pshift$1 = $pshift$034 + 2 | 0;
    } else {
     $27 = $pshift$034 + -1 | 0;
     if ((HEAP32[$lp + ($27 << 2) >> 2] | 0) >>> 0 < ($18 - $head$033 | 0) >>> 0) _sift($head$033, $width, $cmp, $pshift$034, $lp); else _trinkle($head$033, $width, $cmp, $p, $pshift$034, 0, $lp);
     if (($pshift$034 | 0) == 1) {
      $$pre1$i5 = HEAP32[$p >> 2] | 0;
      HEAP32[$$phi$trans$insert$i >> 2] = $$pre1$i5 >>> 31 | HEAP32[$$phi$trans$insert$i >> 2] << 1;
      $37 = $$pre1$i5 << 1;
      HEAP32[$p >> 2] = $37;
      $49 = $37;
      $pshift$1 = 0;
      break;
     }
     if ($27 >>> 0 > 31) {
      $40 = HEAP32[$p >> 2] | 0;
      HEAP32[$$phi$trans$insert$i >> 2] = $40;
      HEAP32[$p >> 2] = 0;
      $$0$i = $pshift$034 + -33 | 0;
      $42 = $40;
      $45 = 0;
     } else {
      $$0$i = $27;
      $42 = HEAP32[$$phi$trans$insert$i >> 2] | 0;
      $45 = HEAP32[$p >> 2] | 0;
     }
     HEAP32[$$phi$trans$insert$i >> 2] = $45 >>> (32 - $$0$i | 0) | $42 << $$0$i;
     $47 = $45 << $$0$i;
     HEAP32[$p >> 2] = $47;
     $49 = $47;
     $pshift$1 = 1;
    } while (0);
    $20 = $49 | 1;
    HEAP32[$p >> 2] = $20;
    $50 = $head$033 + $width | 0;
    if ($50 >>> 0 >= $16 >>> 0) {
     $head$0$lcssa = $50;
     $pshift$0$lcssa = $pshift$1;
     break;
    } else {
     $head$033 = $50;
     $pshift$034 = $pshift$1;
    }
   }
  } else {
   $head$0$lcssa = $base;
   $pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa, $width, $cmp, $p, $pshift$0$lcssa, 0, $lp);
  $52 = $p + 4 | 0;
  $54 = HEAP32[$p >> 2] | 0;
  $56 = HEAP32[$52 >> 2] | 0;
  $57 = ($56 | 0) == 0;
  if (!(($pshift$0$lcssa | 0) == 1 & ($54 | 0) == 1 & $57)) {
   $116 = $57;
   $60 = $54;
   $69 = $56;
   $head$149 = $head$0$lcssa;
   $pshift$250 = $pshift$0$lcssa;
   while (1) {
    if (($pshift$250 | 0) < 2) {
     $59 = $60 + -1 | 0;
     do if (!$59) {
      $79 = 32;
      label = 28;
     } else {
      if (!($59 & 1)) {
       $$02$i$i = $59;
       $nTrailingZeros$03$i$i = 0;
       while (1) {
        $64 = $nTrailingZeros$03$i$i + 1 | 0;
        $$02$i$i = $$02$i$i >>> 1;
        if ($$02$i$i & 1 | 0) {
         $76 = $64;
         break;
        } else $nTrailingZeros$03$i$i = $64;
       }
      } else {
       if ($116) $$01$i5$i$ph = 32; else {
        if (!($69 & 1)) {
         $$02$i3$i = $69;
         $nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i29 = 0;
         $81 = $60;
         $84 = $69;
         $88 = 0;
         break;
        }
        while (1) {
         $71 = $nTrailingZeros$03$i2$i + 1 | 0;
         $$02$i3$i = $$02$i3$i >>> 1;
         if ($$02$i3$i & 1 | 0) {
          $$01$i5$i$ph = $71;
          break;
         } else $nTrailingZeros$03$i2$i = $71;
        }
       }
       $76 = $$01$i5$i$ph + 32 | 0;
      }
      if ($76 >>> 0 > 31) {
       $79 = $76;
       label = 28;
      } else {
       $$0$i29 = $76;
       $81 = $60;
       $84 = $69;
       $88 = $76;
      }
     } while (0);
     if ((label | 0) == 28) {
      label = 0;
      HEAP32[$p >> 2] = $69;
      HEAP32[$$phi$trans$insert$i >> 2] = 0;
      $$0$i29 = $79 + -32 | 0;
      $81 = $69;
      $84 = 0;
      $88 = $79;
     }
     HEAP32[$p >> 2] = $84 << 32 - $$0$i29 | $81 >>> $$0$i29;
     HEAP32[$$phi$trans$insert$i >> 2] = $84 >>> $$0$i29;
     $head$1$be = $head$149 + $6 | 0;
     $pshift$2$be = $88 + $pshift$250 | 0;
    } else {
     $90 = $60 >>> 30;
     $92 = $pshift$250 + -2 | 0;
     HEAP32[$p >> 2] = ($60 << 1 & 2147483646 | $90 << 31) ^ 3;
     HEAP32[$$phi$trans$insert$i >> 2] = ($90 | $69 << 2) >>> 1;
     _trinkle($head$149 + (0 - (HEAP32[$lp + ($92 << 2) >> 2] | 0)) + $6 | 0, $width, $cmp, $p, $pshift$250 + -1 | 0, 1, $lp);
     $$pre1$i8 = HEAP32[$p >> 2] | 0;
     HEAP32[$$phi$trans$insert$i >> 2] = $$pre1$i8 >>> 31 | HEAP32[$$phi$trans$insert$i >> 2] << 1;
     HEAP32[$p >> 2] = $$pre1$i8 << 1 | 1;
     $110 = $head$149 + $6 | 0;
     _trinkle($110, $width, $cmp, $p, $92, 1, $lp);
     $head$1$be = $110;
     $pshift$2$be = $92;
    }
    $60 = HEAP32[$p >> 2] | 0;
    $69 = HEAP32[$52 >> 2] | 0;
    $116 = ($69 | 0) == 0;
    if (($pshift$2$be | 0) == 1 & ($60 | 0) == 1 & $116) break; else {
     $head$149 = $head$1$be;
     $pshift$250 = $pshift$2$be;
    }
   }
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $48 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $70 = 0, $77 = 0, $78 = 0, $79 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off0 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $p$0 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0;
 L1 : do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else {
  if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
   $59 = HEAP32[$this + 12 >> 2] | 0;
   $60 = $this + 16 + ($59 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp);
   $61 = $this + 24 | 0;
   if (($59 | 0) <= 1) break;
   $64 = HEAP32[$this + 8 >> 2] | 0;
   if (!($64 & 2)) {
    $67 = $info + 36 | 0;
    if ((HEAP32[$67 >> 2] | 0) != 1) {
     if (!($64 & 1)) {
      $79 = $info + 54 | 0;
      $p2$2 = $61;
      while (1) {
       if (HEAP8[$79 >> 0] | 0) break L1;
       if ((HEAP32[$67 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2, $info, $current_ptr, $path_below, $use_strcmp);
       $p2$2 = $p2$2 + 8 | 0;
       if ($p2$2 >>> 0 >= $60 >>> 0) break L1;
      }
     }
     $77 = $info + 24 | 0;
     $78 = $info + 54 | 0;
     $p2$1 = $61;
     while (1) {
      if (HEAP8[$78 >> 0] | 0) break L1;
      if ((HEAP32[$67 >> 2] | 0) == 1) if ((HEAP32[$77 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1, $info, $current_ptr, $path_below, $use_strcmp);
      $p2$1 = $p2$1 + 8 | 0;
      if ($p2$1 >>> 0 >= $60 >>> 0) break L1;
     }
    }
   }
   $70 = $info + 54 | 0;
   $p2$0 = $61;
   while (1) {
    if (HEAP8[$70 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0, $info, $current_ptr, $path_below, $use_strcmp);
    $p2$0 = $p2$0 + 8 | 0;
    if ($p2$0 >>> 0 >= $60 >>> 0) break L1;
   }
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $20 = $info + 44 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 4) break;
    $26 = $this + 16 + (HEAP32[$this + 12 >> 2] << 3) | 0;
    $27 = $info + 52 | 0;
    $28 = $info + 53 | 0;
    $29 = $info + 54 | 0;
    $30 = $this + 8 | 0;
    $31 = $info + 24 | 0;
    $does_dst_type_point_to_our_static_type$0$off0 = 0;
    $is_dst_type_derived_from_static_type$0$off0 = 0;
    $p$0 = $this + 16 | 0;
    L34 : while (1) {
     if ($p$0 >>> 0 >= $26 >>> 0) {
      $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;
      $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
      label = 20;
      break;
     }
     HEAP8[$27 >> 0] = 0;
     HEAP8[$28 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     if (HEAP8[$29 >> 0] | 0) {
      $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;
      $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
      label = 20;
      break;
     }
     do if (!(HEAP8[$28 >> 0] | 0)) {
      $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;
      $is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off0;
     } else {
      if (!(HEAP8[$27 >> 0] | 0)) if (!(HEAP32[$30 >> 2] & 1)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;
       $is_dst_type_derived_from_static_type$2$off0 = 1;
       label = 20;
       break L34;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;
       $is_dst_type_derived_from_static_type$1$off0 = 1;
       break;
      }
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       label = 25;
       break L34;
      }
      if (!(HEAP32[$30 >> 2] & 2)) {
       label = 25;
       break L34;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = 1;
       $is_dst_type_derived_from_static_type$1$off0 = 1;
      }
     } while (0);
     $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;
     $is_dst_type_derived_from_static_type$0$off0 = $is_dst_type_derived_from_static_type$1$off0;
     $p$0 = $p$0 + 8 | 0;
    }
    do if ((label | 0) == 20) {
     if (!$does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      HEAP32[$14 >> 2] = $current_ptr;
      $48 = $info + 40 | 0;
      HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
      if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$31 >> 2] | 0) == 2) {
       HEAP8[$29 >> 0] = 1;
       if ($is_dst_type_derived_from_static_type$2$off0) {
        label = 25;
        break;
       } else {
        $56 = 4;
        break;
       }
      }
     }
     if ($is_dst_type_derived_from_static_type$2$off0) label = 25; else $56 = 4;
    } while (0);
    if ((label | 0) == 25) $56 = 3;
    HEAP32[$20 >> 2] = $56;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $104 = 0, $106 = 0, $109 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $121 = 0, $122 = 0, $127 = 0, $128 = 0, $137 = 0, $142 = 0, $145 = 0, $146 = 0, $152 = 0, $163 = 0, $166 = 0, $173 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $3 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $58 = 0, $65 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $94 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $newp$2 = 0, $storemerge = 0, $storemerge1 = 0;
 $0 = $p + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = HEAP32[4184] | 0;
 $5 = $1 & 3;
 if (!(($5 | 0) != 1 & $p >>> 0 >= $4 >>> 0 & $p >>> 0 < $3 >>> 0)) _abort();
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 if (!($8 & 1)) _abort();
 if (!$5) {
  if ($nb >>> 0 < 256) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  if ($2 >>> 0 >= ($nb + 4 | 0) >>> 0) if (($2 - $nb | 0) >>> 0 <= HEAP32[4300] << 1 >>> 0) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 if ($2 >>> 0 >= $nb >>> 0) {
  $20 = $2 - $nb | 0;
  if ($20 >>> 0 <= 15) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $22 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$22 + 4 >> 2] = $20 | 3;
  $29 = $22 + $20 + 4 | 0;
  HEAP32[$29 >> 2] = HEAP32[$29 >> 2] | 1;
  _dispose_chunk($22, $20);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($3 | 0) == (HEAP32[4186] | 0)) {
  $35 = (HEAP32[4183] | 0) + $2 | 0;
  if ($35 >>> 0 <= $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $37 = $35 - $nb | 0;
  $38 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$38 + 4 >> 2] = $37 | 1;
  HEAP32[4186] = $38;
  HEAP32[4183] = $37;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($3 | 0) == (HEAP32[4185] | 0)) {
  $47 = (HEAP32[4182] | 0) + $2 | 0;
  if ($47 >>> 0 < $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $49 = $47 - $nb | 0;
  if ($49 >>> 0 > 15) {
   $51 = $p + $nb | 0;
   $52 = $51 + $49 | 0;
   HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
   HEAP32[$51 + 4 >> 2] = $49 | 1;
   HEAP32[$52 >> 2] = $49;
   $58 = $52 + 4 | 0;
   HEAP32[$58 >> 2] = HEAP32[$58 >> 2] & -2;
   $storemerge = $51;
   $storemerge1 = $49;
  } else {
   HEAP32[$0 >> 2] = $1 & 1 | $47 | 2;
   $65 = $p + $47 + 4 | 0;
   HEAP32[$65 >> 2] = HEAP32[$65 >> 2] | 1;
   $storemerge = 0;
   $storemerge1 = 0;
  }
  HEAP32[4182] = $storemerge1;
  HEAP32[4185] = $storemerge;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ($8 & 2 | 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $71 = ($8 & -8) + $2 | 0;
 if ($71 >>> 0 < $nb >>> 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $73 = $71 - $nb | 0;
 $74 = $8 >>> 3;
 do if ($8 >>> 0 < 256) {
  $77 = HEAP32[$3 + 8 >> 2] | 0;
  $79 = HEAP32[$3 + 12 >> 2] | 0;
  $81 = 16760 + ($74 << 1 << 2) | 0;
  if (($77 | 0) != ($81 | 0)) {
   if ($77 >>> 0 < $4 >>> 0) _abort();
   if ((HEAP32[$77 + 12 >> 2] | 0) != ($3 | 0)) _abort();
  }
  if (($79 | 0) == ($77 | 0)) {
   HEAP32[4180] = HEAP32[4180] & ~(1 << $74);
   break;
  }
  if (($79 | 0) == ($81 | 0)) $$pre$phiZ2D = $79 + 8 | 0; else {
   if ($79 >>> 0 < $4 >>> 0) _abort();
   $94 = $79 + 8 | 0;
   if ((HEAP32[$94 >> 2] | 0) == ($3 | 0)) $$pre$phiZ2D = $94; else _abort();
  }
  HEAP32[$77 + 12 >> 2] = $79;
  HEAP32[$$pre$phiZ2D >> 2] = $77;
 } else {
  $99 = HEAP32[$3 + 24 >> 2] | 0;
  $101 = HEAP32[$3 + 12 >> 2] | 0;
  do if (($101 | 0) == ($3 | 0)) {
   $112 = $3 + 16 | 0;
   $113 = $112 + 4 | 0;
   $114 = HEAP32[$113 >> 2] | 0;
   if (!$114) {
    $116 = HEAP32[$112 >> 2] | 0;
    if (!$116) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $116;
     $RP$1 = $112;
    }
   } else {
    $R$1 = $114;
    $RP$1 = $113;
   }
   while (1) {
    $118 = $R$1 + 20 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    if ($119 | 0) {
     $R$1 = $119;
     $RP$1 = $118;
     continue;
    }
    $121 = $R$1 + 16 | 0;
    $122 = HEAP32[$121 >> 2] | 0;
    if (!$122) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $122;
     $RP$1 = $121;
    }
   }
   if ($RP$1$lcssa >>> 0 < $4 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $104 = HEAP32[$3 + 8 >> 2] | 0;
   if ($104 >>> 0 < $4 >>> 0) _abort();
   $106 = $104 + 12 | 0;
   if ((HEAP32[$106 >> 2] | 0) != ($3 | 0)) _abort();
   $109 = $101 + 8 | 0;
   if ((HEAP32[$109 >> 2] | 0) == ($3 | 0)) {
    HEAP32[$106 >> 2] = $101;
    HEAP32[$109 >> 2] = $104;
    $R$3 = $101;
    break;
   } else _abort();
  } while (0);
  if ($99 | 0) {
   $127 = HEAP32[$3 + 28 >> 2] | 0;
   $128 = 17024 + ($127 << 2) | 0;
   if (($3 | 0) == (HEAP32[$128 >> 2] | 0)) {
    HEAP32[$128 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[4181] = HEAP32[4181] & ~(1 << $127);
     break;
    }
   } else {
    if ($99 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort();
    $137 = $99 + 16 | 0;
    if ((HEAP32[$137 >> 2] | 0) == ($3 | 0)) HEAP32[$137 >> 2] = $R$3; else HEAP32[$99 + 20 >> 2] = $R$3;
    if (!$R$3) break;
   }
   $142 = HEAP32[4184] | 0;
   if ($R$3 >>> 0 < $142 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $99;
   $145 = $3 + 16 | 0;
   $146 = HEAP32[$145 >> 2] | 0;
   do if ($146 | 0) if ($146 >>> 0 < $142 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $146;
    HEAP32[$146 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $152 = HEAP32[$145 + 4 >> 2] | 0;
   if ($152 | 0) if ($152 >>> 0 < (HEAP32[4184] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $152;
    HEAP32[$152 + 24 >> 2] = $R$3;
    break;
   }
  }
 } while (0);
 if ($73 >>> 0 < 16) {
  HEAP32[$0 >> 2] = $71 | $1 & 1 | 2;
  $163 = $p + $71 + 4 | 0;
  HEAP32[$163 >> 2] = HEAP32[$163 >> 2] | 1;
  $newp$2 = $p;
  return $newp$2 | 0;
 } else {
  $166 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$166 + 4 >> 2] = $73 | 3;
  $173 = $166 + $73 + 4 | 0;
  HEAP32[$173 >> 2] = HEAP32[$173 >> 2] | 1;
  _dispose_chunk($166, $73);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 return 0;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $11 = 0, $113 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $147 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $17 = 0, $2 = 0, $24 = 0.0, $26 = 0, $27 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $79 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $94 = 0, $95 = 0, $97 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $fabs = 0.0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $6 = $4 & 2047;
 $7 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $12 = tempRet0;
 L1 : do if (($11 | 0) == 0 & ($12 | 0) == 0) label = 3; else {
  $fabs = +Math_abs(+$y);
  HEAPF64[tempDoublePtr >> 3] = $fabs;
  $17 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  if ($17 >>> 0 > 2146435072 | ($17 | 0) == 2146435072 & (HEAP32[tempDoublePtr >> 2] | 0) >>> 0 > 0 | ($6 | 0) == 2047) label = 3; else {
   $26 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $27 = tempRet0;
   if (!($27 >>> 0 > $12 >>> 0 | ($27 | 0) == ($12 | 0) & $26 >>> 0 > $11 >>> 0)) return +(($26 | 0) == ($11 | 0) & ($27 | 0) == ($12 | 0) ? $x * 0.0 : $x);
   if (!$6) {
    $38 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $39 = tempRet0;
    if (($39 | 0) > -1 | ($39 | 0) == -1 & $38 >>> 0 > 4294967295) {
     $46 = $38;
     $47 = $39;
     $ex$026 = 0;
     while (1) {
      $45 = $ex$026 + -1 | 0;
      $46 = _bitshift64Shl($46 | 0, $47 | 0, 1) | 0;
      $47 = tempRet0;
      if (!(($47 | 0) > -1 | ($47 | 0) == -1 & $46 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $45;
       break;
      } else $ex$026 = $45;
     }
    } else $ex$0$lcssa = 0;
    $56 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $84 = $56;
    $85 = tempRet0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $84 = $0;
    $85 = $1 & 1048575 | 1048576;
    $ex$1 = $6;
   }
   if (!$9) {
    $61 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $62 = tempRet0;
    if (($62 | 0) > -1 | ($62 | 0) == -1 & $61 >>> 0 > 4294967295) {
     $69 = $61;
     $70 = $62;
     $ey$020 = 0;
     while (1) {
      $68 = $ey$020 + -1 | 0;
      $69 = _bitshift64Shl($69 | 0, $70 | 0, 1) | 0;
      $70 = tempRet0;
      if (!(($70 | 0) > -1 | ($70 | 0) == -1 & $69 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $68;
       break;
      } else $ey$020 = $68;
     }
    } else $ey$0$lcssa = 0;
    $79 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $86 = $79;
    $87 = tempRet0;
    $ey$1$ph = $ey$0$lcssa;
   } else {
    $86 = $2;
    $87 = $3 & 1048575 | 1048576;
    $ey$1$ph = $9;
   }
   $88 = _i64Subtract($84 | 0, $85 | 0, $86 | 0, $87 | 0) | 0;
   $89 = tempRet0;
   $94 = ($89 | 0) > -1 | ($89 | 0) == -1 & $88 >>> 0 > 4294967295;
   L23 : do if (($ex$1 | 0) > ($ey$1$ph | 0)) {
    $153 = $94;
    $154 = $88;
    $155 = $89;
    $95 = $84;
    $97 = $85;
    $ex$212 = $ex$1;
    while (1) {
     if ($153) if (($95 | 0) == ($86 | 0) & ($97 | 0) == ($87 | 0)) break; else {
      $101 = $154;
      $102 = $155;
     } else {
      $101 = $95;
      $102 = $97;
     }
     $103 = _bitshift64Shl($101 | 0, $102 | 0, 1) | 0;
     $104 = tempRet0;
     $105 = $ex$212 + -1 | 0;
     $107 = _i64Subtract($103 | 0, $104 | 0, $86 | 0, $87 | 0) | 0;
     $108 = tempRet0;
     $113 = ($108 | 0) > -1 | ($108 | 0) == -1 & $107 >>> 0 > 4294967295;
     if (($105 | 0) > ($ey$1$ph | 0)) {
      $153 = $113;
      $154 = $107;
      $155 = $108;
      $95 = $103;
      $97 = $104;
      $ex$212 = $105;
     } else {
      $$lcssa7 = $113;
      $114 = $103;
      $116 = $104;
      $156 = $107;
      $157 = $108;
      $ex$2$lcssa = $105;
      break L23;
     }
    }
    $$0 = $x * 0.0;
    break L1;
   } else {
    $$lcssa7 = $94;
    $114 = $84;
    $116 = $85;
    $156 = $88;
    $157 = $89;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($$lcssa7) if (($114 | 0) == ($86 | 0) & ($116 | 0) == ($87 | 0)) {
    $$0 = $x * 0.0;
    break;
   } else {
    $119 = $157;
    $121 = $156;
   } else {
    $119 = $116;
    $121 = $114;
   }
   if ($119 >>> 0 < 1048576 | ($119 | 0) == 1048576 & $121 >>> 0 < 0) {
    $127 = $121;
    $128 = $119;
    $ex$39 = $ex$2$lcssa;
    while (1) {
     $129 = _bitshift64Shl($127 | 0, $128 | 0, 1) | 0;
     $130 = tempRet0;
     $131 = $ex$39 + -1 | 0;
     if ($130 >>> 0 < 1048576 | ($130 | 0) == 1048576 & $129 >>> 0 < 0) {
      $127 = $129;
      $128 = $130;
      $ex$39 = $131;
     } else {
      $138 = $129;
      $139 = $130;
      $ex$3$lcssa = $131;
      break;
     }
    }
   } else {
    $138 = $121;
    $139 = $119;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $140 = _i64Add($138 | 0, $139 | 0, 0, -1048576) | 0;
    $141 = tempRet0;
    $142 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $150 = $141 | tempRet0;
    $152 = $140 | $142;
   } else {
    $147 = _bitshift64Lshr($138 | 0, $139 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $150 = tempRet0;
    $152 = $147;
   }
   HEAP32[tempDoublePtr >> 2] = $152;
   HEAP32[tempDoublePtr + 4 >> 2] = $150 | $10;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $24 = $x * $y;
  $$0 = $24 / $24;
 }
 return +$$0;
}

function _arPattLoadFromBuffer($pattHandle, $buffer) {
 $pattHandle = $pattHandle | 0;
 $buffer = $buffer | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa52 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $38 = 0, $4 = 0, $45 = 0, $48 = 0, $49 = 0, $55 = 0, $62 = 0, $65 = 0, $67 = 0, $73 = 0, $75 = 0, $77 = 0, $80 = 0.0, $85 = 0, $90 = 0, $92 = 0, $94 = 0, $97 = 0.0, $buffPtr$0 = 0, $buffPtr$1 = 0, $buffPtr$1$lcssa = 0, $buffPtr$2 = 0, $buffPtr$2$lcssa = 0, $buffPtr$3 = 0, $buffPtr$3$lcssa = 0, $h$0 = 0, $i$0 = 0, $i$0$lcssa = 0, $i$1 = 0, $i$2 = 0, $i1$0 = 0, $i2$0 = 0, $i3$0 = 0, $l$0 = 0, $l$0$lcssa = 0, $l$1 = 0, $l$1$lcssa = 0, $l$2 = 0, $l$2$lcssa = 0, $m$0 = 0, $m$0$lcssa = 0, $m$1 = 0, $m$1$lcssa = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 do if (!$pattHandle) {
  _arLog(3, 3669, sp);
  $$0 = -1;
 } else {
  if (!$buffer) {
   _arLog(3, 3694, $vararg_buffer1);
   $$0 = -1;
   break;
  }
  $2 = $pattHandle + 8 | 0;
  $4 = HEAP32[$pattHandle + 4 >> 2] | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) >= ($4 | 0)) {
    $i$0$lcssa = $i$0;
    break;
   }
   if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + ($i$0 << 2) >> 2] | 0)) {
    $i$0$lcssa = $i$0;
    break;
   }
   $i$0 = $i$0 + 1 | 0;
  }
  if (($i$0$lcssa | 0) == ($4 | 0)) $$0 = -1; else {
   $12 = ___strdup($buffer) | 0;
   if (!$12) {
    _arLog(3, 3739, $vararg_buffer3);
    $$0 = -1;
    break;
   }
   $15 = $pattHandle + 28 | 0;
   $16 = $i$0$lcssa << 2;
   $17 = $pattHandle + 12 | 0;
   $18 = $pattHandle + 20 | 0;
   $19 = $pattHandle + 16 | 0;
   $20 = $pattHandle + 24 | 0;
   $buffPtr$0 = _strtok($12, 3762) | 0;
   $h$0 = 0;
   L16 : while (1) {
    if (($h$0 | 0) >= 4) {
     label = 35;
     break;
    }
    $22 = $h$0 + $16 | 0;
    $buffPtr$1 = $buffPtr$0;
    $i3$0 = 0;
    $l$0 = 0;
    while (1) {
     if (($i3$0 | 0) >= 3) {
      $buffPtr$1$lcssa = $buffPtr$1;
      $l$0$lcssa = $l$0;
      break;
     }
     $24 = ($i3$0 | 0) == 0;
     $25 = ($i3$0 | 0) == 2;
     $27 = HEAP32[$15 >> 2] | 0;
     $buffPtr$2 = $buffPtr$1;
     $i2$0 = 0;
     $l$1 = $l$0;
     while (1) {
      if (($i2$0 | 0) < ($27 | 0)) {
       $29 = $27;
       $buffPtr$3 = $buffPtr$2;
       $i1$0 = 0;
       $l$2 = $l$1;
      } else {
       $buffPtr$2$lcssa = $buffPtr$2;
       $l$1$lcssa = $l$1;
       break;
      }
      while (1) {
       if (($i1$0 | 0) >= ($29 | 0)) {
        $$lcssa = $29;
        $buffPtr$3$lcssa = $buffPtr$3;
        $l$2$lcssa = $l$2;
        break;
       }
       if (!$buffPtr$3) {
        label = 20;
        break L16;
       }
       $31 = _atoi($buffPtr$3) | 0;
       $32 = _strtok(0, 3762) | 0;
       $33 = 255 - $31 | 0;
       $38 = (((Math_imul(HEAP32[$15 >> 2] | 0, $i2$0) | 0) + $i1$0 | 0) * 3 | 0) + $i3$0 | 0;
       HEAP32[(HEAP32[(HEAP32[$17 >> 2] | 0) + ($22 << 2) >> 2] | 0) + ($38 << 2) >> 2] = $33;
       $45 = (Math_imul(HEAP32[$15 >> 2] | 0, $i2$0) | 0) + $i1$0 | 0;
       $48 = HEAP32[(HEAP32[$18 >> 2] | 0) + ($22 << 2) >> 2] | 0;
       $49 = $48 + ($45 << 2) | 0;
       if ($24) HEAP32[$49 >> 2] = $33; else {
        HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + $33;
        if ($25) {
         $55 = $48 + ((Math_imul(HEAP32[$15 >> 2] | 0, $i2$0) | 0) + $i1$0 << 2) | 0;
         HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) / 3 | 0;
        }
       }
       $29 = HEAP32[$15 >> 2] | 0;
       $buffPtr$3 = $32;
       $i1$0 = $i1$0 + 1 | 0;
       $l$2 = $33 + $l$2 | 0;
      }
      $27 = $$lcssa;
      $buffPtr$2 = $buffPtr$3$lcssa;
      $i2$0 = $i2$0 + 1 | 0;
      $l$1 = $l$2$lcssa;
     }
     $buffPtr$1 = $buffPtr$2$lcssa;
     $i3$0 = $i3$0 + 1 | 0;
     $l$0 = $l$1$lcssa;
    }
    $62 = HEAP32[$15 >> 2] | 0;
    $65 = ($l$0$lcssa | 0) / (Math_imul($62 * 3 | 0, $62) | 0) | 0;
    $67 = $62;
    $i$1 = 0;
    $m$0 = 0;
    while (1) {
     if (($i$1 | 0) >= (Math_imul($67 * 3 | 0, $67) | 0)) {
      $$lcssa52 = $67;
      $m$0$lcssa = $m$0;
      break;
     }
     $73 = (HEAP32[(HEAP32[$17 >> 2] | 0) + ($22 << 2) >> 2] | 0) + ($i$1 << 2) | 0;
     $75 = (HEAP32[$73 >> 2] | 0) - $65 | 0;
     HEAP32[$73 >> 2] = $75;
     $77 = (Math_imul($75, $75) | 0) + $m$0 | 0;
     $67 = HEAP32[$15 >> 2] | 0;
     $i$1 = $i$1 + 1 | 0;
     $m$0 = $77;
    }
    $80 = +Math_sqrt(+(+($m$0$lcssa | 0)));
    HEAPF64[(HEAP32[$19 >> 2] | 0) + ($22 << 3) >> 3] = $80 == 0.0 ? 1.0e-07 : $80;
    $85 = $$lcssa52;
    $i$2 = 0;
    $m$1 = 0;
    while (1) {
     if (($i$2 | 0) >= (Math_imul($85, $85) | 0)) {
      $m$1$lcssa = $m$1;
      break;
     }
     $90 = (HEAP32[(HEAP32[$18 >> 2] | 0) + ($22 << 2) >> 2] | 0) + ($i$2 << 2) | 0;
     $92 = (HEAP32[$90 >> 2] | 0) - $65 | 0;
     HEAP32[$90 >> 2] = $92;
     $94 = (Math_imul($92, $92) | 0) + $m$1 | 0;
     $85 = HEAP32[$15 >> 2] | 0;
     $i$2 = $i$2 + 1 | 0;
     $m$1 = $94;
    }
    $97 = +Math_sqrt(+(+($m$1$lcssa | 0)));
    HEAPF64[(HEAP32[$20 >> 2] | 0) + ($22 << 3) >> 3] = $97 == 0.0 ? 1.0e-07 : $97;
    $buffPtr$0 = $buffPtr$1$lcssa;
    $h$0 = $h$0 + 1 | 0;
   }
   if ((label | 0) == 20) {
    _arLog(3, 3767, $vararg_buffer5);
    _free($12);
    $$0 = -1;
    break;
   } else if ((label | 0) == 35) {
    _free($12);
    HEAP32[(HEAP32[$2 >> 2] | 0) + ($i$0$lcssa << 2) >> 2] = 1;
    HEAP32[$pattHandle >> 2] = (HEAP32[$pattHandle >> 2] | 0) + 1;
    $$0 = $i$0$lcssa;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arGetContour($limage, $xsize, $ysize, $label_ref, $label, $clip, $marker_info2) {
 $limage = $limage | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $label_ref = $label_ref | 0;
 $label = $label | 0;
 $clip = $clip | 0;
 $marker_info2 = $marker_info2 | 0;
 var $$0 = 0, $$lcssa45 = 0, $1 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $41 = 0, $43 = 0, $44 = 0, $49 = 0, $51 = 0, $52 = 0, $58 = 0, $63 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $81 = 0, $84 = 0, $9 = 0, $93 = 0, $dir$0 = 0, $dir$1 = 0, $dir$1$in = 0, $dir$1$lcssa = 0, $dir$143 = 0, $dmax$0 = 0, $i$0 = 0, $i$0$lcssa47 = 0, $i$1 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$v1$0 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $p1$0 = 0, $v1$0 = 0, $v1$0$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $wx = 0, $wy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80032 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $wx = sp + 40024 | 0;
 $wy = sp + 24 | 0;
 $1 = HEAP32[$clip + 8 >> 2] | 0;
 $2 = Math_imul($1, $xsize) | 0;
 $3 = HEAP32[$clip >> 2] | 0;
 $7 = HEAP32[$clip + 4 >> 2] | 0;
 $i$0 = $3;
 $p1$0 = $limage + ($2 + $3 << 1) | 0;
 while (1) {
  if (($i$0 | 0) > ($7 | 0)) {
   label = 6;
   break;
  }
  $9 = HEAP16[$p1$0 >> 1] | 0;
  if ($9 << 16 >> 16 > 0) if ((HEAP32[$label_ref + (($9 << 16 >> 16) + -1 << 2) >> 2] | 0) == ($label | 0)) {
   $i$0$lcssa47 = $i$0;
   label = 7;
   break;
  }
  $i$0 = $i$0 + 1 | 0;
  $p1$0 = $p1$0 + 2 | 0;
 }
 do if ((label | 0) == 6) {
  _arLog(3, 3173, $vararg_buffer);
  $$0 = -1;
 } else if ((label | 0) == 7) {
  $18 = $marker_info2 + 24 | 0;
  HEAP32[$18 >> 2] = 1;
  $19 = $marker_info2 + 28 | 0;
  HEAP32[$19 >> 2] = $i$0$lcssa47;
  $20 = $marker_info2 + 40028 | 0;
  HEAP32[$20 >> 2] = $1;
  $22 = $1;
  $24 = $i$0$lcssa47;
  $43 = 1;
  $dir$0 = 5;
  while (1) {
   $25 = $limage + ((Math_imul($22, $xsize) | 0) + $24 << 1) | 0;
   $dir$1$in = $dir$0 + 5 | 0;
   $i$1 = 0;
   while (1) {
    $dir$1 = ($dir$1$in | 0) % 8 | 0;
    if (($i$1 | 0) >= 8) {
     $dir$1$lcssa = $dir$1;
     $i$1$lcssa = $i$1;
     label = 12;
     break;
    }
    $29 = HEAP32[424 + ($dir$1 << 2) >> 2] | 0;
    $30 = Math_imul($29, $xsize) | 0;
    $32 = HEAP32[456 + ($dir$1 << 2) >> 2] | 0;
    if ((HEAP16[$25 + ($30 + $32 << 1) >> 1] | 0) > 0) {
     $41 = $32;
     $49 = $29;
     $dir$143 = $dir$1;
     break;
    }
    $dir$1$in = $dir$1 + 1 | 0;
    $i$1 = $i$1 + 1 | 0;
   }
   if ((label | 0) == 12) {
    label = 0;
    if (($i$1$lcssa | 0) == 8) {
     label = 14;
     break;
    }
    $41 = HEAP32[456 + ($dir$1$lcssa << 2) >> 2] | 0;
    $49 = HEAP32[424 + ($dir$1$lcssa << 2) >> 2] | 0;
    $dir$143 = $dir$1$lcssa;
   }
   HEAP32[$marker_info2 + 28 + ($43 << 2) >> 2] = $41 + $24;
   $44 = HEAP32[$18 >> 2] | 0;
   HEAP32[$marker_info2 + 40028 + ($44 << 2) >> 2] = $49 + (HEAP32[$marker_info2 + 40028 + ($44 + -1 << 2) >> 2] | 0);
   $51 = HEAP32[$18 >> 2] | 0;
   $52 = $marker_info2 + 28 + ($51 << 2) | 0;
   if ((HEAP32[$52 >> 2] | 0) == ($i$0$lcssa47 | 0)) if ((HEAP32[$marker_info2 + 40028 + ($51 << 2) >> 2] | 0) == ($1 | 0)) {
    $$lcssa45 = $51;
    label = 17;
    break;
   }
   $58 = $51 + 1 | 0;
   HEAP32[$18 >> 2] = $58;
   if (($58 | 0) == 9999) {
    label = 20;
    break;
   }
   $22 = HEAP32[$marker_info2 + 40028 + ($51 << 2) >> 2] | 0;
   $24 = HEAP32[$52 >> 2] | 0;
   $43 = $58;
   $dir$0 = $dir$143;
  }
  if ((label | 0) == 14) {
   _arLog(3, 3180, $vararg_buffer1);
   $$0 = -1;
   break;
  } else if ((label | 0) == 17) {
   $dmax$0 = 0;
   $i$2 = 1;
   $v1$0 = 0;
   while (1) {
    if (($i$2 | 0) >= ($$lcssa45 | 0)) {
     $v1$0$lcssa = $v1$0;
     break;
    }
    $63 = (HEAP32[$marker_info2 + 28 + ($i$2 << 2) >> 2] | 0) - $i$0$lcssa47 | 0;
    $64 = Math_imul($63, $63) | 0;
    $67 = (HEAP32[$marker_info2 + 40028 + ($i$2 << 2) >> 2] | 0) - $1 | 0;
    $69 = (Math_imul($67, $67) | 0) + $64 | 0;
    $70 = ($69 | 0) > ($dmax$0 | 0);
    $i$2$v1$0 = $70 ? $i$2 : $v1$0;
    $dmax$0 = $70 ? $69 : $dmax$0;
    $i$2 = $i$2 + 1 | 0;
    $v1$0 = $i$2$v1$0;
   }
   $i$3 = 0;
   while (1) {
    if (($i$3 | 0) >= ($v1$0$lcssa | 0)) {
     $81 = $$lcssa45;
     $i$4 = $v1$0$lcssa;
     break;
    }
    HEAP32[$wx + ($i$3 << 2) >> 2] = HEAP32[$marker_info2 + 28 + ($i$3 << 2) >> 2];
    HEAP32[$wy + ($i$3 << 2) >> 2] = HEAP32[$marker_info2 + 40028 + ($i$3 << 2) >> 2];
    $i$3 = $i$3 + 1 | 0;
   }
   while (1) {
    if (($i$4 | 0) >= ($81 | 0)) {
     $i$5 = 0;
     break;
    }
    $84 = $i$4 - $v1$0$lcssa | 0;
    HEAP32[$marker_info2 + 28 + ($84 << 2) >> 2] = HEAP32[$marker_info2 + 28 + ($i$4 << 2) >> 2];
    HEAP32[$marker_info2 + 40028 + ($84 << 2) >> 2] = HEAP32[$marker_info2 + 40028 + ($i$4 << 2) >> 2];
    $81 = HEAP32[$18 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($v1$0$lcssa | 0)) break;
    $93 = $i$5 - $v1$0$lcssa | 0;
    HEAP32[$marker_info2 + 28 + ((HEAP32[$18 >> 2] | 0) + $93 << 2) >> 2] = HEAP32[$wx + ($i$5 << 2) >> 2];
    HEAP32[$marker_info2 + 40028 + ((HEAP32[$18 >> 2] | 0) + $93 << 2) >> 2] = HEAP32[$wy + ($i$5 << 2) >> 2];
    $i$5 = $i$5 + 1 | 0;
   }
   HEAP32[$marker_info2 + 28 + (HEAP32[$18 >> 2] << 2) >> 2] = HEAP32[$19 >> 2];
   HEAP32[$marker_info2 + 40028 + (HEAP32[$18 >> 2] << 2) >> 2] = HEAP32[$20 >> 2];
   HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
   $$0 = 0;
   break;
  } else if ((label | 0) == 20) {
   _arLog(3, 3187, $vararg_buffer3);
   $$0 = -1;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function ___cxa_demangle($mangled_name, $buf, $n, $status) {
 $mangled_name = $mangled_name | 0;
 $buf = $buf | 0;
 $n = $n | 0;
 $status = $status | 0;
 var $$0 = 0, $$18 = 0, $$2 = 0, $1 = 0, $10 = 0, $103 = 0, $106 = 0, $11 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $30 = 0, $31 = 0, $35 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $52 = 0, $54 = 0, $56 = 0, $6 = 0, $64 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $80 = 0, $82 = 0, $83 = 0, $85 = 0, $95 = 0, $96 = 0, $__v$i$i = 0, $a = 0, $db = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i = sp + 4176 | 0;
 $a = sp;
 $db = sp + 4112 | 0;
 if (!$mangled_name) label = 3; else {
  $1 = ($buf | 0) != 0;
  $2 = ($n | 0) == 0;
  if ($1 & $2) label = 3; else {
   if ($1) $76 = HEAP32[$n >> 2] | 0; else $76 = 0;
   HEAP32[$a + 4096 >> 2] = $a;
   $6 = $a;
   HEAP32[$db >> 2] = 0;
   $7 = $db + 4 | 0;
   HEAP32[$7 >> 2] = 0;
   HEAP32[$db + 8 >> 2] = 0;
   HEAP32[$db + 12 >> 2] = $6;
   $10 = $db + 16 | 0;
   HEAP32[$10 >> 2] = 0;
   $11 = $db + 20 | 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$db + 24 >> 2] = 0;
   HEAP32[$db + 28 >> 2] = $6;
   HEAP32[$db + 32 >> 2] = 0;
   $15 = $db + 36 | 0;
   HEAP32[$15 >> 2] = 0;
   HEAP32[$db + 40 >> 2] = 0;
   $17 = $db + 44 | 0;
   HEAP32[$17 >> 2] = $6;
   $18 = $db + 48 | 0;
   $19 = $db + 61 | 0;
   HEAP32[$18 >> 2] = 0;
   HEAP32[$18 + 4 >> 2] = 0;
   HEAP32[$18 + 8 >> 2] = 0;
   HEAP8[$18 + 12 >> 0] = 0;
   HEAP8[$19 >> 0] = 1;
   $20 = $db + 32 | 0;
   __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v$i$i, 1, 0, $17);
   $21 = $__v$i$i + 8 | 0;
   $22 = HEAP32[$21 >> 2] | 0;
   HEAP32[$22 >> 2] = 0;
   HEAP32[$22 + 4 >> 2] = 0;
   HEAP32[$22 + 8 >> 2] = 0;
   HEAP32[$22 + 12 >> 2] = $6;
   HEAP32[$21 >> 2] = $22 + 16;
   __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($20, $__v$i$i);
   __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i);
   $27 = $db + 62 | 0;
   HEAP8[$27 >> 0] = 0;
   HEAP8[$db + 63 >> 0] = 1;
   HEAP32[$__v$i$i >> 2] = 0;
   $30 = $mangled_name + (_strlen($mangled_name) | 0) | 0;
   __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($mangled_name, $30, $db, $__v$i$i);
   $31 = HEAP32[$__v$i$i >> 2] | 0;
   do if (($31 | 0) != 0 | (HEAP8[$27 >> 0] | 0) == 0) {
    $52 = $31;
    label = 19;
   } else {
    $35 = HEAP32[$20 >> 2] | 0;
    if (($35 | 0) == (HEAP32[$15 >> 2] | 0)) label = 20; else if ((HEAP32[$35 >> 2] | 0) == (HEAP32[$35 + 4 >> 2] | 0)) label = 20; else {
     HEAP8[$27 >> 0] = 0;
     HEAP8[$19 >> 0] = 0;
     $42 = HEAP32[$db >> 2] | 0;
     while (1) {
      $43 = HEAP32[$7 >> 2] | 0;
      if (($43 | 0) == ($42 | 0)) break;
      $45 = $43 + -24 | 0;
      HEAP32[$7 >> 2] = $45;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
     }
     $46 = HEAP32[$10 >> 2] | 0;
     while (1) {
      $47 = HEAP32[$11 >> 2] | 0;
      if (($47 | 0) == ($46 | 0)) break;
      $49 = $47 + -16 | 0;
      HEAP32[$11 >> 2] = $49;
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($49);
     }
     __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($mangled_name, $30, $db, $__v$i$i);
     if (!(HEAP8[$27 >> 0] | 0)) {
      $52 = HEAP32[$__v$i$i >> 2] | 0;
      label = 19;
      break;
     } else {
      HEAP32[$__v$i$i >> 2] = -2;
      $$2 = 0;
      $106 = -2;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 19) if (!$52) label = 20; else {
    $$2 = 0;
    $106 = $52;
   }
   do if ((label | 0) == 20) {
    $54 = HEAP32[$7 >> 2] | 0;
    $56 = HEAP8[$54 + -24 >> 0] | 0;
    if (!($56 & 1)) $72 = ($56 & 255) >>> 1; else $72 = HEAP32[$54 + -20 >> 2] | 0;
    $64 = HEAP8[$54 + -12 >> 0] | 0;
    if (!($64 & 1)) $73 = ($64 & 255) >>> 1; else $73 = HEAP32[$54 + -8 >> 2] | 0;
    $71 = $73 + $72 | 0;
    $74 = $71 + 1 | 0;
    if ($74 >>> 0 > $76 >>> 0) {
     $77 = _realloc($buf, $74) | 0;
     if (!$77) {
      HEAP32[$__v$i$i >> 2] = -1;
      $$2 = 0;
      $106 = -1;
      break;
     }
     if ($2) $$18 = $77; else {
      HEAP32[$n >> 2] = $74;
      $$18 = $77;
     }
    } else if (!$buf) {
     $$2 = 0;
     $106 = 0;
     break;
    } else $$18 = $buf;
    $80 = HEAP32[$7 >> 2] | 0;
    $82 = $80 + -12 | 0;
    $83 = HEAP8[$82 >> 0] | 0;
    $85 = ($83 & 1) == 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($80 + -24 | 0, $85 ? $82 + 1 | 0 : HEAP32[$80 + -4 >> 2] | 0, $85 ? ($83 & 255) >>> 1 : HEAP32[$80 + -8 >> 2] | 0) | 0;
    $95 = HEAP32[$7 >> 2] | 0;
    $96 = $95 + -24 | 0;
    if (!(HEAP8[$96 >> 0] & 1)) $103 = $96 + 1 | 0; else $103 = HEAP32[$95 + -16 >> 2] | 0;
    _memcpy($$18 | 0, $103 | 0, $71 | 0) | 0;
    HEAP8[$$18 + $71 >> 0] = 0;
    $$2 = $$18;
    $106 = 0;
   } while (0);
   if ($status | 0) HEAP32[$status >> 2] = $106;
   __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
   $$0 = $$2;
  }
 }
 if ((label | 0) == 3) if (!$status) $$0 = 0; else {
  HEAP32[$status >> 2] = -3;
  $$0 = 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$lcssa36 = 0, $$lcssa37 = 0, $$pre$phi25Z2D = 0, $0 = 0, $2 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $42 = 0, $44 = 0, $52 = 0, $59 = 0, $60 = 0, $7 = 0, $__i$0$i$i = 0, $__p$0$i$i = 0, $__p$0$ph$i$i = 0, $c$0$ph = 0, $p0$0 = 0, $p0$1 = 0, $pe$0 = 0, $pe$0$ph = 0, $pe$2 = 0, $pe$2$pn = 0, label = 0;
 $0 = HEAP8[$s >> 0] | 0;
 $2 = ($0 & 1) == 0;
 $7 = $2 ? ($0 & 255) >>> 1 : HEAP32[$s + 4 >> 2] | 0;
 L1 : do switch ($7 | 0) {
 case 0:
  {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($agg$result, $s);
   break;
  }
 case 11:
  {
   if (!(__ZNSt3__111char_traitsIcE7compareEPKcS3_j($2 ? $s + 1 | 0 : HEAP32[$s + 8 >> 2] | 0, 15344, 11) | 0)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 15396, 70);
    HEAP32[$agg$result >> 2] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    HEAP32[$agg$result + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result, 15467, 12);
   } else label = 9;
   break;
  }
 case 12:
  {
   if (!(__ZNSt3__111char_traitsIcE7compareEPKcS3_j($2 ? $s + 1 | 0 : HEAP32[$s + 8 >> 2] | 0, 15356, 12) | 0)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 15480, 49);
    HEAP32[$agg$result >> 2] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    HEAP32[$agg$result + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result, 15530, 13);
    break L1;
   }
   if (!(__ZNSt3__111char_traitsIcE7compareEPKcS3_j($2 ? $s + 1 | 0 : HEAP32[$s + 8 >> 2] | 0, 15369, 12) | 0)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 15544, 49);
    HEAP32[$agg$result >> 2] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    HEAP32[$agg$result + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result, 15594, 13);
   } else label = 9;
   break;
  }
 case 13:
  {
   $27 = HEAP32[$s + 8 >> 2] | 0;
   $28 = $s + 1 | 0;
   if (!(__ZNSt3__111char_traitsIcE7compareEPKcS3_j($2 ? $28 : $27, 15382, 13) | 0)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 15608, 50);
    HEAP32[$agg$result >> 2] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    HEAP32[$agg$result + 8 >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result, 15659, 14);
   } else {
    $$pre$phi25Z2D = $28;
    $32 = $27;
    label = 12;
   }
   break;
  }
 default:
  label = 9;
 } while (0);
 if ((label | 0) == 9) {
  $$pre$phi25Z2D = $s + 1 | 0;
  $32 = HEAP32[$s + 8 >> 2] | 0;
  label = 12;
 }
 L14 : do if ((label | 0) == 12) {
  $33 = $2 ? $$pre$phi25Z2D : $32;
  $34 = $33 + $7 | 0;
  L16 : do if ((HEAP8[$34 + -1 >> 0] | 0) == 62) {
   $c$0$ph = 1;
   $pe$0$ph = $34;
   L17 : while (1) {
    $pe$0 = $pe$0$ph;
    L19 : while (1) {
     $38 = $pe$0 + -1 | 0;
     if (($38 | 0) == ($33 | 0)) break L17;
     $42 = $pe$0 + -2 | 0;
     switch (HEAP8[$42 >> 0] | 0) {
     case 60:
      {
       $$lcssa = $42;
       $$lcssa36 = $38;
       label = 19;
       break L19;
       break;
      }
     case 62:
      {
       $$lcssa37 = $38;
       label = 20;
       break L19;
       break;
      }
     default:
      $pe$0 = $38;
     }
    }
    if ((label | 0) == 19) {
     label = 0;
     $44 = $c$0$ph + -1 | 0;
     if (!$44) {
      $pe$2 = $$lcssa;
      break L16;
     } else {
      $c$0$ph = $44;
      $pe$0$ph = $$lcssa36;
      continue;
     }
    } else if ((label | 0) == 20) {
     label = 0;
     $c$0$ph = $c$0$ph + 1 | 0;
     $pe$0$ph = $$lcssa37;
     continue;
    }
   }
   HEAP32[$agg$result >> 2] = 0;
   HEAP32[$agg$result + 4 >> 2] = 0;
   HEAP32[$agg$result + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break L14;
    HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
  } else $pe$2 = $34; while (0);
  $pe$2$pn = $pe$2;
  while (1) {
   $p0$0 = $pe$2$pn + -1 | 0;
   if (($p0$0 | 0) == ($33 | 0)) {
    $p0$1 = $33;
    break;
   }
   if ((HEAP8[$p0$0 >> 0] | 0) == 58) {
    $p0$1 = $pe$2$pn;
    break;
   } else $pe$2$pn = $p0$0;
  }
  HEAP32[$agg$result >> 2] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
  HEAP32[$agg$result + 8 >> 2] = 0;
  $52 = $pe$2 - $p0$1 | 0;
  if ($52 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
  if ($52 >>> 0 < 11) {
   HEAP8[$agg$result >> 0] = $52 << 1;
   $__p$0$ph$i$i = $agg$result + 1 | 0;
  } else {
   $59 = $52 + 16 & -16;
   $60 = _malloc($59) | 0;
   HEAP32[$agg$result + 8 >> 2] = $60;
   HEAP32[$agg$result >> 2] = $59 | 1;
   HEAP32[$agg$result + 4 >> 2] = $52;
   $__p$0$ph$i$i = $60;
  }
  $$0$i$i = $p0$1;
  $__p$0$i$i = $__p$0$ph$i$i;
  while (1) {
   if (($$0$i$i | 0) == ($pe$2 | 0)) break;
   HEAP8[$__p$0$i$i >> 0] = HEAP8[$$0$i$i >> 0] | 0;
   $$0$i$i = $$0$i$i + 1 | 0;
   $__p$0$i$i = $__p$0$i$i + 1 | 0;
  }
  HEAP8[$__p$0$ph$i$i + $52 >> 0] = 0;
 } while (0);
 return;
}

function _arVecTridiagonalize($a, $d, $e) {
 $a = $a | 0;
 $d = $d | 0;
 $e = $e | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $1 = 0, $101 = 0, $102 = 0, $105 = 0, $107 = 0, $109 = 0, $112 = 0, $113 = 0, $115 = 0, $119 = 0.0, $12 = 0, $126 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $33 = 0, $35 = 0, $42 = 0.0, $52 = 0.0, $60 = 0.0, $63 = 0.0, $65 = 0, $66 = 0, $68 = 0.0, $69 = 0, $80 = 0, $85 = 0, $87 = 0, $90 = 0, $92 = 0, $i$0 = 0, $i$1 = 0, $i$1$in = 0, $i$2 = 0, $i$3 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $j$3 = 0, $k$0 = 0, $k$1 = 0, $k$1$in = 0, $s$0 = 0.0, $s$0$lcssa = 0.0, $s$1 = 0.0, $s$1$lcssa = 0.0, $wv1 = 0, $wv2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $wv1 = sp + 8 | 0;
 $wv2 = sp;
 $1 = HEAP32[$a + 8 >> 2] | 0;
 L1 : do if (($1 | 0) == (HEAP32[$a + 4 >> 2] | 0)) if (($1 | 0) == (HEAP32[$d + 4 >> 2] | 0)) if (($1 | 0) == ((HEAP32[$e + 4 >> 2] | 0) + 1 | 0)) {
  $12 = $1 + -2 | 0;
  $13 = $wv1 + 4 | 0;
  $14 = $wv2 + 4 | 0;
  $k$0 = 0;
  L5 : while (1) {
   if (($k$0 | 0) >= ($12 | 0)) break;
   $16 = Math_imul($k$0, $1) | 0;
   $18 = (HEAP32[$a >> 2] | 0) + ($16 << 3) | 0;
   HEAPF64[(HEAP32[$d >> 2] | 0) + ($k$0 << 3) >> 3] = +HEAPF64[$18 + ($k$0 << 3) >> 3];
   $24 = $1 - $k$0 + -1 | 0;
   HEAP32[$13 >> 2] = $24;
   $25 = $k$0 + 1 | 0;
   $26 = $18 + ($25 << 3) | 0;
   HEAP32[$wv1 >> 2] = $26;
   $27 = +_arVecHousehold($wv1);
   HEAPF64[(HEAP32[$e >> 2] | 0) + ($k$0 << 3) >> 3] = $27;
   if ($27 == 0.0) {
    $k$0 = $25;
    continue;
   } else $i$0 = $25;
   while (1) {
    if (($i$0 | 0) < ($1 | 0)) {
     $j$0 = $25;
     $s$0 = 0.0;
    } else break;
    while (1) {
     if (($j$0 | 0) >= ($i$0 | 0)) {
      $s$0$lcssa = $s$0;
      break;
     }
     $35 = (Math_imul($j$0, $1) | 0) + $i$0 | 0;
     $42 = $s$0 + +HEAPF64[(HEAP32[$a >> 2] | 0) + ($35 << 3) >> 3] * +HEAPF64[$18 + ($j$0 << 3) >> 3];
     $j$0 = $j$0 + 1 | 0;
     $s$0 = $42;
    }
    $33 = Math_imul($i$0, $1) | 0;
    $j$1 = $i$0;
    $s$1 = $s$0$lcssa;
    while (1) {
     if (($j$1 | 0) >= ($1 | 0)) {
      $s$1$lcssa = $s$1;
      break;
     }
     $52 = $s$1 + +HEAPF64[(HEAP32[$a >> 2] | 0) + ($j$1 + $33 << 3) >> 3] * +HEAPF64[$18 + ($j$1 << 3) >> 3];
     $j$1 = $j$1 + 1 | 0;
     $s$1 = $52;
    }
    HEAPF64[(HEAP32[$d >> 2] | 0) + ($i$0 << 3) >> 3] = $s$1$lcssa;
    $i$0 = $i$0 + 1 | 0;
   }
   HEAP32[$14 >> 2] = $24;
   HEAP32[$13 >> 2] = $24;
   HEAP32[$wv1 >> 2] = $26;
   HEAP32[$wv2 >> 2] = (HEAP32[$d >> 2] | 0) + ($25 << 3);
   $60 = +_arVecInnerproduct($wv1, $wv2) * .5;
   $i$1$in = $1;
   L19 : while (1) {
    $i$1 = $i$1$in + -1 | 0;
    if (($i$1 | 0) <= ($k$0 | 0)) {
     $k$0 = $25;
     continue L5;
    }
    $63 = +HEAPF64[$18 + ($i$1 << 3) >> 3];
    $65 = HEAP32[$d >> 2] | 0;
    $66 = $65 + ($i$1 << 3) | 0;
    $68 = +HEAPF64[$66 >> 3] - $60 * $63;
    HEAPF64[$66 >> 3] = $68;
    $69 = Math_imul($i$1, $1) | 0;
    $j$2 = $i$1;
    while (1) {
     if (($j$2 | 0) >= ($1 | 0)) {
      $i$1$in = $i$1;
      continue L19;
     }
     $80 = (HEAP32[$a >> 2] | 0) + ($j$2 + $69 << 3) | 0;
     HEAPF64[$80 >> 3] = +HEAPF64[$80 >> 3] - ($63 * +HEAPF64[$65 + ($j$2 << 3) >> 3] + $68 * +HEAPF64[$18 + ($j$2 << 3) >> 3]);
     $j$2 = $j$2 + 1 | 0;
    }
   }
  }
  if (($1 | 0) > 1) {
   $85 = Math_imul($12, $1) | 0;
   $87 = HEAP32[$a >> 2] | 0;
   $90 = HEAP32[$d >> 2] | 0;
   HEAPF64[$90 + ($12 << 3) >> 3] = +HEAPF64[$87 + ($85 + $12 << 3) >> 3];
   $92 = $1 + -1 | 0;
   HEAPF64[(HEAP32[$e >> 2] | 0) + ($12 << 3) >> 3] = +HEAPF64[$87 + ($92 + $85 << 3) >> 3];
   $$pre$phiZ2D = $92;
   $102 = $87;
   $105 = $90;
   label = 23;
  } else if (($1 | 0) > 0) {
   $$pre$phiZ2D = 0;
   $102 = HEAP32[$a >> 2] | 0;
   $105 = HEAP32[$d >> 2] | 0;
   label = 23;
  } else $k$1$in = $1;
  if ((label | 0) == 23) {
   $101 = $102 + ((Math_imul($$pre$phiZ2D, $1) | 0) + $$pre$phiZ2D << 3) | 0;
   HEAPF64[$105 + ($$pre$phiZ2D << 3) >> 3] = +HEAPF64[$101 >> 3];
   $k$1$in = $1;
  }
  while (1) {
   $k$1 = $k$1$in + -1 | 0;
   if (($k$1$in | 0) <= 0) {
    $$0 = 0;
    break L1;
   }
   $107 = Math_imul($k$1, $1) | 0;
   $109 = (HEAP32[$a >> 2] | 0) + ($107 << 3) | 0;
   L35 : do if (($k$1$in | 0) > ($12 | 0)) $i$3 = 0; else {
    $112 = $1 - $k$1 + -1 | 0;
    $113 = $109 + ($k$1$in << 3) | 0;
    $i$2 = $k$1$in;
    while (1) {
     if (($i$2 | 0) >= ($1 | 0)) {
      $i$3 = 0;
      break L35;
     }
     HEAP32[$14 >> 2] = $112;
     HEAP32[$13 >> 2] = $112;
     HEAP32[$wv1 >> 2] = $113;
     $115 = Math_imul($i$2, $1) | 0;
     HEAP32[$wv2 >> 2] = (HEAP32[$a >> 2] | 0) + ($115 + $k$1$in << 3);
     $119 = +_arVecInnerproduct($wv1, $wv2);
     $j$3 = $k$1$in;
     while (1) {
      if (($j$3 | 0) >= ($1 | 0)) break;
      $126 = (HEAP32[$a >> 2] | 0) + ($j$3 + $115 << 3) | 0;
      HEAPF64[$126 >> 3] = +HEAPF64[$126 >> 3] - $119 * +HEAPF64[$109 + ($j$3 << 3) >> 3];
      $j$3 = $j$3 + 1 | 0;
     }
     $i$2 = $i$2 + 1 | 0;
    }
   } while (0);
   while (1) {
    if (($i$3 | 0) >= ($1 | 0)) break;
    HEAPF64[$109 + ($i$3 << 3) >> 3] = 0.0;
    $i$3 = $i$3 + 1 | 0;
   }
   HEAPF64[$109 + ($k$1 << 3) >> 3] = 1.0;
   $k$1$in = $k$1;
  }
 } else $$0 = -1; else $$0 = -1; else $$0 = -1; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN46EmscriptenBindingInitializer_constant_bindingsC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5112, 7);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5590, 3);
 __ZN10emscripten8functionIiJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5603, 2);
 __ZN10emscripten8functionIiJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5810, 3);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5902, 4);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5920, 4);
 __ZN10emscripten8functionIiJNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5940, 5);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(6011, 8);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(6028, 5);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(6048, 9);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(6066, 10);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(6088, 6);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(6111, 7);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6140, 6);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6153, 7);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(6166, 11);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(6459, 8);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(7804, 9);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(7848, 8);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(7861, 9);
 __ZN10emscripten8functionIvJiEJEEEvPKcPFT_DpT0_EDpT1_(7880, 12);
 __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_(7896, 1);
 __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_(7911, 1);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(7939, 1);
 __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_(7966, 2);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(7988, 2);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(8010, 1);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8058, 10);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(8075, 2);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8109, 11);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(8122, 3);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8181, 12);
 __ZN10emscripten8functionIvJifEJEEEvPKcPFT_DpT0_EDpT1_(8205, 3);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(8254, 3);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(8267, 4);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8285, 13);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(8303, 5);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8344, 14);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(8360, 6);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(8406, 15);
 __ZN10emscripten8constantIiEEvPKcRKT_(8423, 1724);
 __ZN10emscripten8constantIiEEvPKcRKT_(8452, 1732);
 __ZN10emscripten8constantIiEEvPKcRKT_(8480, 1728);
 __embind_register_constant(8513, 344, 0);
 __embind_register_constant(8530, 344, 1);
 __embind_register_constant(8546, 344, 0);
 __embind_register_constant(8568, 344, 0);
 __embind_register_constant(8593, 344, 1);
 __embind_register_constant(8618, 344, 1);
 __embind_register_constant(8643, 344, 100);
 __embind_register_constant(8670, 344, 0);
 __embind_register_constant(8696, 344, 1);
 __embind_register_constant(8722, 344, 0);
 __embind_register_constant(8749, 344, 0);
 __embind_register_constant(8776, 344, 1);
 __embind_register_constant(8802, 344, 2);
 __embind_register_constant(8827, 344, 3);
 __embind_register_constant(8865, 344, 4);
 __embind_register_constant(8902, 344, 0);
 __embind_register_constant(8936, 344, 0);
 __embind_register_constant(8960, 344, 1);
 __embind_register_constant(8986, 344, 2);
 __embind_register_constant(9013, 344, 2);
 __embind_register_constant(9047, 344, 5);
 HEAPF64[$0 >> 3] = .5;
 __ZN10emscripten8constantIdEEvPKcRKT_(9065, $0);
 __embind_register_constant(9086, 344, 0);
 __embind_register_constant(9105, 344, 1);
 __embind_register_constant(9123, 344, 2);
 __embind_register_constant(9141, 344, 3);
 __embind_register_constant(9160, 344, 4);
 __embind_register_constant(9182, 344, 3);
 __embind_register_constant(9201, 344, 515);
 __embind_register_constant(9230, 344, 259);
 __embind_register_constant(9258, 344, 4);
 __embind_register_constant(9277, 344, 772);
 __embind_register_constant(9307, 344, 1028);
 __embind_register_constant(9337, 344, 0);
 __embind_register_constant(9368, 344, 1);
 __embind_register_constant(9404, 344, 2);
 __embind_register_constant(9438, 344, 3);
 __embind_register_constant(9476, 344, 0);
 __embind_register_constant(9509, 344, 1);
 __embind_register_constant(9556, 344, 2);
 __embind_register_constant(9598, 344, 3);
 __embind_register_constant(9641, 344, 4);
 __embind_register_constant(9693, 344, 5);
 __embind_register_constant(9744, 344, 6);
 __embind_register_constant(9789, 344, 7);
 __embind_register_constant(9828, 344, 8);
 __embind_register_constant(9873, 344, 9);
 STACKTOP = sp;
 return;
}

function _arImageProcLuma($ipi, $dataPtr) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 var $$0 = 0, $1 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $133 = 0, $140 = 0, $16 = 0, $161 = 0, $168 = 0, $18 = 0, $189 = 0, $19 = 0, $4 = 0, $44 = 0, $45 = 0, $71 = 0, $72 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$3 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $q$0 = 0, $q$1 = 0, $q$2 = 0, $q$3 = 0, $q$4 = 0, $q$5 = 0, $q$6 = 0, $q$7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $1 = HEAP32[$ipi + 2068 >> 2] | 0;
 $4 = $1 | 2;
 L1 : do if (($4 | 0) == 14 | ($1 | 8 | 0) == 13) if (!(HEAP32[$ipi + 2072 >> 2] | 0)) {
  HEAP32[$ipi >> 2] = $dataPtr;
  $$0 = 0;
  break;
 } else {
  _memcpy(HEAP32[$ipi >> 2] | 0, $dataPtr | 0, Math_imul(HEAP32[$ipi + 12 >> 2] | 0, HEAP32[$ipi + 8 >> 2] | 0) | 0) | 0;
  $$0 = 0;
  break;
 } else {
  $16 = $1 | 1;
  if (($16 | 0) == 3) {
   $18 = $ipi + 8 | 0;
   $19 = $ipi + 12 | 0;
   $p$0 = 0;
   $q$0 = 0;
   while (1) {
    if ($p$0 >>> 0 >= (Math_imul(HEAP32[$19 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0) >>> 0) {
     $$0 = 0;
     break L1;
    }
    HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$0 >> 0] = (((HEAPU8[$dataPtr + ($q$0 | 1) >> 0] | 0) + (HEAPU8[$dataPtr + $q$0 >> 0] | 0) + (HEAPU8[$dataPtr + ($q$0 | 2) >> 0] | 0) | 0) >>> 0) / 3 | 0;
    $p$0 = $p$0 + 1 | 0;
    $q$0 = $q$0 + 4 | 0;
   }
  }
  if (($4 | 0) == 6) {
   $44 = $ipi + 8 | 0;
   $45 = $ipi + 12 | 0;
   $p$1 = 0;
   $q$1 = 0;
   while (1) {
    if ($p$1 >>> 0 >= (Math_imul(HEAP32[$45 >> 2] | 0, HEAP32[$44 >> 2] | 0) | 0) >>> 0) {
     $$0 = 0;
     break L1;
    }
    HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$1 >> 0] = (((HEAPU8[$dataPtr + ($q$1 | 2) >> 0] | 0) + (HEAPU8[$dataPtr + ($q$1 | 1) >> 0] | 0) + (HEAPU8[$dataPtr + ($q$1 | 3) >> 0] | 0) | 0) >>> 0) / 3 | 0;
    $p$1 = $p$1 + 1 | 0;
    $q$1 = $q$1 + 4 | 0;
   }
  }
  if (($16 | 0) == 1) {
   $71 = $ipi + 8 | 0;
   $72 = $ipi + 12 | 0;
   $p$2 = 0;
   $q$2 = 0;
   while (1) {
    if ($p$2 >>> 0 >= (Math_imul(HEAP32[$72 >> 2] | 0, HEAP32[$71 >> 2] | 0) | 0) >>> 0) {
     $$0 = 0;
     break L1;
    }
    HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$2 >> 0] = (((HEAPU8[$dataPtr + ($q$2 + 1) >> 0] | 0) + (HEAPU8[$dataPtr + $q$2 >> 0] | 0) + (HEAPU8[$dataPtr + ($q$2 + 2) >> 0] | 0) | 0) >>> 0) / 3 | 0;
    $p$2 = $p$2 + 1 | 0;
    $q$2 = $q$2 + 3 | 0;
   }
  }
  switch ($1 | 0) {
  case 8:
   {
    $104 = $ipi + 8 | 0;
    $105 = $ipi + 12 | 0;
    $p$3 = 0;
    $q$3 = 0;
    while (1) {
     if ($p$3 >>> 0 >= (Math_imul(HEAP32[$105 >> 2] | 0, HEAP32[$104 >> 2] | 0) | 0) >>> 0) {
      $$0 = 0;
      break L1;
     }
     HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$3 >> 0] = HEAP8[$dataPtr + $q$3 >> 0] | 0;
     $p$3 = $p$3 + 1 | 0;
     $q$3 = $q$3 + 2 | 0;
    }
    break;
   }
  case 7:
   {
    $102 = $ipi + 8 | 0;
    $103 = $ipi + 12 | 0;
    $p$4 = 0;
    $q$4 = 0;
    while (1) {
     if ($p$4 >>> 0 >= (Math_imul(HEAP32[$103 >> 2] | 0, HEAP32[$102 >> 2] | 0) | 0) >>> 0) {
      $$0 = 0;
      break L1;
     }
     HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$4 >> 0] = HEAP8[$dataPtr + ($q$4 | 1) >> 0] | 0;
     $p$4 = $p$4 + 1 | 0;
     $q$4 = $q$4 + 2 | 0;
    }
    break;
   }
  case 9:
   {
    $100 = $ipi + 8 | 0;
    $101 = $ipi + 12 | 0;
    $p$5 = 0;
    $q$5 = 0;
    while (1) {
     if ($p$5 >>> 0 >= (Math_imul(HEAP32[$101 >> 2] | 0, HEAP32[$100 >> 2] | 0) | 0) >>> 0) {
      $$0 = 0;
      break L1;
     }
     $133 = HEAPU8[$dataPtr + $q$5 >> 0] | 0;
     $140 = HEAPU8[$dataPtr + ($q$5 | 1) >> 0] | 0;
     HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$5 >> 0] = ((($133 & 248) + 10 + ($133 << 5 & 224) + ($140 >>> 3 & 28) + ($140 << 3 & 248) | 0) >>> 0) / 3 | 0;
     $p$5 = $p$5 + 1 | 0;
     $q$5 = $q$5 + 2 | 0;
    }
    break;
   }
  case 10:
   {
    $98 = $ipi + 8 | 0;
    $99 = $ipi + 12 | 0;
    $p$6 = 0;
    $q$6 = 0;
    while (1) {
     if ($p$6 >>> 0 >= (Math_imul(HEAP32[$99 >> 2] | 0, HEAP32[$98 >> 2] | 0) | 0) >>> 0) {
      $$0 = 0;
      break L1;
     }
     $161 = HEAPU8[$dataPtr + $q$6 >> 0] | 0;
     $168 = HEAPU8[$dataPtr + ($q$6 | 1) >> 0] | 0;
     HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$6 >> 0] = ((($161 & 248) + 12 + ($161 << 5 & 224) + ($168 >>> 3 & 24) + ($168 << 2 & 248) | 0) >>> 0) / 3 | 0;
     $p$6 = $p$6 + 1 | 0;
     $q$6 = $q$6 + 2 | 0;
    }
    break;
   }
  case 11:
   {
    $96 = $ipi + 8 | 0;
    $97 = $ipi + 12 | 0;
    $p$7 = 0;
    $q$7 = 0;
    while (1) {
     if ($p$7 >>> 0 >= (Math_imul(HEAP32[$97 >> 2] | 0, HEAP32[$96 >> 2] | 0) | 0) >>> 0) {
      $$0 = 0;
      break L1;
     }
     $189 = HEAPU8[$dataPtr + $q$7 >> 0] | 0;
     HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$7 >> 0] = ((($189 & 240) + 24 + ($189 << 4 & 240) + ((HEAPU8[$dataPtr + ($q$7 | 1) >> 0] | 0) & 240) | 0) >>> 0) / 3 | 0;
     $p$7 = $p$7 + 1 | 0;
     $q$7 = $q$7 + 2 | 0;
    }
    break;
   }
  default:
   {
    _arLog(3, 3381, $vararg_buffer);
    $$0 = -1;
    break L1;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arMatrixSelfInv($m) {
 $m = $m | 0;
 var $$0$i = 0, $$lcssa = 0, $0 = 0, $12 = 0, $14 = 0.0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0.0, $30 = 0.0, $31 = 0, $38 = 0, $39 = 0.0, $40 = 0, $54 = 0, $63 = 0.0, $i$0$i = 0, $i$1$i = 0, $i$2$i = 0, $indvars$iv$i = 0, $indvars$iv11$i = 0, $ip$0$i = 0, $ip$1$i = 0, $ip$1$i$lcssa = 0, $ip$2$i = 0, $j$0$i = 0, $j$1$i = 0, $j$2$i = 0, $j$3$i = 0, $j$3$i$lcssa = 0, $n$0$i = 0, $n$1$i = 0, $n$2$i = 0, $nos$i = 0, $p$0$i = 0.0, $p$0$i$lcssa = 0.0, $scevgep$i = 0, $wap$0$i = 0, $wap$1$i = 0, $wap$2$i = 0, $wap$3$i = 0, $wap$4$i = 0, $wbp$0$i = 0, $wbp$1$i = 0, $wbp$2$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2e3 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $nos$i = sp;
 $0 = HEAP32[$m >> 2] | 0;
 $2 = HEAP32[$m + 4 >> 2] | 0;
 L1 : do if (($2 | 0) > 500) $$0$i = 0; else {
  switch ($2 | 0) {
  case 0:
   {
    $$0$i = 0;
    break L1;
    break;
   }
  case 1:
   {
    HEAPF64[$0 >> 3] = 1.0 / +HEAPF64[$0 >> 3];
    $$0$i = $0;
    break L1;
    break;
   }
  default:
   $n$0$i = 0;
  }
  while (1) {
   if (($n$0$i | 0) >= ($2 | 0)) break;
   HEAP32[$nos$i + ($n$0$i << 2) >> 2] = $n$0$i;
   $n$0$i = $n$0$i + 1 | 0;
  }
  $scevgep$i = $0 + ($2 + -1 << 3) | 0;
  $indvars$iv$i = $scevgep$i;
  $ip$0$i = 0;
  $n$1$i = 0;
  while (1) {
   if (($n$1$i | 0) >= ($2 | 0)) {
    $n$2$i = 0;
    break;
   }
   $12 = $0 + ((Math_imul($n$1$i, $2) | 0) << 3) | 0;
   $i$0$i = $n$1$i;
   $ip$1$i = $ip$0$i;
   $p$0$i = 0.0;
   $wap$0$i = $12;
   while (1) {
    if (($i$0$i | 0) == ($2 | 0)) {
     $ip$1$i$lcssa = $ip$1$i;
     $p$0$i$lcssa = $p$0$i;
     break;
    }
    $14 = +Math_abs(+(+HEAPF64[$wap$0$i >> 3]));
    $15 = $p$0$i < $14;
    $ip$2$i = $15 ? $i$0$i : $ip$1$i;
    $i$0$i = $i$0$i + 1 | 0;
    $ip$1$i = $ip$2$i;
    $p$0$i = $15 ? $14 : $p$0$i;
    $wap$0$i = $wap$0$i + ($2 << 3) | 0;
   }
   if ($p$0$i$lcssa <= 1.0e-10) {
    $$0$i = 0;
    break L1;
   }
   $19 = $nos$i + ($ip$1$i$lcssa << 2) | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   $21 = $nos$i + ($n$1$i << 2) | 0;
   HEAP32[$19 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$21 >> 2] = $20;
   $j$0$i = 0;
   $wap$1$i = $0 + ((Math_imul($ip$1$i$lcssa, $2) | 0) << 3) | 0;
   $wbp$0$i = $12;
   while (1) {
    if (($j$0$i | 0) == ($2 | 0)) break;
    $25 = +HEAPF64[$wap$1$i >> 3];
    HEAPF64[$wap$1$i >> 3] = +HEAPF64[$wbp$0$i >> 3];
    HEAPF64[$wbp$0$i >> 3] = $25;
    $j$0$i = $j$0$i + 1 | 0;
    $wap$1$i = $wap$1$i + 8 | 0;
    $wbp$0$i = $wbp$0$i + 8 | 0;
   }
   $30 = +HEAPF64[$12 >> 3];
   $j$1$i = 1;
   $wap$2$i = $12;
   while (1) {
    if (($j$1$i | 0) == ($2 | 0)) break;
    $31 = $wap$2$i + 8 | 0;
    HEAPF64[$wap$2$i >> 3] = +HEAPF64[$31 >> 3] / $30;
    $j$1$i = $j$1$i + 1 | 0;
    $wap$2$i = $31;
   }
   HEAPF64[$indvars$iv$i >> 3] = 1.0 / $30;
   $i$1$i = 0;
   $indvars$iv11$i = $scevgep$i;
   while (1) {
    if (($i$1$i | 0) == ($2 | 0)) break;
    if (($i$1$i | 0) != ($n$1$i | 0)) {
     $38 = $0 + ((Math_imul($i$1$i, $2) | 0) << 3) | 0;
     $39 = +HEAPF64[$38 >> 3];
     $j$2$i = 1;
     $wap$3$i = $38;
     $wbp$1$i = $12;
     while (1) {
      if (($j$2$i | 0) == ($2 | 0)) break;
      $40 = $wap$3$i + 8 | 0;
      HEAPF64[$wap$3$i >> 3] = +HEAPF64[$40 >> 3] - $39 * +HEAPF64[$wbp$1$i >> 3];
      $j$2$i = $j$2$i + 1 | 0;
      $wap$3$i = $40;
      $wbp$1$i = $wbp$1$i + 8 | 0;
     }
     HEAPF64[$indvars$iv11$i >> 3] = -($39 * +HEAPF64[$indvars$iv$i >> 3]);
    }
    $i$1$i = $i$1$i + 1 | 0;
    $indvars$iv11$i = $indvars$iv11$i + ($2 << 3) | 0;
   }
   $indvars$iv$i = $indvars$iv$i + ($2 << 3) | 0;
   $ip$0$i = $ip$1$i$lcssa;
   $n$1$i = $n$1$i + 1 | 0;
  }
  while (1) {
   if (($n$2$i | 0) < ($2 | 0)) $j$3$i = $n$2$i; else {
    $$0$i = $0;
    break L1;
   }
   while (1) {
    $54 = $nos$i + ($j$3$i << 2) | 0;
    if (($j$3$i | 0) >= ($2 | 0)) {
     $$lcssa = $54;
     $j$3$i$lcssa = $j$3$i;
     break;
    }
    if ((HEAP32[$54 >> 2] | 0) == ($n$2$i | 0)) {
     $$lcssa = $54;
     $j$3$i$lcssa = $j$3$i;
     break;
    }
    $j$3$i = $j$3$i + 1 | 0;
   }
   HEAP32[$$lcssa >> 2] = HEAP32[$nos$i + ($n$2$i << 2) >> 2];
   $i$2$i = 0;
   $wap$4$i = $0 + ($j$3$i$lcssa << 3) | 0;
   $wbp$2$i = $0 + ($n$2$i << 3) | 0;
   while (1) {
    if (($i$2$i | 0) >= ($2 | 0)) break;
    $63 = +HEAPF64[$wap$4$i >> 3];
    HEAPF64[$wap$4$i >> 3] = +HEAPF64[$wbp$2$i >> 3];
    HEAPF64[$wbp$2$i >> 3] = $63;
    $i$2$i = $i$2$i + 1 | 0;
    $wap$4$i = $wap$4$i + ($2 << 3) | 0;
    $wbp$2$i = $wbp$2$i + ($2 << 3) | 0;
   }
   $n$2$i = $n$2$i + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return (($$0$i | 0) == 0) << 31 >> 31 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $op, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $op = $op | 0;
 $db = $db | 0;
 var $$03 = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $15 = 0, $2 = 0, $25 = 0, $28 = 0, $3 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $7 = 0, $70 = 0, $75 = 0, $8 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 36 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 12 | 0;
 $3 = sp;
 $4 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 if (($4 | 0) == ($first | 0)) $$03 = $first; else {
  $7 = $db + 4 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$db >> 2] | 0) == ($8 | 0)) $$03 = $first; else {
   $10 = $8 + -24 | 0;
   __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($2, $op, 14661);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, (HEAP32[$7 >> 2] | 0) + -24 | 0);
   $13 = HEAP8[$3 >> 0] | 0;
   $15 = ($13 & 1) == 0;
   $25 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2, $15 ? $3 + 1 | 0 : HEAP32[$3 + 8 >> 2] | 0, $15 ? ($13 & 255) >>> 1 : HEAP32[$3 + 4 >> 2] | 0) | 0;
   HEAP32[$1 >> 2] = HEAP32[$25 >> 2];
   HEAP32[$1 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$25 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   $28 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1, 14663) | 0;
   HEAP32[$0 >> 2] = HEAP32[$28 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$28 + 4 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$28 + 8 >> 2];
   $__i$0$i$i$i5 = 0;
   while (1) {
    if (($__i$0$i$i$i5 | 0) == 3) break;
    HEAP32[$28 + ($__i$0$i$i$i5 << 2) >> 2] = 0;
    $__i$0$i$i$i5 = $__i$0$i$i$i5 + 1 | 0;
   }
   do if (!(HEAP8[$10 >> 0] & 1)) {
    HEAP8[$10 + 1 >> 0] = 0;
    HEAP8[$10 >> 0] = 0;
   } else {
    $35 = $8 + -16 | 0;
    HEAP8[HEAP32[$35 >> 2] >> 0] = 0;
    $37 = $8 + -20 | 0;
    HEAP32[$37 >> 2] = 0;
    $$pre$i$i$i = HEAP8[$10 >> 0] | 0;
    if (!($$pre$i$i$i & 1)) {
     $44 = $$pre$i$i$i;
     $53 = 10;
    } else {
     $40 = HEAP32[$10 >> 2] | 0;
     $44 = $40 & 255;
     $53 = ($40 & -2) + -1 | 0;
    }
    if (!($44 & 1)) {
     $47 = ($44 & 255) >>> 1;
     if (($44 & 255) < 22) {
      $51 = 10;
      $70 = $47;
      $75 = 1;
     } else {
      $51 = ($47 + 16 & 240) + -1 | 0;
      $70 = $47;
      $75 = 1;
     }
    } else {
     $51 = 10;
     $70 = 0;
     $75 = 0;
    }
    if (($51 | 0) != ($53 | 0)) {
     if (($51 | 0) == 10) {
      $61 = $10 + 1 | 0;
      $62 = HEAP32[$35 >> 2] | 0;
      if ($75) {
       _memcpy($61 | 0, $62 | 0, (($44 & 255) >>> 1) + 1 | 0) | 0;
       _free($62);
      } else {
       HEAP8[$61 >> 0] = HEAP8[$62 >> 0] | 0;
       _free($62);
      }
      HEAP8[$10 >> 0] = $70 << 1;
      break;
     }
     $56 = $51 + 1 | 0;
     $57 = _malloc($56) | 0;
     if (!($51 >>> 0 <= $53 >>> 0 & ($57 | 0) == 0)) {
      if ($75) _memcpy($57 | 0, $10 + 1 | 0, (($44 & 255) >>> 1) + 1 | 0) | 0; else {
       $59 = HEAP32[$35 >> 2] | 0;
       HEAP8[$57 >> 0] = HEAP8[$59 >> 0] | 0;
       _free($59);
      }
      HEAP32[$10 >> 2] = $56 | 1;
      HEAP32[$37 >> 2] = $70;
      HEAP32[$35 >> 2] = $57;
     }
    }
   } while (0);
   HEAP32[$10 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$10 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   HEAP32[$10 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
   $__i$0$i$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i$i | 0) == 3) break;
    HEAP32[$0 + ($__i$0$i$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
   $$03 = $4;
  }
 }
 STACKTOP = sp;
 return $$03 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$1$i = 0, $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $41 = 0, $47 = 0, $51 = 0, $53 = 0, $55 = 0, $57 = 0, $58 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $9 = 0, $args = 0, $t$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $args = sp;
 L1 : do if (($last - $first | 0) > 1) {
  $4 = HEAP8[$first >> 0] | 0;
  switch ($4 << 24 >> 24) {
  case 100:
  case 111:
   {
    if ((HEAP8[$first + 1 >> 0] | 0) == 110) {
     $9 = $first + 2 | 0;
     if ($4 << 24 >> 24 == 111) {
      $10 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($9, $last, $db) | 0;
      if (($10 | 0) == ($9 | 0)) {
       $$2 = $first;
       break L1;
      }
      $12 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($10, $last, $db) | 0;
      if (($12 | 0) == ($10 | 0)) {
       $$2 = $10;
       break L1;
      }
      $14 = $db + 4 | 0;
      $15 = HEAP32[$14 >> 2] | 0;
      if ((($15 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
       $$2 = $12;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $15 + -24 | 0);
      $22 = HEAP32[$14 >> 2] | 0;
      $23 = $22 + -24 | 0;
      $24 = $22;
      while (1) {
       if (($24 | 0) == ($23 | 0)) break;
       $26 = $24 + -24 | 0;
       HEAP32[$14 >> 2] = $26;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
       $24 = HEAP32[$14 >> 2] | 0;
      }
      $28 = HEAP8[$args >> 0] | 0;
      $30 = ($28 & 1) == 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($22 + -48 | 0, $30 ? $args + 1 | 0 : HEAP32[$args + 8 >> 2] | 0, $30 ? ($28 & 255) >>> 1 : HEAP32[$args + 4 >> 2] | 0) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
      $$2 = $12;
      break L1;
     } else {
      if (($9 | 0) == ($last | 0)) $$1$i = $last; else {
       $41 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($9, $last, $db) | 0;
       if (($41 | 0) == ($9 | 0)) $t$0$i = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($9, $last, $db) | 0; else $t$0$i = $41;
       if (($t$0$i | 0) == ($9 | 0)) $$1$i = $9; else {
        $47 = HEAP32[$db + 4 >> 2] | 0;
        if ((HEAP32[$db >> 2] | 0) == ($47 | 0)) $$1$i = $9; else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($47 + -24 | 0, 0, 14750) | 0;
         $$1$i = $t$0$i;
        }
       }
      }
      $$2 = ($$1$i | 0) == ($9 | 0) ? $first : $$1$i;
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
  $51 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  if (($51 | 0) == ($first | 0)) {
   $53 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   if (($53 | 0) == ($first | 0)) $$2 = $first; else {
    $55 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($53, $last, $db) | 0;
    if (($55 | 0) == ($53 | 0)) $$2 = $53; else {
     $57 = $db + 4 | 0;
     $58 = HEAP32[$57 >> 2] | 0;
     if ((($58 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$2 = $55; else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $58 + -24 | 0);
      $65 = HEAP32[$57 >> 2] | 0;
      $66 = $65 + -24 | 0;
      $67 = $65;
      while (1) {
       if (($67 | 0) == ($66 | 0)) break;
       $69 = $67 + -24 | 0;
       HEAP32[$57 >> 2] = $69;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($69);
       $67 = HEAP32[$57 >> 2] | 0;
      }
      $71 = HEAP8[$args >> 0] | 0;
      $73 = ($71 & 1) == 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($65 + -48 | 0, $73 ? $args + 1 | 0 : HEAP32[$args + 8 >> 2] | 0, $73 ? ($71 & 255) >>> 1 : HEAP32[$args + 4 >> 2] | 0) | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
      $$2 = $55;
     }
    }
   }
  } else $$2 = $51;
 } else $$2 = $first; while (0);
 STACKTOP = sp;
 return $$2 | 0;
}

function _trinkle($head, $width, $cmp, $pp, $pshift, $trusty, $lp) {
 $head = $head | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 $pp = $pp | 0;
 $pshift = $pshift | 0;
 $trusty = $trusty | 0;
 $lp = $lp | 0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa32 = 0, $$01$i5$i$ph = 0, $$01245 = 0, $$01245$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa34 = 0, $$021047 = 0, $$03$lcssa = 0, $$03948 = 0, $0 = 0, $10 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $27 = 0, $3 = 0, $31 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $51 = 0, $54 = 0, $55 = 0, $62 = 0, $ar = 0, $i$0$lcssa = 0, $i$0$lcssa33 = 0, $i$01146 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $p$sroa$0$0849 = 0, $p$sroa$8$0650 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ar = sp;
 $0 = HEAP32[$pp >> 2] | 0;
 $2 = HEAP32[$pp + 4 >> 2] | 0;
 HEAP32[$ar >> 2] = $head;
 $3 = 0 - $width | 0;
 L1 : do if (($2 | 0) != 0 | ($0 | 0) != 1) {
  $10 = $head + (0 - (HEAP32[$lp + ($pshift << 2) >> 2] | 0)) | 0;
  if ((FUNCTION_TABLE_iii[$cmp & 15]($10, $head) | 0) < 1) {
   $$0$lcssa = $head;
   $$02$lcssa = $pshift;
   $$03$lcssa = $trusty;
   $i$0$lcssa = 1;
   label = 18;
  } else {
   $$01245 = $head;
   $$021047 = $pshift;
   $$03948 = ($trusty | 0) == 0;
   $18 = $10;
   $i$01146 = 1;
   $p$sroa$0$0849 = $0;
   $p$sroa$8$0650 = $2;
   while (1) {
    if ($$03948 & ($$021047 | 0) > 1) {
     $14 = $$01245 + $3 | 0;
     $17 = HEAP32[$lp + ($$021047 + -2 << 2) >> 2] | 0;
     if ((FUNCTION_TABLE_iii[$cmp & 15]($14, $18) | 0) > -1) {
      $$0$lcssa32 = $$01245;
      $$02$lcssa34 = $$021047;
      $i$0$lcssa33 = $i$01146;
      label = 19;
      break L1;
     }
     if ((FUNCTION_TABLE_iii[$cmp & 15]($14 + (0 - $17) | 0, $18) | 0) > -1) {
      $$0$lcssa32 = $$01245;
      $$02$lcssa34 = $$021047;
      $i$0$lcssa33 = $i$01146;
      label = 19;
      break L1;
     }
    }
    $25 = $i$01146 + 1 | 0;
    HEAP32[$ar + ($i$01146 << 2) >> 2] = $18;
    $27 = $p$sroa$0$0849 + -1 | 0;
    do if (!$27) {
     $46 = 32;
     label = 15;
    } else {
     if (!($27 & 1)) {
      $$02$i$i = $27;
      $nTrailingZeros$03$i$i = 0;
      while (1) {
       $31 = $nTrailingZeros$03$i$i + 1 | 0;
       $$02$i$i = $$02$i$i >>> 1;
       if ($$02$i$i & 1 | 0) {
        $43 = $31;
        break;
       } else $nTrailingZeros$03$i$i = $31;
      }
     } else {
      if (!$p$sroa$8$0650) $$01$i5$i$ph = 32; else {
       if (!($p$sroa$8$0650 & 1)) {
        $$02$i3$i = $p$sroa$8$0650;
        $nTrailingZeros$03$i2$i = 0;
       } else {
        $$0$i = 0;
        $48 = $p$sroa$0$0849;
        $51 = $p$sroa$8$0650;
        $55 = 0;
        break;
       }
       while (1) {
        $38 = $nTrailingZeros$03$i2$i + 1 | 0;
        $$02$i3$i = $$02$i3$i >>> 1;
        if ($$02$i3$i & 1 | 0) {
         $$01$i5$i$ph = $38;
         break;
        } else $nTrailingZeros$03$i2$i = $38;
       }
      }
      $43 = $$01$i5$i$ph + 32 | 0;
     }
     if ($43 >>> 0 > 31) {
      $46 = $43;
      label = 15;
     } else {
      $$0$i = $43;
      $48 = $p$sroa$0$0849;
      $51 = $p$sroa$8$0650;
      $55 = $43;
     }
    } while (0);
    if ((label | 0) == 15) {
     label = 0;
     $$0$i = $46 + -32 | 0;
     $48 = $p$sroa$8$0650;
     $51 = 0;
     $55 = $46;
    }
    $p$sroa$0$0849 = $51 << 32 - $$0$i | $48 >>> $$0$i;
    $p$sroa$8$0650 = $51 >>> $$0$i;
    $54 = $55 + $$021047 | 0;
    if (!(($p$sroa$8$0650 | 0) != 0 | ($p$sroa$0$0849 | 0) != 1)) {
     $$0$lcssa32 = $18;
     $$02$lcssa34 = $54;
     $i$0$lcssa33 = $25;
     label = 19;
     break L1;
    }
    $62 = $18 + (0 - (HEAP32[$lp + ($54 << 2) >> 2] | 0)) | 0;
    if ((FUNCTION_TABLE_iii[$cmp & 15]($62, HEAP32[$ar >> 2] | 0) | 0) < 1) {
     $$0$lcssa = $18;
     $$02$lcssa = $54;
     $$03$lcssa = 0;
     $i$0$lcssa = $25;
     label = 18;
     break;
    } else {
     $$01245$phi = $18;
     $$021047 = $54;
     $$03948 = 1;
     $18 = $62;
     $i$01146 = $25;
     $$01245 = $$01245$phi;
    }
   }
  }
 } else {
  $$0$lcssa = $head;
  $$02$lcssa = $pshift;
  $$03$lcssa = $trusty;
  $i$0$lcssa = 1;
  label = 18;
 } while (0);
 if ((label | 0) == 18) if (!$$03$lcssa) {
  $$0$lcssa32 = $$0$lcssa;
  $$02$lcssa34 = $$02$lcssa;
  $i$0$lcssa33 = $i$0$lcssa;
  label = 19;
 }
 if ((label | 0) == 19) {
  _cycle($width, $ar, $i$0$lcssa33);
  _sift($$0$lcssa32, $width, $cmp, $$02$lcssa34, $lp);
 }
 STACKTOP = sp;
 return;
}

function _arParamLoad($filename, $num, $param, $varargs) {
 $filename = $filename | 0;
 $num = $num | 0;
 $param = $param | 0;
 $varargs = $varargs | 0;
 var $$pre$phi14Z2D = 0, $11 = 0, $14 = 0, $15 = 0, $18 = 0, $21 = 0, $23 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $36 = 0, $43 = 0, $44 = 0, $5 = 0, $53 = 0.0, $8 = 0, $ap = 0, $dist_function_version$04 = 0, $i$0 = 0, $i$0$lcssa = 0, $i$1 = 0, $param_wasRead = 0, $ret$06 = 0, $ret$09 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer18 = sp + 232 | 0;
 $vararg_buffer15 = sp + 224 | 0;
 $vararg_buffer13 = sp + 216 | 0;
 $vararg_buffer9 = sp + 208 | 0;
 $vararg_buffer6 = sp + 200 | 0;
 $vararg_buffer2 = sp + 192 | 0;
 $vararg_buffer = sp + 184 | 0;
 $ap = sp + 240 | 0;
 $param_wasRead = sp;
 do if (($filename | 0) != 0 & ($num | 0) > 0 & ($param | 0) != 0) {
  $3 = _fopen($filename, 3874) | 0;
  if (!$3) {
   $5 = ___errno_location() | 0;
   HEAP32[$vararg_buffer >> 2] = HEAP32[$5 >> 2];
   HEAP32[$vararg_buffer + 4 >> 2] = $filename;
   _arLog(3, 3877, $vararg_buffer);
   $8 = _strerror(HEAP32[$5 >> 2] | 0) | 0;
   HEAP32[$vararg_buffer2 >> 2] = 18261;
   HEAP32[$vararg_buffer2 + 4 >> 2] = $8;
   _arLog(3, 4381, $vararg_buffer2);
   $ret$06 = -1;
   break;
  }
  _fseek($3, 0, 2) | 0;
  L6 : do if (!(_ferror($3) | 0)) {
   $15 = _ftell($3) | 0;
   _rewind($3);
   $i$0 = 0;
   while (1) {
    if (($i$0 | 0) >= 4) {
     $i$0$lcssa = $i$0;
     label = 9;
     break;
    }
    $18 = HEAP32[1636 + ($i$0 << 3) + 4 >> 2] | 0;
    $21 = $i$0 + 1 | 0;
    if (!(($15 | 0) % ($18 | 0) | 0)) {
     $23 = $18;
     $dist_function_version$04 = $21;
     break;
    } else $i$0 = $21;
   }
   do if ((label | 0) == 9) if (($i$0$lcssa | 0) == 4) {
    _arLog(3, 3991, $vararg_buffer13);
    $ret$09 = -1;
    break L6;
   } else {
    $23 = HEAP32[1636 + (0 << 3) + 4 >> 2] | 0;
    $dist_function_version$04 = 0;
    break;
   } while (0);
   if ((_fread($param_wasRead, $23, 1, $3) | 0) != 1) {
    $26 = ___errno_location() | 0;
    HEAP32[$vararg_buffer15 >> 2] = HEAP32[$26 >> 2];
    _arLog(3, 4071, $vararg_buffer15);
    $29 = _strerror(HEAP32[$26 >> 2] | 0) | 0;
    HEAP32[$vararg_buffer18 >> 2] = 18261;
    HEAP32[$vararg_buffer18 + 4 >> 2] = $29;
    _arLog(3, 4381, $vararg_buffer18);
    $ret$09 = -1;
    break;
   }
   $30 = $param_wasRead + 176 | 0;
   HEAP32[$30 >> 2] = $dist_function_version$04;
   _byteswap($param_wasRead);
   $31 = ($dist_function_version$04 | 0) == 1;
   $32 = $param_wasRead + 120 | 0;
   if ($31) {
    $33 = +HEAPF64[$32 >> 3];
    $34 = $param_wasRead + 128 | 0;
    HEAPF64[$32 >> 3] = +HEAPF64[$34 >> 3];
    HEAPF64[$34 >> 3] = $33;
    $$pre$phi14Z2D = $34;
   } else $$pre$phi14Z2D = $param_wasRead + 128 | 0;
   _memcpy($param | 0, $param_wasRead | 0, 184) | 0;
   HEAP32[$ap >> 2] = $varargs;
   $36 = $param + 176 | 0;
   $i$1 = 1;
   while (1) {
    if (($i$1 | 0) >= ($num | 0)) {
     $ret$09 = 0;
     break L6;
    }
    $43 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $44 = HEAP32[$43 >> 2] | 0;
    HEAP32[$ap >> 2] = $43 + 4;
    HEAP32[$44 + 176 >> 2] = HEAP32[$36 >> 2];
    if ((_fread($param_wasRead, HEAP32[1636 + ((HEAP32[$36 >> 2] | 0) + -1 << 3) + 4 >> 2] | 0, 1, $3) | 0) != 1) {
     $ret$09 = -1;
     break L6;
    }
    HEAP32[$30 >> 2] = $dist_function_version$04;
    _byteswap($param_wasRead);
    if ($31) {
     $53 = +HEAPF64[$32 >> 3];
     HEAPF64[$32 >> 3] = +HEAPF64[$$pre$phi14Z2D >> 3];
     HEAPF64[$$pre$phi14Z2D >> 3] = $53;
    }
    _memcpy($44 | 0, $param_wasRead | 0, 184) | 0;
    $i$1 = $i$1 + 1 | 0;
   }
  } else {
   $11 = ___errno_location() | 0;
   HEAP32[$vararg_buffer6 >> 2] = HEAP32[$11 >> 2];
   _arLog(3, 3946, $vararg_buffer6);
   $14 = _strerror(HEAP32[$11 >> 2] | 0) | 0;
   HEAP32[$vararg_buffer9 >> 2] = 18261;
   HEAP32[$vararg_buffer9 + 4 >> 2] = $14;
   _arLog(3, 4381, $vararg_buffer9);
   $ret$09 = -1;
  } while (0);
  _fclose($3) | 0;
  $ret$06 = $ret$09;
 } else $ret$06 = -1; while (0);
 STACKTOP = sp;
 return $ret$06 | 0;
}

function _arParamDecompMat($source, $cpara, $trans) {
 $source = $source | 0;
 $cpara = $cpara | 0;
 $trans = $trans | 0;
 var $100 = 0.0, $101 = 0, $107 = 0.0, $113 = 0.0, $119 = 0.0, $125 = 0.0, $136 = 0.0, $140 = 0.0, $154 = 0, $18 = 0.0, $20 = 0.0, $22 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0, $33 = 0.0, $34 = 0, $36 = 0.0, $37 = 0, $42 = 0, $44 = 0.0, $46 = 0.0, $48 = 0.0, $53 = 0.0, $54 = 0, $57 = 0.0, $60 = 0.0, $63 = 0.0, $69 = 0.0, $70 = 0, $72 = 0, $75 = 0, $78 = 0, $82 = 0.0, $84 = 0.0, $86 = 0.0, $91 = 0.0, $92 = 0, $Cpara = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $c$3 = 0, $r$0 = 0, $r$1 = 0, $r$2 = 0, $r$3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $Cpara = sp;
 L1 : do if (!(+HEAPF64[$source + 88 >> 3] >= 0.0)) {
  $r$1 = 0;
  while (1) {
   if (($r$1 | 0) == 3) {
    $r$2 = 0;
    break L1;
   } else $c$1 = 0;
   while (1) {
    if (($c$1 | 0) == 4) break;
    HEAPF64[$Cpara + ($r$1 << 5) + ($c$1 << 3) >> 3] = -+HEAPF64[$source + ($r$1 << 5) + ($c$1 << 3) >> 3];
    $c$1 = $c$1 + 1 | 0;
   }
   $r$1 = $r$1 + 1 | 0;
  }
 } else {
  $r$0 = 0;
  while (1) {
   if (($r$0 | 0) == 3) {
    $r$2 = 0;
    break L1;
   } else $c$0 = 0;
   while (1) {
    if (($c$0 | 0) == 4) break;
    HEAPF64[$Cpara + ($r$0 << 5) + ($c$0 << 3) >> 3] = +HEAPF64[$source + ($r$0 << 5) + ($c$0 << 3) >> 3];
    $c$0 = $c$0 + 1 | 0;
   }
   $r$0 = $r$0 + 1 | 0;
  }
 } while (0);
 while (1) {
  if (($r$2 | 0) == 3) break; else $c$2 = 0;
  while (1) {
   if (($c$2 | 0) == 4) break;
   HEAPF64[$cpara + ($r$2 << 5) + ($c$2 << 3) >> 3] = 0.0;
   $c$2 = $c$2 + 1 | 0;
  }
  $r$2 = $r$2 + 1 | 0;
 }
 $18 = +HEAPF64[$Cpara + 64 >> 3];
 $20 = +HEAPF64[$Cpara + 72 >> 3];
 $22 = +HEAPF64[$Cpara + 80 >> 3];
 $28 = +Math_sqrt(+($18 * $18 + $20 * $20 + $22 * $22));
 $29 = $cpara + 80 | 0;
 HEAPF64[$29 >> 3] = $28;
 $30 = $18 / $28;
 $31 = $trans + 64 | 0;
 HEAPF64[$31 >> 3] = $30;
 $33 = $20 / +HEAPF64[$29 >> 3];
 $34 = $trans + 72 | 0;
 HEAPF64[$34 >> 3] = $33;
 $36 = $22 / +HEAPF64[$29 >> 3];
 $37 = $trans + 80 | 0;
 HEAPF64[$37 >> 3] = $36;
 $42 = $trans + 88 | 0;
 HEAPF64[$42 >> 3] = +HEAPF64[$Cpara + 88 >> 3] / +HEAPF64[$29 >> 3];
 $44 = +HEAPF64[$Cpara + 32 >> 3];
 $46 = +HEAPF64[$Cpara + 40 >> 3];
 $48 = +HEAPF64[$Cpara + 48 >> 3];
 $53 = $30 * $44 + $33 * $46 + $36 * $48;
 $54 = $cpara + 48 | 0;
 HEAPF64[$54 >> 3] = $53;
 $57 = $44 - $53 * +HEAPF64[$31 >> 3];
 $60 = $46 - $53 * +HEAPF64[$34 >> 3];
 $63 = $48 - $53 * +HEAPF64[$37 >> 3];
 $69 = +Math_sqrt(+($57 * $57 + $60 * $60 + $63 * $63));
 $70 = $cpara + 40 | 0;
 HEAPF64[$70 >> 3] = $69;
 $72 = $trans + 32 | 0;
 HEAPF64[$72 >> 3] = $57 / $69;
 $75 = $trans + 40 | 0;
 HEAPF64[$75 >> 3] = $60 / +HEAPF64[$70 >> 3];
 $78 = $trans + 48 | 0;
 HEAPF64[$78 >> 3] = $63 / +HEAPF64[$70 >> 3];
 $82 = +HEAPF64[$Cpara >> 3];
 $84 = +HEAPF64[$Cpara + 8 >> 3];
 $86 = +HEAPF64[$Cpara + 16 >> 3];
 $91 = +HEAPF64[$31 >> 3] * $82 + +HEAPF64[$34 >> 3] * $84 + +HEAPF64[$37 >> 3] * $86;
 $92 = $cpara + 16 | 0;
 HEAPF64[$92 >> 3] = $91;
 $100 = +HEAPF64[$72 >> 3] * $82 + +HEAPF64[$75 >> 3] * $84 + +HEAPF64[$78 >> 3] * $86;
 $101 = $cpara + 8 | 0;
 HEAPF64[$101 >> 3] = $100;
 $107 = $82 - $100 * +HEAPF64[$72 >> 3] - $91 * +HEAPF64[$31 >> 3];
 $113 = $84 - $100 * +HEAPF64[$75 >> 3] - $91 * +HEAPF64[$34 >> 3];
 $119 = $86 - $100 * +HEAPF64[$78 >> 3] - $91 * +HEAPF64[$37 >> 3];
 $125 = +Math_sqrt(+($107 * $107 + $113 * $113 + $119 * $119));
 HEAPF64[$cpara >> 3] = $125;
 HEAPF64[$trans >> 3] = $107 / $125;
 HEAPF64[$trans + 8 >> 3] = $113 / +HEAPF64[$cpara >> 3];
 HEAPF64[$trans + 16 >> 3] = $119 / +HEAPF64[$cpara >> 3];
 $136 = +HEAPF64[$42 >> 3];
 $140 = (+HEAPF64[$Cpara + 56 >> 3] - +HEAPF64[$54 >> 3] * $136) / +HEAPF64[$70 >> 3];
 HEAPF64[$trans + 56 >> 3] = $140;
 HEAPF64[$trans + 24 >> 3] = (+HEAPF64[$Cpara + 24 >> 3] - $140 * +HEAPF64[$101 >> 3] - +HEAPF64[$92 >> 3] * $136) / +HEAPF64[$cpara >> 3];
 $r$3 = 0;
 while (1) {
  if (($r$3 | 0) == 3) break; else $c$3 = 0;
  while (1) {
   if (($c$3 | 0) == 3) break;
   $154 = $cpara + ($r$3 << 5) + ($c$3 << 3) | 0;
   HEAPF64[$154 >> 3] = +HEAPF64[$154 >> 3] / +HEAPF64[$29 >> 3];
   $c$3 = $c$3 + 1 | 0;
  }
  $r$3 = $r$3 + 1 | 0;
 }
 STACKTOP = sp;
 return 0;
}

function __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$pn$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $26 = 0, $29 = 0.0, $3 = 0, $32 = 0.0, $4 = 0, $41 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $67 = 0, $68 = 0, $75 = 0, $77 = 0, $8 = 0, $81 = 0, $__bc$0$i = 0, $__chash$0$i = 0, $__chash$1$i = 0, $__h$i = 0, $__nd$0$i = 0, $__nd$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__h$i = sp + 4 | 0;
 $0 = sp;
 $1 = sp + 16 | 0;
 HEAP32[$0 >> 2] = $__k;
 $2 = HEAP32[$__k >> 2] | 0;
 $3 = $this + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = ($4 | 0) == 0;
 L1 : do if ($5) {
  $__chash$0$i = 0;
  label = 12;
 } else {
  $6 = $4 + -1 | 0;
  $8 = ($6 & $4 | 0) == 0;
  if ($8) $13 = $6 & $2; else $13 = ($2 >>> 0) % ($4 >>> 0) | 0;
  $14 = HEAP32[(HEAP32[$this >> 2] | 0) + ($13 << 2) >> 2] | 0;
  if (!$14) {
   $__chash$0$i = $13;
   label = 12;
  } else {
   $$pn$i = $14;
   while (1) {
    $__nd$0$i = HEAP32[$$pn$i >> 2] | 0;
    if (!$__nd$0$i) {
     $__chash$0$i = $13;
     label = 12;
     break L1;
    }
    $18 = HEAP32[$__nd$0$i + 4 >> 2] | 0;
    if ($8) $21 = $18 & $6; else $21 = ($18 >>> 0) % ($4 >>> 0) | 0;
    if (($21 | 0) != ($13 | 0)) {
     $__chash$0$i = $13;
     label = 12;
     break L1;
    }
    if ((HEAP32[$__nd$0$i + 8 >> 2] | 0) == ($2 | 0)) {
     $__nd$1$i = $__nd$0$i;
     break;
    } else $$pn$i = $__nd$0$i;
   }
  }
 } while (0);
 if ((label | 0) == 12) {
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($__h$i, $this, $2, 17220, $0, $1);
  $26 = $this + 12 | 0;
  $29 = +(((HEAP32[$26 >> 2] | 0) + 1 | 0) >>> 0);
  $32 = +HEAPF32[$this + 16 >> 2];
  do if ($5 | $29 > +($4 >>> 0) * $32) {
   if ($4 >>> 0 > 2) $41 = ($4 + -1 & $4 | 0) == 0; else $41 = 0;
   $43 = ($41 & 1 | $4 << 1) ^ 1;
   $46 = ~~+Math_ceil(+($29 / $32)) >>> 0;
   __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($this, $43 >>> 0 < $46 >>> 0 ? $46 : $43);
   $49 = HEAP32[$3 >> 2] | 0;
   $50 = $49 + -1 | 0;
   if (!($50 & $49)) {
    $__bc$0$i = $49;
    $__chash$1$i = $50 & $2;
    break;
   } else {
    $__bc$0$i = $49;
    $__chash$1$i = ($2 >>> 0) % ($49 >>> 0) | 0;
    break;
   }
  } else {
   $__bc$0$i = $4;
   $__chash$1$i = $__chash$0$i;
  } while (0);
  $57 = HEAP32[(HEAP32[$this >> 2] | 0) + ($__chash$1$i << 2) >> 2] | 0;
  if (!$57) {
   $59 = $this + 8 | 0;
   $61 = HEAP32[$__h$i >> 2] | 0;
   HEAP32[$61 >> 2] = HEAP32[$59 >> 2];
   HEAP32[$59 >> 2] = $61;
   HEAP32[(HEAP32[$this >> 2] | 0) + ($__chash$1$i << 2) >> 2] = $59;
   $64 = HEAP32[$61 >> 2] | 0;
   if (!$64) {
    $$pre$phi$iZ2D = $__h$i;
    $81 = $61;
   } else {
    $67 = HEAP32[$64 + 4 >> 2] | 0;
    $68 = $__bc$0$i + -1 | 0;
    if (!($68 & $__bc$0$i)) $75 = $67 & $68; else $75 = ($67 >>> 0) % ($__bc$0$i >>> 0) | 0;
    HEAP32[(HEAP32[$this >> 2] | 0) + ($75 << 2) >> 2] = $61;
    $$pre$phi$iZ2D = $__h$i;
    $81 = $61;
   }
  } else {
   $77 = HEAP32[$__h$i >> 2] | 0;
   HEAP32[$77 >> 2] = HEAP32[$57 >> 2];
   HEAP32[$57 >> 2] = $77;
   $$pre$phi$iZ2D = $__h$i;
   $81 = $77;
  }
  HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + 1;
  HEAP32[$$pre$phi$iZ2D >> 2] = 0;
  $__nd$1$i = $81;
 }
 STACKTOP = sp;
 return $__nd$1$i + 16 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $10 = 0, $14 = 0, $17 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $40 = 0, $45 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $56 = 0, $60 = 0, $63 = 0, $67 = 0, $69 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $77 = 0, $78 = 0, $86 = 0, $91 = 0, $92 = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i17 = 0;
 do if (!(HEAP8[$this >> 0] & 1)) {
  HEAP8[$this + 1 >> 0] = 0;
  HEAP8[$this >> 0] = 0;
 } else {
  $5 = $this + 8 | 0;
  HEAP8[HEAP32[$5 >> 2] >> 0] = 0;
  $7 = $this + 4 | 0;
  HEAP32[$7 >> 2] = 0;
  $$pre$i$i$i = HEAP8[$this >> 0] | 0;
  if (!($$pre$i$i$i & 1)) {
   $14 = $$pre$i$i$i;
   $23 = 10;
  } else {
   $10 = HEAP32[$this >> 2] | 0;
   $14 = $10 & 255;
   $23 = ($10 & -2) + -1 | 0;
  }
  if (!($14 & 1)) {
   $17 = ($14 & 255) >>> 1;
   if (($14 & 255) < 22) {
    $21 = 10;
    $40 = $17;
    $91 = 1;
   } else {
    $21 = ($17 + 16 & 240) + -1 | 0;
    $40 = $17;
    $91 = 1;
   }
  } else {
   $21 = 10;
   $40 = 0;
   $91 = 0;
  }
  if (($21 | 0) != ($23 | 0)) {
   if (($21 | 0) == 10) {
    $31 = $this + 1 | 0;
    $32 = HEAP32[$5 >> 2] | 0;
    if ($91) {
     _memcpy($31 | 0, $32 | 0, (($14 & 255) >>> 1) + 1 | 0) | 0;
     _free($32);
    } else {
     HEAP8[$31 >> 0] = HEAP8[$32 >> 0] | 0;
     _free($32);
    }
    HEAP8[$this >> 0] = $40 << 1;
    break;
   }
   $26 = $21 + 1 | 0;
   $27 = _malloc($26) | 0;
   if (!($21 >>> 0 <= $23 >>> 0 & ($27 | 0) == 0)) {
    if ($91) _memcpy($27 | 0, $this + 1 | 0, (($14 & 255) >>> 1) + 1 | 0) | 0; else {
     $29 = HEAP32[$5 >> 2] | 0;
     HEAP8[$27 >> 0] = HEAP8[$29 >> 0] | 0;
     _free($29);
    }
    HEAP32[$this >> 2] = $26 | 1;
    HEAP32[$7 >> 2] = $40;
    HEAP32[$5 >> 2] = $27;
   }
  }
 } while (0);
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 $__i$0$i$i$i$i = 0;
 while (1) {
  if (($__i$0$i$i$i$i | 0) == 3) break;
  HEAP32[$0 + ($__i$0$i$i$i$i << 2) >> 2] = 0;
  $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
 }
 $45 = $this + 12 | 0;
 $46 = $0 + 12 | 0;
 do if (!(HEAP8[$45 >> 0] & 1)) {
  HEAP8[$45 + 1 >> 0] = 0;
  HEAP8[$45 >> 0] = 0;
 } else {
  $51 = $this + 20 | 0;
  HEAP8[HEAP32[$51 >> 2] >> 0] = 0;
  $53 = $this + 16 | 0;
  HEAP32[$53 >> 2] = 0;
  $$pre$i$i$i2 = HEAP8[$45 >> 0] | 0;
  if (!($$pre$i$i$i2 & 1)) {
   $60 = $$pre$i$i$i2;
   $69 = 10;
  } else {
   $56 = HEAP32[$45 >> 2] | 0;
   $60 = $56 & 255;
   $69 = ($56 & -2) + -1 | 0;
  }
  if (!($60 & 1)) {
   $63 = ($60 & 255) >>> 1;
   if (($60 & 255) < 22) {
    $67 = 10;
    $86 = $63;
    $92 = 1;
   } else {
    $67 = ($63 + 16 & 240) + -1 | 0;
    $86 = $63;
    $92 = 1;
   }
  } else {
   $67 = 10;
   $86 = 0;
   $92 = 0;
  }
  if (($67 | 0) != ($69 | 0)) {
   if (($67 | 0) == 10) {
    $77 = $45 + 1 | 0;
    $78 = HEAP32[$51 >> 2] | 0;
    if ($92) {
     _memcpy($77 | 0, $78 | 0, (($60 & 255) >>> 1) + 1 | 0) | 0;
     _free($78);
    } else {
     HEAP8[$77 >> 0] = HEAP8[$78 >> 0] | 0;
     _free($78);
    }
    HEAP8[$45 >> 0] = $86 << 1;
    break;
   }
   $72 = $67 + 1 | 0;
   $73 = _malloc($72) | 0;
   if (!($67 >>> 0 <= $69 >>> 0 & ($73 | 0) == 0)) {
    if ($92) _memcpy($73 | 0, $45 + 1 | 0, (($60 & 255) >>> 1) + 1 | 0) | 0; else {
     $75 = HEAP32[$51 >> 2] | 0;
     HEAP8[$73 >> 0] = HEAP8[$75 >> 0] | 0;
     _free($75);
    }
    HEAP32[$45 >> 2] = $72 | 1;
    HEAP32[$53 >> 2] = $86;
    HEAP32[$51 >> 2] = $73;
   }
  }
 } while (0);
 HEAP32[$45 >> 2] = HEAP32[$46 >> 2];
 HEAP32[$45 + 4 >> 2] = HEAP32[$46 + 4 >> 2];
 HEAP32[$45 + 8 >> 2] = HEAP32[$46 + 8 >> 2];
 $__i$0$i$i$i$i17 = 0;
 while (1) {
  if (($__i$0$i$i$i$i17 | 0) == 3) break;
  HEAP32[$46 + ($__i$0$i$i$i$i17 << 2) >> 2] = 0;
  $__i$0$i$i$i$i17 = $__i$0$i$i$i$i17 + 1 | 0;
 }
 return;
}

function _arMatrixPCA($input, $evec, $ev, $mean) {
 $input = $input | 0;
 $evec = $evec | 0;
 $ev = $ev | 0;
 $mean = $mean | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $17 = 0, $20 = 0, $23 = 0.0, $25 = 0, $27 = 0, $3 = 0, $35 = 0, $36 = 0.0, $46 = 0, $5 = 0, $51 = 0, $62 = 0, $66 = 0, $67 = 0, $72 = 0.0, $76 = 0, $i$0 = 0, $i$0$i = 0, $i$0$i3 = 0, $i$1 = 0, $i$1$i = 0, $i$2 = 0, $i$2$i = 0, $j$0$i = 0, $j$0$i6 = 0, $m$0$i = 0, $m$0$i2 = 0, $m$1$i = 0, $m$1$i5 = 0, $m$1$i5$lcssa = 0, $sum$0 = 0.0, $sum$0$lcssa = 0.0, $v$0$i = 0, $v$0$i4 = 0;
 $1 = HEAP32[$input + 4 >> 2] | 0;
 $3 = HEAP32[$input + 8 >> 2] | 0;
 $5 = ($1 | 0) < ($3 | 0) ? $1 : $3;
 L1 : do if (($1 | 0) < 2 | ($3 | 0) < 2) $$0 = -1; else if ((HEAP32[$evec + 8 >> 2] | 0) == ($3 | 0)) if ((HEAP32[$evec + 4 >> 2] | 0) == ($5 | 0)) {
  $14 = $ev + 4 | 0;
  if ((HEAP32[$14 >> 2] | 0) == ($5 | 0)) {
   $17 = $mean + 4 | 0;
   if ((HEAP32[$17 >> 2] | 0) == ($3 | 0)) {
    $20 = _arMatrixAllocDup($input) | 0;
    if (!$20) $$0 = -1; else {
     $23 = +Math_sqrt(+(+($1 | 0)));
     $25 = HEAP32[$20 + 4 >> 2] | 0;
     $27 = HEAP32[$20 + 8 >> 2] | 0;
     if (!(($25 | 0) < 1 | ($27 | 0) < 1)) if ((HEAP32[$17 >> 2] | 0) == ($27 | 0)) {
      $i$0$i = 0;
      while (1) {
       if (($i$0$i | 0) == ($27 | 0)) break;
       HEAPF64[(HEAP32[$mean >> 2] | 0) + ($i$0$i << 3) >> 3] = 0.0;
       $i$0$i = $i$0$i + 1 | 0;
      }
      $35 = HEAP32[$20 >> 2] | 0;
      $i$1$i = 0;
      $m$0$i = $35;
      while (1) {
       if (($i$1$i | 0) == ($25 | 0)) break;
       $j$0$i = 0;
       $m$1$i = $m$0$i;
       $v$0$i = HEAP32[$mean >> 2] | 0;
       while (1) {
        if (($j$0$i | 0) == ($27 | 0)) break;
        HEAPF64[$v$0$i >> 3] = +HEAPF64[$m$1$i >> 3] + +HEAPF64[$v$0$i >> 3];
        $j$0$i = $j$0$i + 1 | 0;
        $m$1$i = $m$1$i + 8 | 0;
        $v$0$i = $v$0$i + 8 | 0;
       }
       $i$1$i = $i$1$i + 1 | 0;
       $m$0$i = $m$0$i + ($27 << 3) | 0;
      }
      $36 = +($25 | 0);
      $i$2$i = 0;
      while (1) {
       if (($i$2$i | 0) == ($27 | 0)) {
        $i$0$i3 = 0;
        $m$0$i2 = $35;
        break;
       }
       $46 = (HEAP32[$mean >> 2] | 0) + ($i$2$i << 3) | 0;
       HEAPF64[$46 >> 3] = +HEAPF64[$46 >> 3] / $36;
       $i$2$i = $i$2$i + 1 | 0;
      }
      while (1) {
       if (($i$0$i3 | 0) >= ($25 | 0)) break;
       $j$0$i6 = 0;
       $m$1$i5 = $m$0$i2;
       $v$0$i4 = HEAP32[$mean >> 2] | 0;
       while (1) {
        if (($j$0$i6 | 0) >= ($27 | 0)) {
         $m$1$i5$lcssa = $m$1$i5;
         break;
        }
        HEAPF64[$m$1$i5 >> 3] = +HEAPF64[$m$1$i5 >> 3] - +HEAPF64[$v$0$i4 >> 3];
        $j$0$i6 = $j$0$i6 + 1 | 0;
        $m$1$i5 = $m$1$i5 + 8 | 0;
        $v$0$i4 = $v$0$i4 + 8 | 0;
       }
       $i$0$i3 = $i$0$i3 + 1 | 0;
       $m$0$i2 = $m$1$i5$lcssa;
      }
      $51 = Math_imul($3, $1) | 0;
      $i$0 = 0;
      while (1) {
       if (($i$0 | 0) >= ($51 | 0)) break;
       $62 = $35 + ($i$0 << 3) | 0;
       HEAPF64[$62 >> 3] = +HEAPF64[$62 >> 3] / $23;
       $i$0 = $i$0 + 1 | 0;
      }
      $66 = _PCA($20, $evec, $ev) | 0;
      _arMatrixFree($20) | 0;
      $67 = HEAP32[$14 >> 2] | 0;
      $i$1 = 0;
      $sum$0 = 0.0;
      while (1) {
       if (($i$1 | 0) >= ($67 | 0)) {
        $sum$0$lcssa = $sum$0;
        break;
       }
       $72 = $sum$0 + +HEAPF64[(HEAP32[$ev >> 2] | 0) + ($i$1 << 3) >> 3];
       $i$1 = $i$1 + 1 | 0;
       $sum$0 = $72;
      }
      $i$2 = 0;
      while (1) {
       if (($i$2 | 0) >= ($67 | 0)) {
        $$0 = $66;
        break L1;
       }
       $76 = (HEAP32[$ev >> 2] | 0) + ($i$2 << 3) | 0;
       HEAPF64[$76 >> 3] = +HEAPF64[$76 >> 3] / $sum$0$lcssa;
       $i$2 = $i$2 + 1 | 0;
      }
     }
     _arMatrixFree($20) | 0;
     $$0 = -1;
    }
   } else $$0 = -1;
  } else $$0 = -1;
 } else $$0 = -1; else $$0 = -1; while (0);
 return $$0 | 0;
}

function _arGetMarkerInfo($image, $xsize, $ysize, $pixelFormat, $markerInfo2, $marker2_num, $pattHandle, $imageProcMode, $pattDetectMode, $arParamLTf, $pattRatio, $markerInfo, $marker_num, $matrixCodeType) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $pixelFormat = $pixelFormat | 0;
 $markerInfo2 = $markerInfo2 | 0;
 $marker2_num = $marker2_num | 0;
 $pattHandle = $pattHandle | 0;
 $imageProcMode = $imageProcMode | 0;
 $pattDetectMode = $pattDetectMode | 0;
 $arParamLTf = $arParamLTf | 0;
 $pattRatio = +$pattRatio;
 $markerInfo = $markerInfo | 0;
 $marker_num = $marker_num | 0;
 $matrixCodeType = $matrixCodeType | 0;
 var $1 = 0, $2 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $i$0 = 0, $j$0 = 0, $j$0$lcssa = 0, $j$1 = 0, $pos0 = 0, $pos1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $pos0 = sp + 4 | 0;
 $pos1 = sp;
 $1 = ($pattDetectMode | 1 | 0) == 1;
 $2 = ($pattDetectMode | 0) == 2;
 $i$0 = 0;
 $j$0 = 0;
 while (1) {
  if (($i$0 | 0) >= ($marker2_num | 0)) {
   $j$0$lcssa = $j$0;
   break;
  }
  HEAP32[$markerInfo + ($j$0 << 8) >> 2] = HEAP32[$markerInfo2 + ($i$0 * 80048 | 0) >> 2];
  if ((_arParamObserv2IdealLTf($arParamLTf, +HEAPF64[$markerInfo2 + ($i$0 * 80048 | 0) + 8 >> 3], +HEAPF64[$markerInfo2 + ($i$0 * 80048 | 0) + 16 >> 3], $pos0, $pos1) | 0) < 0) $j$1 = $j$0; else {
   HEAPF64[$markerInfo + ($j$0 << 8) + 56 >> 3] = +HEAPF32[$pos0 >> 2];
   HEAPF64[$markerInfo + ($j$0 << 8) + 64 >> 3] = +HEAPF32[$pos1 >> 2];
   $27 = $markerInfo + ($j$0 << 8) + 168 | 0;
   if ((_arGetLine($markerInfo2 + ($i$0 * 80048 | 0) + 28 | 0, $markerInfo2 + ($i$0 * 80048 | 0) + 40028 | 0, HEAP32[$markerInfo2 + ($i$0 * 80048 | 0) + 24 >> 2] | 0, $markerInfo2 + ($i$0 * 80048 | 0) + 80028 | 0, $arParamLTf, $markerInfo + ($j$0 << 8) + 72 | 0, $27) | 0) < 0) $j$1 = $j$0; else {
    $30 = $markerInfo + ($j$0 << 8) + 8 | 0;
    $31 = $markerInfo + ($j$0 << 8) + 20 | 0;
    $32 = $markerInfo + ($j$0 << 8) + 40 | 0;
    $33 = $markerInfo + ($j$0 << 8) + 12 | 0;
    $34 = $markerInfo + ($j$0 << 8) + 24 | 0;
    $35 = $markerInfo + ($j$0 << 8) + 48 | 0;
    switch (_arPattGetIDGlobal($pattHandle, $imageProcMode, $pattDetectMode, $image, $xsize, $ysize, $pixelFormat, $arParamLTf, $27, $pattRatio, $30, $31, $32, $33, $34, $35, $matrixCodeType, $markerInfo + ($j$0 << 8) + 240 | 0, $markerInfo + ($j$0 << 8) + 248 | 0) | 0) {
    case 0:
     {
      HEAP32[$markerInfo + ($j$0 << 8) + 236 >> 2] = 0;
      break;
     }
    case -1:
     {
      HEAP32[$markerInfo + ($j$0 << 8) + 236 >> 2] = 2;
      break;
     }
    case -2:
     {
      HEAP32[$markerInfo + ($j$0 << 8) + 236 >> 2] = 3;
      break;
     }
    case -3:
     {
      HEAP32[$markerInfo + ($j$0 << 8) + 236 >> 2] = 4;
      break;
     }
    case -4:
     {
      HEAP32[$markerInfo + ($j$0 << 8) + 236 >> 2] = 5;
      break;
     }
    case -5:
     {
      HEAP32[$markerInfo + ($j$0 << 8) + 236 >> 2] = 9;
      break;
     }
    case -6:
     {
      HEAP32[$markerInfo + ($j$0 << 8) + 236 >> 2] = 1;
      break;
     }
    default:
     {}
    }
    if ($1) {
     HEAP32[$markerInfo + ($j$0 << 8) + 4 >> 2] = HEAP32[$30 >> 2];
     HEAP32[$markerInfo + ($j$0 << 8) + 16 >> 2] = HEAP32[$31 >> 2];
     HEAPF64[$markerInfo + ($j$0 << 8) + 32 >> 3] = +HEAPF64[$32 >> 3];
    } else if ($2) {
     HEAP32[$markerInfo + ($j$0 << 8) + 4 >> 2] = HEAP32[$33 >> 2];
     HEAP32[$markerInfo + ($j$0 << 8) + 16 >> 2] = HEAP32[$34 >> 2];
     HEAPF64[$markerInfo + ($j$0 << 8) + 32 >> 3] = +HEAPF64[$35 >> 3];
    }
    $j$1 = $j$0 + 1 | 0;
   }
  }
  $i$0 = $i$0 + 1 | 0;
  $j$0 = $j$1;
 }
 HEAP32[$marker_num >> 2] = $j$0$lcssa;
 STACKTOP = sp;
 return 0;
}

function _icpPoint($handle, $data, $initMatXw2Xc, $matXw2Xc, $err) {
 $handle = $handle | 0;
 $data = $data | 0;
 $initMatXw2Xc = $initMatXw2Xc | 0;
 $matXw2Xc = $matXw2Xc | 0;
 $err = $err | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa42 = 0, $$lcssa44 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $20 = 0, $26 = 0, $30 = 0.0, $34 = 0.0, $39 = 0, $4 = 0, $45 = 0.0, $57 = 0, $7 = 0, $9 = 0, $U = 0, $dS = 0, $err0$0 = 0.0, $err1$0 = 0.0, $err1$0$lcssa = 0.0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $matXw2U = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 168 | 0;
 $vararg_buffer = sp + 160 | 0;
 $U = sp + 144 | 0;
 $matXw2U = sp + 48 | 0;
 $dS = sp;
 $0 = $data + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (($1 | 0) < 3) $$0 = -1; else {
  $4 = _malloc($1 * 96 | 0) | 0;
  if (!$4) {
   _arLog(3, 4129, $vararg_buffer);
   $$0 = -1;
   break;
  }
  $7 = _malloc($1 << 4) | 0;
  if (!$7) {
   _arLog(3, 4129, $vararg_buffer1);
   _free($4);
   $$0 = -1;
   break;
  } else $j$0 = 0;
  while (1) {
   if (($j$0 | 0) == 3) break; else $i$0 = 0;
   while (1) {
    if (($i$0 | 0) == 4) break;
    HEAPF64[$matXw2Xc + ($j$0 << 5) + ($i$0 << 3) >> 3] = +HEAPF64[$initMatXw2Xc + ($j$0 << 5) + ($i$0 << 3) >> 3];
    $i$0 = $i$0 + 1 | 0;
   }
   $j$0 = $j$0 + 1 | 0;
  }
  $9 = $data + 4 | 0;
  $10 = $U + 8 | 0;
  $11 = $handle + 104 | 0;
  $12 = $handle + 120 | 0;
  $13 = $handle + 112 | 0;
  $14 = $handle + 96 | 0;
  $err0$0 = 0.0;
  $i$1 = 0;
  L15 : while (1) {
   _arUtilMatMul($handle, $matXw2Xc, $matXw2U) | 0;
   $err1$0 = 0.0;
   $j$1 = 0;
   while (1) {
    $20 = HEAP32[$0 >> 2] | 0;
    if (($j$1 | 0) >= ($20 | 0)) {
     $$lcssa = $20;
     $err1$0$lcssa = $err1$0;
     break;
    }
    if ((_icpGetU_from_X_by_MatX2U($U, $matXw2U, (HEAP32[$9 >> 2] | 0) + ($j$1 * 24 | 0) | 0) | 0) < 0) {
     label = 14;
     break L15;
    }
    $26 = HEAP32[$data >> 2] | 0;
    $30 = +HEAPF64[$26 + ($j$1 << 4) >> 3] - +HEAPF64[$U >> 3];
    $34 = +HEAPF64[$26 + ($j$1 << 4) + 8 >> 3] - +HEAPF64[$10 >> 3];
    $39 = $j$1 << 1;
    HEAPF64[$7 + ($39 << 3) >> 3] = $30;
    HEAPF64[$7 + (($39 | 1) << 3) >> 3] = $34;
    $err1$0 = $err1$0 + ($30 * $30 + $34 * $34);
    $j$1 = $j$1 + 1 | 0;
   }
   $45 = $err1$0$lcssa / +($$lcssa | 0);
   if ($45 < +HEAPF64[$11 >> 3]) {
    $$lcssa44 = $45;
    label = 28;
    break;
   }
   if (($i$1 | 0) > 0) if ($45 < +HEAPF64[$12 >> 3]) if ($45 / $err0$0 > +HEAPF64[$13 >> 3]) {
    $$lcssa44 = $45;
    label = 28;
    break;
   }
   if (($i$1 | 0) == (HEAP32[$14 >> 2] | 0)) {
    $$lcssa44 = $45;
    label = 28;
    break;
   } else {
    $57 = $$lcssa;
    $j$2 = 0;
   }
   while (1) {
    if (($j$2 | 0) >= ($57 | 0)) {
     $$lcssa42 = $57;
     break;
    }
    if ((_icpGetJ_U_S($4 + ($j$2 * 12 << 3) | 0, $handle, $matXw2Xc, (HEAP32[$9 >> 2] | 0) + ($j$2 * 24 | 0) | 0) | 0) < 0) {
     label = 24;
     break L15;
    }
    $57 = HEAP32[$0 >> 2] | 0;
    $j$2 = $j$2 + 1 | 0;
   }
   if ((_icpGetDeltaS($dS, $7, $4, $$lcssa42 << 1) | 0) < 0) {
    label = 26;
    break;
   }
   _icpUpdateMat($matXw2Xc, $dS) | 0;
   $err0$0 = $45;
   $i$1 = $i$1 + 1 | 0;
  }
  if ((label | 0) == 14) {
   _icpGetXw2XcCleanup($4, $7);
   $$0 = -1;
   break;
  } else if ((label | 0) == 24) {
   _icpGetXw2XcCleanup($4, $7);
   $$0 = -1;
   break;
  } else if ((label | 0) == 26) {
   _icpGetXw2XcCleanup($4, $7);
   $$0 = -1;
   break;
  } else if ((label | 0) == 28) {
   HEAPF64[$err >> 3] = $$lcssa44;
   _free($4);
   _free($7);
   $$0 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arParamIdeal2Observ($dist_factor, $ix, $iy, $ox, $oy, $dist_function_version) {
 $dist_factor = $dist_factor | 0;
 $ix = +$ix;
 $iy = +$iy;
 $ox = $ox | 0;
 $oy = $oy | 0;
 $dist_function_version = $dist_function_version | 0;
 var $$0 = 0, $10 = 0.0, $104 = 0.0, $116 = 0.0, $12 = 0.0, $122 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $130 = 0.0, $14 = 0.0, $141 = 0.0, $16 = 0.0, $19 = 0.0, $22 = 0.0, $25 = 0.0, $30 = 0.0, $4 = 0.0, $55 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $63 = 0.0, $71 = 0.0, $8 = 0.0, $83 = 0.0, $90 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $98 = 0.0, $storemerge = 0.0, $storemerge6 = 0.0, $storemerge7 = 0.0;
 switch ($dist_function_version | 0) {
 case 4:
  {
   $4 = +HEAPF64[$dist_factor + 16 >> 3];
   $6 = +HEAPF64[$dist_factor + 24 >> 3];
   $8 = +HEAPF64[$dist_factor + 32 >> 3];
   $10 = +HEAPF64[$dist_factor + 40 >> 3];
   $12 = +HEAPF64[$dist_factor + 48 >> 3];
   $14 = +HEAPF64[$dist_factor + 56 >> 3];
   $16 = +HEAPF64[$dist_factor + 64 >> 3];
   $19 = ($ix - $12) * $16 / $8;
   $22 = ($iy - $14) * $16 / $10;
   $25 = $19 * $19 + $22 * $22;
   $30 = +HEAPF64[$dist_factor >> 3] * $25 + 1.0 + $25 * (+HEAPF64[$dist_factor + 8 >> 3] * $25);
   HEAPF64[$ox >> 3] = $12 + $8 * ($6 * ($25 + $19 * ($19 * 2.0)) + ($22 * ($4 * 2.0 * $19) + $19 * $30));
   HEAPF64[$oy >> 3] = $14 + $10 * ($22 * ($6 * 2.0 * $19) + ($4 * ($25 + $22 * ($22 * 2.0)) + $22 * $30));
   $$0 = 0;
   break;
  }
 case 3:
  {
   $55 = +HEAPF64[$dist_factor >> 3];
   $58 = +HEAPF64[$dist_factor + 16 >> 3];
   $59 = ($ix - $55) * $58;
   $60 = $dist_factor + 8 | 0;
   $63 = $58 * ($iy - +HEAPF64[$60 >> 3]);
   if ($59 == 0.0 & $63 == 0.0) {
    HEAPF64[$ox >> 3] = $55;
    $storemerge7 = +HEAPF64[$60 >> 3];
   } else {
    $71 = $59 * $59 + $63 * $63;
    $83 = 1.0 - $71 * (+HEAPF64[$dist_factor + 32 >> 3] / 1.0e8) - $71 * ($71 * (+HEAPF64[$dist_factor + 40 >> 3] / 1.0e8 / 1.0e5));
    HEAPF64[$ox >> 3] = $55 + +HEAPF64[$dist_factor + 24 >> 3] * ($59 * $83);
    $storemerge7 = +HEAPF64[$60 >> 3] + $63 * $83;
   }
   HEAPF64[$oy >> 3] = $storemerge7;
   $$0 = 0;
   break;
  }
 case 2:
  {
   $90 = +HEAPF64[$dist_factor >> 3];
   $93 = +HEAPF64[$dist_factor + 16 >> 3];
   $94 = ($ix - $90) * $93;
   $95 = $dist_factor + 8 | 0;
   $98 = $93 * ($iy - +HEAPF64[$95 >> 3]);
   if ($94 == 0.0 & $98 == 0.0) {
    HEAPF64[$ox >> 3] = $90;
    $storemerge6 = +HEAPF64[$95 >> 3];
   } else {
    $104 = $94 * $94 + $98 * $98;
    $116 = 1.0 - $104 * (+HEAPF64[$dist_factor + 24 >> 3] / 1.0e8) - $104 * ($104 * (+HEAPF64[$dist_factor + 32 >> 3] / 1.0e8 / 1.0e5));
    HEAPF64[$ox >> 3] = $90 + $94 * $116;
    $storemerge6 = +HEAPF64[$95 >> 3] + $98 * $116;
   }
   HEAPF64[$oy >> 3] = $storemerge6;
   $$0 = 0;
   break;
  }
 case 1:
  {
   $122 = +HEAPF64[$dist_factor >> 3];
   $125 = +HEAPF64[$dist_factor + 16 >> 3];
   $126 = ($ix - $122) * $125;
   $127 = $dist_factor + 8 | 0;
   $130 = $125 * ($iy - +HEAPF64[$127 >> 3]);
   if ($126 == 0.0 & $130 == 0.0) {
    HEAPF64[$ox >> 3] = $122;
    $storemerge = +HEAPF64[$127 >> 3];
   } else {
    $141 = 1.0 - ($126 * $126 + $130 * $130) * (+HEAPF64[$dist_factor + 24 >> 3] / 1.0e8);
    HEAPF64[$ox >> 3] = $122 + $126 * $141;
    $storemerge = +HEAPF64[$127 >> 3] + $130 * $141;
   }
   HEAPF64[$oy >> 3] = $storemerge;
   $$0 = 0;
   break;
  }
 default:
  $$0 = -1;
 }
 return $$0 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $35 = 0, $36 = 0, $48 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $78 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $x$013 = 0;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 if ($1 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $9 = HEAPU8[$1 >> 0] | 0;
 } else $9 = ___shgetc($f) | 0;
 switch ($9 | 0) {
 case 43:
 case 45:
  {
   $11 = ($9 | 0) == 45 & 1;
   $12 = HEAP32[$0 >> 2] | 0;
   if ($12 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $12 + 1;
    $20 = HEAPU8[$12 >> 0] | 0;
   } else $20 = ___shgetc($f) | 0;
   if (($pok | 0) != 0 & ($20 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$2 >> 2] | 0)) {
    $c$0 = $20;
    $neg$0 = $11;
   } else {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    $c$0 = $20;
    $neg$0 = $11;
   } else {
    $c$0 = $20;
    $neg$0 = $11;
   }
   break;
  }
 default:
  {
   $c$0 = $9;
   $neg$0 = 0;
  }
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$2 >> 2] | 0)) {
  $98 = -2147483648;
  $99 = 0;
 } else {
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $98 = -2147483648;
  $99 = 0;
 } else {
  $c$112 = $c$0;
  $x$013 = 0;
  while (1) {
   $35 = $c$112 + -48 + ($x$013 * 10 | 0) | 0;
   $36 = HEAP32[$0 >> 2] | 0;
   if ($36 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $36 + 1;
    $c$1$be = HEAPU8[$36 >> 0] | 0;
   } else $c$1$be = ___shgetc($f) | 0;
   if (($c$1$be + -48 | 0) >>> 0 < 10 & ($35 | 0) < 214748364) {
    $c$112 = $c$1$be;
    $x$013 = $35;
   } else {
    $$lcssa22 = $35;
    $c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $48 = (($$lcssa22 | 0) < 0) << 31 >> 31;
  if (($c$1$be$lcssa + -48 | 0) >>> 0 < 10) {
   $53 = $$lcssa22;
   $54 = $48;
   $c$27 = $c$1$be$lcssa;
   while (1) {
    $55 = ___muldi3($53 | 0, $54 | 0, 10, 0) | 0;
    $56 = tempRet0;
    $59 = _i64Add($c$27 | 0, (($c$27 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $61 = _i64Add($59 | 0, tempRet0 | 0, $55 | 0, $56 | 0) | 0;
    $62 = tempRet0;
    $63 = HEAP32[$0 >> 2] | 0;
    if ($63 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $63 + 1;
     $c$2$be = HEAPU8[$63 >> 0] | 0;
    } else $c$2$be = ___shgetc($f) | 0;
    if (($c$2$be + -48 | 0) >>> 0 < 10 & (($62 | 0) < 21474836 | ($62 | 0) == 21474836 & $61 >>> 0 < 2061584302)) {
     $53 = $61;
     $54 = $62;
     $c$27 = $c$2$be;
    } else {
     $92 = $61;
     $93 = $62;
     $c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;
   $93 = $48;
   $c$2$lcssa = $c$1$be$lcssa;
  }
  if (($c$2$lcssa + -48 | 0) >>> 0 < 10) do {
   $78 = HEAP32[$0 >> 2] | 0;
   if ($78 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $78 + 1;
    $c$3$be = HEAPU8[$78 >> 0] | 0;
   } else $c$3$be = ___shgetc($f) | 0;
  } while (($c$3$be + -48 | 0) >>> 0 < 10);
  if (HEAP32[$2 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $91 = ($neg$0 | 0) != 0;
  $94 = _i64Subtract(0, 0, $92 | 0, $93 | 0) | 0;
  $98 = $91 ? tempRet0 : $93;
  $99 = $91 ? $94 : $92;
 }
 tempRet0 = $98;
 return $99 | 0;
}

function _arGetLine($x_coord, $y_coord, $coord_num, $vertex, $paramLTf, $line, $v) {
 $x_coord = $x_coord | 0;
 $y_coord = $y_coord | 0;
 $coord_num = $coord_num | 0;
 $vertex = $vertex | 0;
 $paramLTf = $paramLTf | 0;
 $line = $line | 0;
 $v = $v | 0;
 var $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $13 = 0.0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $35 = 0, $36 = 0, $4 = 0, $45 = 0, $47 = 0.0, $50 = 0.0, $52 = 0, $6 = 0, $63 = 0, $64 = 0, $67 = 0.0, $69 = 0, $72 = 0.0, $74 = 0.0, $77 = 0, $8 = 0, $80 = 0, $96 = 0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $m0 = 0, $m1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $m0 = sp + 4 | 0;
 $m1 = sp;
 $0 = _arVecAlloc(2) | 0;
 $1 = _arVecAlloc(2) | 0;
 $2 = _arMatrixAlloc(2, 2) | 0;
 $i$0 = 0;
 L1 : while (1) {
  if (($i$0 | 0) >= 4) {
   label = 10;
   break;
  }
  $4 = $i$0 + 1 | 0;
  $6 = HEAP32[$vertex + ($4 << 2) >> 2] | 0;
  $8 = HEAP32[$vertex + ($i$0 << 2) >> 2] | 0;
  $13 = +($6 + 1 - $8 | 0) * .05 + .5;
  $16 = ~~(+($8 | 0) + $13);
  $20 = ~~(+($6 | 0) - $13) - $16 | 0;
  $22 = _arMatrixAlloc($20 + 1 | 0, 2) | 0;
  $j$0 = 0;
  while (1) {
   if (($j$0 | 0) > ($20 | 0)) break;
   $24 = $j$0 + $16 | 0;
   if ((_arParamObserv2IdealLTf($paramLTf, +(HEAP32[$x_coord + ($24 << 2) >> 2] | 0), +(HEAP32[$y_coord + ($24 << 2) >> 2] | 0), $m0, $m1) | 0) < 0) {
    $$lcssa = $22;
    label = 6;
    break L1;
   }
   $35 = $j$0 << 1;
   $36 = HEAP32[$22 >> 2] | 0;
   HEAPF64[$36 + ($35 << 3) >> 3] = +HEAPF32[$m0 >> 2];
   HEAPF64[$36 + (($35 | 1) << 3) >> 3] = +HEAPF32[$m1 >> 2];
   $j$0 = $j$0 + 1 | 0;
  }
  if ((_arMatrixPCA($22, $2, $0, $1) | 0) < 0) {
   $96 = $22;
   label = 14;
   break;
  }
  $45 = HEAP32[$2 >> 2] | 0;
  $47 = +HEAPF64[$45 + 8 >> 3];
  HEAPF64[$line + ($i$0 * 24 | 0) >> 3] = $47;
  $50 = -+HEAPF64[$45 >> 3];
  HEAPF64[$line + ($i$0 * 24 | 0) + 8 >> 3] = $50;
  $52 = HEAP32[$1 >> 2] | 0;
  HEAPF64[$line + ($i$0 * 24 | 0) + 16 >> 3] = -($47 * +HEAPF64[$52 >> 3] + +HEAPF64[$52 + 8 >> 3] * $50);
  _arMatrixFree($22) | 0;
  $i$0 = $4;
 }
 L10 : do if ((label | 0) == 6) {
  $96 = $$lcssa;
  label = 14;
 } else if ((label | 0) == 10) {
  _arMatrixFree($2) | 0;
  _arVecFree($1) | 0;
  _arVecFree($0) | 0;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) >= 4) {
    $$01 = 0;
    break L10;
   }
   $63 = ($i$1 + 3 | 0) % 4 | 0;
   $64 = $line + ($63 * 24 | 0) | 0;
   $67 = +HEAPF64[$line + ($i$1 * 24 | 0) + 8 >> 3];
   $69 = $line + ($i$1 * 24 | 0) | 0;
   $72 = +HEAPF64[$line + ($63 * 24 | 0) + 8 >> 3];
   $74 = +HEAPF64[$64 >> 3] * $67 - +HEAPF64[$69 >> 3] * $72;
   if (+Math_abs(+$74) < .0001) {
    $$01 = -1;
    break L10;
   }
   $77 = $line + ($i$1 * 24 | 0) + 16 | 0;
   $80 = $line + ($63 * 24 | 0) + 16 | 0;
   HEAPF64[$v + ($i$1 << 4) >> 3] = ($72 * +HEAPF64[$77 >> 3] - $67 * +HEAPF64[$80 >> 3]) / $74;
   HEAPF64[$v + ($i$1 << 4) + 8 >> 3] = (+HEAPF64[$69 >> 3] * +HEAPF64[$80 >> 3] - +HEAPF64[$64 >> 3] * +HEAPF64[$77 >> 3]) / $74;
   $i$1 = $i$1 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 14) {
  _arMatrixFree($96) | 0;
  _arMatrixFree($2) | 0;
  _arVecFree($1) | 0;
  _arVecFree($0) | 0;
  $$01 = -1;
 }
 STACKTOP = sp;
 return $$01 | 0;
}

function _arglCameraFrustum($cparam, $focalmin, $focalmax, $m_projection) {
 $cparam = $cparam | 0;
 $focalmin = +$focalmin;
 $focalmax = +$focalmax;
 $m_projection = $m_projection | 0;
 var $0 = 0, $13 = 0, $2 = 0, $26 = 0.0, $39 = 0, $51 = 0, $53 = 0.0, $60 = 0, $64 = 0.0, $66 = 0.0, $68 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $9 = 0.0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $icpara = 0, $j$0 = 0, $j$1 = 0, $p = 0, $q = 0, $trans = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $icpara = sp + 296 | 0;
 $trans = sp + 200 | 0;
 $p = sp + 128 | 0;
 $q = sp;
 $0 = HEAP32[$cparam >> 2] | 0;
 $2 = HEAP32[$cparam + 4 >> 2] | 0;
 L1 : do if ((_arParamDecompMat($cparam + 8 | 0, $icpara, $trans) | 0) < 0) _arLog(3, 5044, sp + 392 | 0); else {
  $7 = +($2 + -1 | 0);
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 4) break;
   $13 = $icpara + 32 + ($i$0 << 3) | 0;
   HEAPF64[$13 >> 3] = $7 * +HEAPF64[$icpara + 64 + ($i$0 << 3) >> 3] - +HEAPF64[$13 >> 3];
   $i$0 = $i$0 + 1 | 0;
  }
  $9 = +HEAPF64[$icpara + 80 >> 3];
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) == 3) break; else $j$0 = 0;
   while (1) {
    if (($j$0 | 0) == 3) break;
    HEAPF64[$p + ($i$1 * 24 | 0) + ($j$0 << 3) >> 3] = +HEAPF64[$icpara + ($i$1 << 5) + ($j$0 << 3) >> 3] / $9;
    $j$0 = $j$0 + 1 | 0;
   }
   $i$1 = $i$1 + 1 | 0;
  }
  $26 = +($0 + -1 | 0);
  HEAPF64[$q >> 3] = +HEAPF64[$p >> 3] * 2.0 / $26;
  HEAPF64[$q + 8 >> 3] = +HEAPF64[$p + 8 >> 3] * 2.0 / $26;
  HEAPF64[$q + 16 >> 3] = +HEAPF64[$p + 16 >> 3] * 2.0 / $26 + -1.0;
  $39 = $q + 24 | 0;
  HEAP32[$39 >> 2] = 0;
  HEAP32[$39 + 4 >> 2] = 0;
  HEAP32[$39 + 8 >> 2] = 0;
  HEAP32[$39 + 12 >> 2] = 0;
  HEAPF64[$q + 40 >> 3] = +HEAPF64[$p + 32 >> 3] * 2.0 / $7;
  HEAPF64[$q + 48 >> 3] = +HEAPF64[$p + 40 >> 3] * 2.0 / $7 + -1.0;
  $51 = $q + 56 | 0;
  $53 = $focalmax - $focalmin;
  HEAP32[$51 >> 2] = 0;
  HEAP32[$51 + 4 >> 2] = 0;
  HEAP32[$51 + 8 >> 2] = 0;
  HEAP32[$51 + 12 >> 2] = 0;
  HEAP32[$51 + 16 >> 2] = 0;
  HEAP32[$51 + 20 >> 2] = 0;
  HEAPF64[$q + 80 >> 3] = ($focalmin + $focalmax) / $53;
  HEAPF64[$q + 88 >> 3] = $focalmax * -2.0 * $focalmin / $53;
  $60 = $q + 96 | 0;
  HEAP32[$60 >> 2] = 0;
  HEAP32[$60 + 4 >> 2] = 0;
  HEAP32[$60 + 8 >> 2] = 0;
  HEAP32[$60 + 12 >> 2] = 0;
  HEAPF64[$q + 112 >> 3] = 1.0;
  HEAPF64[$q + 120 >> 3] = 0.0;
  $64 = +HEAPF64[$trans + 24 >> 3];
  $66 = +HEAPF64[$trans + 56 >> 3];
  $68 = +HEAPF64[$trans + 88 >> 3];
  $i$2 = 0;
  while (1) {
   if (($i$2 | 0) == 4) break L1;
   $70 = +HEAPF64[$q + ($i$2 << 5) >> 3];
   $71 = $q + ($i$2 << 5) + 8 | 0;
   $72 = $q + ($i$2 << 5) + 16 | 0;
   $j$1 = 0;
   while (1) {
    if (($j$1 | 0) == 3) break;
    HEAPF64[$m_projection + (($j$1 << 2) + $i$2 << 3) >> 3] = $70 * +HEAPF64[$trans + ($j$1 << 3) >> 3] + +HEAPF64[$71 >> 3] * +HEAPF64[$trans + 32 + ($j$1 << 3) >> 3] + +HEAPF64[$72 >> 3] * +HEAPF64[$trans + 64 + ($j$1 << 3) >> 3];
    $j$1 = $j$1 + 1 | 0;
   }
   HEAPF64[$m_projection + ($i$2 + 12 << 3) >> 3] = +HEAPF64[$q + ($i$2 << 5) + 24 >> 3] + ($70 * $64 + +HEAPF64[$71 >> 3] * $66 + +HEAPF64[$72 >> 3] * $68);
   $i$2 = $i$2 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _arImageProcLumaHistAndBoxFilterWithBias($ipi, $dataPtr, $boxSize, $bias) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 $boxSize = $boxSize | 0;
 $bias = $bias | 0;
 var $$0 = 0, $$lcssa = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $23 = 0, $25 = 0, $40 = 0, $48 = 0, $5 = 0, $51 = 0, $7 = 0, $count$0 = 0, $count$0$lcssa = 0, $count$1 = 0, $count$2 = 0, $count$3 = 0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $kernel_i$0 = 0, $kernel_j$0 = 0, $val$0 = 0, $val$0$lcssa = 0, $val$1 = 0, $val$2 = 0, $val$3 = 0;
 $0 = _arImageProcLumaHist($ipi, $dataPtr) | 0;
 L1 : do if (($0 | 0) < 0) $$0 = $0; else {
  $2 = $ipi + 4 | 0;
  if (!(HEAP32[$2 >> 2] | 0)) {
   $5 = $ipi + 8 | 0;
   $7 = $ipi + 12 | 0;
   $10 = _malloc(Math_imul(HEAP32[$7 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) | 0;
   HEAP32[$2 >> 2] = $10;
   if (!$10) {
    $$0 = -1;
    break;
   } else {
    $$pre$phi7Z2D = $5;
    $$pre$phiZ2D = $7;
   }
  } else {
   $$pre$phi7Z2D = $ipi + 8 | 0;
   $$pre$phiZ2D = $ipi + 12 | 0;
  }
  $12 = $boxSize >> 1;
  $13 = 0 - $12 | 0;
  $j$0 = 0;
  while (1) {
   $14 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   if (($j$0 | 0) < ($14 | 0)) $i$0 = 0; else {
    $$lcssa = $14;
    break;
   }
   while (1) {
    $16 = HEAP32[$$pre$phi7Z2D >> 2] | 0;
    if (($i$0 | 0) < ($16 | 0)) {
     $count$0 = 0;
     $kernel_j$0 = $13;
     $val$0 = 0;
    } else break;
    while (1) {
     if (($kernel_j$0 | 0) > ($12 | 0)) {
      $count$0$lcssa = $count$0;
      $val$0$lcssa = $val$0;
      break;
     }
     $19 = $kernel_j$0 + $j$0 | 0;
     L14 : do if (($19 | 0) < 0) {
      $count$3 = $count$0;
      $val$3 = $val$0;
     } else if (($19 | 0) < (HEAP32[$$pre$phiZ2D >> 2] | 0)) {
      $23 = Math_imul($16, $19) | 0;
      $count$1 = $count$0;
      $kernel_i$0 = $13;
      $val$1 = $val$0;
      while (1) {
       if (($kernel_i$0 | 0) > ($12 | 0)) {
        $count$3 = $count$1;
        $val$3 = $val$1;
        break L14;
       }
       $25 = $kernel_i$0 + $i$0 | 0;
       if (($25 | 0) > -1 & ($25 | 0) < ($16 | 0)) {
        $count$2 = $count$1 + 1 | 0;
        $val$2 = (HEAPU8[(HEAP32[$ipi >> 2] | 0) + ($23 + $25) >> 0] | 0) + $val$1 | 0;
       } else {
        $count$2 = $count$1;
        $val$2 = $val$1;
       }
       $count$1 = $count$2;
       $kernel_i$0 = $kernel_i$0 + 1 | 0;
       $val$1 = $val$2;
      }
     } else {
      $count$3 = $count$0;
      $val$3 = $val$0;
     } while (0);
     $count$0 = $count$3;
     $kernel_j$0 = $kernel_j$0 + 1 | 0;
     $val$0 = $val$3;
    }
    $40 = (Math_imul($16, $j$0) | 0) + $i$0 | 0;
    HEAP8[(HEAP32[$2 >> 2] | 0) + $40 >> 0] = ($val$0$lcssa | 0) / ($count$0$lcssa | 0) | 0;
    $i$0 = $i$0 + 1 | 0;
   }
   $j$0 = $j$0 + 1 | 0;
  }
  if (!$bias) $$0 = 0; else {
   $48 = $$lcssa;
   $i$1 = 0;
   while (1) {
    if (($i$1 | 0) >= (Math_imul($48, HEAP32[$$pre$phi7Z2D >> 2] | 0) | 0)) {
     $$0 = 0;
     break L1;
    }
    $51 = (HEAP32[$2 >> 2] | 0) + $i$1 | 0;
    HEAP8[$51 >> 0] = (HEAPU8[$51 >> 0] | 0) + $bias;
    $48 = HEAP32[$$pre$phiZ2D >> 2] | 0;
    $i$1 = $i$1 + 1 | 0;
   }
  }
 } while (0);
 return $$0 | 0;
}

function ___stpncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa42 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa43 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa44 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $20 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $7 = 0, $8 = 0, $wd$0$lcssa = 0, $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0;
 $0 = $s;
 do if (!(($0 ^ $d) & 3)) {
  $7 = ($n | 0) != 0;
  L3 : do if ($7 & ($0 & 3 | 0) != 0) {
   $$031 = $n;
   $$0430 = $s;
   $$0629 = $d;
   while (1) {
    $8 = HEAP8[$$0430 >> 0] | 0;
    HEAP8[$$0629 >> 0] = $8;
    if (!($8 << 24 >> 24)) {
     $$0$lcssa42 = $$031;
     $$04$lcssa43 = $$0430;
     $$06$lcssa44 = $$0629;
     break L3;
    }
    $10 = $$031 + -1 | 0;
    $11 = $$0430 + 1 | 0;
    $12 = $$0629 + 1 | 0;
    $16 = ($10 | 0) != 0;
    if ($16 & ($11 & 3 | 0) != 0) {
     $$031 = $10;
     $$0430 = $11;
     $$0629 = $12;
    } else {
     $$0$lcssa = $10;
     $$04$lcssa = $11;
     $$06$lcssa = $12;
     $$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;
   $$04$lcssa = $s;
   $$06$lcssa = $d;
   $$lcssa = $7;
   label = 5;
  } while (0);
  if ((label | 0) == 5) if ($$lcssa) {
   $$0$lcssa42 = $$0$lcssa;
   $$04$lcssa43 = $$04$lcssa;
   $$06$lcssa44 = $$06$lcssa;
  } else {
   $$28 = $$06$lcssa;
   $$3 = 0;
   break;
  }
  if (!(HEAP8[$$04$lcssa43 >> 0] | 0)) {
   $$28 = $$06$lcssa44;
   $$3 = $$0$lcssa42;
  } else {
   L11 : do if ($$0$lcssa42 >>> 0 > 3) {
    $$117 = $$0$lcssa42;
    $wd$018 = $$06$lcssa44;
    $ws$019 = $$04$lcssa43;
    while (1) {
     $20 = HEAP32[$ws$019 >> 2] | 0;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009 | 0) {
      $$1$lcssa = $$117;
      $wd$0$lcssa = $wd$018;
      $ws$0$lcssa = $ws$019;
      break L11;
     }
     HEAP32[$wd$018 >> 2] = $20;
     $26 = $$117 + -4 | 0;
     $27 = $ws$019 + 4 | 0;
     $28 = $wd$018 + 4 | 0;
     if ($26 >>> 0 > 3) {
      $$117 = $26;
      $wd$018 = $28;
      $ws$019 = $27;
     } else {
      $$1$lcssa = $26;
      $wd$0$lcssa = $28;
      $ws$0$lcssa = $27;
      break;
     }
    }
   } else {
    $$1$lcssa = $$0$lcssa42;
    $wd$0$lcssa = $$06$lcssa44;
    $ws$0$lcssa = $$04$lcssa43;
   } while (0);
   $$15$ph = $ws$0$lcssa;
   $$17$ph = $wd$0$lcssa;
   $$2$ph = $$1$lcssa;
   label = 11;
  }
 } else {
  $$15$ph = $s;
  $$17$ph = $d;
  $$2$ph = $n;
  label = 11;
 } while (0);
 L16 : do if ((label | 0) == 11) if (!$$2$ph) {
  $$28 = $$17$ph;
  $$3 = 0;
 } else {
  $$1511 = $$15$ph;
  $$1710 = $$17$ph;
  $$212 = $$2$ph;
  while (1) {
   $31 = HEAP8[$$1511 >> 0] | 0;
   HEAP8[$$1710 >> 0] = $31;
   if (!($31 << 24 >> 24)) {
    $$28 = $$1710;
    $$3 = $$212;
    break L16;
   }
   $$212 = $$212 + -1 | 0;
   $35 = $$1710 + 1 | 0;
   if (!$$212) {
    $$28 = $35;
    $$3 = 0;
    break;
   } else {
    $$1511 = $$1511 + 1 | 0;
    $$1710 = $35;
   }
  }
 } while (0);
 _memset($$28 | 0, 0, $$3 | 0) | 0;
 return $$28 | 0;
}

function __ZNSt3__113unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$pn$i = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $28 = 0, $3 = 0, $31 = 0.0, $34 = 0.0, $4 = 0, $43 = 0, $45 = 0, $48 = 0, $51 = 0, $52 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $66 = 0, $67 = 0, $74 = 0, $__bc$0$i = 0, $__chash$0$i = 0, $__chash$1$i = 0, $__nd$0$i = 0, $__nd$1$i = 0, label = 0;
 $0 = HEAP32[$__k >> 2] | 0;
 $1 = $this + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($2 | 0) == 0;
 L1 : do if ($3) {
  $__chash$0$i = 0;
  label = 12;
 } else {
  $4 = $2 + -1 | 0;
  $6 = ($4 & $2 | 0) == 0;
  if ($6) $11 = $4 & $0; else $11 = ($0 >>> 0) % ($2 >>> 0) | 0;
  $12 = HEAP32[(HEAP32[$this >> 2] | 0) + ($11 << 2) >> 2] | 0;
  if (!$12) {
   $__chash$0$i = $11;
   label = 12;
  } else {
   $$pn$i = $12;
   while (1) {
    $__nd$0$i = HEAP32[$$pn$i >> 2] | 0;
    if (!$__nd$0$i) {
     $__chash$0$i = $11;
     label = 12;
     break L1;
    }
    $16 = HEAP32[$__nd$0$i + 4 >> 2] | 0;
    if ($6) $19 = $16 & $4; else $19 = ($16 >>> 0) % ($2 >>> 0) | 0;
    if (($19 | 0) != ($11 | 0)) {
     $__chash$0$i = $11;
     label = 12;
     break L1;
    }
    if ((HEAP32[$__nd$0$i + 8 >> 2] | 0) == ($0 | 0)) {
     $__nd$1$i = $__nd$0$i;
     break;
    } else $$pn$i = $__nd$0$i;
   }
  }
 } while (0);
 if ((label | 0) == 12) {
  $24 = __Znwj(200) | 0;
  HEAP32[$24 + 8 >> 2] = $0;
  _memset($24 + 16 | 0, 0, 184) | 0;
  HEAP32[$24 + 4 >> 2] = $0;
  HEAP32[$24 >> 2] = 0;
  $28 = $this + 12 | 0;
  $31 = +(((HEAP32[$28 >> 2] | 0) + 1 | 0) >>> 0);
  $34 = +HEAPF32[$this + 16 >> 2];
  do if ($3 | $31 > +($2 >>> 0) * $34) {
   if ($2 >>> 0 > 2) $43 = ($2 + -1 & $2 | 0) == 0; else $43 = 0;
   $45 = ($43 & 1 | $2 << 1) ^ 1;
   $48 = ~~+Math_ceil(+($31 / $34)) >>> 0;
   __ZNSt3__112__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($this, $45 >>> 0 < $48 >>> 0 ? $48 : $45);
   $51 = HEAP32[$1 >> 2] | 0;
   $52 = $51 + -1 | 0;
   if (!($52 & $51)) {
    $__bc$0$i = $51;
    $__chash$1$i = $52 & $0;
    break;
   } else {
    $__bc$0$i = $51;
    $__chash$1$i = ($0 >>> 0) % ($51 >>> 0) | 0;
    break;
   }
  } else {
   $__bc$0$i = $2;
   $__chash$1$i = $__chash$0$i;
  } while (0);
  $58 = (HEAP32[$this >> 2] | 0) + ($__chash$1$i << 2) | 0;
  $59 = HEAP32[$58 >> 2] | 0;
  if (!$59) {
   $61 = $this + 8 | 0;
   HEAP32[$24 >> 2] = HEAP32[$61 >> 2];
   HEAP32[$61 >> 2] = $24;
   HEAP32[$58 >> 2] = $61;
   $63 = HEAP32[$24 >> 2] | 0;
   if ($63 | 0) {
    $66 = HEAP32[$63 + 4 >> 2] | 0;
    $67 = $__bc$0$i + -1 | 0;
    if (!($67 & $__bc$0$i)) $74 = $66 & $67; else $74 = ($66 >>> 0) % ($__bc$0$i >>> 0) | 0;
    HEAP32[(HEAP32[$this >> 2] | 0) + ($74 << 2) >> 2] = $24;
   }
  } else {
   HEAP32[$24 >> 2] = HEAP32[$59 >> 2];
   HEAP32[$59 >> 2] = $24;
  }
  HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
  $__nd$1$i = $24;
 }
 return $__nd$1$i + 16 | 0;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $__nbc) {
 $this = $this | 0;
 $__nbc = $__nbc | 0;
 var $$lcssa = 0, $$lcssa34 = 0, $$lcssa35 = 0, $0 = 0, $15 = 0, $16 = 0, $18 = 0, $23 = 0, $26 = 0, $29 = 0, $3 = 0, $32 = 0, $35 = 0, $36 = 0, $5 = 0, $50 = 0, $6 = 0, $8 = 0, $9 = 0, $__cp$0 = 0, $__cp$0$lcssa32 = 0, $__i$0 = 0, $__np$0 = 0, $__np$0$lcssa = 0, $__phash$0$ph$ph = 0, $__pp$0$ph = 0, $__pp$0$ph$lcssa36 = 0, $__pp$0$ph$ph = 0;
 $0 = $this + 4 | 0;
 L1 : do if (!$__nbc) {
  $50 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = 0;
  if ($50 | 0) __ZdlPv($50);
  HEAP32[$0 >> 2] = 0;
 } else {
  if ($__nbc >>> 0 > 1073741823) {
   $3 = ___cxa_allocate_exception(4) | 0;
   __ZNSt9bad_allocC2Ev($3);
   ___cxa_throw($3 | 0, 256, 6);
  }
  $5 = __Znwj($__nbc << 2) | 0;
  $6 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = $5;
  if ($6 | 0) __ZdlPv($6);
  HEAP32[$0 >> 2] = $__nbc;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) == ($__nbc | 0)) break;
   HEAP32[(HEAP32[$this >> 2] | 0) + ($__i$0 << 2) >> 2] = 0;
   $__i$0 = $__i$0 + 1 | 0;
  }
  $8 = $this + 8 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  if ($9 | 0) {
   $15 = HEAP32[$9 + 4 >> 2] | 0;
   $16 = $__nbc + -1 | 0;
   $18 = ($16 & $__nbc | 0) == 0;
   if ($18) $23 = $15 & $16; else $23 = ($15 >>> 0) % ($__nbc >>> 0) | 0;
   HEAP32[(HEAP32[$this >> 2] | 0) + ($23 << 2) >> 2] = $8;
   $__phash$0$ph$ph = $23;
   $__pp$0$ph$ph = $9;
   while (1) {
    $__pp$0$ph = $__pp$0$ph$ph;
    L24 : while (1) while (1) {
     $__cp$0 = HEAP32[$__pp$0$ph >> 2] | 0;
     if (!$__cp$0) break L1;
     $26 = HEAP32[$__cp$0 + 4 >> 2] | 0;
     if ($18) $29 = $26 & $16; else $29 = ($26 >>> 0) % ($__nbc >>> 0) | 0;
     if (($29 | 0) == ($__phash$0$ph$ph | 0)) {
      $__pp$0$ph = $__cp$0;
      continue L24;
     }
     $32 = (HEAP32[$this >> 2] | 0) + ($29 << 2) | 0;
     if (!(HEAP32[$32 >> 2] | 0)) {
      $$lcssa34 = $29;
      $$lcssa35 = $32;
      $__cp$0$lcssa32 = $__cp$0;
      $__pp$0$ph$lcssa36 = $__pp$0$ph;
      break L24;
     }
     $35 = $__cp$0 + 8 | 0;
     $__np$0 = $__cp$0;
     while (1) {
      $36 = HEAP32[$__np$0 >> 2] | 0;
      if (!$36) {
       $$lcssa = $36;
       $__np$0$lcssa = $__np$0;
       break;
      }
      if ((HEAP32[$35 >> 2] | 0) == (HEAP32[$36 + 8 >> 2] | 0)) $__np$0 = $36; else {
       $$lcssa = $36;
       $__np$0$lcssa = $__np$0;
       break;
      }
     }
     HEAP32[$__pp$0$ph >> 2] = $$lcssa;
     HEAP32[$__np$0$lcssa >> 2] = HEAP32[HEAP32[(HEAP32[$this >> 2] | 0) + ($29 << 2) >> 2] >> 2];
     HEAP32[HEAP32[(HEAP32[$this >> 2] | 0) + ($29 << 2) >> 2] >> 2] = $__cp$0;
    }
    HEAP32[$$lcssa35 >> 2] = $__pp$0$ph$lcssa36;
    $__phash$0$ph$ph = $$lcssa34;
    $__pp$0$ph$ph = $__cp$0$lcssa32;
   }
  }
 } while (0);
 return;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $__nbc) {
 $this = $this | 0;
 $__nbc = $__nbc | 0;
 var $$lcssa = 0, $$lcssa34 = 0, $$lcssa35 = 0, $0 = 0, $15 = 0, $16 = 0, $18 = 0, $23 = 0, $26 = 0, $29 = 0, $3 = 0, $32 = 0, $35 = 0, $36 = 0, $5 = 0, $50 = 0, $6 = 0, $8 = 0, $9 = 0, $__cp$0 = 0, $__cp$0$lcssa32 = 0, $__i$0 = 0, $__np$0 = 0, $__np$0$lcssa = 0, $__phash$0$ph$ph = 0, $__pp$0$ph = 0, $__pp$0$ph$lcssa36 = 0, $__pp$0$ph$ph = 0;
 $0 = $this + 4 | 0;
 L1 : do if (!$__nbc) {
  $50 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = 0;
  if ($50 | 0) __ZdlPv($50);
  HEAP32[$0 >> 2] = 0;
 } else {
  if ($__nbc >>> 0 > 1073741823) {
   $3 = ___cxa_allocate_exception(4) | 0;
   __ZNSt9bad_allocC2Ev($3);
   ___cxa_throw($3 | 0, 256, 6);
  }
  $5 = __Znwj($__nbc << 2) | 0;
  $6 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = $5;
  if ($6 | 0) __ZdlPv($6);
  HEAP32[$0 >> 2] = $__nbc;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) == ($__nbc | 0)) break;
   HEAP32[(HEAP32[$this >> 2] | 0) + ($__i$0 << 2) >> 2] = 0;
   $__i$0 = $__i$0 + 1 | 0;
  }
  $8 = $this + 8 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  if ($9 | 0) {
   $15 = HEAP32[$9 + 4 >> 2] | 0;
   $16 = $__nbc + -1 | 0;
   $18 = ($16 & $__nbc | 0) == 0;
   if ($18) $23 = $15 & $16; else $23 = ($15 >>> 0) % ($__nbc >>> 0) | 0;
   HEAP32[(HEAP32[$this >> 2] | 0) + ($23 << 2) >> 2] = $8;
   $__phash$0$ph$ph = $23;
   $__pp$0$ph$ph = $9;
   while (1) {
    $__pp$0$ph = $__pp$0$ph$ph;
    L24 : while (1) while (1) {
     $__cp$0 = HEAP32[$__pp$0$ph >> 2] | 0;
     if (!$__cp$0) break L1;
     $26 = HEAP32[$__cp$0 + 4 >> 2] | 0;
     if ($18) $29 = $26 & $16; else $29 = ($26 >>> 0) % ($__nbc >>> 0) | 0;
     if (($29 | 0) == ($__phash$0$ph$ph | 0)) {
      $__pp$0$ph = $__cp$0;
      continue L24;
     }
     $32 = (HEAP32[$this >> 2] | 0) + ($29 << 2) | 0;
     if (!(HEAP32[$32 >> 2] | 0)) {
      $$lcssa34 = $29;
      $$lcssa35 = $32;
      $__cp$0$lcssa32 = $__cp$0;
      $__pp$0$ph$lcssa36 = $__pp$0$ph;
      break L24;
     }
     $35 = $__cp$0 + 8 | 0;
     $__np$0 = $__cp$0;
     while (1) {
      $36 = HEAP32[$__np$0 >> 2] | 0;
      if (!$36) {
       $$lcssa = $36;
       $__np$0$lcssa = $__np$0;
       break;
      }
      if ((HEAP32[$35 >> 2] | 0) == (HEAP32[$36 + 8 >> 2] | 0)) $__np$0 = $36; else {
       $$lcssa = $36;
       $__np$0$lcssa = $__np$0;
       break;
      }
     }
     HEAP32[$__pp$0$ph >> 2] = $$lcssa;
     HEAP32[$__np$0$lcssa >> 2] = HEAP32[HEAP32[(HEAP32[$this >> 2] | 0) + ($29 << 2) >> 2] >> 2];
     HEAP32[HEAP32[(HEAP32[$this >> 2] | 0) + ($29 << 2) >> 2] >> 2] = $__cp$0;
    }
    HEAP32[$$lcssa35 >> 2] = $__pp$0$ph$lcssa36;
    $__phash$0$ph$ph = $$lcssa34;
    $__pp$0$ph$ph = $__cp$0$lcssa32;
   }
  }
 } while (0);
 return;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $20 = 0, $25 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $49 = 0, $5 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iovs = sp + 32 | 0;
 $0 = $f + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$iovs >> 2] = $1;
 $3 = $f + 20 | 0;
 $5 = (HEAP32[$3 >> 2] | 0) - $1 | 0;
 HEAP32[$iovs + 4 >> 2] = $5;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $9 = $f + 60 | 0;
 $10 = $f + 44 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $5 + $len | 0;
 while (1) {
  if (!(HEAP32[4166] | 0)) {
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $iov$0;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $iovcnt$0;
   $cnt$0 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
  } else {
   _pthread_cleanup_push(14, $f | 0);
   HEAP32[$vararg_buffer >> 2] = HEAP32[$9 >> 2];
   HEAP32[$vararg_buffer + 4 >> 2] = $iov$0;
   HEAP32[$vararg_buffer + 8 >> 2] = $iovcnt$0;
   $15 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  if (($rem$0 | 0) == ($cnt$0 | 0)) {
   label = 6;
   break;
  }
  if (($cnt$0 | 0) < 0) {
   $iov$0$lcssa11 = $iov$0;
   $iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = $rem$0 - $cnt$0 | 0;
  $36 = HEAP32[$iov$0 + 4 >> 2] | 0;
  if ($cnt$0 >>> 0 > $36 >>> 0) {
   $38 = HEAP32[$10 >> 2] | 0;
   HEAP32[$0 >> 2] = $38;
   HEAP32[$3 >> 2] = $38;
   $49 = HEAP32[$iov$0 + 12 >> 2] | 0;
   $cnt$1 = $cnt$0 - $36 | 0;
   $iov$1 = $iov$0 + 8 | 0;
   $iovcnt$1 = $iovcnt$0 + -1 | 0;
  } else if (($iovcnt$0 | 0) == 2) {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $cnt$0;
   $49 = $36;
   $cnt$1 = $cnt$0;
   $iov$1 = $iov$0;
   $iovcnt$1 = 2;
  } else {
   $49 = $36;
   $cnt$1 = $cnt$0;
   $iov$1 = $iov$0;
   $iovcnt$1 = $iovcnt$0;
  }
  HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$1;
  HEAP32[$iov$1 + 4 >> 2] = $49 - $cnt$1;
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$1;
  $rem$0 = $34;
 }
 if ((label | 0) == 6) {
  $20 = HEAP32[$10 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $20 + (HEAP32[$f + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$0 >> 2] = $25;
  HEAP32[$3 >> 2] = $25;
  $$0 = $len;
 } else if ((label | 0) == 8) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$0$lcssa12 | 0) == 2) $$0 = 0; else $$0 = $len - (HEAP32[$iov$0$lcssa11 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _pop_arg_526($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $105 = 0, $106 = 0.0, $112 = 0, $113 = 0.0, $13 = 0, $14 = 0, $17 = 0, $26 = 0, $27 = 0, $28 = 0, $37 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $53 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $79 = 0, $80 = 0, $82 = 0, $85 = 0, $94 = 0, $95 = 0, $96 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $6 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $7 = HEAP32[$6 >> 2] | 0;
   HEAP32[$ap >> 2] = $6 + 4;
   HEAP32[$arg >> 2] = $7;
   break L1;
   break;
  }
 case 10:
  {
   $13 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $14 = HEAP32[$13 >> 2] | 0;
   HEAP32[$ap >> 2] = $13 + 4;
   $17 = $arg;
   HEAP32[$17 >> 2] = $14;
   HEAP32[$17 + 4 >> 2] = (($14 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $26 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $27 = HEAP32[$26 >> 2] | 0;
   HEAP32[$ap >> 2] = $26 + 4;
   $28 = $arg;
   HEAP32[$28 >> 2] = $27;
   HEAP32[$28 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $37 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $38 = $37;
   $40 = HEAP32[$38 >> 2] | 0;
   $43 = HEAP32[$38 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $37 + 8;
   $44 = $arg;
   HEAP32[$44 >> 2] = $40;
   HEAP32[$44 + 4 >> 2] = $43;
   break L1;
   break;
  }
 case 13:
  {
   $53 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $54 = HEAP32[$53 >> 2] | 0;
   HEAP32[$ap >> 2] = $53 + 4;
   $56 = ($54 & 65535) << 16 >> 16;
   $59 = $arg;
   HEAP32[$59 >> 2] = $56;
   HEAP32[$59 + 4 >> 2] = (($56 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $68 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $69 = HEAP32[$68 >> 2] | 0;
   HEAP32[$ap >> 2] = $68 + 4;
   $70 = $arg;
   HEAP32[$70 >> 2] = $69 & 65535;
   HEAP32[$70 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $79 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $80 = HEAP32[$79 >> 2] | 0;
   HEAP32[$ap >> 2] = $79 + 4;
   $82 = ($80 & 255) << 24 >> 24;
   $85 = $arg;
   HEAP32[$85 >> 2] = $82;
   HEAP32[$85 + 4 >> 2] = (($82 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $94 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $95 = HEAP32[$94 >> 2] | 0;
   HEAP32[$ap >> 2] = $94 + 4;
   $96 = $arg;
   HEAP32[$96 >> 2] = $95 & 255;
   HEAP32[$96 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $105 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $106 = +HEAPF64[$105 >> 3];
   HEAP32[$ap >> 2] = $105 + 8;
   HEAPF64[$arg >> 3] = $106;
   break L1;
   break;
  }
 case 18:
  {
   $112 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $113 = +HEAPF64[$112 >> 3];
   HEAP32[$ap >> 2] = $112 + 8;
   HEAPF64[$arg >> 3] = $113;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _arParamChangeSize($source, $xsize, $ysize, $newparam) {
 $source = $source | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $newparam = $newparam | 0;
 var $$0 = 0, $23 = 0, $3 = 0.0, $8 = 0.0, $i$0 = 0, label = 0;
 $3 = +($xsize | 0) / +(HEAP32[$source >> 2] | 0);
 $8 = +($ysize | 0) / +(HEAP32[$source + 4 >> 2] | 0);
 HEAP32[$newparam >> 2] = $xsize;
 HEAP32[$newparam + 4 >> 2] = $ysize;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 4) break;
  HEAPF64[$newparam + 8 + ($i$0 << 3) >> 3] = $3 * +HEAPF64[$source + 8 + ($i$0 << 3) >> 3];
  HEAPF64[$newparam + 40 + ($i$0 << 3) >> 3] = $8 * +HEAPF64[$source + 40 + ($i$0 << 3) >> 3];
  HEAPF64[$newparam + 72 + ($i$0 << 3) >> 3] = +HEAPF64[$source + 72 + ($i$0 << 3) >> 3];
  $i$0 = $i$0 + 1 | 0;
 }
 $23 = HEAP32[$source + 176 >> 2] | 0;
 switch ($23 | 0) {
 case 4:
  {
   HEAPF64[$newparam + 104 >> 3] = +HEAPF64[$source + 104 >> 3];
   HEAPF64[$newparam + 112 >> 3] = +HEAPF64[$source + 112 >> 3];
   HEAPF64[$newparam + 120 >> 3] = +HEAPF64[$source + 120 >> 3];
   HEAPF64[$newparam + 128 >> 3] = +HEAPF64[$source + 128 >> 3];
   HEAPF64[$newparam + 136 >> 3] = $3 * +HEAPF64[$source + 136 >> 3];
   HEAPF64[$newparam + 144 >> 3] = $8 * +HEAPF64[$source + 144 >> 3];
   HEAPF64[$newparam + 152 >> 3] = $3 * +HEAPF64[$source + 152 >> 3];
   HEAPF64[$newparam + 160 >> 3] = $8 * +HEAPF64[$source + 160 >> 3];
   HEAPF64[$newparam + 168 >> 3] = +HEAPF64[$source + 168 >> 3];
   label = 9;
   break;
  }
 case 3:
  {
   HEAPF64[$newparam + 104 >> 3] = $3 * +HEAPF64[$source + 104 >> 3];
   HEAPF64[$newparam + 112 >> 3] = $8 * +HEAPF64[$source + 112 >> 3];
   HEAPF64[$newparam + 120 >> 3] = +HEAPF64[$source + 120 >> 3];
   HEAPF64[$newparam + 128 >> 3] = +HEAPF64[$source + 128 >> 3];
   HEAPF64[$newparam + 136 >> 3] = +HEAPF64[$source + 136 >> 3] / ($3 * $8);
   HEAPF64[$newparam + 144 >> 3] = +HEAPF64[$source + 144 >> 3] / ($8 * ($3 * $3 * $8));
   label = 9;
   break;
  }
 case 2:
  {
   HEAPF64[$newparam + 104 >> 3] = $3 * +HEAPF64[$source + 104 >> 3];
   HEAPF64[$newparam + 112 >> 3] = $8 * +HEAPF64[$source + 112 >> 3];
   HEAPF64[$newparam + 120 >> 3] = +HEAPF64[$source + 120 >> 3];
   HEAPF64[$newparam + 128 >> 3] = +HEAPF64[$source + 128 >> 3] / ($3 * $8);
   HEAPF64[$newparam + 136 >> 3] = +HEAPF64[$source + 136 >> 3] / ($8 * ($3 * $3 * $8));
   label = 9;
   break;
  }
 case 1:
  {
   HEAPF64[$newparam + 104 >> 3] = $3 * +HEAPF64[$source + 104 >> 3];
   HEAPF64[$newparam + 112 >> 3] = $8 * +HEAPF64[$source + 112 >> 3];
   HEAPF64[$newparam + 120 >> 3] = +HEAPF64[$source + 120 >> 3];
   HEAPF64[$newparam + 128 >> 3] = +HEAPF64[$source + 128 >> 3] / ($3 * $8);
   label = 9;
   break;
  }
 default:
  $$0 = -1;
 }
 if ((label | 0) == 9) {
  HEAP32[$newparam + 176 >> 2] = $23;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _icpUpdateMat($matXw2Xc, $dS) {
 $matXw2Xc = $matXw2Xc | 0;
 $dS = $dS | 0;
 var $$sink$i = 0.0, $$sink1$i = 0.0, $0 = 0.0, $11 = 0.0, $16 = 0.0, $18 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $33 = 0.0, $34 = 0.0, $45 = 0.0, $46 = 0.0, $59 = 0, $60 = 0, $61 = 0, $7 = 0.0, $80 = 0, $9 = 0.0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0, $mat = 0, $mat2 = 0, $q$sroa$0$0 = 0.0, $q$sroa$11$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $mat = sp + 96 | 0;
 $mat2 = sp;
 $0 = +HEAPF64[$dS >> 3];
 $3 = +HEAPF64[$dS + 8 >> 3];
 $7 = +HEAPF64[$dS + 16 >> 3];
 $9 = $0 * $0 + $3 * $3 + $7 * $7;
 if ($9 == 0.0) {
  $$sink$i = 0.0;
  $$sink1$i = 0.0;
  $q$sroa$0$0 = 1.0;
  $q$sroa$11$0 = 0.0;
 } else {
  $11 = +Math_sqrt(+$9);
  $$sink$i = $11;
  $$sink1$i = $7 / $11;
  $q$sroa$0$0 = $0 / $11;
  $q$sroa$11$0 = $3 / $11;
 }
 $16 = +HEAPF64[$dS + 24 >> 3];
 $18 = +HEAPF64[$dS + 32 >> 3];
 $20 = +HEAPF64[$dS + 40 >> 3];
 $21 = +Math_cos(+$$sink$i);
 $22 = 1.0 - $21;
 $23 = +Math_sin(+$$sink$i);
 HEAPF64[$mat >> 3] = $21 + $q$sroa$0$0 * $q$sroa$0$0 * $22;
 $28 = $q$sroa$11$0 * $q$sroa$0$0 * $22;
 $29 = $$sink1$i * $23;
 HEAPF64[$mat + 8 >> 3] = $28 - $29;
 $33 = $q$sroa$0$0 * $$sink1$i * $22;
 $34 = $q$sroa$11$0 * $23;
 HEAPF64[$mat + 16 >> 3] = $33 + $34;
 HEAPF64[$mat + 24 >> 3] = $16;
 HEAPF64[$mat + 32 >> 3] = $28 + $29;
 HEAPF64[$mat + 40 >> 3] = $21 + $q$sroa$11$0 * $q$sroa$11$0 * $22;
 $45 = $q$sroa$11$0 * $$sink1$i * $22;
 $46 = $q$sroa$0$0 * $23;
 HEAPF64[$mat + 48 >> 3] = $45 - $46;
 HEAPF64[$mat + 56 >> 3] = $18;
 HEAPF64[$mat + 64 >> 3] = $33 - $34;
 HEAPF64[$mat + 72 >> 3] = $45 + $46;
 HEAPF64[$mat + 80 >> 3] = $21 + $$sink1$i * $$sink1$i * $22;
 HEAPF64[$mat + 88 >> 3] = $20;
 $j$0 = 0;
 while (1) {
  if (($j$0 | 0) == 3) {
   $j$1 = 0;
   break;
  }
  $59 = $matXw2Xc + ($j$0 << 5) | 0;
  $60 = $matXw2Xc + ($j$0 << 5) + 8 | 0;
  $61 = $matXw2Xc + ($j$0 << 5) + 16 | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 4) break;
   HEAPF64[$mat2 + ($j$0 << 5) + ($i$0 << 3) >> 3] = +HEAPF64[$59 >> 3] * +HEAPF64[$mat + ($i$0 << 3) >> 3] + +HEAPF64[$60 >> 3] * +HEAPF64[$mat + 32 + ($i$0 << 3) >> 3] + +HEAPF64[$61 >> 3] * +HEAPF64[$mat + 64 + ($i$0 << 3) >> 3];
   $i$0 = $i$0 + 1 | 0;
  }
  $80 = $mat2 + ($j$0 << 5) + 24 | 0;
  HEAPF64[$80 >> 3] = +HEAPF64[$matXw2Xc + ($j$0 << 5) + 24 >> 3] + +HEAPF64[$80 >> 3];
  $j$0 = $j$0 + 1 | 0;
 }
 while (1) {
  if (($j$1 | 0) == 3) break; else $i$1 = 0;
  while (1) {
   if (($i$1 | 0) == 4) break;
   HEAPF64[$matXw2Xc + ($j$1 << 5) + ($i$1 << 3) >> 3] = +HEAPF64[$mat2 + ($j$1 << 5) + ($i$1 << 3) >> 3];
   $i$1 = $i$1 + 1 | 0;
  }
  $j$1 = $j$1 + 1 | 0;
 }
 STACKTOP = sp;
 return 0;
}

function _arPattCreateHandle2($pattSize, $patternCountMax) {
 $pattSize = $pattSize | 0;
 $patternCountMax = $patternCountMax | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $7 = 0, $i$0 = 0, $j$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer13 = sp + 56 | 0;
 $vararg_buffer11 = sp + 48 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (($pattSize + -16 | 0) >>> 0 > 48 | ($patternCountMax | 0) < 1) $$0 = 0; else {
  $2 = _malloc(32) | 0;
  if (!$2) {
   _arLog(3, 4491, $vararg_buffer);
   _exit(1);
  }
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = $patternCountMax;
  HEAP32[$2 + 28 >> 2] = $pattSize;
  $7 = _malloc($patternCountMax << 2) | 0;
  HEAP32[$2 + 8 >> 2] = $7;
  if (!$7) {
   _arLog(3, 4491, $vararg_buffer1);
   _exit(1);
  }
  $10 = $patternCountMax << 4;
  $11 = _malloc($10) | 0;
  HEAP32[$2 + 12 >> 2] = $11;
  if (!$11) {
   _arLog(3, 4491, $vararg_buffer3);
   _exit(1);
  }
  $14 = _malloc($10) | 0;
  $15 = $2 + 20 | 0;
  HEAP32[$15 >> 2] = $14;
  if (!$14) {
   _arLog(3, 4491, $vararg_buffer5);
   _exit(1);
  }
  $17 = $patternCountMax << 5;
  $18 = _malloc($17) | 0;
  HEAP32[$2 + 16 >> 2] = $18;
  if (!$18) {
   _arLog(3, 4491, $vararg_buffer7);
   _exit(1);
  }
  $21 = _malloc($17) | 0;
  HEAP32[$2 + 24 >> 2] = $21;
  if (!$21) {
   _arLog(3, 4491, $vararg_buffer9);
   _exit(1);
  }
  $24 = Math_imul($pattSize, $pattSize) | 0;
  $25 = $24 * 12 | 0;
  $26 = $24 << 2;
  $i$0 = 0;
  L21 : while (1) {
   if (($i$0 | 0) >= ($patternCountMax | 0)) {
    $$0 = $2;
    break L1;
   }
   HEAP32[$7 + ($i$0 << 2) >> 2] = 0;
   $29 = $i$0 << 2;
   $j$0 = 0;
   while (1) {
    if (($j$0 | 0) >= 4) break;
    $31 = _malloc($25) | 0;
    $32 = $j$0 + $29 | 0;
    HEAP32[$11 + ($32 << 2) >> 2] = $31;
    if (!$31) {
     label = 19;
     break L21;
    }
    $35 = _malloc($26) | 0;
    HEAP32[(HEAP32[$15 >> 2] | 0) + ($32 << 2) >> 2] = $35;
    if (!$35) {
     label = 21;
     break L21;
    } else $j$0 = $j$0 + 1 | 0;
   }
   $i$0 = $i$0 + 1 | 0;
  }
  if ((label | 0) == 19) {
   _arLog(3, 4491, $vararg_buffer11);
   _exit(1);
  } else if ((label | 0) == 21) {
   _arLog(3, 4491, $vararg_buffer13);
   _exit(1);
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$15 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $27 = 0, $3 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 40 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 12 | 0;
 $3 = sp;
 L1 : do if (($last - $first | 0) > 3) if ((HEAP8[$first >> 0] | 0) == 68) {
  switch (HEAP8[$first + 1 >> 0] | 0) {
  case 84:
  case 116:
   break;
  default:
   {
    $$15 = $first;
    break L1;
   }
  }
  $13 = $first + 2 | 0;
  $14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13, $last, $db) | 0;
  if (($14 | 0) == ($13 | 0) | ($14 | 0) == ($last | 0)) $$15 = $first; else if ((HEAP8[$14 >> 0] | 0) == 69) {
   $21 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($21 | 0)) $$15 = $first; else {
    $23 = $21 + -24 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $23);
    $24 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3, 0, 15301) | 0;
    HEAP32[$2 >> 2] = HEAP32[$24 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
    HEAP32[$2 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$24 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $27 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2, 14663) | 0;
    HEAP32[$1 >> 2] = HEAP32[$27 >> 2];
    HEAP32[$1 + 4 >> 2] = HEAP32[$27 + 4 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[$27 + 8 >> 2];
    $__i$0$i$i$i8 = 0;
    while (1) {
     if (($__i$0$i$i$i8 | 0) == 3) break;
     HEAP32[$27 + ($__i$0$i$i$i8 << 2) >> 2] = 0;
     $__i$0$i$i$i8 = $__i$0$i$i$i8 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($23, $0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    $$15 = $14 + 1 | 0;
   }
  } else $$15 = $first;
 } else $$15 = $first; else $$15 = $first; while (0);
 STACKTOP = sp;
 return $$15 | 0;
}

function _setCamera($id, $cameraID) {
 $id = $id | 0;
 $cameraID = $cameraID | 0;
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $4 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = sp + 32 | 0;
 $1 = sp + 28 | 0;
 HEAP32[$0 >> 2] = $id;
 HEAP32[$1 >> 2] = $cameraID;
 do if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$2 = -1; else {
  $4 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16636, $1) | 0)) $$2 = -1; else {
   $7 = $4 + 8 | 0;
   _memcpy($7 | 0, __ZNSt3__113unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16636, $1) | 0, 184) | 0;
   $9 = HEAP32[$7 >> 2] | 0;
   $10 = $4 + 204 | 0;
   $14 = HEAP32[$4 + 12 >> 2] | 0;
   $15 = $4 + 208 | 0;
   if (!(($9 | 0) == (HEAP32[$10 >> 2] | 0) ? ($14 | 0) == (HEAP32[$15 >> 2] | 0) : 0)) {
    HEAP32[$vararg_buffer >> 2] = $9;
    HEAP32[$vararg_buffer + 4 >> 2] = $14;
    _arLog(2, 5155, $vararg_buffer);
    _arParamChangeSize($7, HEAP32[$10 >> 2] | 0, HEAP32[$15 >> 2] | 0, $7) | 0;
   }
   _deleteHandle($4);
   $20 = _arParamLTCreate($7, 15) | 0;
   $21 = $4 + 192 | 0;
   HEAP32[$21 >> 2] = $20;
   if (!$20) {
    _arLog(3, 5202, $vararg_buffer2);
    $$2 = -1;
    break;
   }
   $23 = _arCreateHandle($20) | 0;
   $24 = $4 + 212 | 0;
   HEAP32[$24 >> 2] = $23;
   if (!$23) {
    _arLog(3, 5240, $vararg_buffer4);
    $$2 = -1;
    break;
   }
   _arSetPixelFormat($23, 2) | 0;
   $26 = _ar3DCreateHandle($7) | 0;
   HEAP32[$4 + 224 >> 2] = $26;
   if (!$26) {
    _arLog(3, 5277, $vararg_buffer6);
    $$2 = -1;
    break;
   } else {
    _arPattAttach(HEAP32[$24 >> 2] | 0, HEAP32[$4 + 216 >> 2] | 0) | 0;
    _arglCameraFrustum(HEAP32[$21 >> 2] | 0, +HEAPF64[$4 + 232 >> 3], +HEAPF64[$4 + 240 >> 3], $4 + 264 | 0);
    $$2 = 0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$2 | 0;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0;
 $0 = $c & 255;
 $4 = ($n | 0) != 0;
 L1 : do if ($4 & ($src & 3 | 0) != 0) {
  $5 = $c & 255;
  $$019 = $n;
  $s$020 = $src;
  while (1) {
   if ((HEAP8[$s$020 >> 0] | 0) == $5 << 24 >> 24) {
    $$0$lcssa30 = $$019;
    $s$0$lcssa29 = $s$020;
    label = 6;
    break L1;
   }
   $8 = $s$020 + 1 | 0;
   $9 = $$019 + -1 | 0;
   $13 = ($9 | 0) != 0;
   if ($13 & ($8 & 3 | 0) != 0) {
    $$019 = $9;
    $s$020 = $8;
   } else {
    $$0$lcssa = $9;
    $$lcssa = $13;
    $s$0$lcssa = $8;
    label = 5;
    break;
   }
  }
 } else {
  $$0$lcssa = $n;
  $$lcssa = $4;
  $s$0$lcssa = $src;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$0$lcssa30 = $$0$lcssa;
  $s$0$lcssa29 = $s$0$lcssa;
  label = 6;
 } else {
  $$3 = 0;
  $s$2 = $s$0$lcssa;
 }
 L8 : do if ((label | 0) == 6) {
  $15 = $c & 255;
  if ((HEAP8[$s$0$lcssa29 >> 0] | 0) == $15 << 24 >> 24) {
   $$3 = $$0$lcssa30;
   $s$2 = $s$0$lcssa29;
  } else {
   $17 = Math_imul($0, 16843009) | 0;
   L11 : do if ($$0$lcssa30 >>> 0 > 3) {
    $$110 = $$0$lcssa30;
    $w$011 = $s$0$lcssa29;
    while (1) {
     $20 = HEAP32[$w$011 >> 2] ^ $17;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009 | 0) {
      $$110$lcssa = $$110;
      $w$011$lcssa = $w$011;
      break;
     }
     $26 = $w$011 + 4 | 0;
     $27 = $$110 + -4 | 0;
     if ($27 >>> 0 > 3) {
      $$110 = $27;
      $w$011 = $26;
     } else {
      $$1$lcssa = $27;
      $w$0$lcssa = $26;
      label = 11;
      break L11;
     }
    }
    $$24 = $$110$lcssa;
    $s$15 = $w$011$lcssa;
   } else {
    $$1$lcssa = $$0$lcssa30;
    $w$0$lcssa = $s$0$lcssa29;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$$1$lcssa) {
    $$3 = 0;
    $s$2 = $w$0$lcssa;
    break;
   } else {
    $$24 = $$1$lcssa;
    $s$15 = $w$0$lcssa;
   }
   while (1) {
    if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
     $$3 = $$24;
     $s$2 = $s$15;
     break L8;
    }
    $32 = $s$15 + 1 | 0;
    $$24 = $$24 + -1 | 0;
    if (!$$24) {
     $$3 = 0;
     $s$2 = $32;
     break;
    } else $s$15 = $32;
   }
  }
 } while (0);
 return ($$3 | 0 ? $s$2 : 0) | 0;
}

function _getMarkerInfo($id, $markerIndex) {
 $id = $id | 0;
 $markerIndex = $markerIndex | 0;
 var $$1 = 0, $0 = 0, $5 = 0, $6 = 0, $_ZL11gMarkerInfo$ = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 do if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = HEAP32[431] | 0; else {
  $5 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if ((HEAP32[$6 + 44 >> 2] | 0) > ($markerIndex | 0)) {
   $_ZL11gMarkerInfo$ = ($markerIndex | 0) < 0 ? 16336 : $6 + 48 + ($markerIndex << 8) | 0;
   _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi(2, HEAP32[$_ZL11gMarkerInfo$ >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 4 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 8 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 12 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 16 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 20 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$ + 24 >> 2] | 0, +(+HEAPF64[$_ZL11gMarkerInfo$ + 32 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 40 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 48 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 56 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 64 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 72 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 80 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 88 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 96 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 104 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 112 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 120 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 128 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 136 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 144 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 152 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 160 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 168 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 176 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 184 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 192 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 200 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 208 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 216 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$ + 224 >> 3]), HEAP32[$_ZL11gMarkerInfo$ + 240 >> 2] | 0) | 0;
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[432] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function ___fdopen($fd, $mode) {
 $fd = $fd | 0;
 $mode = $mode | 0;
 var $$0 = 0, $0 = 0, $12 = 0, $14 = 0, $19 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $4 = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $tio = sp + 52 | 0;
 $0 = HEAP8[$mode >> 0] | 0;
 if (!(_memchr(13813, $0 << 24 >> 24, 4) | 0)) {
  $3 = ___errno_location() | 0;
  HEAP32[$3 >> 2] = 22;
  $$0 = 0;
 } else {
  $4 = _malloc(1144) | 0;
  if (!$4) $$0 = 0; else {
   dest = $4;
   stop = dest + 112 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   if (!(_strchr($mode, 43) | 0)) HEAP32[$4 >> 2] = $0 << 24 >> 24 == 114 ? 8 : 4;
   if (!(_strchr($mode, 101) | 0)) $12 = $0; else {
    HEAP32[$vararg_buffer >> 2] = $fd;
    HEAP32[$vararg_buffer + 4 >> 2] = 2;
    HEAP32[$vararg_buffer + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer | 0) | 0;
    $12 = HEAP8[$mode >> 0] | 0;
   }
   if ($12 << 24 >> 24 == 97) {
    HEAP32[$vararg_buffer3 >> 2] = $fd;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 3;
    $14 = ___syscall221(221, $vararg_buffer3 | 0) | 0;
    if (!($14 & 1024)) {
     HEAP32[$vararg_buffer7 >> 2] = $fd;
     HEAP32[$vararg_buffer7 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer7 + 8 >> 2] = $14 | 1024;
     ___syscall221(221, $vararg_buffer7 | 0) | 0;
    }
    $19 = HEAP32[$4 >> 2] | 128;
    HEAP32[$4 >> 2] = $19;
    $26 = $19;
   } else $26 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 + 60 >> 2] = $fd;
   HEAP32[$4 + 44 >> 2] = $4 + 120;
   HEAP32[$4 + 48 >> 2] = 1024;
   $24 = $4 + 75 | 0;
   HEAP8[$24 >> 0] = -1;
   if (!($26 & 8)) {
    HEAP32[$vararg_buffer12 >> 2] = $fd;
    HEAP32[$vararg_buffer12 + 4 >> 2] = 21505;
    HEAP32[$vararg_buffer12 + 8 >> 2] = $tio;
    if (!(___syscall54(54, $vararg_buffer12 | 0) | 0)) HEAP8[$24 >> 0] = 10;
   }
   HEAP32[$4 + 32 >> 2] = 14;
   HEAP32[$4 + 36 >> 2] = 1;
   HEAP32[$4 + 40 >> 2] = 2;
   HEAP32[$4 + 12 >> 2] = 1;
   if (!(HEAP32[4167] | 0)) HEAP32[$4 + 76 >> 2] = -1;
   ___lock(16692);
   $37 = HEAP32[4172] | 0;
   HEAP32[$4 + 56 >> 2] = $37;
   if ($37 | 0) HEAP32[$37 + 52 >> 2] = $4;
   HEAP32[4172] = $4;
   ___unlock(16692);
   $$0 = $4;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _get_cpara($world, $vertex, $para) {
 $world = $world | 0;
 $vertex = $vertex | 0;
 $para = $para | 0;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0, $3 = 0, $48 = 0, $5 = 0, $6 = 0, $61 = 0, $62 = 0, $68 = 0, $69 = 0, $8 = 0, $82 = 0, $i$0 = 0, $i$1 = 0;
 $0 = _arMatrixAlloc(8, 8) | 0;
 $1 = _arMatrixAlloc(8, 1) | 0;
 $2 = _arMatrixAlloc(8, 1) | 0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 4) break;
  $3 = $world + ($i$0 << 4) | 0;
  $5 = $i$0 << 4;
  $6 = HEAP32[$0 >> 2] | 0;
  HEAPF64[$6 + ($5 << 3) >> 3] = +HEAPF64[$3 >> 3];
  $8 = $world + ($i$0 << 4) + 8 | 0;
  HEAPF64[$6 + (($5 | 1) << 3) >> 3] = +HEAPF64[$8 >> 3];
  HEAPF64[$6 + (($5 | 2) << 3) >> 3] = 1.0;
  HEAPF64[$6 + (($5 | 3) << 3) >> 3] = 0.0;
  HEAPF64[$6 + (($5 | 4) << 3) >> 3] = 0.0;
  HEAPF64[$6 + (($5 | 5) << 3) >> 3] = 0.0;
  $21 = $vertex + ($i$0 << 4) | 0;
  HEAPF64[$6 + (($5 | 6) << 3) >> 3] = -(+HEAPF64[$3 >> 3] * +HEAPF64[$21 >> 3]);
  HEAPF64[$6 + (($5 | 7) << 3) >> 3] = -(+HEAPF64[$8 >> 3] * +HEAPF64[$21 >> 3]);
  HEAPF64[$6 + (($5 | 8) << 3) >> 3] = 0.0;
  HEAPF64[$6 + (($5 | 9) << 3) >> 3] = 0.0;
  HEAPF64[$6 + (($5 | 10) << 3) >> 3] = 0.0;
  HEAPF64[$6 + (($5 | 11) << 3) >> 3] = +HEAPF64[$3 >> 3];
  HEAPF64[$6 + (($5 | 12) << 3) >> 3] = +HEAPF64[$8 >> 3];
  HEAPF64[$6 + (($5 | 13) << 3) >> 3] = 1.0;
  $48 = $vertex + ($i$0 << 4) + 8 | 0;
  HEAPF64[$6 + (($5 | 14) << 3) >> 3] = -(+HEAPF64[$3 >> 3] * +HEAPF64[$48 >> 3]);
  HEAPF64[$6 + (($5 | 15) << 3) >> 3] = -(+HEAPF64[$8 >> 3] * +HEAPF64[$48 >> 3]);
  $61 = $i$0 << 1;
  $62 = HEAP32[$1 >> 2] | 0;
  HEAPF64[$62 + ($61 << 3) >> 3] = +HEAPF64[$21 >> 3];
  HEAPF64[$62 + (($61 | 1) << 3) >> 3] = +HEAPF64[$48 >> 3];
  $i$0 = $i$0 + 1 | 0;
 }
 _arMatrixSelfInv($0) | 0;
 _arMatrixMul($2, $0, $1) | 0;
 $i$1 = 0;
 while (1) {
  if (($i$1 | 0) == 2) break;
  $68 = $i$1 * 3 | 0;
  $69 = HEAP32[$2 >> 2] | 0;
  HEAPF64[$para + ($i$1 * 24 | 0) >> 3] = +HEAPF64[$69 + ($68 << 3) >> 3];
  HEAPF64[$para + ($i$1 * 24 | 0) + 8 >> 3] = +HEAPF64[$69 + ($68 + 1 << 3) >> 3];
  HEAPF64[$para + ($i$1 * 24 | 0) + 16 >> 3] = +HEAPF64[$69 + ($68 + 2 << 3) >> 3];
  $i$1 = $i$1 + 1 | 0;
 }
 $82 = HEAP32[$2 >> 2] | 0;
 HEAPF64[$para + 48 >> 3] = +HEAPF64[$82 + 48 >> 3];
 HEAPF64[$para + 56 >> 3] = +HEAPF64[$82 + 56 >> 3];
 HEAPF64[$para + 64 >> 3] = 1.0;
 _arMatrixFree($0) | 0;
 _arMatrixFree($1) | 0;
 _arMatrixFree($2) | 0;
 return;
}

function _addMultiMarker($id, $patt_name) {
 $id = $id | 0;
 $patt_name = $patt_name | 0;
 var $$1 = 0, $0 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $38 = 0, $43 = 0, $44 = 0, $50 = 0, $marker = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 16 | 0;
 $vararg_buffer = sp + 8 | 0;
 $0 = sp + 20 | 0;
 $marker = sp;
 HEAP32[$0 >> 2] = $id;
 do if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = -1; else {
  $3 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  if (!(HEAP8[$patt_name >> 0] & 1)) $15 = $patt_name + 1 | 0; else $15 = HEAP32[$patt_name + 8 >> 2] | 0;
  $11 = HEAP32[$3 + 212 >> 2] | 0;
  $12 = $3 + 216 | 0;
  $13 = $3 + 220 | 0;
  $16 = _arMultiReadConfigFile($15, HEAP32[$12 >> 2] | 0) | 0;
  HEAP32[$13 >> 2] = $16;
  if (!$16) {
   _arLog(3, 5826, $vararg_buffer);
   _arPattDeleteHandle(HEAP32[$12 >> 2] | 0) | 0;
   _arLog(3, 5853, $vararg_buffer1);
   $$1 = -1;
   break;
  }
  switch (HEAP32[$16 + 108 >> 2] | 0) {
  case 0:
   {
    _arSetPatternDetectionMode($11, 0) | 0;
    break;
   }
  case 1:
   {
    _arSetPatternDetectionMode($11, 2) | 0;
    break;
   }
  default:
   _arSetPatternDetectionMode($11, 3) | 0;
  }
  $21 = $3 + 248 | 0;
  $22 = $3 + 252 | 0;
  $23 = HEAP32[$22 >> 2] | 0;
  $26 = $23 - (HEAP32[$21 >> 2] | 0) >> 3;
  $27 = $marker;
  HEAP32[$27 >> 2] = 0;
  HEAP32[$27 + 4 >> 2] = 0;
  HEAP32[$marker >> 2] = $26;
  HEAP32[$marker + 4 >> 2] = HEAP32[$13 >> 2];
  if (($23 | 0) == (HEAP32[$3 + 256 >> 2] | 0)) {
   __ZNSt3__16vectorI12multi_markerNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($21, $marker);
   $50 = $26;
  } else {
   $38 = $marker;
   $43 = HEAP32[$38 + 4 >> 2] | 0;
   $44 = $23;
   HEAP32[$44 >> 2] = HEAP32[$38 >> 2];
   HEAP32[$44 + 4 >> 2] = $43;
   HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 8;
   $50 = HEAP32[$marker >> 2] | 0;
  }
  $$1 = $50;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $33 = 0, $43 = 0, $45 = 0, $6 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, label = 0;
 do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else {
  if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
   $45 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$45 >> 2] | 0) + 24 >> 2] & 3]($45, $info, $current_ptr, $path_below, $use_strcmp);
   break;
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $20 = $info + 44 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 4) break;
    $23 = $info + 52 | 0;
    HEAP8[$23 >> 0] = 0;
    $24 = $info + 53 | 0;
    HEAP8[$24 >> 0] = 0;
    $26 = HEAP32[$this + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$26 >> 2] | 0) + 20 >> 2] & 3]($26, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
    if (!(HEAP8[$24 >> 0] | 0)) {
     $is_dst_type_derived_from_static_type$0$off02 = 0;
     label = 13;
    } else if (!(HEAP8[$23 >> 0] | 0)) {
     $is_dst_type_derived_from_static_type$0$off02 = 1;
     label = 13;
    } else label = 17;
    do if ((label | 0) == 13) {
     HEAP32[$14 >> 2] = $current_ptr;
     $33 = $info + 40 | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
      HEAP8[$info + 54 >> 0] = 1;
      if ($is_dst_type_derived_from_static_type$0$off02) {
       label = 17;
       break;
      } else {
       $43 = 4;
       break;
      }
     }
     if ($is_dst_type_derived_from_static_type$0$off02) label = 17; else $43 = 4;
    } while (0);
    if ((label | 0) == 17) $43 = 3;
    HEAP32[$20 >> 2] = $43;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _arGetTransMatSquare($handle, $marker_info, $width, $conv) {
 $handle = $handle | 0;
 $marker_info = $marker_info | 0;
 $width = +$width;
 $conv = $conv | 0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $18 = 0, $26 = 0, $3 = 0, $33 = 0.0, $34 = 0.0, $53 = 0, $data = 0, $err = 0, $initMatXw2Xc = 0, $screenCoord = 0, $worldCoord = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $screenCoord = sp + 200 | 0;
 $worldCoord = sp + 104 | 0;
 $data = sp + 264 | 0;
 $initMatXw2Xc = sp + 8 | 0;
 $err = sp;
 $1 = HEAP32[$marker_info + 16 >> 2] | 0;
 $3 = (4 - $1 | 0) % 4 | 0;
 HEAPF64[$screenCoord >> 3] = +HEAPF64[$marker_info + 168 + ($3 << 4) >> 3];
 HEAPF64[$screenCoord + 8 >> 3] = +HEAPF64[$marker_info + 168 + ($3 << 4) + 8 >> 3];
 $10 = (5 - $1 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 16 >> 3] = +HEAPF64[$marker_info + 168 + ($10 << 4) >> 3];
 HEAPF64[$screenCoord + 24 >> 3] = +HEAPF64[$marker_info + 168 + ($10 << 4) + 8 >> 3];
 $18 = (6 - $1 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 32 >> 3] = +HEAPF64[$marker_info + 168 + ($18 << 4) >> 3];
 HEAPF64[$screenCoord + 40 >> 3] = +HEAPF64[$marker_info + 168 + ($18 << 4) + 8 >> 3];
 $26 = (7 - $1 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 48 >> 3] = +HEAPF64[$marker_info + 168 + ($26 << 4) >> 3];
 HEAPF64[$screenCoord + 56 >> 3] = +HEAPF64[$marker_info + 168 + ($26 << 4) + 8 >> 3];
 $33 = $width * -.5;
 HEAPF64[$worldCoord >> 3] = $33;
 $34 = $width * .5;
 HEAPF64[$worldCoord + 8 >> 3] = $34;
 HEAPF64[$worldCoord + 16 >> 3] = 0.0;
 HEAPF64[$worldCoord + 24 >> 3] = $34;
 HEAPF64[$worldCoord + 32 >> 3] = $34;
 HEAPF64[$worldCoord + 40 >> 3] = 0.0;
 HEAPF64[$worldCoord + 48 >> 3] = $34;
 HEAPF64[$worldCoord + 56 >> 3] = $33;
 HEAPF64[$worldCoord + 64 >> 3] = 0.0;
 HEAPF64[$worldCoord + 72 >> 3] = $33;
 HEAPF64[$worldCoord + 80 >> 3] = $33;
 HEAPF64[$worldCoord + 88 >> 3] = 0.0;
 HEAP32[$data >> 2] = $screenCoord;
 HEAP32[$data + 4 >> 2] = $worldCoord;
 HEAP32[$data + 8 >> 2] = 4;
 if ((_icpGetInitXw2Xc_from_PlanarData(HEAP32[$handle >> 2] | 0, $screenCoord, $worldCoord, 4, $initMatXw2Xc) | 0) < 0) $$0 = 1.0e8; else {
  $53 = (_icpPoint(HEAP32[$handle >> 2] | 0, $data, $initMatXw2Xc, $conv, $err) | 0) < 0;
  $$0 = $53 ? 1.0e8 : +HEAPF64[$err >> 3];
 }
 STACKTOP = sp;
 return +$$0;
}

function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $1 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $30 = 0, $40 = 0, $7 = 0, $8 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $dummy = sp;
 $$st = ($st | 0) == 0 ? 16712 : $st;
 $1 = HEAP32[$$st >> 2] | 0;
 L1 : do if (!$src) if (!$1) $$0 = 0; else label = 15; else {
  $dummy$wc = ($wc | 0) == 0 ? $dummy : $wc;
  if (!$n) $$0 = -2; else {
   if (!$1) {
    $7 = HEAP8[$src >> 0] | 0;
    $8 = $7 & 255;
    if ($7 << 24 >> 24 > -1) {
     HEAP32[$dummy$wc >> 2] = $8;
     $$0 = $7 << 24 >> 24 != 0 & 1;
     break;
    }
    $12 = $8 + -194 | 0;
    if ($12 >>> 0 > 50) {
     label = 15;
     break;
    }
    $16 = HEAP32[1792 + ($12 << 2) >> 2] | 0;
    $17 = $n + -1 | 0;
    if (!$17) $c$2 = $16; else {
     $$024 = $17;
     $c$05 = $16;
     $s$06 = $src + 1 | 0;
     label = 9;
    }
   } else {
    $$024 = $n;
    $c$05 = $1;
    $s$06 = $src;
    label = 9;
   }
   L11 : do if ((label | 0) == 9) {
    $19 = HEAP8[$s$06 >> 0] | 0;
    $21 = ($19 & 255) >>> 3;
    if (($21 + -16 | $21 + ($c$05 >> 26)) >>> 0 > 7) {
     label = 15;
     break L1;
    } else {
     $$1 = $$024;
     $30 = $19;
     $c$1 = $c$05;
     $s$1 = $s$06;
    }
    while (1) {
     $s$1 = $s$1 + 1 | 0;
     $c$1 = ($30 & 255) + -128 | $c$1 << 6;
     $$1 = $$1 + -1 | 0;
     if (($c$1 | 0) >= 0) {
      $$lcssa = $c$1;
      $$lcssa35 = $$1;
      break;
     }
     if (!$$1) {
      $c$2 = $c$1;
      break L11;
     }
     $30 = HEAP8[$s$1 >> 0] | 0;
     if (($30 & -64) << 24 >> 24 != -128) {
      label = 15;
      break L1;
     }
    }
    HEAP32[$$st >> 2] = 0;
    HEAP32[$dummy$wc >> 2] = $$lcssa;
    $$0 = $n - $$lcssa35 | 0;
    break L1;
   } while (0);
   HEAP32[$$st >> 2] = $c$2;
   $$0 = -2;
  }
 } while (0);
 if ((label | 0) == 15) {
  HEAP32[$$st >> 2] = 0;
  $40 = ___errno_location() | 0;
  HEAP32[$40 >> 2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6removeENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($agg$result, $this, $__p) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__p = $__p | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $7 = 0, $__pn$0 = 0, $__pn$0$lcssa = 0, label = 0;
 $0 = HEAP32[$__p >> 2] | 0;
 $2 = HEAP32[$this + 4 >> 2] | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 $5 = $2 + -1 | 0;
 $7 = ($5 & $2 | 0) == 0;
 if ($7) $12 = $5 & $4; else $12 = ($4 >>> 0) % ($2 >>> 0) | 0;
 $11 = (HEAP32[$this >> 2] | 0) + ($12 << 2) | 0;
 $__pn$0 = HEAP32[$11 >> 2] | 0;
 while (1) {
  $14 = HEAP32[$__pn$0 >> 2] | 0;
  if (($14 | 0) == ($0 | 0)) {
   $__pn$0$lcssa = $__pn$0;
   break;
  } else $__pn$0 = $14;
 }
 $16 = $this + 8 | 0;
 if (($__pn$0$lcssa | 0) == ($16 | 0)) label = 12; else {
  $19 = HEAP32[$__pn$0$lcssa + 4 >> 2] | 0;
  if ($7) $22 = $19 & $5; else $22 = ($19 >>> 0) % ($2 >>> 0) | 0;
  if (($22 | 0) == ($12 | 0)) $$pre$phiZ2D = $0; else label = 12;
 }
 do if ((label | 0) == 12) {
  $24 = HEAP32[$0 >> 2] | 0;
  if ($24 | 0) {
   $27 = HEAP32[$24 + 4 >> 2] | 0;
   if ($7) $30 = $27 & $5; else $30 = ($27 >>> 0) % ($2 >>> 0) | 0;
   if (($30 | 0) == ($12 | 0)) {
    $$pre$phiZ2D = $0;
    break;
   }
  }
  HEAP32[$11 >> 2] = 0;
  $$pre$phiZ2D = $0;
 } while (0);
 $32 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 $34 = $32;
 if (!$32) $43 = $34; else {
  $36 = HEAP32[$32 + 4 >> 2] | 0;
  if ($7) $39 = $36 & $5; else $39 = ($36 >>> 0) % ($2 >>> 0) | 0;
  if (($39 | 0) == ($12 | 0)) $43 = $34; else {
   HEAP32[(HEAP32[$this >> 2] | 0) + ($39 << 2) >> 2] = $__pn$0$lcssa;
   $43 = HEAP32[$0 >> 2] | 0;
  }
 }
 HEAP32[$__pn$0$lcssa >> 2] = $43;
 HEAP32[$$pre$phiZ2D >> 2] = 0;
 $44 = $this + 12 | 0;
 HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + -1;
 HEAP32[$agg$result >> 2] = $0;
 HEAP32[$agg$result + 4 >> 2] = $16;
 HEAP8[$agg$result + 8 >> 0] = 1;
 return;
}

function _arGetTransMatSquareCont($handle, $marker_info, $initConv, $width, $conv) {
 $handle = $handle | 0;
 $marker_info = $marker_info | 0;
 $initConv = $initConv | 0;
 $width = +$width;
 $conv = $conv | 0;
 var $1 = 0, $10 = 0, $18 = 0, $26 = 0, $3 = 0, $33 = 0.0, $34 = 0.0, $50 = 0, $data = 0, $err = 0, $screenCoord = 0, $worldCoord = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $screenCoord = sp + 104 | 0;
 $worldCoord = sp + 8 | 0;
 $data = sp + 168 | 0;
 $err = sp;
 $1 = HEAP32[$marker_info + 16 >> 2] | 0;
 $3 = (4 - $1 | 0) % 4 | 0;
 HEAPF64[$screenCoord >> 3] = +HEAPF64[$marker_info + 168 + ($3 << 4) >> 3];
 HEAPF64[$screenCoord + 8 >> 3] = +HEAPF64[$marker_info + 168 + ($3 << 4) + 8 >> 3];
 $10 = (5 - $1 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 16 >> 3] = +HEAPF64[$marker_info + 168 + ($10 << 4) >> 3];
 HEAPF64[$screenCoord + 24 >> 3] = +HEAPF64[$marker_info + 168 + ($10 << 4) + 8 >> 3];
 $18 = (6 - $1 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 32 >> 3] = +HEAPF64[$marker_info + 168 + ($18 << 4) >> 3];
 HEAPF64[$screenCoord + 40 >> 3] = +HEAPF64[$marker_info + 168 + ($18 << 4) + 8 >> 3];
 $26 = (7 - $1 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 48 >> 3] = +HEAPF64[$marker_info + 168 + ($26 << 4) >> 3];
 HEAPF64[$screenCoord + 56 >> 3] = +HEAPF64[$marker_info + 168 + ($26 << 4) + 8 >> 3];
 $33 = $width * -.5;
 HEAPF64[$worldCoord >> 3] = $33;
 $34 = $width * .5;
 HEAPF64[$worldCoord + 8 >> 3] = $34;
 HEAPF64[$worldCoord + 16 >> 3] = 0.0;
 HEAPF64[$worldCoord + 24 >> 3] = $34;
 HEAPF64[$worldCoord + 32 >> 3] = $34;
 HEAPF64[$worldCoord + 40 >> 3] = 0.0;
 HEAPF64[$worldCoord + 48 >> 3] = $34;
 HEAPF64[$worldCoord + 56 >> 3] = $33;
 HEAPF64[$worldCoord + 64 >> 3] = 0.0;
 HEAPF64[$worldCoord + 72 >> 3] = $33;
 HEAPF64[$worldCoord + 80 >> 3] = $33;
 HEAPF64[$worldCoord + 88 >> 3] = 0.0;
 HEAP32[$data >> 2] = $screenCoord;
 HEAP32[$data + 4 >> 2] = $worldCoord;
 HEAP32[$data + 8 >> 2] = 4;
 $50 = (_icpPoint(HEAP32[$handle >> 2] | 0, $data, $initConv, $conv, $err) | 0) < 0;
 STACKTOP = sp;
 return +($50 ? 1.0e8 : +HEAPF64[$err >> 3]);
}

function _arParamLTCreate($param, $offset) {
 $param = $param | 0;
 $offset = $offset | 0;
 var $0 = 0, $14 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0.0, $3 = 0, $31 = 0.0, $4 = 0, $6 = 0, $9 = 0, $i$0 = 0, $i2of$0 = 0, $i2of$1 = 0, $i2of$1$lcssa = 0, $ix = 0, $iy = 0, $j$0 = 0, $o2if$0 = 0, $o2if$1 = 0, $o2if$1$lcssa = 0, $ox = 0, $oy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ix = sp + 24 | 0;
 $iy = sp + 16 | 0;
 $ox = sp + 8 | 0;
 $oy = sp;
 $0 = _malloc(208) | 0;
 if (!$0) {
  _arLog(3, 4491, sp + 32 | 0);
  _exit(1);
 }
 _memcpy($0 | 0, $param | 0, 184) | 0;
 $3 = $offset << 1;
 $4 = (HEAP32[$param >> 2] | 0) + $3 | 0;
 $6 = $0 + 192 | 0;
 HEAP32[$6 >> 2] = $4;
 $9 = (HEAP32[$param + 4 >> 2] | 0) + $3 | 0;
 HEAP32[$0 + 196 >> 2] = $9;
 HEAP32[$0 + 200 >> 2] = $offset;
 HEAP32[$0 + 204 >> 2] = $offset;
 $14 = Math_imul($4 << 3, $9) | 0;
 $15 = _malloc($14) | 0;
 HEAP32[$0 + 184 >> 2] = $15;
 if (!$15) {
  _arLog(3, 4491, sp + 40 | 0);
  _exit(1);
 }
 $17 = _malloc($14) | 0;
 HEAP32[$0 + 188 >> 2] = $17;
 if (!$17) {
  _arLog(3, 4491, sp + 48 | 0);
  _exit(1);
 }
 $20 = $param + 104 | 0;
 $22 = HEAP32[$param + 176 >> 2] | 0;
 $i2of$0 = $15;
 $j$0 = 0;
 $o2if$0 = $17;
 while (1) {
  if (($j$0 | 0) >= ($9 | 0)) break;
  $24 = HEAP32[$6 >> 2] | 0;
  $27 = +($j$0 - $offset | 0);
  $i$0 = 0;
  $i2of$1 = $i2of$0;
  $o2if$1 = $o2if$0;
  while (1) {
   if (($i$0 | 0) >= ($24 | 0)) {
    $i2of$1$lcssa = $i2of$1;
    $o2if$1$lcssa = $o2if$1;
    break;
   }
   $31 = +($i$0 - $offset | 0);
   _arParamIdeal2Observ($20, $31, $27, $ox, $oy, $22) | 0;
   HEAPF32[$i2of$1 >> 2] = +HEAPF64[$ox >> 3];
   HEAPF32[$i2of$1 + 4 >> 2] = +HEAPF64[$oy >> 3];
   _arParamObserv2Ideal($20, $31, $27, $ix, $iy, $22) | 0;
   HEAPF32[$o2if$1 >> 2] = +HEAPF64[$ix >> 3];
   HEAPF32[$o2if$1 + 4 >> 2] = +HEAPF64[$iy >> 3];
   $i$0 = $i$0 + 1 | 0;
   $i2of$1 = $i2of$1 + 8 | 0;
   $o2if$1 = $o2if$1 + 8 | 0;
  }
  $i2of$0 = $i2of$1$lcssa;
  $j$0 = $j$0 + 1 | 0;
  $o2if$0 = $o2if$1$lcssa;
 }
 STACKTOP = sp;
 return $0 | 0;
}

function _fgets($s, $n, $f) {
 $s = $s | 0;
 $n = $n | 0;
 $f = $f | 0;
 var $$0 = 0, $$047 = 0, $$05 = 0, $$lcssa13 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $4 = 0, $46 = 0, $47 = 0, $6 = 0, $8 = 0, $p$0 = 0, $p$1 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $12 = ___lockfile($f) | 0; else $12 = 0;
 $4 = $n + -1 | 0;
 if (($n | 0) < 2) {
  $6 = $f + 74 | 0;
  $8 = HEAP8[$6 >> 0] | 0;
  HEAP8[$6 >> 0] = $8 + 255 | $8;
  if ($12 | 0) ___unlockfile($f);
  if (!$4) {
   HEAP8[$s >> 0] = 0;
   $$0 = $s;
  } else $$0 = 0;
 } else {
  L11 : do if (!$4) {
   $p$1 = $s;
   label = 17;
  } else {
   $15 = $f + 4 | 0;
   $16 = $f + 8 | 0;
   $$05 = $4;
   $p$0 = $s;
   while (1) {
    $17 = HEAP32[$15 >> 2] | 0;
    $19 = $17;
    $20 = (HEAP32[$16 >> 2] | 0) - $19 | 0;
    $21 = _memchr($17, 10, $20) | 0;
    $22 = ($21 | 0) == 0;
    $26 = $22 ? $20 : 1 - $19 + $21 | 0;
    $27 = $26 >>> 0 < $$05 >>> 0;
    $28 = $27 ? $26 : $$05;
    _memcpy($p$0 | 0, $17 | 0, $28 | 0) | 0;
    $30 = (HEAP32[$15 >> 2] | 0) + $28 | 0;
    HEAP32[$15 >> 2] = $30;
    $31 = $p$0 + $28 | 0;
    $32 = $$05 - $28 | 0;
    if (!($22 & $27)) {
     $p$1 = $31;
     label = 17;
     break L11;
    }
    if ($30 >>> 0 < (HEAP32[$16 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $30 + 1;
     $46 = HEAPU8[$30 >> 0] | 0;
    } else {
     $38 = ___uflow($f) | 0;
     if (($38 | 0) < 0) {
      $$lcssa13 = $31;
      break;
     } else $46 = $38;
    }
    $$05 = $32 + -1 | 0;
    $47 = $31 + 1 | 0;
    HEAP8[$31 >> 0] = $46;
    if (!(($$05 | 0) != 0 & ($46 & 255 | 0) != 10)) {
     $p$1 = $47;
     label = 17;
     break L11;
    } else $p$0 = $47;
   }
   if (($$lcssa13 | 0) == ($s | 0)) $$047 = 0; else if (!(HEAP32[$f >> 2] & 16)) $$047 = 0; else {
    $p$1 = $$lcssa13;
    label = 17;
   }
  } while (0);
  if ((label | 0) == 17) if (!$s) $$047 = 0; else {
   HEAP8[$p$1 >> 0] = 0;
   $$047 = $s;
  }
  if (!$12) $$0 = $$047; else {
   ___unlockfile($f);
   $$0 = $$047;
  }
 }
 return $$0 | 0;
}

function _arImageProcLumaHistAndOtsu($ipi, $dataPtr, $value_p) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 $value_p = $value_p | 0;
 var $$0 = 0, $$lcssa = 0.0, $$pre$phiZ2D = 0, $0 = 0, $12 = 0.0, $14 = 0, $18 = 0.0, $22 = 0.0, $27 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $6 = 0.0, $indvars$iv = 0, $indvars$iv1 = 0, $sum$0 = 0.0, $sumB$0 = 0.0, $sumB$1 = 0.0, $threshold$0 = 0, $threshold$2 = 0, $threshold$3 = 0, $varMax$0 = 0.0, $varMax$2 = 0.0, $wB$0 = 0.0;
 $0 = _arImageProcLumaHist($ipi, $dataPtr) | 0;
 if (($0 | 0) < 0) $$0 = $0; else {
  $indvars$iv1 = 1;
  $sum$0 = 0.0;
  while (1) {
   $6 = $sum$0 + +((Math_imul(HEAP32[$ipi + 16 + ($indvars$iv1 << 2) >> 2] | 0, $indvars$iv1) | 0) >>> 0);
   $indvars$iv1 = $indvars$iv1 + 1 | 0;
   if (($indvars$iv1 | 0) == 256) {
    $$lcssa = $6;
    break;
   } else $sum$0 = $6;
  }
  $12 = +(Math_imul(HEAP32[$ipi + 12 >> 2] | 0, HEAP32[$ipi + 8 >> 2] | 0) | 0);
  $indvars$iv = 0;
  $sumB$0 = 0.0;
  $threshold$0 = 0;
  $varMax$0 = 0.0;
  $wB$0 = 0.0;
  while (1) {
   $14 = HEAP32[$ipi + 16 + ($indvars$iv << 2) >> 2] | 0;
   $wB$0 = $wB$0 + +($14 >>> 0);
   if ($wB$0 != 0.0) {
    $18 = $12 - $wB$0;
    if ($18 == 0.0) {
     $threshold$3 = $threshold$0;
     break;
    }
    $22 = $sumB$0 + +((Math_imul($indvars$iv, $14) | 0) >>> 0);
    $27 = $22 / $wB$0 - ($$lcssa - $22) / $18;
    $29 = $27 * ($wB$0 * $18 * $27);
    $30 = $29 > $varMax$0;
    $31 = $indvars$iv & 255;
    $$pre$phiZ2D = $31;
    $sumB$1 = $22;
    $threshold$2 = $30 ? $31 : $threshold$0;
    $varMax$2 = $30 ? $29 : $varMax$0;
   } else {
    $$pre$phiZ2D = $indvars$iv & 255;
    $sumB$1 = $sumB$0;
    $threshold$2 = $threshold$0;
    $varMax$2 = $varMax$0;
   }
   if ($$pre$phiZ2D << 24 >> 24 == -1) {
    $threshold$3 = $threshold$2;
    break;
   } else {
    $indvars$iv = $indvars$iv + 1 | 0;
    $sumB$0 = $sumB$1;
    $threshold$0 = $threshold$2;
    $varMax$0 = $varMax$2;
   }
  }
  HEAP8[$value_p >> 0] = $threshold$3;
  $$0 = 0;
 }
 return $$0 | 0;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $5 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $3 = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $5 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = $static_type;
 HEAP32[$info + 12 >> 2] = $src2dst_offset;
 $9 = $info + 16 | 0;
 $10 = $info + 20 | 0;
 $11 = $info + 24 | 0;
 $12 = $info + 28 | 0;
 $13 = $info + 32 | 0;
 $14 = $info + 40 | 0;
 $15 = ($5 | 0) == ($dst_type | 0);
 dest = $9;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9 + 36 >> 1] = 0;
 HEAP8[$9 + 38 >> 0] = 0;
 L1 : do if ($15) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$dst_type >> 2] | 0) + 20 >> 2] & 3]($dst_type, $info, $3, $3, 1, 0);
  $dst_ptr$0 = (HEAP32[$11 >> 2] | 0) == 1 ? $3 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 24 >> 2] & 3]($5, $info, $3, 1, 0);
  switch (HEAP32[$info + 36 >> 2] | 0) {
  case 0:
   {
    $dst_ptr$0 = (HEAP32[$14 >> 2] | 0) == 1 & (HEAP32[$12 >> 2] | 0) == 1 & (HEAP32[$13 >> 2] | 0) == 1 ? HEAP32[$10 >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $dst_ptr$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$11 >> 2] | 0) != 1) if (!((HEAP32[$14 >> 2] | 0) == 0 & (HEAP32[$12 >> 2] | 0) == 1 & (HEAP32[$13 >> 2] | 0) == 1)) {
   $dst_ptr$0 = 0;
   break;
  }
  $dst_ptr$0 = HEAP32[$9 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this | 0;
 __embind_register_void(288, 14338);
 __embind_register_bool(296, 14351, 1, 1, 0);
 __embind_register_integer(304, 14356, 1, -128, 127);
 __embind_register_integer(320, 14361, 1, -128, 127);
 __embind_register_integer(312, 14373, 1, 0, 255);
 __embind_register_integer(328, 14387, 2, -32768, 32767);
 __embind_register_integer(336, 14393, 2, 0, 65535);
 __embind_register_integer(344, 14408, 4, -2147483648, 2147483647);
 __embind_register_integer(352, 14412, 4, 0, -1);
 __embind_register_integer(360, 14425, 4, -2147483648, 2147483647);
 __embind_register_integer(368, 14430, 4, 0, -1);
 __embind_register_float(376, 14500, 4);
 __embind_register_float(384, 14506, 8);
 __embind_register_std_string(8, 15344);
 __embind_register_std_string(40, 9999);
 __embind_register_std_wstring(64, 4, 10095);
 __embind_register_emval(88, 10127);
 __embind_register_memory_view(96, 0, 10174);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(10204);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(10272);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(10342);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(10404);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(10475);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(10535);
 __embind_register_memory_view(152, 4, 10635);
 __embind_register_memory_view(160, 5, 10696);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(10735);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(10767);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(10800);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(10833);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(10867);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(10900);
 __embind_register_memory_view(168, 6, 10965);
 __embind_register_memory_view(176, 7, 11027);
 __embind_register_memory_view(184, 7, 11090);
 return;
}

function _arSetPixelFormat($handle, $pixFormat) {
 $handle = $handle | 0;
 $pixFormat = $pixFormat | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $7 = 0, $monoFormat$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 L1 : do if (!$handle) $$0 = -1; else {
  $1 = $handle + 4 | 0;
  if ((HEAP32[$1 >> 2] | 0) == ($pixFormat | 0)) $$0 = 0; else {
   switch ($pixFormat | 0) {
   case 11:
   case 10:
   case 9:
   case 8:
   case 7:
   case 6:
   case 4:
   case 3:
   case 2:
   case 1:
   case 0:
    {
     $monoFormat$0 = 0;
     break;
    }
   case 14:
   case 13:
   case 12:
   case 5:
    {
     $monoFormat$0 = 1;
     break;
    }
   default:
    {
     HEAP32[$vararg_buffer >> 2] = $pixFormat;
     _arLog(3, 2956, $vararg_buffer);
     $$0 = -1;
     break L1;
    }
   }
   HEAP32[$1 >> 2] = $pixFormat;
   $4 = _arUtilGetPixelSize($pixFormat) | 0;
   HEAP32[$handle + 8 >> 2] = $4;
   $6 = $handle + 7062408 | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   if ($7 | 0) {
    _arImageProcFinal($7);
    $14 = _arImageProcInit(HEAP32[$handle + 36 >> 2] | 0, HEAP32[$handle + 40 >> 2] | 0, HEAP32[$1 >> 2] | 0, 0) | 0;
    HEAP32[$6 >> 2] = $14;
   }
   $16 = $handle + 24 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   if (!$monoFormat$0) switch ($17 | 0) {
   case 1:
    {
     HEAP32[$16 >> 2] = 4;
     $$0 = 0;
     break L1;
     break;
    }
   case 4:
    {
     HEAP32[$16 >> 2] = 3;
     $$0 = 0;
     break L1;
     break;
    }
   default:
    {
     $$0 = 0;
     break L1;
    }
   } else switch ($17 | 0) {
   case 0:
    {
     HEAP32[$16 >> 2] = 1;
     $$0 = 0;
     break L1;
     break;
    }
   case 3:
    {
     HEAP32[$16 >> 2] = 4;
     $$0 = 0;
     break L1;
     break;
    }
   default:
    {
     $$0 = 0;
     break L1;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function ___stpcpy($d, $s) {
 $d = $d | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $10 = 0, $14 = 0, $20 = 0, $21 = 0, $22 = 0, $29 = 0, $32 = 0, $33 = 0, $7 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0;
 $0 = $s;
 L1 : do if (!(($0 ^ $d) & 3)) {
  if (!($0 & 3)) {
   $$0$lcssa = $s;
   $$01$lcssa = $d;
  } else {
   $$0115 = $d;
   $$016 = $s;
   while (1) {
    $7 = HEAP8[$$016 >> 0] | 0;
    HEAP8[$$0115 >> 0] = $7;
    if (!($7 << 24 >> 24)) {
     $$03 = $$0115;
     break L1;
    }
    $9 = $$016 + 1 | 0;
    $10 = $$0115 + 1 | 0;
    if (!($9 & 3)) {
     $$0$lcssa = $9;
     $$01$lcssa = $10;
     break;
    } else {
     $$0115 = $10;
     $$016 = $9;
    }
   }
  }
  $14 = HEAP32[$$0$lcssa >> 2] | 0;
  if (!(($14 & -2139062144 ^ -2139062144) & $14 + -16843009)) {
   $22 = $14;
   $wd$010 = $$01$lcssa;
   $ws$011 = $$0$lcssa;
   while (1) {
    $20 = $ws$011 + 4 | 0;
    $21 = $wd$010 + 4 | 0;
    HEAP32[$wd$010 >> 2] = $22;
    $22 = HEAP32[$20 >> 2] | 0;
    if (($22 & -2139062144 ^ -2139062144) & $22 + -16843009 | 0) {
     $wd$0$lcssa = $21;
     $ws$0$lcssa = $20;
     break;
    } else {
     $wd$010 = $21;
     $ws$011 = $20;
    }
   }
  } else {
   $wd$0$lcssa = $$01$lcssa;
   $ws$0$lcssa = $$0$lcssa;
  }
  $$1$ph = $ws$0$lcssa;
  $$12$ph = $wd$0$lcssa;
  label = 8;
 } else {
  $$1$ph = $s;
  $$12$ph = $d;
  label = 8;
 } while (0);
 if ((label | 0) == 8) {
  $29 = HEAP8[$$1$ph >> 0] | 0;
  HEAP8[$$12$ph >> 0] = $29;
  if (!($29 << 24 >> 24)) $$03 = $$12$ph; else {
   $$128 = $$12$ph;
   $$19 = $$1$ph;
   while (1) {
    $$19 = $$19 + 1 | 0;
    $32 = $$128 + 1 | 0;
    $33 = HEAP8[$$19 >> 0] | 0;
    HEAP8[$32 >> 0] = $33;
    if (!($33 << 24 >> 24)) {
     $$03 = $32;
     break;
    } else $$128 = $32;
   }
  }
 }
 return $$03 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$4 = 0, $10 = 0, $17 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $t$0 = 0, $t$0$lcssa = 0, $t$0$looptemp = 0;
 L1 : do if (($first | 0) == ($last | 0)) $$4 = $first; else switch (HEAP8[$first >> 0] | 0) {
 case 88:
  {
   $3 = $first + 1 | 0;
   $4 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($3, $last, $db) | 0;
   if (($4 | 0) == ($3 | 0) | ($4 | 0) == ($last | 0)) {
    $$4 = $first;
    break L1;
   }
   $$4 = (HEAP8[$4 >> 0] | 0) == 69 ? $4 + 1 | 0 : $first;
   break L1;
   break;
  }
 case 74:
  {
   $10 = $first + 1 | 0;
   if (($10 | 0) == ($last | 0)) {
    $$4 = $first;
    break L1;
   } else $t$0 = $10;
   while (1) {
    if ((HEAP8[$t$0 >> 0] | 0) == 69) {
     $t$0$lcssa = $t$0;
     break;
    }
    $t$0$looptemp = $t$0;
    $t$0 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
    if (($t$0 | 0) == ($t$0$looptemp | 0)) {
     $$4 = $first;
     break L1;
    }
   }
   $$4 = $t$0$lcssa + 1 | 0;
   break L1;
   break;
  }
 case 76:
  {
   $17 = $first + 1 | 0;
   if (($17 | 0) != ($last | 0)) if ((HEAP8[$17 >> 0] | 0) == 90) {
    $21 = $first + 2 | 0;
    $22 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($21, $last, $db) | 0;
    if (($22 | 0) == ($21 | 0) | ($22 | 0) == ($last | 0)) {
     $$4 = $first;
     break L1;
    }
    $$4 = (HEAP8[$22 >> 0] | 0) == 69 ? $22 + 1 | 0 : $first;
    break L1;
   }
   $$4 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   break L1;
   break;
  }
 default:
  {
   $$4 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   break L1;
  }
 } while (0);
 return $$4 | 0;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $6 = 0, $7 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) $$0 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $32 = ___lockfile($f) | 0; else $32 = 0;
  $6 = HEAP32[$f >> 2] | 0;
  $7 = $6 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $6 & -33;
  $12 = $f + 48 | 0;
  if (!(HEAP32[$12 >> 2] | 0)) {
   $16 = $f + 44 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$16 >> 2] = $internal_buf;
   $18 = $f + 28 | 0;
   HEAP32[$18 >> 2] = $internal_buf;
   $19 = $f + 20 | 0;
   HEAP32[$19 >> 2] = $internal_buf;
   HEAP32[$12 >> 2] = 80;
   $21 = $f + 16 | 0;
   HEAP32[$21 >> 2] = $internal_buf + 80;
   $22 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   if (!$17) $ret$1 = $22; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
    $$ = (HEAP32[$19 >> 2] | 0) == 0 ? -1 : $22;
    HEAP32[$16 >> 2] = $17;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$18 >> 2] = 0;
    HEAP32[$19 >> 2] = 0;
    $ret$1 = $$;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  $28 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $28 | $7;
  if ($32 | 0) ___unlockfile($f);
  $$0 = ($28 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _setMarkerInfoVertex($id, $markerIndex) {
 $id = $id | 0;
 $markerIndex = $markerIndex | 0;
 var $$1 = 0, $0 = 0, $13 = 0.0, $15 = 0.0, $17 = 0.0, $19 = 0.0, $21 = 0.0, $23 = 0.0, $25 = 0.0, $27 = 0.0, $5 = 0, $6 = 0, $_ZL11gMarkerInfo$ = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 do if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = HEAP32[431] | 0; else {
  $5 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if ((HEAP32[$6 + 44 >> 2] | 0) > ($markerIndex | 0)) {
   $_ZL11gMarkerInfo$ = ($markerIndex | 0) < 0 ? 16336 : $6 + 48 + ($markerIndex << 8) | 0;
   $13 = +HEAPF64[2030];
   HEAPF64[$_ZL11gMarkerInfo$ + 168 >> 3] = $13;
   $15 = +HEAPF64[2031];
   HEAPF64[$_ZL11gMarkerInfo$ + 176 >> 3] = $15;
   $17 = +HEAPF64[2032];
   HEAPF64[$_ZL11gMarkerInfo$ + 184 >> 3] = $17;
   $19 = +HEAPF64[2033];
   HEAPF64[$_ZL11gMarkerInfo$ + 192 >> 3] = $19;
   $21 = +HEAPF64[2034];
   HEAPF64[$_ZL11gMarkerInfo$ + 200 >> 3] = $21;
   $23 = +HEAPF64[2035];
   HEAPF64[$_ZL11gMarkerInfo$ + 208 >> 3] = $23;
   $25 = +HEAPF64[2036];
   HEAPF64[$_ZL11gMarkerInfo$ + 216 >> 3] = $25;
   $27 = +HEAPF64[2037];
   HEAPF64[$_ZL11gMarkerInfo$ + 224 >> 3] = $27;
   HEAPF64[$_ZL11gMarkerInfo$ + 56 >> 3] = ($13 + $17 + $21 + $25) * .25;
   HEAPF64[$_ZL11gMarkerInfo$ + 64 >> 3] = ($15 + $19 + $23 + $27) * .25;
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[432] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $p$0 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $3 = $info + 52 | 0;
  $4 = HEAP16[$3 >> 1] | 0;
  $5 = $4 & 255;
  $6 = $info + 53 | 0;
  $8 = ($4 & 65535) >>> 8 & 255;
  $11 = HEAP32[$this + 12 >> 2] | 0;
  $12 = $this + 16 + ($11 << 3) | 0;
  HEAP8[$3 >> 0] = 0;
  HEAP8[$6 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  L4 : do if (($11 | 0) > 1) {
   $15 = $info + 24 | 0;
   $16 = $this + 8 | 0;
   $17 = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    if (HEAP8[$17 >> 0] | 0) break L4;
    $20 = HEAP16[$3 >> 1] | 0;
    if (!(($20 & 255) << 24 >> 24)) {
     if (($20 & 65535) >= 256) if (!(HEAP32[$16 >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[$15 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[$16 >> 2] & 2)) break L4;
    }
    HEAP8[$3 >> 0] = 0;
    HEAP8[$6 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $12 >>> 0);
  } while (0);
  HEAP8[$3 >> 0] = $5;
  HEAP8[$6 >> 0] = $8;
 }
 return;
}

function _confidenceCutoff($arHandle) {
 $arHandle = $arHandle | 0;
 var $19 = 0, $29 = 0, $3 = 0, $35 = 0, $5 = 0, $7 = 0, $9 = 0, $cfOK$0 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0;
 L1 : do switch (HEAP32[$arHandle + 24 >> 2] | 0) {
 case 1:
 case 0:
  {
   $5 = HEAP32[$arHandle + 44 >> 2] | 0;
   $i$0 = 0;
   while (1) {
    if (($i$0 | 0) >= ($5 | 0)) break L1;
    $9 = $arHandle + 48 + ($i$0 << 8) + 4 | 0;
    if ((HEAP32[$9 >> 2] | 0) > -1) if (+HEAPF64[$arHandle + 48 + ($i$0 << 8) + 32 >> 3] < .5) {
     HEAP32[$arHandle + 48 + ($i$0 << 8) + 8 >> 2] = -1;
     HEAP32[$9 >> 2] = -1;
     HEAP32[$arHandle + 48 + ($i$0 << 8) + 236 >> 2] = 6;
    }
    $i$0 = $i$0 + 1 | 0;
   }
   break;
  }
 case 2:
  {
   $3 = HEAP32[$arHandle + 44 >> 2] | 0;
   $i$1 = 0;
   while (1) {
    if (($i$1 | 0) >= ($3 | 0)) break L1;
    $19 = $arHandle + 48 + ($i$1 << 8) + 4 | 0;
    if ((HEAP32[$19 >> 2] | 0) > -1) if (+HEAPF64[$arHandle + 48 + ($i$1 << 8) + 32 >> 3] < .5) {
     HEAP32[$arHandle + 48 + ($i$1 << 8) + 12 >> 2] = -1;
     HEAP32[$19 >> 2] = -1;
     HEAP32[$arHandle + 48 + ($i$1 << 8) + 236 >> 2] = 6;
    }
    $i$1 = $i$1 + 1 | 0;
   }
   break;
  }
 default:
  {
   $7 = HEAP32[$arHandle + 44 >> 2] | 0;
   $i$2 = 0;
   while (1) {
    if (($i$2 | 0) >= ($7 | 0)) break L1;
    $29 = $arHandle + 48 + ($i$2 << 8) + 8 | 0;
    if ((HEAP32[$29 >> 2] | 0) > -1) if (+HEAPF64[$arHandle + 48 + ($i$2 << 8) + 40 >> 3] < .5) {
     HEAP32[$29 >> 2] = -1;
     $cfOK$0 = 0;
    } else $cfOK$0 = 1; else $cfOK$0 = 1;
    $35 = $arHandle + 48 + ($i$2 << 8) + 12 | 0;
    if ((HEAP32[$35 >> 2] | 0) > -1) if (+HEAPF64[$arHandle + 48 + ($i$2 << 8) + 48 >> 3] < .5) {
     HEAP32[$35 >> 2] = -1;
     if (!$cfOK$0) HEAP32[$arHandle + 48 + ($i$2 << 8) + 236 >> 2] = 6;
    }
    $i$2 = $i$2 + 1 | 0;
   }
  }
 } while (0);
 return;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $15 = 0, $2 = 0, $27 = 0, $30 = 0, $31 = 0, $7 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iov = sp + 32 | 0;
 HEAP32[$iov >> 2] = $buf;
 $0 = $iov + 4 | 0;
 $1 = $f + 48 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 >> 2] = $len - (($2 | 0) != 0 & 1);
 $7 = $f + 44 | 0;
 HEAP32[$iov + 8 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$iov + 12 >> 2] = $2;
 if (!(HEAP32[4166] | 0)) {
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer3 + 4 >> 2] = $iov;
  HEAP32[$vararg_buffer3 + 8 >> 2] = 2;
  $cnt$0 = ___syscall_ret(___syscall145(145, $vararg_buffer3 | 0) | 0) | 0;
 } else {
  _pthread_cleanup_push(13, $f | 0);
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = $iov;
  HEAP32[$vararg_buffer + 8 >> 2] = 2;
  $15 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 if (($cnt$0 | 0) < 1) {
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | $cnt$0 & 48 ^ 16;
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0 >> 2] | 0;
  if ($cnt$0 >>> 0 > $27 >>> 0) {
   $30 = HEAP32[$7 >> 2] | 0;
   $31 = $f + 4 | 0;
   HEAP32[$31 >> 2] = $30;
   $$cast = $30;
   HEAP32[$f + 8 >> 2] = $$cast + ($cnt$0 - $27);
   if (!(HEAP32[$1 >> 2] | 0)) $$0 = $len; else {
    HEAP32[$31 >> 2] = $$cast + 1;
    HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
    $$0 = $len;
   }
  } else $$0 = $cnt$0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$3 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $3 = 0, $5 = 0, $6 = 0, $args = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $args = sp;
 if (($first | 0) == ($last | 0)) $$3 = $first; else {
  $1 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  if (($1 | 0) == ($first | 0)) $$3 = $first; else {
   $3 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1, $last, $db) | 0;
   if (($3 | 0) == ($1 | 0)) $$3 = $1; else {
    $5 = $db + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    if ((($6 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $$3 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $6 + -24 | 0);
     $13 = HEAP32[$5 >> 2] | 0;
     $14 = $13 + -24 | 0;
     $15 = $13;
     while (1) {
      if (($15 | 0) == ($14 | 0)) break;
      $17 = $15 + -24 | 0;
      HEAP32[$5 >> 2] = $17;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
      $15 = HEAP32[$5 >> 2] | 0;
     }
     $19 = HEAP8[$args >> 0] | 0;
     $21 = ($19 & 1) == 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($13 + -48 | 0, $21 ? $args + 1 | 0 : HEAP32[$args + 8 >> 2] | 0, $21 ? ($19 & 255) >>> 1 : HEAP32[$args + 4 >> 2] | 0) | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $$3 = $3;
    }
   }
  }
 }
 STACKTOP = sp;
 return $$3 | 0;
}

function _get_vertex($x_coord, $y_coord, $st, $ed, $thresh, $vertex, $vnum) {
 $x_coord = $x_coord | 0;
 $y_coord = $y_coord | 0;
 $st = $st | 0;
 $ed = $ed | 0;
 $thresh = +$thresh;
 $vertex = $vertex | 0;
 $vnum = $vnum | 0;
 var $$0 = 0, $1 = 0, $11 = 0.0, $15 = 0.0, $16 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $38 = 0, $5 = 0.0, $7 = 0, $9 = 0, $dmax$0 = 0.0, $dmax$0$lcssa = 0.0, $i$0 = 0, $v1$0 = 0, $v1$0$lcssa = 0, $v1$1 = 0, label = 0;
 $1 = HEAP32[$y_coord + ($ed << 2) >> 2] | 0;
 $3 = HEAP32[$y_coord + ($st << 2) >> 2] | 0;
 $5 = +($1 - $3 | 0);
 $7 = HEAP32[$x_coord + ($st << 2) >> 2] | 0;
 $9 = HEAP32[$x_coord + ($ed << 2) >> 2] | 0;
 $11 = +($7 - $9 | 0);
 $15 = +((Math_imul($9, $3) | 0) - (Math_imul($7, $1) | 0) | 0);
 $16 = $st + 1 | 0;
 $dmax$0 = 0.0;
 $i$0 = $16;
 $v1$0 = $16;
 while (1) {
  if (($i$0 | 0) >= ($ed | 0)) {
   $dmax$0$lcssa = $dmax$0;
   $v1$0$lcssa = $v1$0;
   break;
  }
  $27 = $15 + ($5 * +(HEAP32[$x_coord + ($i$0 << 2) >> 2] | 0) + $11 * +(HEAP32[$y_coord + ($i$0 << 2) >> 2] | 0));
  $28 = $27 * $27;
  $29 = $28 > $dmax$0;
  $v1$1 = $29 ? $i$0 : $v1$0;
  $dmax$0 = $29 ? $28 : $dmax$0;
  $i$0 = $i$0 + 1 | 0;
  $v1$0 = $v1$1;
 }
 if ($dmax$0$lcssa / ($5 * $5 + $11 * $11) > $thresh) if ((_get_vertex($x_coord, $y_coord, $st, $v1$0$lcssa, $thresh, $vertex, $vnum) | 0) < 0) $$0 = -1; else {
  $38 = HEAP32[$vnum >> 2] | 0;
  if (($38 | 0) > 5) $$0 = -1; else {
   HEAP32[$vertex + ($38 << 2) >> 2] = $v1$0$lcssa;
   HEAP32[$vnum >> 2] = (HEAP32[$vnum >> 2] | 0) + 1;
   if ((_get_vertex($x_coord, $y_coord, $v1$0$lcssa, $ed, $thresh, $vertex, $vnum) | 0) < 0) $$0 = -1; else label = 8;
  }
 } else label = 8;
 if ((label | 0) == 8) $$0 = 0;
 return $$0 | 0;
}

function _teardown($id) {
 $id = $id | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $i$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$0 = -1; else {
  $3 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  $4 = $3 + 196 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  if ($5 | 0) {
   _free($5);
   HEAP32[$4 >> 2] = 0;
   HEAP32[$3 + 200 >> 2] = 0;
  }
  _deleteHandle($3);
  _arPattDeleteHandle(HEAP32[$3 + 216 >> 2] | 0) | 0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE14__erase_uniqueIiEEjRKT_(16616, $0) | 0;
  $10 = $3 + 248 | 0;
  $11 = $3 + 252 | 0;
  $i$0 = 0;
  while (1) {
   $13 = HEAP32[$10 >> 2] | 0;
   if ($i$0 >>> 0 >= (HEAP32[$11 >> 2] | 0) - $13 >> 3 >>> 0) break;
   _arMultiFreeConfig(HEAP32[$13 + ($i$0 << 3) + 4 >> 2] | 0) | 0;
   $i$0 = $i$0 + 1 | 0;
  }
  __ZNSt3__113__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($10);
  __ZdlPv($10);
  __ZNSt3__113__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($3 + 248 | 0);
  __ZdlPv($3);
  $$0 = 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _arLog($logLevel, $format, $varargs) {
 $logLevel = $logLevel | 0;
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $12 = 0, $15 = 0, $16 = 0, $21 = 0, $28 = 0, $5 = 0, $7 = 0, $ap = 0, $buf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $buf = sp + 16 | 0;
 $ap = sp;
 HEAP32[$buf >> 2] = 0;
 if (!(($format | 0) == 0 | (HEAP32[408] | 0) > ($logLevel | 0))) if (HEAP8[$format >> 0] | 0) {
  HEAP32[$ap >> 2] = $varargs;
  $5 = _vasprintf($buf, $format, $ap) | 0;
  if (($5 | 0) > -1) {
   $7 = HEAP32[4148] | 0;
   do if (!$7) _fputs(HEAP32[$buf >> 2] | 0, HEAP32[499] | 0) | 0; else {
    if (!(HEAP32[4149] | 0)) {
     FUNCTION_TABLE_vi[$7 & 15](HEAP32[$buf >> 2] | 0);
     break;
    }
    $12 = _pthread_self() | 0;
    $15 = HEAP32[4151] | 0;
    if (($12 | 0) == (HEAP32[4150] | 0)) {
     if (($15 | 0) > 0) {
      FUNCTION_TABLE_vi[$7 & 15](HEAP32[4153] | 0);
      HEAP32[4151] = 0;
      $28 = HEAP32[4148] | 0;
     } else $28 = $7;
     FUNCTION_TABLE_vi[$28 & 15](HEAP32[$buf >> 2] | 0);
     break;
    }
    $16 = HEAP32[4152] | 0;
    if (($15 | 0) < ($16 | 0)) {
     $21 = (HEAP32[4153] | 0) + $15 | 0;
     if (($5 | 0) < (-3 - $15 + $16 | 0)) {
      _strcpy($21, HEAP32[$buf >> 2] | 0) | 0;
      HEAP32[4151] = (HEAP32[4151] | 0) + $5;
      break;
     } else {
      HEAP8[$21 >> 0] = 46;
      HEAP8[$21 + 1 >> 0] = 46;
      HEAP8[$21 + 2 >> 0] = 46;
      HEAP8[$21 + 3 >> 0] = 0;
      HEAP32[4151] = $16;
      break;
     }
    }
   } while (0);
   _free(HEAP32[$buf >> 2] | 0);
  }
 }
 STACKTOP = sp;
 return;
}

function _strspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $11 = 0, $14 = 0, $18 = 0, $24 = 0, $33 = 0, $byteset = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $byteset = sp;
 HEAP32[$byteset >> 2] = 0;
 HEAP32[$byteset + 4 >> 2] = 0;
 HEAP32[$byteset + 8 >> 2] = 0;
 HEAP32[$byteset + 12 >> 2] = 0;
 HEAP32[$byteset + 16 >> 2] = 0;
 HEAP32[$byteset + 20 >> 2] = 0;
 HEAP32[$byteset + 24 >> 2] = 0;
 HEAP32[$byteset + 28 >> 2] = 0;
 $0 = HEAP8[$c >> 0] | 0;
 do if (!($0 << 24 >> 24)) $$0 = 0; else {
  if (!(HEAP8[$c + 1 >> 0] | 0)) {
   $$03 = $s;
   while (1) if ((HEAP8[$$03 >> 0] | 0) == $0 << 24 >> 24) $$03 = $$03 + 1 | 0; else {
    $$03$lcssa = $$03;
    break;
   }
   $$0 = $$03$lcssa - $s | 0;
   break;
  } else {
   $$028 = $c;
   $14 = $0;
  }
  do {
   $18 = $byteset + ((($14 & 255) >>> 5 & 255) << 2) | 0;
   HEAP32[$18 >> 2] = HEAP32[$18 >> 2] | 1 << ($14 & 31);
   $$028 = $$028 + 1 | 0;
   $14 = HEAP8[$$028 >> 0] | 0;
  } while ($14 << 24 >> 24 != 0);
  $11 = HEAP8[$s >> 0] | 0;
  L10 : do if (!($11 << 24 >> 24)) $$1$lcssa = $s; else {
   $$16 = $s;
   $24 = $11;
   while (1) {
    if (!(HEAP32[$byteset + ((($24 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($24 & 31))) {
     $$1$lcssa = $$16;
     break L10;
    }
    $33 = $$16 + 1 | 0;
    $24 = HEAP8[$33 >> 0] | 0;
    if (!($24 << 24 >> 24)) {
     $$1$lcssa = $33;
     break;
    } else $$16 = $33;
   }
  } while (0);
  $$0 = $$1$lcssa - $s | 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arMatrixMul($dest, $a, $b) {
 $dest = $dest | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $17 = 0, $19 = 0, $20 = 0, $29 = 0.0, $30 = 0.0, $6 = 0, $c$0 = 0, $i$0 = 0, $p1$0 = 0, $p2$0 = 0, $p3$0 = 0, $p3$1 = 0, $p3$1$lcssa = 0, $r$0 = 0;
 $0 = $a + 8 | 0;
 L1 : do if ((HEAP32[$0 >> 2] | 0) == (HEAP32[$b + 4 >> 2] | 0)) {
  $6 = HEAP32[$dest + 4 >> 2] | 0;
  if (($6 | 0) == (HEAP32[$a + 4 >> 2] | 0)) {
   $10 = $dest + 8 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$b + 8 >> 2] | 0)) {
    $p3$0 = HEAP32[$dest >> 2] | 0;
    $r$0 = 0;
    while (1) {
     if (($r$0 | 0) >= ($6 | 0)) {
      $$0 = 0;
      break L1;
     }
     $17 = HEAP32[$10 >> 2] | 0;
     $c$0 = 0;
     $p3$1 = $p3$0;
     while (1) {
      if (($c$0 | 0) >= ($17 | 0)) {
       $p3$1$lcssa = $p3$1;
       break;
      }
      HEAPF64[$p3$1 >> 3] = 0.0;
      $19 = HEAP32[$0 >> 2] | 0;
      $20 = Math_imul($19, $r$0) | 0;
      $30 = 0.0;
      $i$0 = 0;
      $p1$0 = (HEAP32[$a >> 2] | 0) + ($20 << 3) | 0;
      $p2$0 = (HEAP32[$b >> 2] | 0) + ($c$0 << 3) | 0;
      while (1) {
       if (($i$0 | 0) >= ($19 | 0)) break;
       $29 = $30 + +HEAPF64[$p1$0 >> 3] * +HEAPF64[$p2$0 >> 3];
       HEAPF64[$p3$1 >> 3] = $29;
       $30 = $29;
       $i$0 = $i$0 + 1 | 0;
       $p1$0 = $p1$0 + 8 | 0;
       $p2$0 = $p2$0 + ($11 << 3) | 0;
      }
      $c$0 = $c$0 + 1 | 0;
      $p3$1 = $p3$1 + 8 | 0;
     }
     $p3$0 = $p3$1$lcssa;
     $r$0 = $r$0 + 1 | 0;
    }
   } else $$0 = -1;
  } else $$0 = -1;
 } else $$0 = -1; while (0);
 return $$0 | 0;
}

function _getMultiEachMarkerInfo($id, $multiMarkerId, $markerIndex) {
 $id = $id | 0;
 $multiMarkerId = $multiMarkerId | 0;
 $markerIndex = $markerIndex | 0;
 var $$2 = 0, $0 = 0, $16 = 0, $22 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 do if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$2 = HEAP32[431] | 0; else {
  $4 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  $8 = HEAP32[$4 + 248 >> 2] | 0;
  if (($multiMarkerId | 0) < 0 ? 1 : (HEAP32[$4 + 252 >> 2] | 0) - $8 >> 3 >>> 0 <= $multiMarkerId >>> 0) {
   $$2 = HEAP32[433] | 0;
   break;
  }
  $16 = HEAP32[$8 + ($multiMarkerId << 3) + 4 >> 2] | 0;
  if (($markerIndex | 0) < 0 ? 1 : (HEAP32[$16 + 4 >> 2] | 0) <= ($markerIndex | 0)) {
   $$2 = HEAP32[432] | 0;
   break;
  } else {
   $22 = HEAP32[$16 >> 2] | 0;
   _matrixCopy($22 + ($markerIndex * 320 | 0) + 16 | 0, 16240);
   _emscripten_asm_const_iiiid(1, HEAP32[$22 + ($markerIndex * 320 | 0) + 304 >> 2] | 0, HEAP32[$22 + ($markerIndex * 320 | 0) >> 2] | 0, HEAP32[$22 + ($markerIndex * 320 | 0) + 4 >> 2] | 0, +(+HEAPF64[$22 + ($markerIndex * 320 | 0) + 8 >> 3])) | 0;
   $$2 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$2 | 0;
}

function _fread($destv, $size, $nmemb, $f) {
 $destv = $destv | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $$ = 0, $$0 = 0, $0 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $7 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0;
 $0 = Math_imul($nmemb, $size) | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $30 = ___lockfile($f) | 0; else $30 = 0;
 $5 = $f + 74 | 0;
 $7 = HEAP8[$5 >> 0] | 0;
 HEAP8[$5 >> 0] = $7 + 255 | $7;
 $13 = $f + 4 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = (HEAP32[$f + 8 >> 2] | 0) - $14 | 0;
 $17 = $14;
 if (($15 | 0) > 0) {
  $$ = $15 >>> 0 < $0 >>> 0 ? $15 : $0;
  _memcpy($destv | 0, $17 | 0, $$ | 0) | 0;
  HEAP32[$13 >> 2] = $17 + $$;
  $dest$0$ph = $destv + $$ | 0;
  $l$0$ph = $0 - $$ | 0;
 } else {
  $dest$0$ph = $destv;
  $l$0$ph = $0;
 }
 L7 : do if (!$l$0$ph) label = 13; else {
  $23 = $f + 32 | 0;
  $dest$02 = $dest$0$ph;
  $l$03 = $l$0$ph;
  while (1) {
   if (___toread($f) | 0) {
    $l$03$lcssa = $l$03;
    break;
   }
   $27 = FUNCTION_TABLE_iiii[HEAP32[$23 >> 2] & 15]($f, $dest$02, $l$03) | 0;
   if (($27 + 1 | 0) >>> 0 < 2) {
    $l$03$lcssa = $l$03;
    break;
   }
   if (($l$03 | 0) == ($27 | 0)) {
    label = 13;
    break L7;
   } else {
    $dest$02 = $dest$02 + $27 | 0;
    $l$03 = $l$03 - $27 | 0;
   }
  }
  if ($30 | 0) ___unlockfile($f);
  $$0 = (($0 - $l$03$lcssa | 0) >>> 0) / ($size >>> 0) | 0;
 } while (0);
 if ((label | 0) == 13) if (!$30) $$0 = $nmemb; else {
  ___unlockfile($f);
  $$0 = $nmemb;
 }
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueERS7_E4typeESC_SC_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $21 = 0, $27 = 0, $33 = 0, $40 = 0, $8 = 0, $__p$0 = 0, $scevgep1 = 0;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $15 = ($1 & 255) >>> 1;
  $16 = 10;
  $40 = $1;
 } else {
  $8 = HEAP32[$this >> 2] | 0;
  $15 = HEAP32[$this + 4 >> 2] | 0;
  $16 = ($8 & -2) + -1 | 0;
  $40 = $8 & 255;
 }
 $12 = $__last - $0 | 0;
 do if (($__last | 0) != ($__first | 0)) {
  if (($16 - $15 | 0) >>> 0 < $12 >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $16, $15 + $12 - $16 | 0, $15, $15, 0);
   $21 = HEAP8[$this >> 0] | 0;
  } else $21 = $40;
  if (!($21 & 1)) $27 = $this + 1 | 0; else $27 = HEAP32[$this + 8 >> 2] | 0;
  $scevgep1 = $__last + ($15 - $0) | 0;
  $$0 = $__first;
  $__p$0 = $27 + $15 | 0;
  while (1) {
   if (($$0 | 0) == ($__last | 0)) break;
   HEAP8[$__p$0 >> 0] = HEAP8[$$0 >> 0] | 0;
   $$0 = $$0 + 1 | 0;
   $__p$0 = $__p$0 + 1 | 0;
  }
  HEAP8[$27 + $scevgep1 >> 0] = 0;
  $33 = $15 + $12 | 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $33 << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $33;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $33 = 0, $9 = 0;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $20 = $this + 1 | 0; else $20 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  $17 = $12 >>> 0 < 11 ? 11 : $12 + 16 & -16;
 } else $17 = -17;
 $18 = _malloc($17) | 0;
 if ($__n_copy | 0) _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0;
 if ($__n_add | 0) _memcpy($18 + $__n_copy | 0, $__p_new_stuff | 0, $__n_add | 0) | 0;
 $23 = $__old_sz - $__n_del | 0;
 if (($23 | 0) != ($__n_copy | 0)) _memcpy($18 + $__n_copy + $__n_add | 0, $20 + $__n_copy + $__n_del | 0, $23 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 10) _free($20);
 HEAP32[$this + 8 >> 2] = $18;
 HEAP32[$this >> 2] = $17 | 1;
 $33 = $23 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $33;
 HEAP8[$18 + $33 >> 0] = 0;
 return;
}

function _strcspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$035 = 0, $0 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $32 = 0, $byteset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c >> 0] | 0;
 if (!($0 << 24 >> 24)) label = 3; else if (!(HEAP8[$c + 1 >> 0] | 0)) label = 3; else {
  HEAP32[$byteset >> 2] = 0;
  HEAP32[$byteset + 4 >> 2] = 0;
  HEAP32[$byteset + 8 >> 2] = 0;
  HEAP32[$byteset + 12 >> 2] = 0;
  HEAP32[$byteset + 16 >> 2] = 0;
  HEAP32[$byteset + 20 >> 2] = 0;
  HEAP32[$byteset + 24 >> 2] = 0;
  HEAP32[$byteset + 28 >> 2] = 0;
  $$027 = $c;
  $13 = $0;
  do {
   $17 = $byteset + ((($13 & 255) >>> 5 & 255) << 2) | 0;
   HEAP32[$17 >> 2] = HEAP32[$17 >> 2] | 1 << ($13 & 31);
   $$027 = $$027 + 1 | 0;
   $13 = HEAP8[$$027 >> 0] | 0;
  } while ($13 << 24 >> 24 != 0);
  $10 = HEAP8[$s >> 0] | 0;
  L7 : do if (!($10 << 24 >> 24)) $$03$lcssa = $s; else {
   $$035 = $s;
   $23 = $10;
   while (1) {
    if (HEAP32[$byteset + ((($23 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($23 & 31) | 0) {
     $$03$lcssa = $$035;
     break L7;
    }
    $32 = $$035 + 1 | 0;
    $23 = HEAP8[$32 >> 0] | 0;
    if (!($23 << 24 >> 24)) {
     $$03$lcssa = $32;
     break;
    } else $$035 = $32;
   }
  } while (0);
  $$0 = $$03$lcssa - $s | 0;
 }
 if ((label | 0) == 3) $$0 = (___strchrnul($s, $0 << 24 >> 24) | 0) - $s | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $this + 4 | 0;
 $3 = $__v + 4 | 0;
 $$0$i = HEAP32[$1 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($0 | 0)) break;
  $5 = HEAP32[$3 >> 2] | 0;
  $6 = $5 + -16 | 0;
  $7 = $$0$i + -16 | 0;
  HEAP32[$6 >> 2] = 0;
  $9 = $5 + -12 | 0;
  HEAP32[$9 >> 2] = 0;
  $11 = HEAP32[$$0$i + -4 >> 2] | 0;
  HEAP32[$5 + -8 >> 2] = 0;
  HEAP32[$5 + -4 >> 2] = $11;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  $14 = $$0$i + -12 | 0;
  HEAP32[$9 >> 2] = HEAP32[$14 >> 2];
  $16 = $$0$i + -8 | 0;
  HEAP32[$5 + -8 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$16 >> 2] = 0;
  HEAP32[$14 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -16;
  $$0$i = $7;
 }
 $21 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $21;
 $23 = $__v + 8 | 0;
 $24 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$23 >> 2] = $24;
 $26 = $this + 8 | 0;
 $27 = $__v + 12 | 0;
 $28 = HEAP32[$26 >> 2] | 0;
 HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$27 >> 2] = $28;
 HEAP32[$__v >> 2] = HEAP32[$3 >> 2];
 return;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $11 = 0, $15 = 0, $16 = 0, $22 = 0, $23 = 0, $29 = 0, $36 = 0, $37 = 0, $5 = 0, $8 = 0, $w$0$lcssa = 0, $w$08 = 0;
 $0 = $c & 255;
 L1 : do if (!$0) $$0 = $s + (_strlen($s) | 0) | 0; else {
  if (!($s & 3)) $$02$lcssa = $s; else {
   $5 = $c & 255;
   $$0211 = $s;
   while (1) {
    $8 = HEAP8[$$0211 >> 0] | 0;
    if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $5 << 24 >> 24) {
     $$0 = $$0211;
     break L1;
    }
    $11 = $$0211 + 1 | 0;
    if (!($11 & 3)) {
     $$02$lcssa = $11;
     break;
    } else $$0211 = $11;
   }
  }
  $15 = Math_imul($0, 16843009) | 0;
  $16 = HEAP32[$$02$lcssa >> 2] | 0;
  L10 : do if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
   $23 = $16;
   $w$08 = $$02$lcssa;
   while (1) {
    $22 = $23 ^ $15;
    if (($22 & -2139062144 ^ -2139062144) & $22 + -16843009 | 0) {
     $w$0$lcssa = $w$08;
     break L10;
    }
    $29 = $w$08 + 4 | 0;
    $23 = HEAP32[$29 >> 2] | 0;
    if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
     $w$0$lcssa = $29;
     break;
    } else $w$08 = $29;
   }
  } else $w$0$lcssa = $$02$lcssa; while (0);
  $36 = $c & 255;
  $$1 = $w$0$lcssa;
  while (1) {
   $37 = HEAP8[$$1 >> 0] | 0;
   if ($37 << 24 >> 24 == 0 ? 1 : $37 << 24 >> 24 == $36 << 24 >> 24) {
    $$0 = $$1;
    break;
   } else $$1 = $$1 + 1 | 0;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $this + 4 | 0;
 $3 = $__v + 4 | 0;
 $$0$i = HEAP32[$1 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($0 | 0)) break;
  $5 = HEAP32[$3 >> 2] | 0;
  $6 = $5 + -16 | 0;
  $7 = $$0$i + -16 | 0;
  HEAP32[$6 >> 2] = 0;
  $9 = $5 + -12 | 0;
  HEAP32[$9 >> 2] = 0;
  $11 = HEAP32[$$0$i + -4 >> 2] | 0;
  HEAP32[$5 + -8 >> 2] = 0;
  HEAP32[$5 + -4 >> 2] = $11;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  $14 = $$0$i + -12 | 0;
  HEAP32[$9 >> 2] = HEAP32[$14 >> 2];
  $16 = $$0$i + -8 | 0;
  HEAP32[$5 + -8 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$16 >> 2] = 0;
  HEAP32[$14 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -16;
  $$0$i = $7;
 }
 $21 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $21;
 $23 = $__v + 8 | 0;
 $24 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$23 >> 2] = $24;
 $26 = $this + 8 | 0;
 $27 = $__v + 12 | 0;
 $28 = HEAP32[$26 >> 2] | 0;
 HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$27 >> 2] = $28;
 HEAP32[$__v >> 2] = HEAP32[$3 >> 2];
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this, $__pos, $__s, $__n) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$1 = 0, $$pre = 0, $0 = 0, $13 = 0, $17 = 0, $2 = 0, $23 = 0, $30 = 0, $7 = 0, $9 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) == 0;
 if ($2) $7 = ($0 & 255) >>> 1; else $7 = HEAP32[$this + 4 >> 2] | 0;
 if ($7 >>> 0 < $__pos >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
 if ($2) {
  $13 = 10;
  $17 = $0;
 } else {
  $9 = HEAP32[$this >> 2] | 0;
  $13 = ($9 & -2) + -1 | 0;
  $17 = $9 & 255;
 }
 if (($13 - $7 | 0) >>> 0 < $__n >>> 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $13, $7 + $__n - $13 | 0, $7, $__pos, 0, $__n, $__s); else if ($__n | 0) {
  if (!($17 & 1)) $23 = $this + 1 | 0; else $23 = HEAP32[$this + 8 >> 2] | 0;
  $$pre = $23 + $__pos | 0;
  if (($7 | 0) == ($__pos | 0)) $$1 = $__s; else {
   _memmove($$pre + $__n | 0, $$pre | 0, $7 - $__pos | 0) | 0;
   $$1 = $$pre >>> 0 <= $__s >>> 0 & ($23 + $7 | 0) >>> 0 > $__s >>> 0 ? $__s + $__n | 0 : $__s;
  }
  _memmove($$pre | 0, $$1 | 0, $__n | 0) | 0;
  $30 = $7 + $__n | 0;
  if (!(HEAP8[$this >> 0] & 1)) HEAP8[$this >> 0] = $30 << 1; else HEAP32[$this + 4 >> 2] = $30;
  HEAP8[$23 + $30 >> 0] = 0;
 }
 return $this | 0;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $11 = 0, $19 = 0, $29 = 0, $6 = 0, $7 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0, $i$1 = 0, label = 0;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) if (!(___towrite($f) | 0)) {
  $9 = HEAP32[$0 >> 2] | 0;
  label = 5;
 } else $$0 = 0; else {
  $9 = $1;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $6 = $f + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $11 = $7;
  if (($9 - $7 | 0) >>> 0 < $l >>> 0) {
   $$0 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $l) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
   $i$0 = $l;
   while (1) {
    if (!$i$0) {
     $$01 = $l;
     $$02 = $s;
     $29 = $11;
     $i$1 = 0;
     break L10;
    }
    $19 = $i$0 + -1 | 0;
    if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
     $i$0$lcssa12 = $i$0;
     break;
    } else $i$0 = $19;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $i$0$lcssa12) | 0) >>> 0 < $i$0$lcssa12 >>> 0) {
    $$0 = $i$0$lcssa12;
    break L5;
   }
   $$01 = $l - $i$0$lcssa12 | 0;
   $$02 = $s + $i$0$lcssa12 | 0;
   $29 = HEAP32[$6 >> 2] | 0;
   $i$1 = $i$0$lcssa12;
  } else {
   $$01 = $l;
   $$02 = $s;
   $29 = $11;
   $i$1 = 0;
  } while (0);
  _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $$01;
  $$0 = $i$1 + $$01 | 0;
 } while (0);
 return $$0 | 0;
}

function _arGetTransMatRobust($handle, $initConv, $pos2d, $pos3d, $num, $conv) {
 $handle = $handle | 0;
 $initConv = $initConv | 0;
 $pos2d = $pos2d | 0;
 $pos3d = $pos3d | 0;
 $num = $num | 0;
 $conv = $conv | 0;
 var $1 = 0, $4 = 0, $5 = 0, $data = 0, $err = 0, $i$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $data = sp + 20 | 0;
 $err = sp;
 $1 = _malloc($num << 4) | 0;
 HEAP32[$data >> 2] = $1;
 if (!$1) {
  _arLog(3, 4491, sp + 8 | 0);
  _exit(1);
 }
 $4 = _malloc($num * 24 | 0) | 0;
 $5 = $data + 4 | 0;
 HEAP32[$5 >> 2] = $4;
 if (!$4) {
  _arLog(3, 4491, sp + 16 | 0);
  _exit(1);
 } else $i$0 = 0;
 while (1) {
  if (($i$0 | 0) >= ($num | 0)) break;
  HEAPF64[$1 + ($i$0 << 4) >> 3] = +HEAPF64[$pos2d + ($i$0 << 4) >> 3];
  HEAPF64[$1 + ($i$0 << 4) + 8 >> 3] = +HEAPF64[$pos2d + ($i$0 << 4) + 8 >> 3];
  HEAPF64[$4 + ($i$0 * 24 | 0) >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) >> 3];
  HEAPF64[$4 + ($i$0 * 24 | 0) + 8 >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) + 8 >> 3];
  HEAPF64[$4 + ($i$0 * 24 | 0) + 16 >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) + 16 >> 3];
  $i$0 = $i$0 + 1 | 0;
 }
 HEAP32[$data + 8 >> 2] = $num;
 if ((_icpPointRobust(HEAP32[$handle >> 2] | 0, $data, $initConv, $conv, $err) | 0) < 0) HEAPF64[$err >> 3] = 1.0e8;
 _free(HEAP32[$data >> 2] | 0);
 _free(HEAP32[$5 >> 2] | 0);
 STACKTOP = sp;
 return +(+HEAPF64[$err >> 3]);
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $$1 = 0, $$lcssa = 0, $1 = 0, $11 = 0, $3 = 0, $5 = 0, $first$pn = 0, $t1$0 = 0, $t1$0$lcssa19 = 0, $t11$0 = 0;
 L1 : do if (($first | 0) == ($last | 0)) $$1 = $first; else {
  $1 = HEAP8[$first >> 0] | 0;
  if ($1 << 24 >> 24 != 95) {
   if ((($1 << 24 >> 24) + -48 | 0) >>> 0 < 10) $first$pn = $first; else {
    $$1 = $first;
    break;
   }
   while (1) {
    $t11$0 = $first$pn + 1 | 0;
    if (($t11$0 | 0) == ($last | 0)) {
     $$1 = $last;
     break L1;
    }
    if (((HEAP8[$t11$0 >> 0] | 0) + -48 | 0) >>> 0 < 10) $first$pn = $t11$0; else {
     $$1 = $t11$0;
     break L1;
    }
   }
  }
  $3 = $first + 1 | 0;
  if (($3 | 0) == ($last | 0)) $$1 = $first; else {
   $5 = HEAP8[$3 >> 0] | 0;
   if ((($5 << 24 >> 24) + -48 | 0) >>> 0 < 10) {
    $$1 = $first + 2 | 0;
    break;
   }
   if ($5 << 24 >> 24 == 95) {
    $t1$0 = $first + 2 | 0;
    while (1) {
     if (($t1$0 | 0) == ($last | 0)) {
      $$1 = $first;
      break L1;
     }
     $11 = HEAP8[$t1$0 >> 0] | 0;
     if ((($11 << 24 >> 24) + -48 | 0) >>> 0 >= 10) {
      $$lcssa = $11;
      $t1$0$lcssa19 = $t1$0;
      break;
     }
     $t1$0 = $t1$0 + 1 | 0;
    }
    return ($$lcssa << 24 >> 24 == 95 ? $t1$0$lcssa19 + 1 | 0 : $first) | 0;
   } else $$1 = $first;
  }
 } while (0);
 return $$1 | 0;
}

function _arGetTransMat($handle, $initConv, $pos2d, $pos3d, $num, $conv) {
 $handle = $handle | 0;
 $initConv = $initConv | 0;
 $pos2d = $pos2d | 0;
 $pos3d = $pos3d | 0;
 $num = $num | 0;
 $conv = $conv | 0;
 var $1 = 0, $4 = 0, $5 = 0, $data = 0, $err = 0, $i$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $data = sp + 20 | 0;
 $err = sp;
 $1 = _malloc($num << 4) | 0;
 HEAP32[$data >> 2] = $1;
 if (!$1) {
  _arLog(3, 4491, sp + 8 | 0);
  _exit(1);
 }
 $4 = _malloc($num * 24 | 0) | 0;
 $5 = $data + 4 | 0;
 HEAP32[$5 >> 2] = $4;
 if (!$4) {
  _arLog(3, 4491, sp + 16 | 0);
  _exit(1);
 } else $i$0 = 0;
 while (1) {
  if (($i$0 | 0) >= ($num | 0)) break;
  HEAPF64[$1 + ($i$0 << 4) >> 3] = +HEAPF64[$pos2d + ($i$0 << 4) >> 3];
  HEAPF64[$1 + ($i$0 << 4) + 8 >> 3] = +HEAPF64[$pos2d + ($i$0 << 4) + 8 >> 3];
  HEAPF64[$4 + ($i$0 * 24 | 0) >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) >> 3];
  HEAPF64[$4 + ($i$0 * 24 | 0) + 8 >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) + 8 >> 3];
  HEAPF64[$4 + ($i$0 * 24 | 0) + 16 >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) + 16 >> 3];
  $i$0 = $i$0 + 1 | 0;
 }
 HEAP32[$data + 8 >> 2] = $num;
 if ((_icpPoint(HEAP32[$handle >> 2] | 0, $data, $initConv, $conv, $err) | 0) < 0) HEAPF64[$err >> 3] = 1.0e8;
 _free(HEAP32[$data >> 2] | 0);
 _free(HEAP32[$5 >> 2] | 0);
 STACKTOP = sp;
 return +(+HEAPF64[$err >> 3]);
}

function _arSetLabelingThreshMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $4 = 0, $5 = 0, $mode1$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$handle) $$0 = -1; else {
  $1 = $handle + 7062388 | 0;
  if ((HEAP32[$1 >> 2] | 0) == ($mode | 0)) $$0 = 0; else {
   $4 = $handle + 7062408 | 0;
   $5 = HEAP32[$4 >> 2] | 0;
   if ($5 | 0) {
    _arImageProcFinal($5);
    HEAP32[$4 >> 2] = 0;
   }
   switch ($mode | 0) {
   case 3:
   case 2:
   case 1:
    {
     $13 = _arImageProcInit(HEAP32[$handle + 36 >> 2] | 0, HEAP32[$handle + 40 >> 2] | 0, HEAP32[$handle + 4 >> 2] | 0, 0) | 0;
     HEAP32[$4 >> 2] = $13;
     $mode1$0 = $mode;
     break;
    }
   case 4:
    {
     HEAP32[$handle + 7062404 >> 2] = 1;
     HEAP32[$handle + 7062400 >> 2] = 1;
     $mode1$0 = 4;
     break;
    }
   case 0:
    {
     $mode1$0 = 0;
     break;
    }
   default:
    {
     _arLog(3, 3005, $vararg_buffer);
     $mode1$0 = 0;
    }
   }
   HEAP32[$1 >> 2] = $mode1$0;
   if ((HEAP32[$handle >> 2] | 0) == 1) {
    HEAP32[$vararg_buffer1 >> 2] = HEAP32[408 + ($mode1$0 << 2) >> 2];
    _arLog(3, 3137, $vararg_buffer1);
    $$0 = 0;
   } else $$0 = 0;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$phi$trans$insert3 = 0, $$pre = 0, $0 = 0, $1 = 0, $13 = 0, $18 = 0, $20 = 0, $25 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $41 = 0, $6 = 0, $9 = 0, label = 0;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) label = 3; else if ((HEAP32[$f + 108 >> 2] | 0) < ($1 | 0)) label = 3; else label = 4;
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0;
  if (($6 | 0) < 0) label = 4; else {
   $9 = HEAP32[$0 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (!$9) {
    $41 = $$pre;
    label = 9;
   } else {
    $13 = HEAP32[$f + 4 >> 2] | 0;
    $18 = $9 - (HEAP32[$f + 108 >> 2] | 0) | 0;
    $20 = $$pre;
    if (($$pre - $13 | 0) < ($18 | 0)) {
     $41 = $20;
     label = 9;
    } else {
     HEAP32[$f + 100 >> 2] = $13 + ($18 + -1);
     $25 = $20;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 100 >> 2] = $$pre;
    $25 = $41;
   }
   $$phi$trans$insert3 = $f + 4 | 0;
   if (!$25) $36 = HEAP32[$$phi$trans$insert3 >> 2] | 0; else {
    $27 = HEAP32[$$phi$trans$insert3 >> 2] | 0;
    $29 = $f + 108 | 0;
    HEAP32[$29 >> 2] = $25 + 1 - $27 + (HEAP32[$29 >> 2] | 0);
    $36 = $27;
   }
   $35 = $36 + -1 | 0;
   if ((HEAPU8[$35 >> 0] | 0 | 0) == ($6 | 0)) $$0 = $6; else {
    HEAP8[$35 >> 0] = $6;
    $$0 = $6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 100 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _sift($head, $width, $cmp, $pshift, $lp) {
 $head = $head | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 $pshift = $pshift | 0;
 $lp = $lp | 0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $1 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ar = sp;
 HEAP32[$ar >> 2] = $head;
 L1 : do if (($pshift | 0) > 1) {
  $1 = 0 - $width | 0;
  $$012 = $pshift;
  $$03 = $head;
  $8 = $head;
  $i$04 = 1;
  while (1) {
   $2 = $$03 + $1 | 0;
   $3 = $$012 + -2 | 0;
   $7 = $2 + (0 - (HEAP32[$lp + ($3 << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[$cmp & 15]($8, $7) | 0) > -1) if ((FUNCTION_TABLE_iii[$cmp & 15]($8, $2) | 0) > -1) {
    $i$0$lcssa = $i$04;
    break L1;
   }
   $15 = $i$04 + 1 | 0;
   $16 = $ar + ($i$04 << 2) | 0;
   if ((FUNCTION_TABLE_iii[$cmp & 15]($7, $2) | 0) > -1) {
    HEAP32[$16 >> 2] = $7;
    $$0$be = $7;
    $$01$be = $$012 + -1 | 0;
   } else {
    HEAP32[$16 >> 2] = $2;
    $$0$be = $2;
    $$01$be = $3;
   }
   if (($$01$be | 0) <= 1) {
    $i$0$lcssa = $15;
    break L1;
   }
   $$012 = $$01$be;
   $$03 = $$0$be;
   $8 = HEAP32[$ar >> 2] | 0;
   $i$04 = $15;
  }
 } else $i$0$lcssa = 1; while (0);
 _cycle($width, $ar, $i$0$lcssa);
 STACKTOP = sp;
 return;
}

function _arCreateHandle($paramLT) {
 $paramLT = $paramLT | 0;
 var $0 = 0, $15 = 0, $18 = 0, $26 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = _malloc(7062432) | 0;
 if (!$0) {
  _arLog(3, 4491, sp);
  _exit(1);
 }
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4834148 >> 2] = 0;
 HEAP32[$0 + 7062408 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = -1;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 1;
 HEAP32[$0 + 16 >> 2] = 100;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 2;
 HEAPF64[$0 + 7062416 >> 3] = .5;
 HEAP32[$0 + 7062424 >> 2] = 3;
 HEAP32[$0 + 32 >> 2] = $paramLT;
 $15 = HEAP32[$paramLT >> 2] | 0;
 HEAP32[$0 + 36 >> 2] = $15;
 $18 = HEAP32[$paramLT + 4 >> 2] | 0;
 HEAP32[$0 + 40 >> 2] = $18;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 15408 >> 2] = 0;
 HEAP32[$0 + 4834152 >> 2] = 0;
 HEAP32[$0 + 4818296 >> 2] = 0;
 $26 = _malloc(Math_imul($15 << 1, $18) | 0) | 0;
 HEAP32[$0 + 4834144 >> 2] = $26;
 if (!$26) {
  _arLog(3, 4491, sp + 8 | 0);
  _exit(1);
 } else {
  HEAP32[$0 + 7062384 >> 2] = 0;
  _arSetPixelFormat($0, 2) | 0;
  _arSetDebugMode($0, 0) | 0;
  HEAP32[$0 + 7062388 >> 2] = -1;
  _arSetLabelingThreshMode($0, 0) | 0;
  HEAP32[$0 + 7062392 >> 2] = 7;
  HEAP32[$0 + 7062396 >> 2] = 0;
  STACKTOP = sp;
  return $0 | 0;
 }
 return 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $3 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f;
 src = 2228;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $$01 = $b;
  $$02 = 1;
  label = 4;
 } else {
  $3 = ___errno_location() | 0;
  HEAP32[$3 >> 2] = 75;
  $$0 = -1;
 } else {
  $$01 = $s;
  $$02 = $n;
  label = 4;
 }
 if ((label | 0) == 4) {
  $5 = -2 - $$01 | 0;
  $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02;
  HEAP32[$f + 48 >> 2] = $$$02;
  $8 = $f + 20 | 0;
  HEAP32[$8 >> 2] = $$01;
  HEAP32[$f + 44 >> 2] = $$01;
  $10 = $$01 + $$$02 | 0;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $10;
  HEAP32[$f + 28 >> 2] = $10;
  $13 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$$$02) $$0 = $13; else {
   $15 = HEAP32[$8 >> 2] | 0;
   HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0 = 0, $20 = 0, $27 = 0, $28 = 0, $30 = 0, $6 = 0;
 if (($__n | 0) == 1) $$0 = 2; else if (!($__n + -1 & $__n)) $$0 = $__n; else $$0 = __ZNSt3__112__next_primeEj($__n) | 0;
 $6 = HEAP32[$this + 4 >> 2] | 0;
 if ($$0 >>> 0 > $6 >>> 0) __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $$0); else if ($$0 >>> 0 < $6 >>> 0) {
  if ($6 >>> 0 > 2) $30 = ($6 + -1 & $6 | 0) == 0; else $30 = 0;
  $20 = ~~+Math_ceil(+(+((HEAP32[$this + 12 >> 2] | 0) >>> 0) / +HEAPF32[$this + 16 >> 2])) >>> 0;
  if ($30) $27 = 1 << 32 - (Math_clz32($20 + -1 | 0) | 0); else $27 = __ZNSt3__112__next_primeEj($20) | 0;
  $28 = $$0 >>> 0 < $27 >>> 0 ? $27 : $$0;
  if ($28 >>> 0 < $6 >>> 0) __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $28);
 }
 return;
}

function __ZNSt3__16vectorI12multi_markerNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $13 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $6 = 0, $__v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v = sp;
 $1 = $this + 4 | 0;
 $3 = HEAP32[$this >> 2] | 0;
 $6 = ((HEAP32[$1 >> 2] | 0) - $3 >> 3) + 1 | 0;
 if ($6 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
 $10 = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
 if ($10 >> 3 >>> 0 < 268435455) {
  $13 = $10 >> 2;
  $$0$i = $13 >>> 0 < $6 >>> 0 ? $6 : $13;
 } else $$0$i = 536870911;
 __ZNSt3__114__split_bufferI12multi_markerRNS_9allocatorIS1_EEEC2EjjS4_($__v, $$0$i, (HEAP32[$1 >> 2] | 0) - $3 >> 3, $this + 8 | 0);
 $19 = $__v + 8 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $__x;
 $26 = HEAP32[$21 + 4 >> 2] | 0;
 $27 = $20;
 HEAP32[$27 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$27 + 4 >> 2] = $26;
 HEAP32[$19 >> 2] = $20 + 8;
 __ZNSt3__16vectorI12multi_markerNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
 __ZNSt3__114__split_bufferI12multi_markerRNS_9allocatorIS1_EEED2Ev($__v);
 STACKTOP = sp;
 return;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0 = 0, $20 = 0, $27 = 0, $28 = 0, $30 = 0, $6 = 0;
 if (($__n | 0) == 1) $$0 = 2; else if (!($__n + -1 & $__n)) $$0 = $__n; else $$0 = __ZNSt3__112__next_primeEj($__n) | 0;
 $6 = HEAP32[$this + 4 >> 2] | 0;
 if ($$0 >>> 0 > $6 >>> 0) __ZNSt3__112__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $$0); else if ($$0 >>> 0 < $6 >>> 0) {
  if ($6 >>> 0 > 2) $30 = ($6 + -1 & $6 | 0) == 0; else $30 = 0;
  $20 = ~~+Math_ceil(+(+((HEAP32[$this + 12 >> 2] | 0) >>> 0) / +HEAPF32[$this + 16 >> 2])) >>> 0;
  if ($30) $27 = 1 << 32 - (Math_clz32($20 + -1 | 0) | 0); else $27 = __ZNSt3__112__next_primeEj($20) | 0;
  $28 = $$0 >>> 0 < $27 >>> 0 ? $27 : $$0;
  if ($28 >>> 0 < $6 >>> 0) __ZNSt3__112__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $28);
 }
 return;
}

function _addMarker($id, $patt_name) {
 $id = $id | 0;
 $patt_name = $patt_name | 0;
 var $$1 = 0, $0 = 0, $11 = 0, $13 = 0, $14 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = sp + 12 | 0;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = -1; else {
  $3 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  if (!(HEAP8[$patt_name >> 0] & 1)) $13 = $patt_name + 1 | 0; else $13 = HEAP32[$patt_name + 8 >> 2] | 0;
  $11 = $3 + 216 | 0;
  $14 = _arPattLoad(HEAP32[$11 >> 2] | 0, $13) | 0;
  HEAP32[$3 + 260 >> 2] = $14;
  if (($14 | 0) < 0) {
   HEAP32[$vararg_buffer >> 2] = $13;
   _arLog(3, 5614, $vararg_buffer);
   _arPattDeleteHandle(HEAP32[$11 >> 2] | 0) | 0;
   _arLog(3, 5660, $vararg_buffer1);
   $$1 = -1;
  } else $$1 = $14;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _icpGetDeltaS($S, $dU, $J_U_S, $n) {
 $S = $S | 0;
 $dU = $dU | 0;
 $J_U_S = $J_U_S | 0;
 $n = $n | 0;
 var $$0 = 0, $10 = 0, $6 = 0, $8 = 0, $matJ = 0, $matS = 0, $matU = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $matS = sp + 24 | 0;
 $matU = sp + 12 | 0;
 $matJ = sp;
 HEAP32[$matS + 4 >> 2] = 6;
 HEAP32[$matS + 8 >> 2] = 1;
 HEAP32[$matS >> 2] = $S;
 HEAP32[$matU + 4 >> 2] = $n;
 HEAP32[$matU + 8 >> 2] = 1;
 HEAP32[$matU >> 2] = $dU;
 HEAP32[$matJ + 4 >> 2] = $n;
 HEAP32[$matJ + 8 >> 2] = 6;
 HEAP32[$matJ >> 2] = $J_U_S;
 $6 = _arMatrixAllocTrans($matJ) | 0;
 do if (!$6) $$0 = -1; else {
  $8 = _arMatrixAllocMul($6, $matJ) | 0;
  if (!$8) {
   _arMatrixFree($6) | 0;
   $$0 = -1;
   break;
  }
  $10 = _arMatrixAllocMul($6, $matU) | 0;
  if (!$10) {
   _arMatrixFree($6) | 0;
   _arMatrixFree($8) | 0;
   $$0 = -1;
   break;
  }
  if ((_arMatrixSelfInv($8) | 0) < 0) {
   _arMatrixFree($6) | 0;
   _arMatrixFree($8) | 0;
   _arMatrixFree($10) | 0;
   $$0 = -1;
   break;
  } else {
   _arMatrixMul($matS, $8, $10) | 0;
   _arMatrixFree($6) | 0;
   _arMatrixFree($8) | 0;
   _arMatrixFree($10) | 0;
   $$0 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _getTransMatMultiSquareRobust($id, $multiMarkerId) {
 $id = $id | 0;
 $multiMarkerId = $multiMarkerId | 0;
 var $$1 = 0, $0 = 0, $16 = 0, $20 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 do if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = HEAP32[431] | 0; else {
  $4 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  $8 = HEAP32[$4 + 248 >> 2] | 0;
  if (($multiMarkerId | 0) < 0 ? 1 : (HEAP32[$4 + 252 >> 2] | 0) - $8 >> 3 >>> 0 <= $multiMarkerId >>> 0) {
   $$1 = HEAP32[433] | 0;
   break;
  } else {
   $16 = HEAP32[$8 + ($multiMarkerId << 3) + 4 >> 2] | 0;
   $20 = HEAP32[$4 + 212 >> 2] | 0;
   +_arGetTransMatMultiSquareRobust(HEAP32[$4 + 224 >> 2] | 0, $20 + 48 | 0, HEAP32[$20 + 44 >> 2] | 0, $16);
   _matrixCopy($16 + 8 | 0, 16240);
   $$1 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _getTransMatMultiSquare($id, $multiMarkerId) {
 $id = $id | 0;
 $multiMarkerId = $multiMarkerId | 0;
 var $$1 = 0, $0 = 0, $16 = 0, $20 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 do if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = HEAP32[431] | 0; else {
  $4 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  $8 = HEAP32[$4 + 248 >> 2] | 0;
  if (($multiMarkerId | 0) < 0 ? 1 : (HEAP32[$4 + 252 >> 2] | 0) - $8 >> 3 >>> 0 <= $multiMarkerId >>> 0) {
   $$1 = HEAP32[433] | 0;
   break;
  } else {
   $16 = HEAP32[$8 + ($multiMarkerId << 3) + 4 >> 2] | 0;
   $20 = HEAP32[$4 + 212 >> 2] | 0;
   +_arGetTransMatMultiSquare(HEAP32[$4 + 224 >> 2] | 0, $20 + 48 | 0, HEAP32[$20 + 44 >> 2] | 0, $16);
   _matrixCopy($16 + 8 | 0, 16240);
   $$1 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _setup($width, $height, $cameraID) {
 $width = $width | 0;
 $height = $height | 0;
 $cameraID = $cameraID | 0;
 var $0 = 0, $10 = 0, $11 = 0, $2 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $id = sp + 12 | 0;
 $0 = HEAP32[4164] | 0;
 HEAP32[4164] = $0 + 1;
 HEAP32[$id >> 2] = $0;
 $2 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $id) | 0;
 HEAP32[$2 >> 2] = HEAP32[$id >> 2];
 HEAP32[$2 + 204 >> 2] = $width;
 HEAP32[$2 + 208 >> 2] = $height;
 $7 = Math_imul($width << 2, $height) | 0;
 $8 = $2 + 200 | 0;
 HEAP32[$8 >> 2] = $7;
 $9 = _malloc($7) | 0;
 $10 = $2 + 196 | 0;
 HEAP32[$10 >> 2] = $9;
 $11 = _arPattCreateHandle() | 0;
 HEAP32[$2 + 216 >> 2] = $11;
 if (!$11) _arLog(3, 5118, sp);
 _setCamera(HEAP32[$id >> 2] | 0, $cameraID) | 0;
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$8 >> 2];
 _arLog(1, 5315, $vararg_buffer1);
 _emscripten_asm_const_iiiiii(0, HEAP32[$2 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$8 >> 2] | 0, $2 + 264 | 0, 16240) | 0;
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$pn = 0, $$sroa$0$0 = 0, $0 = 0, $11 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $__nd$0 = 0;
 $0 = HEAP32[$__k >> 2] | 0;
 $2 = HEAP32[$this + 4 >> 2] | 0;
 L1 : do if (!$2) $$sroa$0$0 = 0; else {
  $4 = $2 + -1 | 0;
  $6 = ($4 & $2 | 0) == 0;
  if ($6) $11 = $4 & $0; else $11 = ($0 >>> 0) % ($2 >>> 0) | 0;
  $12 = HEAP32[(HEAP32[$this >> 2] | 0) + ($11 << 2) >> 2] | 0;
  if (!$12) $$sroa$0$0 = 0; else {
   $$pn = $12;
   while (1) {
    $__nd$0 = HEAP32[$$pn >> 2] | 0;
    if (!$__nd$0) {
     $$sroa$0$0 = 0;
     break L1;
    }
    $16 = HEAP32[$__nd$0 + 4 >> 2] | 0;
    if ($6) $19 = $16 & $4; else $19 = ($16 >>> 0) % ($2 >>> 0) | 0;
    if (($19 | 0) != ($11 | 0)) {
     $$sroa$0$0 = 0;
     break L1;
    }
    if ((HEAP32[$__nd$0 + 8 >> 2] | 0) == ($0 | 0)) {
     $$sroa$0$0 = $__nd$0;
     break;
    } else $$pn = $__nd$0;
   }
  }
 } while (0);
 return $$sroa$0$0 | 0;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$pn = 0, $$sroa$0$0 = 0, $0 = 0, $11 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $__nd$0 = 0;
 $0 = HEAP32[$__k >> 2] | 0;
 $2 = HEAP32[$this + 4 >> 2] | 0;
 L1 : do if (!$2) $$sroa$0$0 = 0; else {
  $4 = $2 + -1 | 0;
  $6 = ($4 & $2 | 0) == 0;
  if ($6) $11 = $4 & $0; else $11 = ($0 >>> 0) % ($2 >>> 0) | 0;
  $12 = HEAP32[(HEAP32[$this >> 2] | 0) + ($11 << 2) >> 2] | 0;
  if (!$12) $$sroa$0$0 = 0; else {
   $$pn = $12;
   while (1) {
    $__nd$0 = HEAP32[$$pn >> 2] | 0;
    if (!$__nd$0) {
     $$sroa$0$0 = 0;
     break L1;
    }
    $16 = HEAP32[$__nd$0 + 4 >> 2] | 0;
    if ($6) $19 = $16 & $4; else $19 = ($16 >>> 0) % ($2 >>> 0) | 0;
    if (($19 | 0) != ($11 | 0)) {
     $$sroa$0$0 = 0;
     break L1;
    }
    if ((HEAP32[$__nd$0 + 8 >> 2] | 0) == ($0 | 0)) {
     $$sroa$0$0 = $__nd$0;
     break;
    } else $$pn = $__nd$0;
   }
  }
 } while (0);
 return $$sroa$0$0 | 0;
}

function _atoi($s) {
 $s = $s | 0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $11 = 0, $4 = 0, $5 = 0, $8 = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0;
 $$0 = $s;
 while (1) {
  $4 = $$0 + 1 | 0;
  if (!(_isspace(HEAP8[$$0 >> 0] | 0) | 0)) {
   $$0$lcssa = $$0;
   $$lcssa9 = $4;
   break;
  } else $$0 = $4;
 }
 $5 = HEAP8[$$0$lcssa >> 0] | 0;
 switch ($5 << 24 >> 24 | 0) {
 case 45:
  {
   $neg$0 = 1;
   label = 5;
   break;
  }
 case 43:
  {
   $neg$0 = 0;
   label = 5;
   break;
  }
 default:
  {
   $$1$ph = $$0$lcssa;
   $8 = $5;
   $neg$1$ph = 0;
  }
 }
 if ((label | 0) == 5) {
  $$1$ph = $$lcssa9;
  $8 = HEAP8[$$lcssa9 >> 0] | 0;
  $neg$1$ph = $neg$0;
 }
 $isdigittmp1 = ($8 << 24 >> 24) + -48 | 0;
 if ($isdigittmp1 >>> 0 < 10) {
  $$13 = $$1$ph;
  $isdigittmp5 = $isdigittmp1;
  $n$04 = 0;
  while (1) {
   $$13 = $$13 + 1 | 0;
   $11 = ($n$04 * 10 | 0) - $isdigittmp5 | 0;
   $isdigittmp5 = (HEAP8[$$13 >> 0] | 0) + -48 | 0;
   if ($isdigittmp5 >>> 0 >= 10) {
    $n$0$lcssa = $11;
    break;
   } else $n$04 = $11;
  }
 } else $n$0$lcssa = 0;
 return ($neg$1$ph | 0 ? $n$0$lcssa : 0 - $n$0$lcssa | 0) | 0;
}

function _arImageProcLumaHistAndCDFAndPercentile($ipi, $dataPtr, $percentile, $value_p) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 $percentile = +$percentile;
 $value_p = $value_p | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa8 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $i$0 = 0, $i$0$lcssa = 0, $j$0 = 0, $j$0$lcssa = 0;
 if ($percentile < 0.0 | $percentile > 1.0) $$0 = -1; else {
  $2 = _arImageProcLumaHistAndCDF($ipi, $dataPtr) | 0;
  if (($2 | 0) < 0) $$0 = $2; else {
   $11 = ~~(+(Math_imul(HEAP32[$ipi + 12 >> 2] | 0, HEAP32[$ipi + 8 >> 2] | 0) | 0) * $percentile) >>> 0;
   $i$0 = 0;
   while (1) {
    $12 = $i$0 & 255;
    $14 = HEAP32[$ipi + 1040 + ($12 << 2) >> 2] | 0;
    if ($14 >>> 0 < $11 >>> 0) $i$0 = $i$0 + 1 << 24 >> 24; else {
     $$lcssa = $12;
     $$lcssa8 = $14;
     $i$0$lcssa = $i$0;
     break;
    }
   }
   $17 = $$lcssa8;
   $j$0 = $i$0$lcssa;
   while (1) {
    $19 = $j$0 + 1 << 24 >> 24;
    if (($17 | 0) != ($11 | 0)) {
     $j$0$lcssa = $j$0;
     break;
    }
    $17 = HEAP32[$ipi + 1040 + (($19 & 255) << 2) >> 2] | 0;
    $j$0 = $19;
   }
   HEAP8[$value_p >> 0] = (($j$0$lcssa & 255) + $$lcssa | 0) >>> 1;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $16 = 0, $17 = 0, $22 = 0, $25 = 0, $5 = 0, $6 = 0;
 HEAP8[$info + 53 >> 0] = 1;
 do if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  HEAP8[$info + 52 >> 0] = 1;
  $5 = $info + 16 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if (!$6) {
   HEAP32[$5 >> 2] = $dst_ptr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($6 | 0) != ($dst_ptr | 0)) {
   $25 = $info + 36 | 0;
   HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $16 = $info + 24 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  if (($17 | 0) == 2) {
   HEAP32[$16 >> 2] = $path_below;
   $22 = $path_below;
  } else $22 = $17;
  if (($22 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0) HEAP8[$info + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $9 = 0;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $20 = $this + 1 | 0; else $20 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  $17 = $12 >>> 0 < 11 ? 11 : $12 + 16 & -16;
 } else $17 = -17;
 $18 = _malloc($17) | 0;
 if ($__n_copy | 0) _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0;
 if (($__old_sz | 0) != ($__n_copy | 0)) _memcpy($18 + $__n_copy + $__n_add | 0, $20 + $__n_copy | 0, $__old_sz - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 10) _free($20);
 HEAP32[$this + 8 >> 2] = $18;
 HEAP32[$this >> 2] = $17 | 1;
 return;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($this, $__p) {
 $this = $this | 0;
 $__p = $__p | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = HEAP32[$__p >> 2] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6removeENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($0, $this, $$byval_copy);
 $5 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = 0;
 if ($5 | 0) {
  if (HEAP8[$0 + 8 >> 0] | 0) __ZNSt3__113__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($5 + 264 | 0);
  __ZdlPv($5);
 }
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE14__erase_uniqueIiEEjRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$0 = 0, $$byval_copy = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($this, $__k) | 0;
 if (!$1) $$0 = 0; else {
  HEAP32[$0 >> 2] = $1;
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($this, $$byval_copy) | 0;
  $$0 = 1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $$3 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0;
 L1 : do if (($first | 0) == ($last | 0)) $$3 = $first; else {
  switch (HEAP8[$first >> 0] | 0) {
  case 104:
   {
    $3 = $first + 1 | 0;
    $4 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($3, $last) | 0;
    if (($4 | 0) == ($3 | 0) | ($4 | 0) == ($last | 0)) {
     $$3 = $first;
     break L1;
    }
    return ((HEAP8[$4 >> 0] | 0) == 95 ? $4 + 1 | 0 : $first) | 0;
   }
  case 118:
   break;
  default:
   {
    $$3 = $first;
    break L1;
   }
  }
  $10 = $first + 1 | 0;
  $11 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($10, $last) | 0;
  if (($11 | 0) == ($10 | 0) | ($11 | 0) == ($last | 0)) $$3 = $first; else if ((HEAP8[$11 >> 0] | 0) == 95) {
   $16 = $11 + 1 | 0;
   $17 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($16, $last) | 0;
   if (($17 | 0) == ($16 | 0) | ($17 | 0) == ($last | 0)) $$3 = $first; else $$3 = (HEAP8[$17 >> 0] | 0) == 95 ? $17 + 1 | 0 : $first;
  } else $$3 = $first;
 } while (0);
 return $$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $1 = 0, $10 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__i$0$i$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this >> 0] = 16;
 $1 = $s;
 $2 = $1;
 $3 = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8 | HEAPU8[$2 + 2 >> 0] << 16 | HEAPU8[$2 + 3 >> 0] << 24;
 $5 = $1 + 4 | 0;
 $6 = HEAPU8[$5 >> 0] | HEAPU8[$5 + 1 >> 0] << 8 | HEAPU8[$5 + 2 >> 0] << 16 | HEAPU8[$5 + 3 >> 0] << 24;
 $7 = $this + 1 | 0;
 $8 = $7;
 HEAP8[$8 >> 0] = $3;
 HEAP8[$8 + 1 >> 0] = $3 >> 8;
 HEAP8[$8 + 2 >> 0] = $3 >> 16;
 HEAP8[$8 + 3 >> 0] = $3 >> 24;
 $10 = $7 + 4 | 0;
 HEAP8[$10 >> 0] = $6;
 HEAP8[$10 + 1 >> 0] = $6 >> 8;
 HEAP8[$10 + 2 >> 0] = $6 >> 16;
 HEAP8[$10 + 3 >> 0] = $6 >> 24;
 HEAP8[$this + 9 >> 0] = 0;
 $12 = $this + 12 | 0;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$12 + 4 >> 2] = 0;
 HEAP32[$12 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$12 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function _getTransMatSquareCont($id, $markerIndex, $markerWidth) {
 $id = $id | 0;
 $markerIndex = $markerIndex | 0;
 $markerWidth = $markerWidth | 0;
 var $$1 = 0, $0 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 do if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = HEAP32[431] | 0; else {
  $4 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  $6 = HEAP32[$4 + 212 >> 2] | 0;
  if ((HEAP32[$6 + 44 >> 2] | 0) > ($markerIndex | 0)) {
   +_arGetTransMatSquareCont(HEAP32[$4 + 224 >> 2] | 0, ($markerIndex | 0) < 0 ? 16336 : $6 + 48 + ($markerIndex << 8) | 0, 16240, +($markerWidth | 0), 16240);
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[432] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$0 = 0, $$2 = 0, $2 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $info = sp;
 if (($this | 0) == ($thrown_type | 0)) $$2 = 1; else if (!$thrown_type) $$2 = 0; else {
  $2 = ___dynamic_cast($thrown_type, 232, 200, 0) | 0;
  if (!$2) $$2 = 0; else {
   dest = $info;
   stop = dest + 56 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$info >> 2] = $2;
   HEAP32[$info + 8 >> 2] = $this;
   HEAP32[$info + 12 >> 2] = -1;
   HEAP32[$info + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 3]($2, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
   if ((HEAP32[$info + 24 >> 2] | 0) == 1) {
    HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
    $$0 = 1;
   } else $$0 = 0;
   $$2 = $$0;
  }
 }
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else if (($this | 0) == (HEAP32[$info >> 2] | 0)) {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    HEAP32[$14 >> 2] = $current_ptr;
    $20 = $info + 40 | 0;
    HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
    HEAP32[$info + 44 >> 2] = 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _arPattLoad($pattHandle, $filename) {
 $pattHandle = $pattHandle | 0;
 $filename = $filename | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = _fopen($filename, 3874) | 0;
 do if (!$0) {
  HEAP32[$vararg_buffer >> 2] = $filename;
  _arLog(3, 3794, $vararg_buffer);
  $$0 = -1;
 } else {
  _fseek($0, 0, 2) | 0;
  $2 = _ftell($0) | 0;
  _fseek($0, 0, 0) | 0;
  $4 = _malloc($2 + 1 | 0) | 0;
  if (!$4) {
   _arLog(3, 4491, $vararg_buffer1);
   _fclose($0) | 0;
   $$0 = -1;
   break;
  }
  $6 = _fread($4, $2, 1, $0) | 0;
  _fclose($0) | 0;
  if (!$6) {
   HEAP32[$vararg_buffer3 >> 2] = $filename;
   _arLog(3, 3840, $vararg_buffer3);
   _free($4);
   $$0 = -1;
   break;
  } else {
   HEAP8[$4 + $2 >> 0] = 0;
   $9 = _arPattLoadFromBuffer($pattHandle, $4) | 0;
   _free($4);
   $$0 = $9;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $13 = 0, $14 = 0, $25 = 0, $28 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$05 = $s;
  $7 = $0;
  $8 = $1;
  while (1) {
   $9 = ___uremdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $13 = $$05 + -1 | 0;
   HEAP8[$13 >> 0] = $9 | 48;
   $14 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   if ($8 >>> 0 > 9 | ($8 | 0) == 9 & $7 >>> 0 > 4294967295) {
    $$05 = $13;
    $7 = $14;
    $8 = tempRet0;
   } else {
    $$lcssa19 = $13;
    $28 = $14;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;
  $$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;
  $$01$lcssa$off0 = $0;
 }
 if (!$$01$lcssa$off0) $$1$lcssa = $$0$lcssa; else {
  $$12 = $$0$lcssa;
  $y$03 = $$01$lcssa$off0;
  while (1) {
   $25 = $$12 + -1 | 0;
   HEAP8[$25 >> 0] = ($y$03 >>> 0) % 10 | 0 | 48;
   if ($y$03 >>> 0 < 10) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;
    $y$03 = ($y$03 >>> 0) / 10 | 0;
   }
  }
 }
 return $$1$lcssa | 0;
}

function _getTransMatSquare($id, $markerIndex, $markerWidth) {
 $id = $id | 0;
 $markerIndex = $markerIndex | 0;
 $markerWidth = $markerWidth | 0;
 var $$1 = 0, $0 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 do if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = HEAP32[431] | 0; else {
  $4 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  $6 = HEAP32[$4 + 212 >> 2] | 0;
  if ((HEAP32[$6 + 44 >> 2] | 0) > ($markerIndex | 0)) {
   +_arGetTransMatSquare(HEAP32[$4 + 224 >> 2] | 0, ($markerIndex | 0) < 0 ? 16336 : $6 + 48 + ($markerIndex << 8) | 0, +($markerWidth | 0), 16240);
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[432] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($agg$result, $this, $__hash, $__f, $__rest, $__rest1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__hash = $__hash | 0;
 $__f = $__f | 0;
 $__rest = $__rest | 0;
 $__rest1 = $__rest1 | 0;
 var $1 = 0, $12 = 0, $13 = 0;
 $1 = __Znwj(408) | 0;
 HEAP32[$agg$result >> 2] = $1;
 HEAP32[$agg$result + 4 >> 2] = $this + 8;
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$__rest >> 2] >> 2];
 _memset($1 + 16 | 0, 0, 392) | 0;
 HEAPF64[$1 + 248 >> 3] = .0001;
 HEAPF64[$1 + 256 >> 3] = 1.0e3;
 $12 = $1 + 264 | 0;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$12 + 4 >> 2] = 0;
 HEAP32[$12 + 8 >> 2] = 0;
 HEAP32[$12 + 12 >> 2] = 0;
 HEAP8[$agg$result + 8 >> 0] = 1;
 $13 = HEAP32[$agg$result >> 2] | 0;
 HEAP32[$13 + 4 >> 2] = $__hash;
 HEAP32[$13 >> 2] = 0;
 return;
}

function _fflush($f) {
 $f = $f | 0;
 var $$0 = 0, $$012 = 0, $$014 = 0, $23 = 0, $27 = 0, $6 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0;
 do if (!$f) {
  if (!(HEAP32[556] | 0)) $27 = 0; else $27 = _fflush(HEAP32[556] | 0) | 0;
  ___lock(16692);
  $$012 = HEAP32[4172] | 0;
  if (!$$012) $r$0$lcssa = $27; else {
   $$014 = $$012;
   $r$03 = $27;
   while (1) {
    if ((HEAP32[$$014 + 76 >> 2] | 0) > -1) $23 = ___lockfile($$014) | 0; else $23 = 0;
    if ((HEAP32[$$014 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$014 + 28 >> 2] | 0) >>> 0) $r$1 = ___fflush_unlocked($$014) | 0 | $r$03; else $r$1 = $r$03;
    if ($23 | 0) ___unlockfile($$014);
    $$014 = HEAP32[$$014 + 56 >> 2] | 0;
    if (!$$014) {
     $r$0$lcssa = $r$1;
     break;
    } else $r$03 = $r$1;
   }
  }
  ___unlock(16692);
  $$0 = $r$0$lcssa;
 } else {
  if ((HEAP32[$f + 76 >> 2] | 0) <= -1) {
   $$0 = ___fflush_unlocked($f) | 0;
   break;
  }
  $phitmp = (___lockfile($f) | 0) == 0;
  $6 = ___fflush_unlocked($f) | 0;
  if ($phitmp) $$0 = $6; else {
   ___unlockfile($f);
   $$0 = $6;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 10;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0);
  if (!(HEAP8[$this >> 0] & 1)) label = 7; else label = 8;
 } else if ($2) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 1 | 0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $__sz$0 + 1;
  $$pn = $19;
 }
 $__p$0 = $$pn + $__sz$0 | 0;
 HEAP8[$__p$0 >> 0] = $__c;
 HEAP8[$__p$0 + 1 >> 0] = 0;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $5 = 0, $6 = 0, $9 = 0, $p$0 = 0;
 L1 : do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $5 = HEAP32[$this + 12 >> 2] | 0;
  $6 = $this + 16 + ($5 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
  if (($5 | 0) > 1) {
   $9 = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
    if (HEAP8[$9 >> 0] | 0) break L1;
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $6 >>> 0);
  }
 } while (0);
 return;
}

function _arUtilMatInv($s, $d) {
 $s = $s | 0;
 $d = $d | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $9 = 0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0;
 $0 = _arMatrixAlloc(4, 4) | 0;
 $j$0 = 0;
 while (1) {
  if (($j$0 | 0) == 3) break;
  $1 = $j$0 << 2;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 4) break;
   HEAPF64[(HEAP32[$0 >> 2] | 0) + ($i$0 + $1 << 3) >> 3] = +HEAPF64[$s + ($j$0 << 5) + ($i$0 << 3) >> 3];
   $i$0 = $i$0 + 1 | 0;
  }
  $j$0 = $j$0 + 1 | 0;
 }
 $9 = HEAP32[$0 >> 2] | 0;
 $10 = $9 + 96 | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 HEAP32[$10 + 16 >> 2] = 0;
 HEAP32[$10 + 20 >> 2] = 0;
 HEAPF64[$9 + 120 >> 3] = 1.0;
 _arMatrixSelfInv($0) | 0;
 $j$1 = 0;
 while (1) {
  if (($j$1 | 0) == 3) break;
  $12 = $j$1 << 2;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) == 4) break;
   HEAPF64[$d + ($j$1 << 5) + ($i$1 << 3) >> 3] = +HEAPF64[(HEAP32[$0 >> 2] | 0) + ($i$1 + $12 << 3) >> 3];
   $i$1 = $i$1 + 1 | 0;
  }
  $j$1 = $j$1 + 1 | 0;
 }
 _arMatrixFree($0) | 0;
 return 0;
}

function _strlen($s) {
 $s = $s | 0;
 var $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $0 = 0, $18 = 0, $21 = 0, $5 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $$01$lcssa = $s;
  label = 4;
 } else {
  $$014 = $s;
  $21 = $0;
  while (1) {
   if (!(HEAP8[$$014 >> 0] | 0)) {
    $$pn = $21;
    break L1;
   }
   $5 = $$014 + 1 | 0;
   $21 = $5;
   if (!($21 & 3)) {
    $$01$lcssa = $5;
    label = 4;
    break;
   } else $$014 = $5;
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $$01$lcssa;
  while (1) {
   $9 = HEAP32[$w$0 >> 2] | 0;
   if (!(($9 & -2139062144 ^ -2139062144) & $9 + -16843009)) $w$0 = $w$0 + 4 | 0; else {
    $$lcssa20 = $9;
    $w$0$lcssa = $w$0;
    break;
   }
  }
  if (!(($$lcssa20 & 255) << 24 >> 24)) $$1$lcssa = $w$0$lcssa; else {
   $$pn15 = $w$0$lcssa;
   while (1) {
    $18 = $$pn15 + 1 | 0;
    if (!(HEAP8[$18 >> 0] | 0)) {
     $$1$lcssa = $18;
     break;
    } else $$pn15 = $18;
   }
  }
  $$pn = $$1$lcssa;
 }
 return $$pn - $0 | 0;
}

function _loadCamera($cparam_name) {
 $cparam_name = $cparam_name | 0;
 var $$0 = 0, $15 = 0, $16 = 0, $6 = 0, $param = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 192 | 0;
 $vararg_buffer = sp + 184 | 0;
 $param = sp;
 if (!(HEAP8[$cparam_name >> 0] & 1)) $6 = $cparam_name + 1 | 0; else $6 = HEAP32[$cparam_name + 8 >> 2] | 0;
 if ((_arParamLoad($6, 1, $param, $vararg_buffer) | 0) < 0) {
  if (!(HEAP8[$cparam_name >> 0] & 1)) $15 = $cparam_name + 1 | 0; else $15 = HEAP32[$cparam_name + 8 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = $15;
  _arLog(3, 5952, $vararg_buffer1);
  $$0 = -1;
 } else {
  $16 = HEAP32[4165] | 0;
  HEAP32[4165] = $16 + 1;
  HEAP32[$vararg_buffer >> 2] = $16;
  _memcpy(__ZNSt3__113unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16636, $vararg_buffer) | 0, $param | 0, 184) | 0;
  $$0 = HEAP32[$vararg_buffer >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _setMarkerInfoDir($id, $markerIndex, $dir) {
 $id = $id | 0;
 $markerIndex = $markerIndex | 0;
 $dir = $dir | 0;
 var $$1 = 0, $0 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 do if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = HEAP32[431] | 0; else {
  $5 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if ((HEAP32[$6 + 44 >> 2] | 0) > ($markerIndex | 0)) {
   HEAP32[(($markerIndex | 0) < 0 ? 16336 : $6 + 48 + ($markerIndex << 8) | 0) + 16 >> 2] = $dir;
   $$1 = 0;
   break;
  } else {
   $$1 = HEAP32[432] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $15 = 0, $28 = 0, $3 = 0, $6 = 0, $9 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $6 = 10;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $6 = ($3 & -2) + -1 | 0;
  $9 = $3 & 255;
 }
 $10 = ($9 & 1) == 0;
 do if ($6 >>> 0 < $__n >>> 0) {
  if ($10) $28 = ($9 & 255) >>> 1; else $28 = HEAP32[$this + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $6, $__n - $6 | 0, $28, 0, $28, $__n, $__s);
 } else {
  if ($10) $15 = $this + 1 | 0; else $15 = HEAP32[$this + 8 >> 2] | 0;
  if ($__n | 0) _memmove($15 | 0, $__s | 0, $__n | 0) | 0;
  HEAP8[$15 + $__n >> 0] = 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $__n << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $14 = 0, $15 = 0, $24 = 0, $25 = 0, $3 = 0, $7 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $15 = 10;
  $7 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $15 = ($3 & -2) + -1 | 0;
  $7 = $3 & 255;
 }
 if (!($7 & 1)) $14 = ($7 & 255) >>> 1; else $14 = HEAP32[$this + 4 >> 2] | 0;
 if (($15 - $14 | 0) >>> 0 < $__n >>> 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $15, $__n - $15 + $14 | 0, $14, $14, 0, $__n, $__s); else if ($__n | 0) {
  if (!($7 & 1)) $24 = $this + 1 | 0; else $24 = HEAP32[$this + 8 >> 2] | 0;
  _memcpy($24 + $14 | 0, $__s | 0, $__n | 0) | 0;
  $25 = $14 + $__n | 0;
  if (!(HEAP8[$this >> 0] & 1)) HEAP8[$this >> 0] = $25 << 1; else HEAP32[$this + 4 >> 2] = $25;
  HEAP8[$24 + $25 >> 0] = 0;
 }
 return $this | 0;
}

function __ZNSt3__16vectorI12multi_markerNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $5 = 0, $9 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $this + 4 | 0;
 $3 = $__v + 4 | 0;
 $5 = (HEAP32[$1 >> 2] | 0) - $0 | 0;
 $9 = (HEAP32[$3 >> 2] | 0) + (0 - ($5 >> 3) << 3) | 0;
 HEAP32[$3 >> 2] = $9;
 if (($5 | 0) > 0) {
  _memcpy($9 | 0, $0 | 0, $5 | 0) | 0;
  $$pre$phiZ2D = $3;
  $13 = HEAP32[$3 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $3;
  $13 = $9;
 }
 $12 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $13;
 HEAP32[$$pre$phiZ2D >> 2] = $12;
 $14 = $__v + 8 | 0;
 $15 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$14 >> 2] = $15;
 $17 = $this + 8 | 0;
 $18 = $__v + 12 | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$18 >> 2] = $19;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $this + 4 | 0;
 $3 = $__v + 4 | 0;
 $$0$i = HEAP32[$1 >> 2] | 0;
 while (1) {
  if (($$0$i | 0) == ($0 | 0)) break;
  $7 = $$0$i + -24 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_((HEAP32[$3 >> 2] | 0) + -24 | 0, $7);
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -24;
  $$0$i = $7;
 }
 $10 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $10;
 $12 = $__v + 8 | 0;
 $13 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$12 >> 2] = $13;
 $15 = $this + 8 | 0;
 $16 = $__v + 12 | 0;
 $17 = HEAP32[$15 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 HEAP32[$__v >> 2] = HEAP32[$3 >> 2];
 return;
}

function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($agg$result, $__lhs, $__rhs) {
 $agg$result = $agg$result | 0;
 $__lhs = $__lhs | 0;
 $__rhs = $__rhs | 0;
 var $10 = 0, $2 = 0, $3 = 0, $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $2 = _strlen($__lhs) | 0;
 $3 = HEAP8[$__rhs >> 0] | 0;
 $10 = ($3 & 1) == 0 ? ($3 & 255) >>> 1 : HEAP32[$__rhs + 4 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($agg$result, $__lhs, $2, $10 + $2 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($agg$result, (HEAP8[$__rhs >> 0] & 1) == 0 ? $__rhs + 1 | 0 : HEAP32[$__rhs + 8 >> 2] | 0, $10) | 0;
 return;
}

function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($agg$result, $__lhs, $__rhs) {
 $agg$result = $agg$result | 0;
 $__lhs = $__lhs | 0;
 $__rhs = $__rhs | 0;
 var $10 = 0, $2 = 0, $4 = 0, $9 = 0, $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $2 = HEAP8[$__lhs >> 0] | 0;
 $4 = ($2 & 1) == 0;
 $9 = $4 ? ($2 & 255) >>> 1 : HEAP32[$__lhs + 4 >> 2] | 0;
 $10 = _strlen($__rhs) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($agg$result, $4 ? $__lhs + 1 | 0 : HEAP32[$__lhs + 8 >> 2] | 0, $9, $9 + $10 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($agg$result, $__rhs, $10) | 0;
 return;
}

function _pad($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $$0$lcssa6 = 0, $$02 = 0, $10 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0, $7 = 0, $9 = 0, $pad = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $pad = sp;
 do if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $3 = $w - $l | 0;
  _memset($pad | 0, $c | 0, ($3 >>> 0 > 256 ? 256 : $3) | 0) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  $9 = ($7 & 32 | 0) == 0;
  if ($3 >>> 0 > 255) {
   $10 = $w - $l | 0;
   $$02 = $3;
   $17 = $7;
   $18 = $9;
   while (1) {
    if ($18) {
     ___fwritex($pad, 256, $f) | 0;
     $14 = HEAP32[$f >> 2] | 0;
    } else $14 = $17;
    $$02 = $$02 + -256 | 0;
    $18 = ($14 & 32 | 0) == 0;
    if ($$02 >>> 0 <= 255) break; else $17 = $14;
   }
   if ($18) $$0$lcssa6 = $10 & 255; else break;
  } else if ($9) $$0$lcssa6 = $3; else break;
  ___fwritex($pad, $$0$lcssa6, $f) | 0;
 } while (0);
 STACKTOP = sp;
 return;
}

function _getMultiMarkerNum($id, $multiMarker_id) {
 $id = $id | 0;
 $multiMarker_id = $multiMarker_id | 0;
 var $$1 = 0, $0 = 0, $3 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = -1; else {
  $3 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  if (($multiMarker_id | 0) < 0) $$1 = -1; else {
   $8 = HEAP32[$3 + 248 >> 2] | 0;
   if ((HEAP32[$3 + 252 >> 2] | 0) - $8 >> 3 >>> 0 > $multiMarker_id >>> 0) $$1 = HEAP32[(HEAP32[$8 + ($multiMarker_id << 3) + 4 >> 2] | 0) + 4 >> 2] | 0; else $$1 = -1;
  }
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _byteswap($param) {
 $param = $param | 0;
 var $$lcssa = 0, $2 = 0, $7 = 0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $wparam = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $wparam = sp;
 _byteSwapInt($param, $wparam);
 _byteSwapInt($param + 4 | 0, $wparam + 4 | 0);
 $j$0 = 0;
 while (1) {
  if (($j$0 | 0) == 3) break; else $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 4) break;
   _byteSwapDouble($param + 8 + ($j$0 << 5) + ($i$0 << 3) | 0, $wparam + 8 + ($j$0 << 5) + ($i$0 << 3) | 0);
   $i$0 = $i$0 + 1 | 0;
  }
  $j$0 = $j$0 + 1 | 0;
 }
 $2 = $param + 176 | 0;
 $i$1 = 0;
 while (1) {
  $7 = HEAP32[$2 >> 2] | 0;
  if (($i$1 | 0) >= (HEAP32[1636 + ($7 + -1 << 3) >> 2] | 0)) {
   $$lcssa = $7;
   break;
  }
  _byteSwapDouble($param + 104 + ($i$1 << 3) | 0, $wparam + 104 + ($i$1 << 3) | 0);
  $i$1 = $i$1 + 1 | 0;
 }
 HEAP32[$wparam + 176 >> 2] = $$lcssa;
 _memcpy($param | 0, $wparam | 0, 184) | 0;
 STACKTOP = sp;
 return;
}

function _arMatrixTrans($dest, $source) {
 $dest = $dest | 0;
 $source = $source | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $5 = 0, $c$0 = 0, $p1$0 = 0, $p2$0 = 0, $p2$1 = 0, $p2$1$lcssa = 0, $r$0 = 0;
 $1 = HEAP32[$dest + 4 >> 2] | 0;
 L1 : do if (($1 | 0) == (HEAP32[$source + 8 >> 2] | 0)) {
  $5 = $dest + 8 | 0;
  if ((HEAP32[$5 >> 2] | 0) == (HEAP32[$source + 4 >> 2] | 0)) {
   $p2$0 = HEAP32[$dest >> 2] | 0;
   $r$0 = 0;
   while (1) {
    if (($r$0 | 0) >= ($1 | 0)) {
     $$0 = 0;
     break L1;
    }
    $14 = HEAP32[$5 >> 2] | 0;
    $c$0 = 0;
    $p1$0 = (HEAP32[$source >> 2] | 0) + ($r$0 << 3) | 0;
    $p2$1 = $p2$0;
    while (1) {
     if (($c$0 | 0) >= ($14 | 0)) {
      $p2$1$lcssa = $p2$1;
      break;
     }
     HEAPF64[$p2$1 >> 3] = +HEAPF64[$p1$0 >> 3];
     $c$0 = $c$0 + 1 | 0;
     $p1$0 = $p1$0 + ($1 << 3) | 0;
     $p2$1 = $p2$1 + 8 | 0;
    }
    $p2$0 = $p2$1$lcssa;
    $r$0 = $r$0 + 1 | 0;
   }
  } else $$0 = -1;
 } else $$0 = -1; while (0);
 return $$0 | 0;
}

function _arImageProcInit($xsize, $ysize, $pixFormat, $alwaysCopy) {
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $pixFormat = $pixFormat | 0;
 $alwaysCopy = $alwaysCopy | 0;
 var $$0 = 0, $0 = 0, $5 = 0, label = 0;
 $0 = _malloc(2080) | 0;
 L1 : do if (!$0) $$0 = $0; else {
  HEAP32[$0 + 2068 >> 2] = $pixFormat;
  L3 : do if (!$alwaysCopy) {
   switch ($pixFormat | 0) {
   case 5:
   case 12:
   case 13:
   case 14:
    break;
   default:
    {
     label = 4;
     break L3;
    }
   }
   HEAP32[$0 + 2076 >> 2] = 0;
  } else label = 4; while (0);
  do if ((label | 0) == 4) {
   $5 = _malloc(Math_imul($ysize, $xsize) | 0) | 0;
   HEAP32[$0 >> 2] = $5;
   if (!$5) {
    _free($0);
    $$0 = 0;
    break L1;
   } else {
    HEAP32[$0 + 2076 >> 2] = 1;
    break;
   }
  } while (0);
  HEAP32[$0 + 2072 >> 2] = $alwaysCopy;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = $xsize;
  HEAP32[$0 + 12 >> 2] = $ysize;
  $$0 = $0;
 } while (0);
 return $$0 | 0;
}

function _setPattRatio($id, $ratio) {
 $id = $id | 0;
 $ratio = +$ratio;
 var $0 = 0, $3 = 0, $6 = 0.0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8 | 0;
 HEAP32[$0 >> 2] = $id;
 if (__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0) {
  $3 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  if (!($ratio <= 0.0 | $ratio >= 1.0)) {
   $6 = $ratio;
   $8 = HEAP32[$3 + 212 >> 2] | 0;
   if ($8 | 0) if (!(_arSetPattRatio($8, $6) | 0)) {
    HEAPF64[$vararg_buffer >> 3] = $6;
    _arLog(1, 8218, $vararg_buffer);
   }
  }
 }
 STACKTOP = sp;
 return;
}

function _setDebugMode($id, $enable) {
 $id = $id | 0;
 $enable = $enable | 0;
 var $$0 = 0, $0 = 0, $4 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$0 = 0; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $6 = ($enable | 0) != 0;
  _arSetDebugMode(HEAP32[$4 >> 2] | 0, $6 & 1) | 0;
  HEAP32[$vararg_buffer >> 2] = $6 ? 7817 : 7821;
  _arLog(1, 7826, $vararg_buffer);
  $$0 = $enable;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 if (!(_memchr(13813, HEAP8[$mode >> 0] | 0, 4) | 0)) {
  $3 = ___errno_location() | 0;
  HEAP32[$3 >> 2] = 22;
  $$0 = 0;
 } else {
  $5 = ___fmodeflags($mode) | 0 | 32768;
  HEAP32[$vararg_buffer >> 2] = $filename;
  HEAP32[$vararg_buffer + 4 >> 2] = $5;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $7 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($7 | 0) < 0) $$0 = 0; else {
   $9 = ___fdopen($7, $mode) | 0;
   if (!$9) {
    HEAP32[$vararg_buffer3 >> 2] = $7;
    ___syscall6(6, $vararg_buffer3 | 0) | 0;
    $$0 = 0;
   } else $$0 = $9;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _getPattRatio($id) {
 $id = $id | 0;
 var $$0 = 0.0, $$1 = 0.0, $0 = 0, $4 = 0, $5 = 0, $8 = 0, $pattRatio = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $pattRatio = sp;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = -1.0; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  if (!$5) $$0 = -1.0; else {
   $8 = (_arGetPattRatio($5, $pattRatio) | 0) == 0;
   $$0 = $8 ? +HEAPF64[$pattRatio >> 3] : -1.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function _cycle($width, $ar, $n) {
 $width = $width | 0;
 $ar = $ar | 0;
 $n = $n | 0;
 var $$02 = 0, $1 = 0, $4 = 0, $6 = 0, $7 = 0, $i$01 = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $tmp = sp;
 L1 : do if (($n | 0) >= 2) {
  $1 = $ar + ($n << 2) | 0;
  HEAP32[$1 >> 2] = $tmp;
  if ($width | 0) {
   $$02 = $width;
   $6 = $tmp;
   while (1) {
    $4 = $$02 >>> 0 > 256 ? 256 : $$02;
    _memcpy($6 | 0, HEAP32[$ar >> 2] | 0, $4 | 0) | 0;
    $i$01 = 0;
    do {
     $7 = $ar + ($i$01 << 2) | 0;
     $i$01 = $i$01 + 1 | 0;
     _memcpy(HEAP32[$7 >> 2] | 0, HEAP32[$ar + ($i$01 << 2) >> 2] | 0, $4 | 0) | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + $4;
    } while (($i$01 | 0) != ($n | 0));
    if (($$02 | 0) == ($4 | 0)) break L1;
    $$02 = $$02 - $4 | 0;
    $6 = HEAP32[$1 >> 2] | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _setThreshold($id, $threshold) {
 $id = $id | 0;
 $threshold = $threshold | 0;
 var $0 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0) {
  $3 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  if ($threshold >>> 0 <= 255) if (!(_arSetLabelingThresh(HEAP32[$3 + 212 >> 2] | 0, $threshold) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $threshold;
   _arLog(1, 8088, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $1 = $x * 8988465674311579538646525.0e283;
  $2 = $n + -1023 | 0;
  if (($2 | 0) > 1023) {
   $5 = $n + -2046 | 0;
   $$0 = ($5 | 0) > 1023 ? 1023 : $5;
   $y$0 = $1 * 8988465674311579538646525.0e283;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else if (($n | 0) < -1022) {
  $8 = $x * 2.2250738585072014e-308;
  $9 = $n + 1022 | 0;
  if (($9 | 0) < -1022) {
   $12 = $n + 2044 | 0;
   $$0 = ($12 | 0) < -1022 ? -1022 : $12;
   $y$0 = $8 * 2.2250738585072014e-308;
  } else {
   $$0 = $9;
   $y$0 = $8;
  }
 } else {
  $$0 = $n;
  $y$0 = $x;
 }
 $15 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0;
 $16 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0, $45 = 0;
 do if (!$s) $$0 = 1; else {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $$0 = 1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $$0 = 4;
   break;
  } else {
   $45 = ___errno_location() | 0;
   HEAP32[$45 >> 2] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _setPatternDetectionMode($id, $mode) {
 $id = $id | 0;
 $mode = $mode | 0;
 var $0 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0) {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  if (!(_arSetPatternDetectionMode(HEAP32[$4 >> 2] | 0, $mode) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $mode;
   _arLog(1, 8146, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _arMatrixDup($dest, $source) {
 $dest = $dest | 0;
 $source = $source | 0;
 var $$0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $c$0 = 0, $r$0 = 0;
 $1 = HEAP32[$dest + 4 >> 2] | 0;
 L1 : do if (($1 | 0) == (HEAP32[$source + 4 >> 2] | 0)) {
  $6 = HEAP32[$dest + 8 >> 2] | 0;
  $7 = $source + 8 | 0;
  if (($6 | 0) == (HEAP32[$7 >> 2] | 0)) {
   $r$0 = 0;
   while (1) {
    if (($r$0 | 0) >= ($1 | 0)) {
     $$0 = 0;
     break L1;
    }
    $11 = HEAP32[$7 >> 2] | 0;
    $12 = Math_imul($11, $r$0) | 0;
    $13 = Math_imul($6, $r$0) | 0;
    $c$0 = 0;
    while (1) {
     if (($c$0 | 0) >= ($11 | 0)) break;
     HEAPF64[(HEAP32[$dest >> 2] | 0) + ($13 + $c$0 << 3) >> 3] = +HEAPF64[(HEAP32[$source >> 2] | 0) + ($12 + $c$0 << 3) >> 3];
     $c$0 = $c$0 + 1 | 0;
    }
    $r$0 = $r$0 + 1 | 0;
   }
  } else $$0 = -1;
 } else $$0 = -1; while (0);
 return $$0 | 0;
}

function _setThresholdMode($id, $mode) {
 $id = $id | 0;
 $mode = $mode | 0;
 var $0 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0) {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  if (!(_arSetLabelingThreshMode(HEAP32[$4 >> 2] | 0, $mode) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $mode;
   _arLog(1, 8027, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _getThresholdMode($id) {
 $id = $id | 0;
 var $$1 = 0, $0 = 0, $4 = 0, $7 = 0, $thresholdMode = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $thresholdMode = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = -1; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $7 = (_arGetLabelingThreshMode(HEAP32[$4 >> 2] | 0, $thresholdMode) | 0) == 0;
  $$1 = $7 ? HEAP32[$thresholdMode >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _setImageProcMode($id, $mode) {
 $id = $id | 0;
 $mode = $mode | 0;
 var $0 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0) {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  if (!(_arSetImageProcMode(HEAP32[$4 >> 2] | 0, $mode) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $mode;
   _arLog(1, 8377, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _getImageProcMode($id) {
 $id = $id | 0;
 var $$1 = 0, $0 = 0, $4 = 0, $7 = 0, $imageProcMode = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $imageProcMode = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = -1; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $7 = (_arGetImageProcMode(HEAP32[$4 >> 2] | 0, $imageProcMode) | 0) == 0;
  $$1 = $7 ? HEAP32[$imageProcMode >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _setLabelingMode($id, $mode) {
 $id = $id | 0;
 $mode = $mode | 0;
 var $0 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0) {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  if (!(_arSetLabelingMode(HEAP32[$4 >> 2] | 0, $mode) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $mode;
   _arLog(1, 8319, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _getLabelingMode($id) {
 $id = $id | 0;
 var $$1 = 0, $0 = 0, $4 = 0, $7 = 0, $labelingMode = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $labelingMode = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = -1; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $7 = (_arGetLabelingMode(HEAP32[$4 >> 2] | 0, $labelingMode) | 0) == 0;
  $$1 = $7 ? HEAP32[$labelingMode >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first, $last, $cv) {
 $first = $first | 0;
 $last = $last | 0;
 $cv = $cv | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $1 = 0, $12 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 HEAP32[$cv >> 2] = 0;
 if (($first | 0) == ($last | 0)) $$2 = $first; else {
  $1 = HEAP8[$first >> 0] | 0;
  if ($1 << 24 >> 24 == 114) {
   HEAP32[$cv >> 2] = 4;
   $3 = $first + 1 | 0;
   $$0 = $3;
   $4 = HEAP8[$3 >> 0] | 0;
   $7 = 4;
  } else {
   $$0 = $first;
   $4 = $1;
   $7 = 0;
  }
  if ($4 << 24 >> 24 == 86) {
   $6 = $7 | 2;
   HEAP32[$cv >> 2] = $6;
   $8 = $$0 + 1 | 0;
   $$1 = $8;
   $12 = $6;
   $9 = HEAP8[$8 >> 0] | 0;
  } else {
   $$1 = $$0;
   $12 = $7;
   $9 = $4;
  }
  if ($9 << 24 >> 24 == 75) {
   HEAP32[$cv >> 2] = $12 | 1;
   $$2 = $$1 + 1 | 0;
  } else $$2 = $$1;
 }
 return $$2 | 0;
}

function _strerror($e) {
 $e = $e | 0;
 var $$lcssa = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 $i$03 = 0;
 while (1) {
  if ((HEAPU8[11883 + $i$03 >> 0] | 0) == ($e | 0)) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) == 87) {
   $i$12 = 87;
   $s$01 = 11971;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 2) if (!$i$03$lcssa) $s$0$lcssa = 11971; else {
  $i$12 = $i$03$lcssa;
  $s$01 = 11971;
  label = 5;
 }
 if ((label | 0) == 5) while (1) {
  label = 0;
  $s$1 = $s$01;
  while (1) {
   $9 = $s$1 + 1 | 0;
   if (!(HEAP8[$s$1 >> 0] | 0)) {
    $$lcssa = $9;
    break;
   } else $s$1 = $9;
  }
  $i$12 = $i$12 + -1 | 0;
  if (!$i$12) {
   $s$0$lcssa = $$lcssa;
   break;
  } else {
   $s$01 = $$lcssa;
   label = 5;
  }
 }
 return $s$0$lcssa | 0;
}

function _getThreshold($id) {
 $id = $id | 0;
 var $$1 = 0, $0 = 0, $4 = 0, $7 = 0, $threshold = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $threshold = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = -1; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $7 = (_arGetLabelingThresh(HEAP32[$4 >> 2] | 0, $threshold) | 0) == 0;
  $$1 = $7 ? HEAP32[$threshold >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $4 = $2 & 2047;
 switch ($4 | 0) {
 case 0:
  {
   if ($x != 0.0) {
    $7 = +_frexp($x * 18446744073709551616.0, $e);
    $$01 = $7;
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
   } else {
    $$01 = $x;
    $storemerge = 0;
   }
   HEAP32[$e >> 2] = $storemerge;
   $$0 = $$01;
   break;
  }
 case 2047:
  {
   $$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = $4 + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function _getPatternDetectionMode($id) {
 $id = $id | 0;
 var $$1 = 0, $0 = 0, $4 = 0, $7 = 0, $mode = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $mode = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$1 = -1; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $7 = (_arGetPatternDetectionMode(HEAP32[$4 >> 2] | 0, $mode) | 0) == 0;
  $$1 = $7 ? HEAP32[$mode >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function ___fseeko_unlocked($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $$0 = 0, $$01 = 0, $7 = 0, $9 = 0, label = 0;
 if (($whence | 0) == 1) $$01 = $off - (HEAP32[$f + 8 >> 2] | 0) + (HEAP32[$f + 4 >> 2] | 0) | 0; else $$01 = $off;
 $7 = $f + 20 | 0;
 $9 = $f + 28 | 0;
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
  if (!(HEAP32[$7 >> 2] | 0)) $$0 = -1; else label = 5;
 } else label = 5;
 if ((label | 0) == 5) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 40 >> 2] & 15]($f, $$01, $whence) | 0) < 0) $$0 = -1; else {
   HEAP32[$f + 8 >> 2] = 0;
   HEAP32[$f + 4 >> 2] = 0;
   HEAP32[$f >> 2] = HEAP32[$f >> 2] & -17;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $10 = 0, $3 = 0, $4 = 0, $__p$01 = 0, $__p$02 = 0, label = 0;
 if ($__sz >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__sz >>> 0 < 11) {
  HEAP8[$this >> 0] = $__sz << 1;
  $10 = $this + 1 | 0;
  if (!$__sz) $__p$02 = $10; else {
   $__p$01 = $10;
   label = 6;
  }
 } else {
  $3 = $__sz + 16 & -16;
  $4 = _malloc($3) | 0;
  HEAP32[$this + 8 >> 2] = $4;
  HEAP32[$this >> 2] = $3 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$01 = $4;
  label = 6;
 }
 if ((label | 0) == 6) {
  _memcpy($__p$01 | 0, $__s | 0, $__sz | 0) | 0;
  $__p$02 = $__p$01;
 }
 HEAP8[$__p$02 + $__sz >> 0] = 0;
 return;
}

function _icpGetU_from_X_by_MatX2U($u, $matX2U, $coord3d) {
 $u = $u | 0;
 $matX2U = $matX2U | 0;
 $coord3d = $coord3d | 0;
 var $$0 = 0, $0 = 0.0, $18 = 0.0, $2 = 0.0, $33 = 0.0, $4 = 0.0;
 $0 = +HEAPF64[$coord3d >> 3];
 $2 = +HEAPF64[$coord3d + 8 >> 3];
 $4 = +HEAPF64[$coord3d + 16 >> 3];
 $18 = +HEAPF64[$matX2U + 88 >> 3] + ($0 * +HEAPF64[$matX2U + 64 >> 3] + $2 * +HEAPF64[$matX2U + 72 >> 3] + $4 * +HEAPF64[$matX2U + 80 >> 3]);
 if ($18 == 0.0) $$0 = -1; else {
  $33 = +HEAPF64[$matX2U + 56 >> 3] + ($0 * +HEAPF64[$matX2U + 32 >> 3] + $2 * +HEAPF64[$matX2U + 40 >> 3] + $4 * +HEAPF64[$matX2U + 48 >> 3]);
  HEAPF64[$u >> 3] = (+HEAPF64[$matX2U + 24 >> 3] + ($0 * +HEAPF64[$matX2U >> 3] + $2 * +HEAPF64[$matX2U + 8 >> 3] + $4 * +HEAPF64[$matX2U + 16 >> 3])) / $18;
  HEAPF64[$u + 8 >> 3] = $33 / $18;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($this, $__x, $__a) {
 $this = $this | 0;
 $__x = $__x | 0;
 $__a = $__a | 0;
 var $0 = 0, $2 = 0, $5 = 0;
 HEAP32[$this >> 2] = 0;
 $0 = $this + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $2 = HEAP32[$__a >> 2] | 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = $2;
 $5 = __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($2, 24) | 0;
 HEAP32[$0 >> 2] = $5;
 HEAP32[$this >> 2] = $5;
 HEAP32[$this + 8 >> 2] = $5 + 24;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($5, $__x);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($5 + 12 | 0, $__x + 12 | 0);
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 24;
 return;
}

function _getMatrixCodeType($id) {
 $id = $id | 0;
 var $$0 = 0, $0 = 0, $4 = 0, $matrixType = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $matrixType = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$0 = -1; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  _arGetMatrixCodeType(HEAP32[$4 >> 2] | 0, $matrixType) | 0;
  $$0 = HEAP32[$matrixType >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $$0 = 0, $$2 = 0, $$first = 0, $5 = 0, $t$0$pn = 0;
 L1 : do if (($first | 0) == ($last | 0)) $$2 = $first; else {
  $$first = (HEAP8[$first >> 0] | 0) == 110 ? $first + 1 | 0 : $first;
  if (($$first | 0) == ($last | 0)) $$2 = $first; else {
   $5 = HEAP8[$$first >> 0] | 0;
   if ($5 << 24 >> 24 == 48) {
    $$2 = $$first + 1 | 0;
    break;
   }
   if (($5 + -49 & 255) < 9) {
    $t$0$pn = $$first;
    while (1) {
     $$0 = $t$0$pn + 1 | 0;
     if (($$0 | 0) == ($last | 0)) {
      $$2 = $last;
      break L1;
     }
     if (((HEAP8[$$0 >> 0] | 0) + -48 | 0) >>> 0 < 10) $t$0$pn = $$0; else {
      $$2 = $$0;
      break;
     }
    }
   } else $$2 = $first;
  }
 } while (0);
 return $$2 | 0;
}

function _arPattDeleteHandle($pattHandle) {
 $pattHandle = $pattHandle | 0;
 var $$0 = 0, $1 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $i$0 = 0, $j$0 = 0;
 if (!$pattHandle) $$0 = -1; else {
  $1 = $pattHandle + 4 | 0;
  $2 = $pattHandle + 8 | 0;
  $3 = $pattHandle + 12 | 0;
  $4 = $pattHandle + 20 | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) >= (HEAP32[$1 >> 2] | 0)) break;
   if (HEAP32[(HEAP32[$2 >> 2] | 0) + ($i$0 << 2) >> 2] | 0) _arPattFree($pattHandle, $i$0) | 0;
   $11 = $i$0 << 2;
   $j$0 = 0;
   while (1) {
    if (($j$0 | 0) == 4) break;
    $12 = $j$0 + $11 | 0;
    _free(HEAP32[(HEAP32[$3 >> 2] | 0) + ($12 << 2) >> 2] | 0);
    _free(HEAP32[(HEAP32[$4 >> 2] | 0) + ($12 << 2) >> 2] | 0);
    $j$0 = $j$0 + 1 | 0;
   }
   $i$0 = $i$0 + 1 | 0;
  }
  _free($pattHandle);
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $10 = 0, $3 = 0, $4 = 0, $__p$01 = 0, $__p$02 = 0, label = 0;
 if ($__sz >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__sz >>> 0 < 11) {
  HEAP8[$this >> 0] = $__sz << 1;
  $10 = $this + 1 | 0;
  if (!$__sz) $__p$02 = $10; else {
   $__p$01 = $10;
   label = 6;
  }
 } else {
  $3 = $__sz + 16 & -16;
  $4 = __Znwj($3) | 0;
  HEAP32[$this + 8 >> 2] = $4;
  HEAP32[$this >> 2] = $3 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$01 = $4;
  label = 6;
 }
 if ((label | 0) == 6) {
  _memcpy($__p$01 | 0, $__s | 0, $__sz | 0) | 0;
  $__p$02 = $__p$01;
 }
 HEAP8[$__p$02 + $__sz >> 0] = 0;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $13 = 0, $3 = 0, $__i$0$i$i$i = 0;
 $0 = $this + 12 | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 $3 = ($1 & 1) == 0;
 $13 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $3 ? $0 + 1 | 0 : HEAP32[$this + 20 >> 2] | 0, $3 ? ($1 & 255) >>> 1 : HEAP32[$this + 16 >> 2] | 0) | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$13 >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$13 + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$13 + 8 >> 2];
 $__i$0$i$i$i = 0;
 while (1) {
  if (($__i$0$i$i$i | 0) == 3) break;
  HEAP32[$13 + ($__i$0$i$i$i << 2) >> 2] = 0;
  $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
 }
 return;
}

function _getDebugMode($id) {
 $id = $id | 0;
 var $$0 = 0, $0 = 0, $4 = 0, $enable = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $enable = sp + 4 | 0;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$0 = 0; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  _arGetDebugMode(HEAP32[$4 >> 2] | 0, $enable) | 0;
  $$0 = HEAP32[$enable >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $12 = 0, $15 = 0, $20 = 0, $3 = 0, $9 = 0, $mem$1 = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  $3 = ___errno_location() | 0;
  HEAP32[$3 >> 2] = 12;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $9 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($9 | 0) {
  $mem$1 = $9 + 8 | 0;
  return $mem$1 | 0;
 }
 $12 = _malloc($bytes) | 0;
 if (!$12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $15 = HEAP32[$oldmem + -4 >> 2] | 0;
 $20 = ($15 & -8) - (($15 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($12 | 0, $oldmem | 0, ($20 >>> 0 < $bytes >>> 0 ? $20 : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $12;
 return $mem$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__i$0$i$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this >> 0] = 8;
 $0 = $this + 1 | 0;
 $1 = HEAPU8[$s >> 0] | HEAPU8[$s + 1 >> 0] << 8 | HEAPU8[$s + 2 >> 0] << 16 | HEAPU8[$s + 3 >> 0] << 24;
 HEAP8[$0 >> 0] = $1;
 HEAP8[$0 + 1 >> 0] = $1 >> 8;
 HEAP8[$0 + 2 >> 0] = $1 >> 16;
 HEAP8[$0 + 3 >> 0] = $1 >> 24;
 HEAP8[$this + 5 >> 0] = 0;
 $3 = $this + 12 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$3 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function _arSetDebugMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $$0 = 0, $11 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 do if (!$handle) $$0 = -1; else if ((HEAP32[$handle >> 2] | 0) == ($mode | 0)) $$0 = 0; else {
  HEAP32[$handle >> 2] = $mode;
  if (!$mode) {
   $4 = $handle + 4834148 | 0;
   _free(HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = 0;
   $$0 = 0;
   break;
  }
  $11 = _malloc(Math_imul(HEAP32[$handle + 40 >> 2] | 0, HEAP32[$handle + 36 >> 2] | 0) | 0) | 0;
  HEAP32[$handle + 4834148 >> 2] = $11;
  if (!$11) {
   _arLog(3, 4491, $vararg_buffer);
   _exit(1);
  } else $$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $2 = 0, $__i$0$i$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this >> 0] = 10;
 $0 = $this + 1 | 0;
 HEAP8[$0 >> 0] = HEAP8[$s >> 0] | 0;
 HEAP8[$0 + 1 >> 0] = HEAP8[$s + 1 >> 0] | 0;
 HEAP8[$0 + 2 >> 0] = HEAP8[$s + 2 >> 0] | 0;
 HEAP8[$0 + 3 >> 0] = HEAP8[$s + 3 >> 0] | 0;
 HEAP8[$0 + 4 >> 0] = HEAP8[$s + 4 >> 0] | 0;
 HEAP8[$this + 6 >> 0] = 0;
 $2 = $this + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $2 = 0, $5 = 0, $9 = 0, $ap2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap2 = sp;
 $0 = _malloc(240) | 0;
 do if (!$0) $$0 = -1; else {
  HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
  $2 = _vsnprintf($0, 240, $fmt, $ap2) | 0;
  if ($2 >>> 0 < 240) {
   $5 = _realloc($0, $2 + 1 | 0) | 0;
   HEAP32[$s >> 2] = $5 | 0 ? $5 : $0;
   $$0 = $2;
   break;
  }
  _free($0);
  if (($2 | 0) < 0) $$0 = -1; else {
   $9 = $2 + 1 | 0;
   $10 = _malloc($9) | 0;
   HEAP32[$s >> 2] = $10;
   if (!$10) $$0 = -1; else $$0 = _vsnprintf($10, $9, $fmt, $ap) | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _setProjectionNearPlane($id, $projectionNearPlane) {
 $id = $id | 0;
 $projectionNearPlane = +$projectionNearPlane;
 var $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 if (__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0) {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 232 | 0;
  HEAPF64[$4 >> 3] = $projectionNearPlane;
 }
 STACKTOP = sp;
 return;
}

function _detectMarker($id) {
 $id = $id | 0;
 var $$0 = 0, $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$0 = HEAP32[431] | 0; else {
  $4 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  $$0 = _arDetectMarker(HEAP32[$4 + 212 >> 2] | 0, HEAP32[$4 + 196 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _setProjectionFarPlane($id, $projectionFarPlane) {
 $id = $id | 0;
 $projectionFarPlane = +$projectionFarPlane;
 var $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 if (__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0) {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 240 | 0;
  HEAPF64[$4 >> 3] = $projectionFarPlane;
 }
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $6 = 0, $9 = 0;
 $0 = $info + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) {
  HEAP32[$0 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
 } else {
  if (($1 | 0) != ($adjustedPtr | 0)) {
   $9 = $info + 36 | 0;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $6 = $info + 24 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 2) HEAP32[$6 >> 2] = $path_below;
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $3 = 0, $4 = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $3 = $this + 12 | 0;
 $4 = $0 + 12 | 0;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 $__i$0$i$i1 = 0;
 while (1) {
  if (($__i$0$i$i1 | 0) == 3) break;
  HEAP32[$4 + ($__i$0$i$i1 << 2) >> 2] = 0;
  $__i$0$i$i1 = $__i$0$i$i1 + 1 | 0;
 }
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 3]($8, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, $1 & 2 | 0 ? $path_below : 2, $use_strcmp);
 return;
}

function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $this + 8 | 0;
 while (1) {
  $3 = HEAP32[$2 >> 2] | 0;
  if (($3 | 0) == ($1 | 0)) break;
  $5 = $3 + -16 | 0;
  HEAP32[$2 >> 2] = $5;
  __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($5);
 }
 $6 = HEAP32[$this >> 2] | 0;
 if ($6 | 0) __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[HEAP32[$this + 16 >> 2] >> 2] | 0, $6, (HEAP32[$this + 12 >> 2] | 0) - $6 | 0);
 return;
}

function _arUtilMatMul($s1, $s2, $d) {
 $s1 = $s1 | 0;
 $s2 = $s2 | 0;
 $d = $d | 0;
 var $0 = 0, $1 = 0, $2 = 0, $21 = 0, $i$0 = 0, $j$0 = 0;
 $j$0 = 0;
 while (1) {
  if (($j$0 | 0) == 3) break;
  $0 = $s1 + ($j$0 << 5) | 0;
  $1 = $s1 + ($j$0 << 5) + 8 | 0;
  $2 = $s1 + ($j$0 << 5) + 16 | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 4) break;
   HEAPF64[$d + ($j$0 << 5) + ($i$0 << 3) >> 3] = +HEAPF64[$0 >> 3] * +HEAPF64[$s2 + ($i$0 << 3) >> 3] + +HEAPF64[$1 >> 3] * +HEAPF64[$s2 + 32 + ($i$0 << 3) >> 3] + +HEAPF64[$2 >> 3] * +HEAPF64[$s2 + 64 + ($i$0 << 3) >> 3];
   $i$0 = $i$0 + 1 | 0;
  }
  $21 = $d + ($j$0 << 5) + 24 | 0;
  HEAPF64[$21 >> 3] = +HEAPF64[$s1 + ($j$0 << 5) + 24 >> 3] + +HEAPF64[$21 >> 3];
  $j$0 = $j$0 + 1 | 0;
 }
 return 0;
}

function __ZNSt3__113__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $2 = $this + 4 | 0;
  while (1) {
   $3 = HEAP32[$2 >> 2] | 0;
   if (($3 | 0) == ($0 | 0)) break;
   $5 = $3 + -16 | 0;
   HEAP32[$2 >> 2] = $5;
   __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($5);
  }
  $6 = HEAP32[$this >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$this + 12 >> 2] | 0, $6, (HEAP32[$this + 8 >> 2] | 0) - $6 | 0);
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $2 = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0;
 HEAP32[$this >> 2] = HEAP32[$f >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$f + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$f + 8 >> 2];
 $__i$0$i$i1 = 0;
 while (1) {
  if (($__i$0$i$i1 | 0) == 3) break;
  HEAP32[$f + ($__i$0$i$i1 << 2) >> 2] = 0;
  $__i$0$i$i1 = $__i$0$i$i1 + 1 | 0;
 }
 $2 = $this + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function _getMultiMarkerCount($id) {
 $id = $id | 0;
 var $$0 = 0, $0 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$0 = -1; else {
  $3 = __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0;
  $$0 = (HEAP32[$3 + 252 >> 2] | 0) - (HEAP32[$3 + 248 >> 2] | 0) >> 3;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _getMarkerNum($id) {
 $id = $id | 0;
 var $$0$in = 0, $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$0$in = 1724; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $$0$in = (HEAP32[$4 >> 2] | 0) + 44 | 0;
 }
 STACKTOP = sp;
 return HEAP32[$$0$in >> 2] | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($this, $__s, $__sz, $__reserve) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 $__reserve = $__reserve | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0;
 if ($__reserve >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__reserve >>> 0 < 11) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__reserve + 16 & -16;
  $7 = _malloc($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $7;
 }
 if ($__sz | 0) _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0;
 HEAP8[$__p$0 + $__sz >> 0] = 0;
 return;
}

function _getProcessingImage($id) {
 $id = $id | 0;
 var $$0 = 0, $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$0 = 0; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  $$0 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4834148 >> 2] | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $2 = 0, $__i$0$i$i = 0, dest = 0, src = 0, stop = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this >> 0] = 20;
 dest = $this + 1 | 0;
 src = $s;
 stop = dest + 10 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$this + 11 >> 0] = 0;
 $2 = $this + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $2 = 0, $__i$0$i$i = 0, dest = 0, src = 0, stop = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this >> 0] = 18;
 dest = $this + 1 | 0;
 src = $s;
 stop = dest + 9 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$this + 10 >> 0] = 0;
 $2 = $this + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $9 = 0, label = 0;
 $0 = $f + 20 | 0;
 $2 = $f + 28 | 0;
 if ((HEAP32[$0 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
  if (!(HEAP32[$0 >> 2] | 0)) $$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $9 = $f + 4 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $11 = $f + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  if ($10 >>> 0 < $12 >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 40 >> 2] & 15]($f, $10 - $12 | 0, 1) | 0;
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _setMatrixCodeType($id, $type) {
 $id = $id | 0;
 $type = $type | 0;
 var $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 if (__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0) {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 212 | 0;
  _arSetMatrixCodeType(HEAP32[$4 >> 2] | 0, $type) | 0;
 }
 STACKTOP = sp;
 return;
}

function _arParamObserv2IdealLTf($paramLTf, $ox, $oy, $ix, $iy) {
 $paramLTf = $paramLTf | 0;
 $ox = +$ox;
 $oy = +$oy;
 $ix = $ix | 0;
 $iy = $iy | 0;
 var $$0 = 0, $12 = 0, $23 = 0, $4 = 0, $9 = 0;
 $4 = (HEAP32[$paramLTf + 16 >> 2] | 0) + ~~($ox + .5) | 0;
 $9 = (HEAP32[$paramLTf + 20 >> 2] | 0) + ~~($oy + .5) | 0;
 if (($4 | 0) < 0) $$0 = -1; else {
  $12 = HEAP32[$paramLTf + 8 >> 2] | 0;
  if (($9 | 0) < 0 | ($4 | 0) >= ($12 | 0)) $$0 = -1; else if (($9 | 0) < (HEAP32[$paramLTf + 12 >> 2] | 0)) {
   $23 = (HEAP32[$paramLTf + 4 >> 2] | 0) + ((Math_imul($12, $9) | 0) + $4 << 1 << 2) | 0;
   HEAP32[$ix >> 2] = HEAP32[$23 >> 2];
   HEAP32[$iy >> 2] = HEAP32[$23 + 4 >> 2];
   $$0 = 0;
  } else $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $4 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 3]($4, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function _arParamIdeal2ObservLTf($paramLTf, $ix, $iy, $ox, $oy) {
 $paramLTf = $paramLTf | 0;
 $ix = +$ix;
 $iy = +$iy;
 $ox = $ox | 0;
 $oy = $oy | 0;
 var $$0 = 0, $12 = 0, $22 = 0, $4 = 0, $9 = 0;
 $4 = (HEAP32[$paramLTf + 16 >> 2] | 0) + ~~($ix + .5) | 0;
 $9 = (HEAP32[$paramLTf + 20 >> 2] | 0) + ~~($iy + .5) | 0;
 if (($4 | 0) < 0) $$0 = -1; else {
  $12 = HEAP32[$paramLTf + 8 >> 2] | 0;
  if (($9 | 0) < 0 | ($4 | 0) >= ($12 | 0)) $$0 = -1; else if (($9 | 0) < (HEAP32[$paramLTf + 12 >> 2] | 0)) {
   $22 = (HEAP32[$paramLTf >> 2] | 0) + ((Math_imul($12, $9) | 0) + $4 << 1 << 2) | 0;
   HEAP32[$ox >> 2] = HEAP32[$22 >> 2];
   HEAP32[$oy >> 2] = HEAP32[$22 + 4 >> 2];
   $$0 = 0;
  } else $$0 = -1;
 }
 return $$0 | 0;
}

function _getProjectionNearPlane($id) {
 $id = $id | 0;
 var $$0 = 0.0, $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$0 = -1.0; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 232 | 0;
  $$0 = +HEAPF64[$4 >> 3];
 }
 STACKTOP = sp;
 return +$$0;
}

function _getProjectionFarPlane($id) {
 $id = $id | 0;
 var $$0 = 0.0, $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $id;
 if (!(__ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(16616, $0) | 0)) $$0 = -1.0; else {
  $4 = (__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(16616, $0) | 0) + 240 | 0;
  $$0 = +HEAPF64[$4 >> 3];
 }
 STACKTOP = sp;
 return +$$0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] & 3]($8, $info, $current_ptr + $offset_to_base$0 | 0, $1 & 2 | 0 ? $path_below : 2, $use_strcmp);
 return;
}

function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $this + 8 | 0;
 while (1) {
  $3 = HEAP32[$2 >> 2] | 0;
  if (($3 | 0) == ($1 | 0)) break;
  $5 = $3 + -16 | 0;
  HEAP32[$2 >> 2] = $5;
  __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
 }
 $6 = HEAP32[$this >> 2] | 0;
 if ($6 | 0) __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[HEAP32[$this + 16 >> 2] >> 2] | 0, $6, (HEAP32[$this + 12 >> 2] | 0) - $6 | 0);
 return;
}

function __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $2 = $this + 4 | 0;
  while (1) {
   $3 = HEAP32[$2 >> 2] | 0;
   if (($3 | 0) == ($0 | 0)) break;
   $5 = $3 + -16 | 0;
   HEAP32[$2 >> 2] = $5;
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
  }
  $6 = HEAP32[$this >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$this + 12 >> 2] | 0, $6, (HEAP32[$this + 8 >> 2] | 0) - $6 | 0);
 }
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($this) {
 $this = $this | 0;
 var $$pre1 = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $10 = ($0 & 255) >>> 1;
  $14 = $this + 1 | 0;
 } else {
  $10 = HEAP32[$this + 4 >> 2] | 0;
  $14 = HEAP32[$this + 8 >> 2] | 0;
 }
 $11 = ($10 | 0) != 0 & 1;
 $$pre1 = $10 - $11 | 0;
 if (($10 | 0) == ($11 | 0)) $16 = $0; else {
  _memmove($14 | 0, $14 + $11 | 0, $$pre1 | 0) | 0;
  $16 = HEAP8[$this >> 0] | 0;
 }
 if (!($16 & 1)) HEAP8[$this >> 0] = $$pre1 << 1; else HEAP32[$this + 4 >> 2] = $$pre1;
 HEAP8[$14 + $$pre1 >> 0] = 0;
 return;
}

function __ZNSt3__114__split_bufferI12multi_markerRNS_9allocatorIS1_EEEC2EjjS4_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $4 = 0, $7 = 0, $8 = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $7 = 0; else if ($__cap >>> 0 > 536870911) {
  $4 = ___cxa_allocate_exception(4) | 0;
  __ZNSt9bad_allocC2Ev($4);
  ___cxa_throw($4 | 0, 256, 6);
 } else {
  $7 = __Znwj($__cap << 3) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $7;
 $8 = $7 + ($__start << 3) | 0;
 HEAP32[$this + 8 >> 2] = $8;
 HEAP32[$this + 4 >> 2] = $8;
 HEAP32[$this + 12 >> 2] = $7 + ($__cap << 3);
 return;
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $5 = 0, $ret = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $off;
 HEAP32[$vararg_buffer + 12 >> 2] = $ret;
 HEAP32[$vararg_buffer + 16 >> 2] = $whence;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$ret >> 2] = -1;
  $5 = -1;
 } else $5 = HEAP32[$ret >> 2] | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $2 = 0, $__i$0$i$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this >> 0] = 6;
 $0 = $this + 1 | 0;
 HEAP8[$0 >> 0] = HEAP8[$s >> 0] | 0;
 HEAP8[$0 + 1 >> 0] = HEAP8[$s + 1 >> 0] | 0;
 HEAP8[$0 + 2 >> 0] = HEAP8[$s + 2 >> 0] | 0;
 HEAP8[$this + 4 >> 0] = 0;
 $2 = $this + 12 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function _arImageProcLumaHist($ipi, $dataPtr) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 var $$0 = 0, $13 = 0, $5 = 0, $9 = 0, $p$0 = 0;
 L1 : do if (($ipi | 0) != 0 & ($dataPtr | 0) != 0) if ((_arImageProcLuma($ipi, $dataPtr) | 0) < 0) $$0 = -1; else {
  _memset($ipi + 16 | 0, 0, 1024) | 0;
  $5 = HEAP32[$ipi >> 2] | 0;
  $9 = $5 + (Math_imul(HEAP32[$ipi + 12 >> 2] | 0, HEAP32[$ipi + 8 >> 2] | 0) | 0) | 0;
  $p$0 = $5;
  while (1) {
   if ($p$0 >>> 0 >= $9 >>> 0) {
    $$0 = 0;
    break L1;
   }
   $13 = $ipi + 16 + ((HEAPU8[$p$0 >> 0] | 0) << 2) | 0;
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
   $p$0 = $p$0 + 1 | 0;
  }
 } else $$0 = -1; while (0);
 return $$0 | 0;
}

function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $6 = 0, $7 = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 if (!$__cap) $6 = 0; else $6 = __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$__a >> 2] | 0, $__cap << 4) | 0;
 HEAP32[$this >> 2] = $6;
 $7 = $6 + ($__start << 4) | 0;
 HEAP32[$this + 8 >> 2] = $7;
 HEAP32[$this + 4 >> 2] = $7;
 HEAP32[$this + 12 >> 2] = $6 + ($__cap << 4);
 return;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function _arVecHousehold($x) {
 $x = $x | 0;
 var $1 = 0.0, $10 = 0.0, $12 = 0, $14 = 0, $3 = 0, $4 = 0.0, $7 = 0.0, $i$0 = 0, $s$0 = 0.0, $s$1 = 0.0;
 $1 = +Math_sqrt(+(+_arVecInnerproduct($x, $x)));
 L1 : do if ($1 != 0.0) {
  $3 = HEAP32[$x >> 2] | 0;
  $4 = +HEAPF64[$3 >> 3];
  $s$0 = $4 < 0.0 ? -$1 : $1;
  $7 = $4 + $s$0;
  HEAPF64[$3 >> 3] = $7;
  $10 = 1.0 / +Math_sqrt(+($s$0 * $7));
  $12 = HEAP32[$x + 4 >> 2] | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) >= ($12 | 0)) {
    $s$1 = $s$0;
    break L1;
   }
   $14 = $3 + ($i$0 << 3) | 0;
   HEAPF64[$14 >> 3] = $10 * +HEAPF64[$14 >> 3];
   $i$0 = $i$0 + 1 | 0;
  }
 } else $s$1 = $1; while (0);
 return +-$s$1;
}

function __ZN10emscripten8internal7InvokerIiJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiiS8_EiPNS0_11BindingTypeIS8_EUt_E($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($0, $args1);
 $1 = FUNCTION_TABLE_iii[$fn & 15]($args, $0) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 STACKTOP = sp;
 return $1 | 0;
}

function _fclose($f) {
 $f = $f | 0;
 var $$pre = 0, $12 = 0, $18 = 0, $22 = 0, $24 = 0, $5 = 0, $7 = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {}
 $5 = (HEAP32[$f >> 2] & 1 | 0) != 0;
 if (!$5) {
  ___lock(16692);
  $7 = HEAP32[$f + 52 >> 2] | 0;
  $$pre = $f + 56 | 0;
  if ($7 | 0) HEAP32[$7 + 56 >> 2] = HEAP32[$$pre >> 2];
  $12 = HEAP32[$$pre >> 2] | 0;
  if ($12 | 0) HEAP32[$12 + 52 >> 2] = $7;
  if ((HEAP32[4172] | 0) == ($f | 0)) HEAP32[4172] = $12;
  ___unlock(16692);
 }
 $18 = _fflush($f) | 0;
 $22 = FUNCTION_TABLE_ii[HEAP32[$f + 12 >> 2] & 31]($f) | 0 | $18;
 $24 = HEAP32[$f + 92 >> 2] | 0;
 if ($24 | 0) _free($24);
 if (!$5) _free($f);
 return $22 | 0;
}

function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $15 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = $f + 20 | 0;
 $8 = $f + 44 | 0;
 if ((HEAP32[$6 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$f + 28 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 if (!($15 & 20)) {
  $21 = HEAP32[$8 >> 2] | 0;
  HEAP32[$f + 8 >> 2] = $21;
  HEAP32[$f + 4 >> 2] = $21;
  $$0 = 0;
 } else if (!($15 & 4)) $$0 = -1; else {
  HEAP32[$f >> 2] = $15 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 3]($8, $info, $adjustedPtr + $offset_to_base$0 | 0, $1 & 2 | 0 ? $path_below : 2);
 return;
}

function _strtok($s, $sep) {
 $s = $s | 0;
 $sep = $sep | 0;
 var $$0 = 0, $$01 = 0, $1 = 0, $4 = 0, $8 = 0, label = 0;
 if (!$s) {
  $1 = HEAP32[4179] | 0;
  if (!$1) $$0 = 0; else {
   $$01 = $1;
   label = 3;
  }
 } else {
  $$01 = $s;
  label = 3;
 }
 do if ((label | 0) == 3) {
  $4 = $$01 + (_strspn($$01, $sep) | 0) | 0;
  if (!(HEAP8[$4 >> 0] | 0)) {
   HEAP32[4179] = 0;
   $$0 = 0;
   break;
  }
  $8 = $4 + (_strcspn($4, $sep) | 0) | 0;
  HEAP32[4179] = $8;
  if (!(HEAP8[$8 >> 0] | 0)) {
   HEAP32[4179] = 0;
   $$0 = $4;
   break;
  } else {
   HEAP32[4179] = $8 + 1;
   HEAP8[$8 >> 0] = 0;
   $$0 = $4;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $6 = 0, $7 = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 if (!$__cap) $6 = 0; else $6 = __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$__a >> 2] | 0, $__cap << 4) | 0;
 HEAP32[$this >> 2] = $6;
 $7 = $6 + ($__start << 4) | 0;
 HEAP32[$this + 8 >> 2] = $7;
 HEAP32[$this + 4 >> 2] = $7;
 HEAP32[$this + 12 >> 2] = $6 + ($__cap << 4);
 return;
}

function _icpCreateHandle($matXc2U) {
 $matXc2U = $matXc2U | 0;
 var $$0 = 0, $0 = 0, $i$0 = 0, $j$0 = 0;
 $0 = _malloc(136) | 0;
 if (!$0) $$0 = 0; else {
  $j$0 = 0;
  while (1) {
   if (($j$0 | 0) == 3) break; else $i$0 = 0;
   while (1) {
    if (($i$0 | 0) == 4) break;
    HEAPF64[$0 + ($j$0 << 5) + ($i$0 << 3) >> 3] = +HEAPF64[$matXc2U + ($j$0 << 5) + ($i$0 << 3) >> 3];
    $i$0 = $i$0 + 1 | 0;
   }
   $j$0 = $j$0 + 1 | 0;
  }
  HEAP32[$0 + 96 >> 2] = 10;
  HEAPF64[$0 + 104 >> 3] = .10000000149011612;
  HEAPF64[$0 + 112 >> 3] = .9900000095367432;
  HEAPF64[$0 + 120 >> 3] = 4.0;
  HEAPF64[$0 + 128 >> 3] = .5;
  $$0 = $0;
 }
 return $$0 | 0;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $1 = 0, $11 = 0, $2 = 0, $l$04 = 0, $r$05 = 0;
 L1 : do if (!$n) $11 = 0; else {
  $$03 = $n;
  $l$04 = $vl;
  $r$05 = $vr;
  while (1) {
   $1 = HEAP8[$l$04 >> 0] | 0;
   $2 = HEAP8[$r$05 >> 0] | 0;
   if ($1 << 24 >> 24 != $2 << 24 >> 24) {
    $$lcssa = $1;
    $$lcssa19 = $2;
    break;
   }
   $$03 = $$03 + -1 | 0;
   if (!$$03) {
    $11 = 0;
    break L1;
   } else {
    $l$04 = $l$04 + 1 | 0;
    $r$05 = $r$05 + 1 | 0;
   }
  }
  $11 = ($$lcssa & 255) - ($$lcssa19 & 255) | 0;
 } while (0);
 return $11 | 0;
}

function ___fmodeflags($mode) {
 $mode = $mode | 0;
 var $1 = 0, $2 = 0, $4 = 0, $7 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0, $flags$2$ = 0, $flags$4 = 0;
 $1 = (_strchr($mode, 43) | 0) == 0;
 $2 = HEAP8[$mode >> 0] | 0;
 $flags$0 = $1 ? $2 << 24 >> 24 != 114 & 1 : 2;
 $4 = (_strchr($mode, 120) | 0) == 0;
 $flags$0$ = $4 ? $flags$0 : $flags$0 | 128;
 $7 = (_strchr($mode, 101) | 0) == 0;
 $flags$2 = $7 ? $flags$0$ : $flags$0$ | 524288;
 $flags$2$ = $2 << 24 >> 24 == 114 ? $flags$2 : $flags$2 | 64;
 $flags$4 = $2 << 24 >> 24 == 119 ? $flags$2$ | 512 : $flags$2$;
 return ($2 << 24 >> 24 == 97 ? $flags$4 | 1024 : $flags$4) | 0;
}

function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $6 = 0, $7 = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 if (!$__cap) $6 = 0; else $6 = __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$__a >> 2] | 0, $__cap * 24 | 0) | 0;
 HEAP32[$this >> 2] = $6;
 $7 = $6 + ($__start * 24 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $7;
 HEAP32[$this + 4 >> 2] = $7;
 HEAP32[$this + 12 >> 2] = $6 + ($__cap * 24 | 0);
 return;
}

function __ZN10emscripten8internal7InvokerIiJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiS8_EPNS0_11BindingTypeIS8_EUt_E($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($0, $args);
 $1 = FUNCTION_TABLE_ii[$fn & 31]($0) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 STACKTOP = sp;
 return $1 | 0;
}

function _strncat($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $1 = 0, $3 = 0, $7 = 0;
 $1 = $d + (_strlen($d) | 0) | 0;
 L1 : do if (!$n) $$0$lcssa = $1; else {
  $$014 = $n;
  $$023 = $s;
  $$05 = $1;
  while (1) {
   $3 = HEAP8[$$023 >> 0] | 0;
   if (!($3 << 24 >> 24)) {
    $$0$lcssa = $$05;
    break L1;
   }
   $$014 = $$014 + -1 | 0;
   $7 = $$05 + 1 | 0;
   HEAP8[$$05 >> 0] = $3;
   if (!$$014) {
    $$0$lcssa = $7;
    break;
   } else {
    $$023 = $$023 + 1 | 0;
    $$05 = $7;
   }
  }
 } while (0);
 HEAP8[$$0$lcssa >> 0] = 0;
 return $d | 0;
}

function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $this + 8 | 0;
 while (1) {
  $3 = HEAP32[$2 >> 2] | 0;
  if (($3 | 0) == ($1 | 0)) break;
  $5 = $3 + -24 | 0;
  HEAP32[$2 >> 2] = $5;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
 }
 $6 = HEAP32[$this >> 2] | 0;
 if ($6 | 0) __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[HEAP32[$this + 16 >> 2] >> 2] | 0, $6, (HEAP32[$this + 12 >> 2] | 0) - $6 | 0);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 if (!(HEAP8[$__str >> 0] & 1)) {
  HEAP32[$this >> 2] = HEAP32[$__str >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2];
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, HEAP32[$__str + 8 >> 2] | 0, HEAP32[$__str + 4 >> 2] | 0);
 return;
}

function __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $2 = $this + 4 | 0;
  while (1) {
   $3 = HEAP32[$2 >> 2] | 0;
   if (($3 | 0) == ($0 | 0)) break;
   $5 = $3 + -24 | 0;
   HEAP32[$2 >> 2] = $5;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
  }
  $6 = HEAP32[$this >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$this + 12 >> 2] | 0, $6, (HEAP32[$this + 8 >> 2] | 0) - $6 | 0);
 }
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $4 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 3]($4, $info, $adjustedPtr, $path_below);
 }
 return;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$f + 36 >> 2] = 1;
 if (!(HEAP32[$f >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21505;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 12;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$f + 75 >> 0] = -1;
 }
 $9 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $__i$0$i$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $s, 17);
 $0 = $this + 12 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $__i$0$i$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $s, 14);
 $0 = $this + 12 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $__i$0$i$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $s, 13);
 $0 = $this + 12 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $__i$0$i$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $s, 12);
 $0 = $this + 12 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $__i$0$i$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $s, 11);
 $0 = $this + 12 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this | 0;
 var $2 = 0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE12__deallocateEPNS_11__hash_nodeIS3_PvEE($this, HEAP32[$this + 8 >> 2] | 0);
 $2 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = 0;
 if ($2 | 0) __ZdlPv($2);
 return;
}

function _arUtilGetDirectoryNameFromPath($dir, $path, $n, $addSeparator) {
 $dir = $dir | 0;
 $path = $path | 0;
 $n = $n | 0;
 $addSeparator = $addSeparator | 0;
 var $$0 = 0, $10 = 0, $3 = 0;
 do if (($dir | 0) != 0 & ($path | 0) != 0 & ($n | 0) != 0) {
  $3 = _strrchr($path, 47) | 0;
  if (!$3) {
   HEAP8[$dir >> 0] = 0;
   $$0 = $dir;
   break;
  }
  $10 = $3 + (($addSeparator | 0) != 0 & 1) - $path | 0;
  if (($10 + 1 | 0) >>> 0 > $n >>> 0) $$0 = 0; else {
   _strncpy($dir, $path, $10) | 0;
   HEAP8[$dir + $10 >> 0] = 0;
   $$0 = $dir;
  }
 } else $$0 = 0; while (0);
 return $$0 | 0;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this | 0;
 var $2 = 0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE12__deallocateEPNS_11__hash_nodeIS3_PvEE($this, HEAP32[$this + 8 >> 2] | 0);
 $2 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = 0;
 if ($2 | 0) __ZdlPv($2);
 return;
}

function _arImageProcLumaHistAndCDF($ipi, $dataPtr) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 var $$0 = 0, $0 = 0, $cdfCurrent$0 = 0, $indvars$iv = 0;
 $0 = _arImageProcLumaHist($ipi, $dataPtr) | 0;
 if (($0 | 0) < 0) $$0 = $0; else {
  $cdfCurrent$0 = 0;
  $indvars$iv = 0;
  do {
   $cdfCurrent$0 = (HEAP32[$ipi + 16 + ($indvars$iv << 2) >> 2] | 0) + $cdfCurrent$0 | 0;
   HEAP32[$ipi + 1040 + ($indvars$iv << 2) >> 2] = $cdfCurrent$0;
   $indvars$iv = $indvars$iv + 1 | 0;
  } while (($indvars$iv | 0) != 256);
  $$0 = 0;
 }
 return $$0 | 0;
}

function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $4 = 0, $f = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $f = sp;
 dest = $f;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$f + 32 >> 2] = 15;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 HEAP32[$f + 84 >> 2] = $s;
 $4 = _vfscanf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _arVecInnerproduct($x, $y) {
 $x = $x | 0;
 $y = $y | 0;
 var $1 = 0, $13 = 0.0, $i$0 = 0, $result$0 = 0.0, $result$0$lcssa = 0.0;
 $1 = HEAP32[$x + 4 >> 2] | 0;
 if (($1 | 0) != (HEAP32[$y + 4 >> 2] | 0)) _exit(0);
 $i$0 = 0;
 $result$0 = 0.0;
 while (1) {
  if (($i$0 | 0) >= ($1 | 0)) {
   $result$0$lcssa = $result$0;
   break;
  }
  $13 = $result$0 + +HEAPF64[(HEAP32[$x >> 2] | 0) + ($i$0 << 3) >> 3] * +HEAPF64[(HEAP32[$y >> 2] | 0) + ($i$0 << 3) >> 3];
  $i$0 = $i$0 + 1 | 0;
  $result$0 = $13;
 }
 return +$result$0$lcssa;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 return;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $0 = 0, $10 = 0, $6 = 0, $7 = 0, $phitmp = 0;
 $0 = Math_imul($nmemb, $size) | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $6 = ___fwritex($src, $0, $f) | 0;
  if ($phitmp) $7 = $6; else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else $7 = ___fwritex($src, $0, $f) | 0;
 if (($7 | 0) == ($0 | 0)) $10 = $nmemb; else $10 = ($7 >>> 0) / ($size >>> 0) | 0;
 return $10 | 0;
}

function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $3 = 0, $k$0 = 0, $k$0$len = 0;
 $0 = $f + 84 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $len + 256 | 0;
 $3 = _memchr($1, 0, $2) | 0;
 $k$0 = ($3 | 0) == 0 ? $2 : $3 - $1 | 0;
 $k$0$len = $k$0 >>> 0 < $len >>> 0 ? $k$0 : $len;
 _memcpy($buf | 0, $1 | 0, $k$0$len | 0) | 0;
 HEAP32[$f + 4 >> 2] = $1 + $k$0$len;
 $11 = $1 + $k$0 | 0;
 HEAP32[$f + 8 >> 2] = $11;
 HEAP32[$0 >> 2] = $11;
 return $k$0$len | 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $1 = 0, $6 = 0, $req$0 = 0;
 if (!$n_elements) $req$0 = 0; else {
  $1 = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($1 >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $1 : -1; else $req$0 = $1;
 }
 $6 = _malloc($req$0) | 0;
 if (!$6) return $6 | 0;
 if (!(HEAP32[$6 + -4 >> 2] & 3)) return $6 | 0;
 _memset($6 | 0, 0, $req$0 | 0) | 0;
 return $6 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__113__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($this + 32 | 0);
 __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($this + 16 | 0);
 __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this);
 return;
}

function _get_buff($buf, $fp) {
 $buf = $buf | 0;
 $fp = $fp | 0;
 var $4 = 0, $5 = 0, $l$0 = 0;
 L1 : while (1) {
  if (!(_fgets($buf, 256, $fp) | 0)) break;
  $l$0 = _strlen($buf) | 0;
  L4 : while (1) {
   if (!$l$0) break;
   $4 = $l$0 + -1 | 0;
   $5 = $buf + $4 | 0;
   switch (HEAP8[$5 >> 0] | 0) {
   case 13:
   case 10:
    break;
   default:
    break L4;
   }
   HEAP8[$5 >> 0] = 0;
   $l$0 = $4;
  }
  switch (HEAP8[$buf >> 0] | 0) {
  case 0:
  case 35:
   break;
  default:
   break L1;
  }
 }
 return;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE12__deallocateEPNS_11__hash_nodeIS3_PvEE($this, $__np) {
 $this = $this | 0;
 $__np = $__np | 0;
 var $$0 = 0, $1 = 0;
 $$0 = $__np;
 while (1) {
  if (!$$0) break;
  $1 = HEAP32[$$0 >> 2] | 0;
  __ZNSt3__113__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($$0 + 264 | 0);
  __ZdlPv($$0);
  $$0 = $1;
 }
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $1 = 0, $3 = 0;
 if (($this | 0) != ($__str | 0)) {
  $1 = HEAP8[$__str >> 0] | 0;
  $3 = ($1 & 1) == 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this, $3 ? $__str + 1 | 0 : HEAP32[$__str + 8 >> 2] | 0, $3 ? ($1 & 255) >>> 1 : HEAP32[$__str + 4 >> 2] | 0);
 }
 return;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = HEAP32[$f >> 2] | 0;
 if (!($6 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $13 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $13;
  HEAP32[$f + 20 >> 2] = $13;
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$f >> 2] = $6 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _deleteHandle($arc) {
 $arc = $arc | 0;
 var $0 = 0, $1 = 0, $4 = 0, $7 = 0;
 $0 = $arc + 212 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 | 0) {
  _arPattDetach($1) | 0;
  _arDeleteHandle(HEAP32[$0 >> 2] | 0) | 0;
  HEAP32[$0 >> 2] = 0;
 }
 $4 = $arc + 224 | 0;
 if (HEAP32[$4 >> 2] | 0) {
  _ar3DDeleteHandle($4) | 0;
  HEAP32[$4 >> 2] = 0;
 }
 $7 = $arc + 192 | 0;
 if (HEAP32[$7 >> 2] | 0) {
  _arParamLTFree($7) | 0;
  HEAP32[$7 >> 2] = 0;
 }
 return;
}

function ___ftello_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $10 = 0, $11 = 0;
 if (!(HEAP32[$f >> 2] & 128)) $10 = 1; else $10 = (HEAP32[$f + 20 >> 2] | 0) >>> 0 > (HEAP32[$f + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 $11 = FUNCTION_TABLE_iiii[HEAP32[$f + 40 >> 2] & 15]($f, 0, $10) | 0;
 if (($11 | 0) < 0) $$0 = $11; else $$0 = $11 - (HEAP32[$f + 8 >> 2] | 0) + (HEAP32[$f + 4 >> 2] | 0) + (HEAP32[$f + 20 >> 2] | 0) - (HEAP32[$f + 28 >> 2] | 0) | 0;
 return $$0 | 0;
}

function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $1 = 0;
 $1 = HEAP32[$v >> 2] | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, $v + 4 | 0, $1);
 return;
}

function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $c = sp;
 if (!(HEAP32[$f + 8 >> 2] | 0)) if (!(___toread($f) | 0)) label = 3; else $$0 = -1; else label = 3;
 if ((label | 0) == 3) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 15]($f, $c, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 return;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function _arUtilGetPixelSize($arPixelFormat) {
 $arPixelFormat = $arPixelFormat | 0;
 var $$0 = 0;
 switch ($arPixelFormat | 0) {
 case 1:
 case 0:
  {
   $$0 = 3;
   break;
  }
 case 6:
 case 4:
 case 3:
 case 2:
  {
   $$0 = 4;
   break;
  }
 case 14:
 case 13:
 case 12:
 case 5:
  {
   $$0 = 1;
   break;
  }
 case 11:
 case 10:
 case 9:
 case 8:
 case 7:
  {
   $$0 = 2;
   break;
  }
 default:
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE12__deallocateEPNS_11__hash_nodeIS3_PvEE($this, $__np) {
 $this = $this | 0;
 $__np = $__np | 0;
 var $$0 = 0, $1 = 0;
 $$0 = $__np;
 while (1) {
  if (!$$0) break;
  $1 = HEAP32[$$0 >> 2] | 0;
  __ZdlPv($$0);
  $$0 = $1;
 }
 return;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $1 = 0, $5 = 0, $fabs = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $fabs = +Math_abs(+$x);
 HEAPF64[tempDoublePtr >> 3] = $fabs;
 $5 = $1 & -2147483648 | HEAP32[tempDoublePtr + 4 >> 2];
 HEAP32[tempDoublePtr >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[tempDoublePtr + 4 >> 2] = $5;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _arMatrixAlloc($row, $clm) {
 $row = $row | 0;
 $clm = $clm | 0;
 var $$0 = 0, $0 = 0, $4 = 0;
 $0 = _malloc(12) | 0;
 do if (!$0) $$0 = 0; else {
  $4 = _malloc(Math_imul($row << 3, $clm) | 0) | 0;
  HEAP32[$0 >> 2] = $4;
  if (!$4) {
   _free($0);
   $$0 = 0;
   break;
  } else {
   HEAP32[$0 + 4 >> 2] = $row;
   HEAP32[$0 + 8 >> 2] = $clm;
   $$0 = $0;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _ar3DCreateHandle2($cpara) {
 $cpara = $cpara | 0;
 var $$0 = 0, $0 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = _malloc(4) | 0;
 if (!$0) {
  _arLog(3, 4491, sp);
  _exit(1);
 }
 $2 = _icpCreateHandle($cpara) | 0;
 HEAP32[$0 >> 2] = $2;
 if (!$2) {
  _free($0);
  $$0 = 0;
 } else $$0 = $0;
 STACKTOP = sp;
 return $$0 | 0;
}

function __GLOBAL__sub_I_ARToolKitJS_cpp() {
 HEAP32[4154] = 0;
 HEAP32[4155] = 0;
 HEAP32[4156] = 0;
 HEAP32[4157] = 0;
 HEAPF32[4158] = 1.0;
 ___cxa_atexit(10, 16616, ___dso_handle | 0) | 0;
 HEAP32[4159] = 0;
 HEAP32[4160] = 0;
 HEAP32[4161] = 0;
 HEAP32[4162] = 0;
 HEAPF32[4163] = 1.0;
 ___cxa_atexit(11, 16636, ___dso_handle | 0) | 0;
 __ZN46EmscriptenBindingInitializer_constant_bindingsC2Ev(0);
 return;
}

function __ZNSt3__114__split_bufferI12multi_markerRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $this + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 while (1) {
  if (($3 | 0) == ($1 | 0)) break;
  $5 = $3 + -8 | 0;
  HEAP32[$2 >> 2] = $5;
  $3 = $5;
 }
 $6 = HEAP32[$this >> 2] | 0;
 if ($6 | 0) __ZdlPv($6);
 return;
}

function ___fseeko($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $5 = 0, $6 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $5 = ___fseeko_unlocked($f, $off, $whence) | 0;
  if ($phitmp) $6 = $5; else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else $6 = ___fseeko_unlocked($f, $off, $whence) | 0;
 return $6 | 0;
}

function _arParamLTFree($paramLT_p) {
 $paramLT_p = $paramLT_p | 0;
 var $$0 = 0, $1 = 0;
 if (!$paramLT_p) $$0 = -1; else {
  $1 = HEAP32[$paramLT_p >> 2] | 0;
  if (!$1) $$0 = -1; else {
   _free(HEAP32[$1 + 184 >> 2] | 0);
   _free(HEAP32[(HEAP32[$paramLT_p >> 2] | 0) + 188 >> 2] | 0);
   _free(HEAP32[$paramLT_p >> 2] | 0);
   HEAP32[$paramLT_p >> 2] = 0;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function _arDeleteHandle($handle) {
 $handle = $handle | 0;
 var $$0 = 0, $1 = 0, $2 = 0;
 if (!$handle) $$0 = -1; else {
  $1 = $handle + 7062408 | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  if ($2 | 0) {
   _arImageProcFinal($2);
   HEAP32[$1 >> 2] = 0;
  }
  _free(HEAP32[$handle + 4834144 >> 2] | 0);
  _free(HEAP32[$handle + 4834148 >> 2] | 0);
  _free($handle);
  $$0 = 0;
 }
 return $$0 | 0;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function _matrixCopy($src, $dst) {
 $src = $src | 0;
 $dst = $dst | 0;
 var $i$0 = 0, $j$0 = 0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 3) break; else $j$0 = 0;
  while (1) {
   if (($j$0 | 0) == 4) break;
   HEAPF64[$dst + ($i$0 << 5) + ($j$0 << 3) >> 3] = +HEAPF64[$src + ($i$0 << 5) + ($j$0 << 3) >> 3];
   $j$0 = $j$0 + 1 | 0;
  }
  $i$0 = $i$0 + 1 | 0;
 }
 return;
}

function __ZNSt3__113__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, $5 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $2 = $this + 4 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  while (1) {
   if (($3 | 0) == ($0 | 0)) break;
   $5 = $3 + -8 | 0;
   HEAP32[$2 >> 2] = $5;
   $3 = $5;
  }
  __ZdlPv($0);
 }
 return;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($this, $n) {
 $this = $this | 0;
 $n = $n | 0;
 var $$0 = 0, $1 = 0, $3 = 0, $4 = 0;
 $1 = $n + 15 & -16;
 $3 = $this + 4096 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($this + 4096 - $4 | 0) >>> 0 < $1 >>> 0) $$0 = _malloc($1) | 0; else {
  HEAP32[$3 >> 2] = $4 + $1;
  $$0 = $4;
 }
 return $$0 | 0;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($this);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($this, $__pos, $__s) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 return __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this, $__pos, $__s, _strlen($__s) | 0) | 0;
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $2 = 0, $4 = 0, $5 = 0;
 HEAP32[$f + 104 >> 2] = $lim;
 $2 = HEAP32[$f + 8 >> 2] | 0;
 $4 = HEAP32[$f + 4 >> 2] | 0;
 $5 = $2 - $4 | 0;
 HEAP32[$f + 108 >> 2] = $5;
 if (($lim | 0) != 0 & ($5 | 0) > ($lim | 0)) HEAP32[$f + 100 >> 2] = $4 + $lim; else HEAP32[$f + 100 >> 2] = $2;
 return;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 $3 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __Znwj($size) {
 $size = $size | 0;
 var $$lcssa = 0, $$size = 0, $1 = 0, $3 = 0;
 $$size = ($size | 0) == 0 ? 1 : $size;
 while (1) {
  $1 = _malloc($$size) | 0;
  if ($1 | 0) {
   $$lcssa = $1;
   break;
  }
  $3 = __ZSt15get_new_handlerv() | 0;
  if (!$3) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$3 & 0]();
 }
 return $$lcssa | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($this, $p, $n) {
 $this = $this | 0;
 $p = $p | 0;
 $n = $n | 0;
 var $7 = 0;
 if ($this >>> 0 <= $p >>> 0 & ($this + 4096 | 0) >>> 0 >= $p >>> 0) {
  $7 = $this + 4096 | 0;
  if (($p + ($n + 15 & -16) | 0) == (HEAP32[$7 >> 2] | 0)) HEAP32[$7 >> 2] = $p;
 } else _free($p);
 return;
}

function _rewind($f) {
 $f = $f | 0;
 var $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  ___fseeko_unlocked($f, 0, 0) | 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] & -33;
  if (!$phitmp) ___unlockfile($f);
 } else {
  ___fseeko_unlocked($f, 0, 0) | 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] & -33;
 }
 return;
}

function _arPattFree($pattHandle, $patno) {
 $pattHandle = $pattHandle | 0;
 $patno = $patno | 0;
 var $$0 = 0, $2 = 0;
 $2 = (HEAP32[$pattHandle + 8 >> 2] | 0) + ($patno << 2) | 0;
 if (!(HEAP32[$2 >> 2] | 0)) $$0 = -1; else {
  HEAP32[$2 >> 2] = 0;
  HEAP32[$pattHandle >> 2] = (HEAP32[$pattHandle >> 2] | 0) + -1;
  $$0 = 1;
 }
 return $$0 | 0;
}

function __ZNSt3__113unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($this);
 return;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $4 = 0, $l$ = 0;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0;
 $l$ = $4 >>> 0 > $l >>> 0 ? $l : $4;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$;
 return $l | 0;
}

function _ferror($f) {
 $f = $f | 0;
 var $$lobit = 0, $$lobit2 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $$lobit = (HEAP32[$f >> 2] | 0) >>> 5 & 1;
  if ($phitmp) $$lobit2 = $$lobit; else $$lobit2 = $$lobit;
 } else $$lobit2 = (HEAP32[$f >> 2] | 0) >>> 5 & 1;
 return $$lobit2 | 0;
}

function ___memrchr($m, $c, $n) {
 $m = $m | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0 = 0, $$01 = 0, $0 = 0, $3 = 0;
 $0 = $c & 255;
 $$01 = $n;
 while (1) {
  if (!$$01) {
   $$0 = 0;
   break;
  }
  $$01 = $$01 + -1 | 0;
  $3 = $m + $$01 | 0;
  if ((HEAP8[$3 >> 0] | 0) == $0 << 24 >> 24) {
   $$0 = $3;
   break;
  }
 }
 return $$0 | 0;
}

function _arVecAlloc($clm) {
 $clm = $clm | 0;
 var $$0 = 0, $0 = 0, $3 = 0;
 $0 = _malloc(8) | 0;
 do if (!$0) $$0 = 0; else {
  $3 = _malloc($clm << 3) | 0;
  HEAP32[$0 >> 2] = $3;
  if (!$3) {
   _free($0);
   $$0 = 0;
   break;
  } else {
   HEAP32[$0 + 4 >> 2] = $clm;
   $$0 = $0;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsscanf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _arPattAttach($arHandle, $arPattHandle) {
 $arHandle = $arHandle | 0;
 $arPattHandle = $arPattHandle | 0;
 var $$0 = 0, $1 = 0;
 if (!$arHandle) $$0 = -1; else {
  $1 = $arHandle + 7062384 | 0;
  if (!(HEAP32[$1 >> 2] | 0)) {
   HEAP32[$1 >> 2] = $arPattHandle;
   $$0 = 0;
  } else $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $__s, _strlen($__s) | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this + 12 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this);
 return;
}

function _arMatrixAllocTrans($source) {
 $source = $source | 0;
 var $$0 = 0, $4 = 0;
 $4 = _arMatrixAlloc(HEAP32[$source + 8 >> 2] | 0, HEAP32[$source + 4 >> 2] | 0) | 0;
 if (!$4) $$0 = 0; else if ((_arMatrixTrans($4, $source) | 0) < 0) {
  _arMatrixFree($4) | 0;
  $$0 = 0;
 } else $$0 = $4;
 return $$0 | 0;
}

function _arMatrixAllocDup($source) {
 $source = $source | 0;
 var $$0 = 0, $4 = 0;
 $4 = _arMatrixAlloc(HEAP32[$source + 4 >> 2] | 0, HEAP32[$source + 8 >> 2] | 0) | 0;
 if (!$4) $$0 = 0; else if ((_arMatrixDup($4, $source) | 0) < 0) {
  _arMatrixFree($4) | 0;
  $$0 = 0;
 } else $$0 = $4;
 return $$0 | 0;
}

function _arMatrixAllocMul($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $$0 = 0, $4 = 0;
 $4 = _arMatrixAlloc(HEAP32[$a + 4 >> 2] | 0, HEAP32[$b + 8 >> 2] | 0) | 0;
 if (!$4) $$0 = 0; else if ((_arMatrixMul($4, $a, $b) | 0) < 0) {
  _arMatrixFree($4) | 0;
  $$0 = 0;
 } else $$0 = $4;
 return $$0 | 0;
}

function _arGetTransMatMultiSquareRobust($handle, $marker_info, $marker_num, $config) {
 $handle = $handle | 0;
 $marker_info = $marker_info | 0;
 $marker_num = $marker_num | 0;
 $config = $config | 0;
 return +(+_arGetTransMatMultiSquare2($handle, $marker_info, $marker_num, $config, 1));
}

function _arGetTransMatMultiSquare($handle, $marker_info, $marker_num, $config) {
 $handle = $handle | 0;
 $marker_info = $marker_info | 0;
 $marker_num = $marker_num | 0;
 $config = $config | 0;
 return +(+_arGetTransMatMultiSquare2($handle, $marker_info, $marker_num, $config, 0));
}

function ___ftello($f) {
 $f = $f | 0;
 var $5 = 0, $6 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $5 = ___ftello_unlocked($f) | 0;
  if ($phitmp) $6 = $5; else $6 = $5;
 } else $6 = ___ftello_unlocked($f) | 0;
 return $6 | 0;
}

function _arSetPattRatio($handle, $pattRatio) {
 $handle = $handle | 0;
 $pattRatio = +$pattRatio;
 var $$0 = 0;
 if (!$handle) $$0 = -1; else if ($pattRatio <= 0.0 | $pattRatio >= 1.0) $$0 = -1; else {
  HEAPF64[$handle + 7062416 >> 3] = $pattRatio;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arGetLabelingThreshMode($handle, $mode_p) {
 $handle = $handle | 0;
 $mode_p = $mode_p | 0;
 var $$0 = 0;
 if (($handle | 0) != 0 & ($mode_p | 0) != 0) {
  HEAP32[$mode_p >> 2] = HEAP32[$handle + 7062388 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function _ar3DDeleteHandle($handle) {
 $handle = $handle | 0;
 var $$0 = 0, $0 = 0;
 $0 = HEAP32[$handle >> 2] | 0;
 if (!$0) $$0 = -1; else {
  _icpDeleteHandle($0) | 0;
  _free(HEAP32[$handle >> 2] | 0);
  HEAP32[$handle >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arGetMatrixCodeType($handle, $type_p) {
 $handle = $handle | 0;
 $type_p = $type_p | 0;
 var $$0 = 0;
 if (($handle | 0) != 0 & ($type_p | 0) != 0) {
  HEAP32[$type_p >> 2] = HEAP32[$handle + 7062424 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function _arPattDetach($arHandle) {
 $arHandle = $arHandle | 0;
 var $$0 = 0, $1 = 0;
 if (!$arHandle) $$0 = -1; else {
  $1 = $arHandle + 7062384 | 0;
  if (!(HEAP32[$1 >> 2] | 0)) $$0 = -1; else {
   HEAP32[$1 >> 2] = 0;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function _arGetLabelingThresh($handle, $thresh) {
 $handle = $handle | 0;
 $thresh = $thresh | 0;
 var $$0 = 0;
 if (($handle | 0) != 0 & ($thresh | 0) != 0) {
  HEAP32[$thresh >> 2] = HEAP32[$handle + 16 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZN10emscripten8functionIiJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 __embind_register_function($name | 0, 3, 1692, 5805, 12, $fn | 0);
 return;
}

function __ZN10emscripten8functionIiJNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 __embind_register_function($name | 0, 2, 1716, 5599, 11, $fn | 0);
 return;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function _arSetLabelingThresh($handle, $thresh) {
 $handle = $handle | 0;
 $thresh = $thresh | 0;
 var $$0 = 0;
 if (($handle | 0) == 0 | $thresh >>> 0 > 255) $$0 = -1; else {
  HEAP32[$handle + 16 >> 2] = $thresh;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arGetLabelingMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $$0 = 0;
 if (($handle | 0) != 0 & ($mode | 0) != 0) {
  HEAP32[$mode >> 2] = HEAP32[$handle + 12 >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZN10emscripten8internal7InvokerIiJiiiEE6invokeEPFiiiiEiii($fn, $args, $args1, $args2) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args2 = $args2 | 0;
 return FUNCTION_TABLE_iiii[$fn & 15]($args, $args1, $args2) | 0;
}

function _byteSwapDouble($from, $to) {
 $from = $from | 0;
 $to = $to | 0;
 var $i$0 = 0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 8) break;
  HEAP8[$to + $i$0 >> 0] = HEAP8[$from + (7 - $i$0) >> 0] | 0;
  $i$0 = $i$0 + 1 | 0;
 }
 return;
}

function _arGetPattRatio($handle, $pattRatio) {
 $handle = $handle | 0;
 $pattRatio = $pattRatio | 0;
 var $$0 = 0;
 if (!$handle) $$0 = -1; else {
  HEAPF64[$pattRatio >> 3] = +HEAPF64[$handle + 7062416 >> 3];
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arSetPatternDetectionMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $$0 = 0;
 if (($handle | 0) != 0 & $mode >>> 0 < 5) {
  HEAP32[$handle + 24 >> 2] = $mode;
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function _byteSwapInt($from, $to) {
 $from = $from | 0;
 $to = $to | 0;
 var $i$0 = 0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 4) break;
  HEAP8[$to + $i$0 >> 0] = HEAP8[$from + (3 - $i$0) >> 0] | 0;
  $i$0 = $i$0 + 1 | 0;
 }
 return;
}

function _arGetDebugMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $$0 = 0;
 if (($handle | 0) != 0 & ($mode | 0) != 0) {
  HEAP32[$mode >> 2] = HEAP32[$handle >> 2];
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function _icpSetInlierProbability($handle, $inlierProb) {
 $handle = $handle | 0;
 $inlierProb = +$inlierProb;
 var $$0 = 0;
 if (!$handle) $$0 = -1; else {
  HEAPF64[$handle + 128 >> 3] = $inlierProb;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arSetImageProcMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $$0 = 0;
 if (($handle | 0) != 0 & $mode >>> 0 < 2) {
  HEAP32[$handle + 20 >> 2] = $mode;
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function _arSetLabelingMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $$0 = 0;
 if (($handle | 0) != 0 & $mode >>> 0 < 2) {
  HEAP32[$handle + 12 >> 2] = $mode;
  $$0 = 0;
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $0 = $0 | 0;
 return ($this | 0) == ($thrown_type | 0) | 0;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);
 return ret | 0;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function _arImageProcLumaHistAndCDFAndMedian($ipi, $dataPtr, $value_p) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 $value_p = $value_p | 0;
 return _arImageProcLumaHistAndCDFAndPercentile($ipi, $dataPtr, .5, $value_p) | 0;
}

function _arGetPatternDetectionMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $$0 = 0;
 if (!$handle) $$0 = -1; else {
  HEAP32[$mode >> 2] = HEAP32[$handle + 24 >> 2];
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNSt3__111char_traitsIcE7compareEPKcS3_j($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 var $2 = 0;
 if (!$__n) $2 = 0; else $2 = _memcmp($__s1, $__s2, $__n) | 0;
 return $2 | 0;
}

function ___strdup($s) {
 $s = $s | 0;
 var $$0 = 0, $1 = 0, $2 = 0;
 $1 = (_strlen($s) | 0) + 1 | 0;
 $2 = _malloc($1) | 0;
 if (!$2) $$0 = 0; else {
  _memcpy($2 | 0, $s | 0, $1 | 0) | 0;
  $$0 = $2;
 }
 return $$0 | 0;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function _arGetImageProcMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $$0 = 0;
 if (!$handle) $$0 = -1; else {
  HEAP32[$mode >> 2] = HEAP32[$handle + 20 >> 2];
  $$0 = 0;
 }
 return $$0 | 0;
}

function _icpDeleteHandle($handle) {
 $handle = $handle | 0;
 var $$0 = 0, $0 = 0;
 $0 = HEAP32[$handle >> 2] | 0;
 if (!$0) $$0 = -1; else {
  _free($0);
  HEAP32[$handle >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _arSetMatrixCodeType($handle, $type) {
 $handle = $handle | 0;
 $type = $type | 0;
 var $$0 = 0;
 if (!$handle) $$0 = -1; else {
  HEAP32[$handle + 7062424 >> 2] = $type;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this >> 0] & 1) _free(HEAP32[$this + 8 >> 2] | 0);
 return;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $$0 = 0, $2 = 0;
 if ($r >>> 0 > 4294963200) {
  $2 = ___errno_location() | 0;
  HEAP32[$2 >> 2] = 0 - $r;
  $$0 = -1;
 } else $$0 = $r;
 return $$0 | 0;
}

function __ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 return FUNCTION_TABLE_iii[$fn & 15]($args, $args1) | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZN10emscripten8internal7InvokerIvJiiEE6invokeEPFviiEii($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 FUNCTION_TABLE_vii[$fn & 7]($args, $args1);
 return;
}

function _arImageProcFinal($ipi) {
 $ipi = $ipi | 0;
 if ($ipi | 0) {
  if (HEAP32[$ipi + 2076 >> 2] | 0) _free(HEAP32[$ipi >> 2] | 0);
  _free(HEAP32[$ipi + 4 >> 2] | 0);
  _free($ipi);
 }
 return;
}

function __ZN10emscripten8internal7InvokerIvJifEE6invokeEPFvifEif($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = +$args1;
 FUNCTION_TABLE_vid[$fn & 3]($args, $args1);
 return;
}

function __ZN10emscripten8internal7InvokerIvJidEE6invokeEPFvidEid($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = +$args1;
 FUNCTION_TABLE_vid[$fn & 3]($args, $args1);
 return;
}

function __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 __embind_register_function($name | 0, 4, 1668, 5584, 1, $fn | 0);
 return;
}

function __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 __embind_register_function($name | 0, 3, 1704, 5805, 13, $fn | 0);
 return;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 __embind_register_function($name | 0, 3, 1768, 8053, 1, $fn | 0);
 return;
}

function __ZN10emscripten8functionIvJifEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 __embind_register_function($name | 0, 3, 1780, 8249, 2, $fn | 0);
 return;
}

function __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 __embind_register_function($name | 0, 3, 1748, 7934, 1, $fn | 0);
 return;
}

function __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 __embind_register_function($name | 0, 2, 1684, 5599, 10, $fn | 0);
 return;
}

function __ZN10emscripten8functionIvJiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 __embind_register_function($name | 0, 2, 1736, 7892, 7, $fn | 0);
 return;
}

function __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 __embind_register_function($name | 0, 1, 1744, 7908, 16, $fn | 0);
 return;
}

function __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 __embind_register_function($name | 0, 2, 1760, 7962, 1, $fn | 0);
 return;
}

function _icpGetXw2XcCleanup_293($J_U_S, $dU, $E, $E2) {
 $J_U_S = $J_U_S | 0;
 $dU = $dU | 0;
 $E = $E | 0;
 $E2 = $E2 | 0;
 _free($J_U_S);
 _free($dU);
 _free($E);
 _free($E2);
 return;
}

function ___errno_location() {
 var $$0 = 0, $3 = 0;
 if (!(HEAP32[4166] | 0)) $$0 = 16708; else {
  $3 = (_pthread_self() | 0) + 64 | 0;
  $$0 = HEAP32[$3 >> 2] | 0;
 }
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this >> 0] & 1) __ZdlPv(HEAP32[$this + 8 >> 2] | 0);
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function __ZN10emscripten8constantIdEEvPKcRKT_($name, $v) {
 $name = $name | 0;
 $v = $v | 0;
 __embind_register_constant($name | 0, 384, ~~+HEAPF64[$v >> 3] >>> 0 | 0);
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0;
 $0 = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$0 >> 0] | 0) == ($c & 255) << 24 >> 24 ? $0 : 0) | 0;
}

function __ZN10emscripten8constantIiEEvPKcRKT_($name, $v) {
 $name = $name | 0;
 $v = $v | 0;
 __embind_register_constant($name | 0, 344, HEAP32[$v >> 2] | 0);
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 1](a1 | 0, a2 | 0, a3 | 0);
}

function __ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 return FUNCTION_TABLE_ii[$fn & 31]($args) | 0;
}

function __ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 return +(+FUNCTION_TABLE_di[$fn & 3]($args));
}

function __ZN10emscripten8internal7InvokerIvJiEE6invokeEPFviEi($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 FUNCTION_TABLE_vi[$fn & 15]($args);
 return;
}

function _compE($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $2 = 0.0;
 $2 = +HEAPF64[$a >> 3] - +HEAPF64[$b >> 3];
 return ($2 < 0.0 ? -1 : $2 > 0.0 & 1) | 0;
}

function dynCall_viid(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 FUNCTION_TABLE_viid[index & 3](a1 | 0, a2 | 0, +a3);
}

function _isxdigit($c) {
 $c = $c | 0;
 var $4 = 0;
 if (($c + -48 | 0) >>> 0 < 10) $4 = 1; else $4 = (($c | 32) + -97 | 0) >>> 0 < 6;
 return $4 & 1 | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(128, 3, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(120, 2, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(144, 5, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(136, 4, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(112, 1, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(104, 0, $name | 0);
 return;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this | 0;
 ___assert_fail(14001, 13931, 1194, 14030);
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 ___assert_fail(13902, 13931, 1183, 13980);
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0;
}

function b13(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(13);
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0;
 if (!$s) $$0 = 0; else $$0 = _wcrtomb($s, $wc, 0) | 0;
 return $$0 | 0;
}

function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 ___assert_fail(13830, 13853, 304, 13980);
}

function dynCall_dii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +FUNCTION_TABLE_dii[index & 1](a1 | 0, a2 | 0);
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _fseek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 return ___fseeko($f, $off, $whence) | 0;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0);
}

function _do_read_458($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 return ___string_read($f, $buf, $len) | 0;
}

function _mbsinit($st) {
 $st = $st | 0;
 var $4 = 0;
 if (!$st) $4 = 1; else $4 = (HEAP32[$st >> 2] | 0) == 0;
 return $4 & 1 | 0;
}

function dynCall_vid(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 FUNCTION_TABLE_vid[index & 3](a1 | 0, +a2);
}

function b1(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(1);
}

function _arMultiFreeConfig($config) {
 $config = $config | 0;
 _free(HEAP32[$config >> 2] | 0);
 _free($config);
 return 0;
}

function __ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE($fn) {
 $fn = $fn | 0;
 return FUNCTION_TABLE_i[$fn & 1]() | 0;
}

function _icpGetXw2XcCleanup($J_U_S, $dU) {
 $J_U_S = $J_U_S | 0;
 $dU = $dU | 0;
 _free($J_U_S);
 _free($dU);
 return;
}

function b12(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(12);
 return 0;
}

function _strncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 ___stpncpy($d, $s, $n) | 0;
 return $d | 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0;
}

function _strcpy($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 ___stpcpy($dest, $src) | 0;
 return $dest | 0;
}

function __GLOBAL__sub_I_bind_cpp() {
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}

function _strrchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 return ___memrchr($s, $c, (_strlen($s) | 0) + 1 | 0) | 0;
}

function _arMatrixFree($m) {
 $m = $m | 0;
 if ($m | 0) {
  _free(HEAP32[$m >> 2] | 0);
  _free($m);
 }
 return 0;
}

function _ar3DCreateHandle($arParam) {
 $arParam = $arParam | 0;
 return _ar3DCreateHandle2($arParam + 8 | 0) | 0;
}

function dynCall_di(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return +FUNCTION_TABLE_di[index & 3](a1 | 0);
}

function _fputs($s, $f) {
 $s = $s | 0;
 $f = $f | 0;
 return (_fwrite($s, _strlen($s) | 0, 1, $f) | 0) + -1 | 0;
}

function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[4304] | 0;
 HEAP32[4304] = $0 + 0;
 return $0 | 0;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b15(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(15);
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 15](a1 | 0);
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _cleanup_547($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) ___unlockfile($p);
 return;
}

function _cleanup_505($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) ___unlockfile($p);
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b0(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0);
 return 0;
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function ___getTypeName($ti) {
 $ti = $ti | 0;
 return ___strdup(HEAP32[$ti + 4 >> 2] | 0) | 0;
}

function __ZNSt9bad_allocC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 2844;
 return;
}

function _arVecFree($v) {
 $v = $v | 0;
 _free(HEAP32[$v >> 2] | 0);
 _free($v);
 return 0;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 1]() | 0;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(9);
}

function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 nullFunc_viid(11);
}

function _setLogLevel($level) {
 $level = $level | 0;
 HEAP32[408] = $level;
 return;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(2);
 return 0.0;
}

function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(14);
 return 0;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 0]();
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 return +(+_frexp($x, $e));
}

function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 return 14194;
}

function _isupper($c) {
 $c = $c | 0;
 return ($c + -65 | 0) >>> 0 < 26 | 0;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function _arPattCreateHandle() {
 return _arPattCreateHandle2(16, 50) | 0;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function b7(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(7);
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function b3(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 nullFunc_vid(3);
}

function _ftell($f) {
 $f = $f | 0;
 return ___ftello($f) | 0;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b4(p0) {
 p0 = p0 | 0;
 nullFunc_di(4);
 return 0.0;
}

function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(8);
 return 0;
}

function ___unlockfile($f) {
 $f = $f | 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 return 0;
}

function _getLogLevel() {
 return HEAP32[408] | 0;
}

function b6(p0) {
 p0 = p0 | 0;
 nullFunc_vi(6);
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b5() {
 nullFunc_i(5);
 return 0;
}

function _pthread_self() {
 return 0;
}

function b10() {
 nullFunc_v(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,_setup,_setMarkerInfoDir,_getTransMatSquare,_getTransMatSquareCont,_getMultiEachMarkerInfo,__ZN10emscripten8internal7InvokerIiJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiiS8_EiPNS0_11BindingTypeIS8_EUt_E,__ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii,___stdio_read,_do_read_458];
var FUNCTION_TABLE_viiiii = [b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_dii = [b2,__ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi];
var FUNCTION_TABLE_vid = [b3,_setProjectionNearPlane,_setProjectionFarPlane,_setPattRatio];
var FUNCTION_TABLE_di = [b4,_getProjectionNearPlane,_getProjectionFarPlane,_getPattRatio];
var FUNCTION_TABLE_i = [b5,_getLogLevel];
var FUNCTION_TABLE_vi = [b6,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__113unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev,__ZNSt3__113unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev,_setLogLevel,_cleanup_505,_cleanup_547,b6];
var FUNCTION_TABLE_vii = [b7,_setThresholdMode,_setThreshold,_setPatternDetectionMode,_setMatrixCodeType,_setLabelingMode,_setImageProcMode,__ZN10emscripten8internal7InvokerIvJiEE6invokeEPFviEi];
var FUNCTION_TABLE_ii = [b8,___stdio_close,__ZNKSt9bad_alloc4whatEv,_teardown,_getMultiMarkerCount,_loadCamera,_detectMarker,_getMarkerNum,_getDebugMode,_getProcessingImage,_getThresholdMode,_getThreshold,_getPatternDetectionMode,_getMatrixCodeType,_getLabelingMode,_getImageProcMode,__ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_viii = [b9,__ZN10emscripten8internal7InvokerIvJiiEE6invokeEPFviiEii];
var FUNCTION_TABLE_v = [b10];
var FUNCTION_TABLE_viid = [b11,__ZN10emscripten8internal7InvokerIvJidEE6invokeEPFvidEid,__ZN10emscripten8internal7InvokerIvJifEE6invokeEPFvifEif,b11];
var FUNCTION_TABLE_iiiii = [b12,__ZN10emscripten8internal7InvokerIiJiiiEE6invokeEPFiiiiEiii];
var FUNCTION_TABLE_viiiiii = [b13,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_iii = [b14,_compE,_addMarker,_addMultiMarker,_getMultiMarkerNum,_setMarkerInfoVertex,_getTransMatMultiSquare,_getTransMatMultiSquareRobust,_getMarkerInfo,_setDebugMode,__ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi,__ZN10emscripten8internal7InvokerIiJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiS8_EPNS0_11BindingTypeIS8_EUt_E,b14,b14,b14,b14];
var FUNCTION_TABLE_viiii = [b15,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi];

  return { ___muldsi3: ___muldsi3, ___cxa_demangle: ___cxa_demangle, _i64Subtract: _i64Subtract, _fflush: _fflush, ___udivmoddi4: ___udivmoddi4, _i64Add: _i64Add, _memmove: _memmove, _pthread_self: _pthread_self, _memset: _memset, _llvm_cttz_i32: _llvm_cttz_i32, _malloc: _malloc, _memcpy: _memcpy, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_ARToolKitJS_cpp: __GLOBAL__sub_I_ARToolKitJS_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_dii: dynCall_dii, dynCall_vid: dynCall_vid, dynCall_di: dynCall_di, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_ARToolKitJS_cpp = asm["__GLOBAL__sub_I_ARToolKitJS_cpp"]; asm["__GLOBAL__sub_I_ARToolKitJS_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_ARToolKitJS_cpp.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____cxa_demangle = asm["___cxa_demangle"]; asm["___cxa_demangle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_demangle.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};
var __GLOBAL__sub_I_ARToolKitJS_cpp = Module["__GLOBAL__sub_I_ARToolKitJS_cpp"] = asm["__GLOBAL__sub_I_ARToolKitJS_cpp"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _memset = Module["_memset"] = asm["_memset"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






